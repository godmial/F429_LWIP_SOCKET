
F429_LWIP_SOCKET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001da08  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ff4  0801dbb8  0801dbb8  0001ebb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021bac  08021bac  000231f8  2**0
                  CONTENTS
  4 .ARM          00000008  08021bac  08021bac  00022bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021bb4  08021bb4  000231f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021bb4  08021bb4  00022bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08021bb8  08021bb8  00022bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  08021bbc  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000231f8  2**0
                  CONTENTS
 10 .bss          0000d1a4  200001f8  200001f8  000231f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000d39c  2000d39c  000231f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000231f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00038af8  00000000  00000000  00023228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000084e0  00000000  00000000  0005bd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a30  00000000  00000000  00064200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000021c0  00000000  00000000  00066c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014409  00000000  00000000  00068df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00042313  00000000  00000000  0007d1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001057ff  00000000  00000000  000bf50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001c4d0b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c508  00000000  00000000  001c4d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001d1258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801dba0 	.word	0x0801dba0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	0801dba0 	.word	0x0801dba0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800100c:	1d39      	adds	r1, r7, #4
 800100e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001012:	2201      	movs	r2, #1
 8001014:	4803      	ldr	r0, [pc, #12]	@ (8001024 <__io_putchar+0x20>)
 8001016:	f003 fc23 	bl	8004860 <HAL_UART_Transmit>
  return ch;
 800101a:	687b      	ldr	r3, [r7, #4]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000268 	.word	0x20000268

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102c:	f000 fd3c 	bl	8001aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001030:	f000 f81a 	bl	8001068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001034:	f000 f8f2 	bl	800121c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001038:	f000 f8c6 	bl	80011c8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800103c:	f000 f884 	bl	8001148 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001040:	f004 fe2c 	bl	8005c9c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001044:	4a05      	ldr	r2, [pc, #20]	@ (800105c <main+0x34>)
 8001046:	2100      	movs	r1, #0
 8001048:	4805      	ldr	r0, [pc, #20]	@ (8001060 <main+0x38>)
 800104a:	f004 fe86 	bl	8005d5a <osThreadNew>
 800104e:	4603      	mov	r3, r0
 8001050:	4a04      	ldr	r2, [pc, #16]	@ (8001064 <main+0x3c>)
 8001052:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001054:	f004 fe46 	bl	8005ce4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <main+0x30>
 800105c:	08021570 	.word	0x08021570
 8001060:	080012c1 	.word	0x080012c1
 8001064:	200002b0 	.word	0x200002b0

08001068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b094      	sub	sp, #80	@ 0x50
 800106c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 0320 	add.w	r3, r7, #32
 8001072:	2230      	movs	r2, #48	@ 0x30
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f019 fb44 	bl	801a704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	4b2b      	ldr	r3, [pc, #172]	@ (8001140 <SystemClock_Config+0xd8>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001094:	4a2a      	ldr	r2, [pc, #168]	@ (8001140 <SystemClock_Config+0xd8>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800109a:	6413      	str	r3, [r2, #64]	@ 0x40
 800109c:	4b28      	ldr	r3, [pc, #160]	@ (8001140 <SystemClock_Config+0xd8>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	4b25      	ldr	r3, [pc, #148]	@ (8001144 <SystemClock_Config+0xdc>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a24      	ldr	r2, [pc, #144]	@ (8001144 <SystemClock_Config+0xdc>)
 80010b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b22      	ldr	r3, [pc, #136]	@ (8001144 <SystemClock_Config+0xdc>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c4:	2302      	movs	r3, #2
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c8:	2301      	movs	r3, #1
 80010ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010cc:	2310      	movs	r3, #16
 80010ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d0:	2302      	movs	r3, #2
 80010d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010d8:	2308      	movs	r3, #8
 80010da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80010dc:	23b4      	movs	r3, #180	@ 0xb4
 80010de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010e4:	2304      	movs	r3, #4
 80010e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 fc3b 	bl	8003968 <HAL_RCC_OscConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010f8:	f000 f90a 	bl	8001310 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010fc:	f002 fbe4 	bl	80038c8 <HAL_PWREx_EnableOverDrive>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001106:	f000 f903 	bl	8001310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110a:	230f      	movs	r3, #15
 800110c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110e:	2302      	movs	r3, #2
 8001110:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001116:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800111a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800111c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001120:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	2105      	movs	r1, #5
 8001128:	4618      	mov	r0, r3
 800112a:	f002 fe95 	bl	8003e58 <HAL_RCC_ClockConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001134:	f000 f8ec 	bl	8001310 <Error_Handler>
  }
}
 8001138:	bf00      	nop
 800113a:	3750      	adds	r7, #80	@ 0x50
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40023800 	.word	0x40023800
 8001144:	40007000 	.word	0x40007000

08001148 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800114c:	4b1b      	ldr	r3, [pc, #108]	@ (80011bc <MX_I2C2_Init+0x74>)
 800114e:	4a1c      	ldr	r2, [pc, #112]	@ (80011c0 <MX_I2C2_Init+0x78>)
 8001150:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001152:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001154:	4a1b      	ldr	r2, [pc, #108]	@ (80011c4 <MX_I2C2_Init+0x7c>)
 8001156:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001158:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <MX_I2C2_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800115e:	4b17      	ldr	r3, [pc, #92]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001164:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001166:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800116a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800116c:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <MX_I2C2_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001172:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001178:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <MX_I2C2_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117e:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001184:	480d      	ldr	r0, [pc, #52]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001186:	f002 f9df 	bl	8003548 <HAL_I2C_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001190:	f000 f8be 	bl	8001310 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001194:	2100      	movs	r1, #0
 8001196:	4809      	ldr	r0, [pc, #36]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001198:	f002 fb1a 	bl	80037d0 <HAL_I2CEx_ConfigAnalogFilter>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80011a2:	f000 f8b5 	bl	8001310 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011a6:	2100      	movs	r1, #0
 80011a8:	4804      	ldr	r0, [pc, #16]	@ (80011bc <MX_I2C2_Init+0x74>)
 80011aa:	f002 fb4d 	bl	8003848 <HAL_I2CEx_ConfigDigitalFilter>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80011b4:	f000 f8ac 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000214 	.word	0x20000214
 80011c0:	40005800 	.word	0x40005800
 80011c4:	000186a0 	.word	0x000186a0

080011c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011cc:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	@ (8001218 <MX_USART1_UART_Init+0x50>)
 80011d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011ec:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011ee:	220c      	movs	r2, #12
 80011f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	@ (8001214 <MX_USART1_UART_Init+0x4c>)
 8001200:	f003 fade 	bl	80047c0 <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800120a:	f000 f881 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000268 	.word	0x20000268
 8001218:	40011000 	.word	0x40011000

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b480      	push	{r7}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	4b25      	ldr	r3, [pc, #148]	@ (80012bc <MX_GPIO_Init+0xa0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a24      	ldr	r2, [pc, #144]	@ (80012bc <MX_GPIO_Init+0xa0>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b22      	ldr	r3, [pc, #136]	@ (80012bc <MX_GPIO_Init+0xa0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b1e      	ldr	r3, [pc, #120]	@ (80012bc <MX_GPIO_Init+0xa0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a1d      	ldr	r2, [pc, #116]	@ (80012bc <MX_GPIO_Init+0xa0>)
 8001248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b1b      	ldr	r3, [pc, #108]	@ (80012bc <MX_GPIO_Init+0xa0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b17      	ldr	r3, [pc, #92]	@ (80012bc <MX_GPIO_Init+0xa0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	4a16      	ldr	r2, [pc, #88]	@ (80012bc <MX_GPIO_Init+0xa0>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6313      	str	r3, [r2, #48]	@ 0x30
 800126a:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <MX_GPIO_Init+0xa0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <MX_GPIO_Init+0xa0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a0f      	ldr	r2, [pc, #60]	@ (80012bc <MX_GPIO_Init+0xa0>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <MX_GPIO_Init+0xa0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <MX_GPIO_Init+0xa0>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a08      	ldr	r2, [pc, #32]	@ (80012bc <MX_GPIO_Init+0xa0>)
 800129c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <MX_GPIO_Init+0xa0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012ae:	bf00      	nop
 80012b0:	371c      	adds	r7, #28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800

080012c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80012c8:	f003 fe86 	bl	8004fd8 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  printf("init\r\n");
 80012cc:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <StartDefaultTask+0x24>)
 80012ce:	f019 f8ef 	bl	801a4b0 <puts>
//  client_socket_init();
  server_socket_init();
 80012d2:	f017 ffbd 	bl	8019250 <server_socket_init>
  printf("success\r\n");
 80012d6:	4804      	ldr	r0, [pc, #16]	@ (80012e8 <StartDefaultTask+0x28>)
 80012d8:	f019 f8ea 	bl	801a4b0 <puts>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012dc:	2001      	movs	r0, #1
 80012de:	f004 fdce 	bl	8005e7e <osDelay>
 80012e2:	e7fb      	b.n	80012dc <StartDefaultTask+0x1c>
 80012e4:	0801dbc4 	.word	0x0801dbc4
 80012e8:	0801dbcc 	.word	0x0801dbcc

080012ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a04      	ldr	r2, [pc, #16]	@ (800130c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d101      	bne.n	8001302 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012fe:	f000 fbf5 	bl	8001aec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40010000 	.word	0x40010000

08001310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001314:	b672      	cpsid	i
}
 8001316:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <Error_Handler+0x8>

0800131c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <HAL_MspInit+0x54>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	4a11      	ldr	r2, [pc, #68]	@ (8001370 <HAL_MspInit+0x54>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001330:	6453      	str	r3, [r2, #68]	@ 0x44
 8001332:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <HAL_MspInit+0x54>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <HAL_MspInit+0x54>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	4a0a      	ldr	r2, [pc, #40]	@ (8001370 <HAL_MspInit+0x54>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134c:	6413      	str	r3, [r2, #64]	@ 0x40
 800134e:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <HAL_MspInit+0x54>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	210f      	movs	r1, #15
 800135e:	f06f 0001 	mvn.w	r0, #1
 8001362:	f000 fcbf 	bl	8001ce4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800

08001374 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	@ 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a19      	ldr	r2, [pc, #100]	@ (80013f8 <HAL_I2C_MspInit+0x84>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d12b      	bne.n	80013ee <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <HAL_I2C_MspInit+0x88>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a17      	ldr	r2, [pc, #92]	@ (80013fc <HAL_I2C_MspInit+0x88>)
 80013a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <HAL_I2C_MspInit+0x88>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013b2:	2330      	movs	r3, #48	@ 0x30
 80013b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b6:	2312      	movs	r3, #18
 80013b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013be:	2303      	movs	r3, #3
 80013c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013c2:	2304      	movs	r3, #4
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	480c      	ldr	r0, [pc, #48]	@ (8001400 <HAL_I2C_MspInit+0x8c>)
 80013ce:	f001 ff0f 	bl	80031f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <HAL_I2C_MspInit+0x88>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	4a08      	ldr	r2, [pc, #32]	@ (80013fc <HAL_I2C_MspInit+0x88>)
 80013dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <HAL_I2C_MspInit+0x88>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80013ee:	bf00      	nop
 80013f0:	3728      	adds	r7, #40	@ 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40005800 	.word	0x40005800
 80013fc:	40023800 	.word	0x40023800
 8001400:	40021c00 	.word	0x40021c00

08001404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	@ 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a19      	ldr	r2, [pc, #100]	@ (8001488 <HAL_UART_MspInit+0x84>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d12c      	bne.n	8001480 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	4b18      	ldr	r3, [pc, #96]	@ (800148c <HAL_UART_MspInit+0x88>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	4a17      	ldr	r2, [pc, #92]	@ (800148c <HAL_UART_MspInit+0x88>)
 8001430:	f043 0310 	orr.w	r3, r3, #16
 8001434:	6453      	str	r3, [r2, #68]	@ 0x44
 8001436:	4b15      	ldr	r3, [pc, #84]	@ (800148c <HAL_UART_MspInit+0x88>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b11      	ldr	r3, [pc, #68]	@ (800148c <HAL_UART_MspInit+0x88>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	4a10      	ldr	r2, [pc, #64]	@ (800148c <HAL_UART_MspInit+0x88>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6313      	str	r3, [r2, #48]	@ 0x30
 8001452:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <HAL_UART_MspInit+0x88>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800145e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001470:	2307      	movs	r3, #7
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	4805      	ldr	r0, [pc, #20]	@ (8001490 <HAL_UART_MspInit+0x8c>)
 800147c:	f001 feb8 	bl	80031f0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001480:	bf00      	nop
 8001482:	3728      	adds	r7, #40	@ 0x28
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40011000 	.word	0x40011000
 800148c:	40023800 	.word	0x40023800
 8001490:	40020000 	.word	0x40020000

08001494 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08c      	sub	sp, #48	@ 0x30
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001568 <HAL_InitTick+0xd4>)
 80014aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ac:	4a2e      	ldr	r2, [pc, #184]	@ (8001568 <HAL_InitTick+0xd4>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80014b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001568 <HAL_InitTick+0xd4>)
 80014b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014c0:	f107 020c 	add.w	r2, r7, #12
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f002 fea4 	bl	8004218 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80014d0:	f002 fe8e 	bl	80041f0 <HAL_RCC_GetPCLK2Freq>
 80014d4:	4603      	mov	r3, r0
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014dc:	4a23      	ldr	r2, [pc, #140]	@ (800156c <HAL_InitTick+0xd8>)
 80014de:	fba2 2303 	umull	r2, r3, r2, r3
 80014e2:	0c9b      	lsrs	r3, r3, #18
 80014e4:	3b01      	subs	r3, #1
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014e8:	4b21      	ldr	r3, [pc, #132]	@ (8001570 <HAL_InitTick+0xdc>)
 80014ea:	4a22      	ldr	r2, [pc, #136]	@ (8001574 <HAL_InitTick+0xe0>)
 80014ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014ee:	4b20      	ldr	r3, [pc, #128]	@ (8001570 <HAL_InitTick+0xdc>)
 80014f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001570 <HAL_InitTick+0xdc>)
 80014f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001570 <HAL_InitTick+0xdc>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001502:	4b1b      	ldr	r3, [pc, #108]	@ (8001570 <HAL_InitTick+0xdc>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001508:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <HAL_InitTick+0xdc>)
 800150a:	2200      	movs	r2, #0
 800150c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800150e:	4818      	ldr	r0, [pc, #96]	@ (8001570 <HAL_InitTick+0xdc>)
 8001510:	f002 feb4 	bl	800427c <HAL_TIM_Base_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800151a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800151e:	2b00      	cmp	r3, #0
 8001520:	d11b      	bne.n	800155a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001522:	4813      	ldr	r0, [pc, #76]	@ (8001570 <HAL_InitTick+0xdc>)
 8001524:	f002 ff04 	bl	8004330 <HAL_TIM_Base_Start_IT>
 8001528:	4603      	mov	r3, r0
 800152a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800152e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001532:	2b00      	cmp	r3, #0
 8001534:	d111      	bne.n	800155a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001536:	2019      	movs	r0, #25
 8001538:	f000 fbf0 	bl	8001d1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b0f      	cmp	r3, #15
 8001540:	d808      	bhi.n	8001554 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001542:	2200      	movs	r2, #0
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	2019      	movs	r0, #25
 8001548:	f000 fbcc 	bl	8001ce4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800154c:	4a0a      	ldr	r2, [pc, #40]	@ (8001578 <HAL_InitTick+0xe4>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	e002      	b.n	800155a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800155a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800155e:	4618      	mov	r0, r3
 8001560:	3730      	adds	r7, #48	@ 0x30
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	431bde83 	.word	0x431bde83
 8001570:	200002b4 	.word	0x200002b4
 8001574:	40010000 	.word	0x40010000
 8001578:	20000004 	.word	0x20000004

0800157c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <NMI_Handler+0x4>

08001584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <HardFault_Handler+0x4>

0800158c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <MemManage_Handler+0x4>

08001594 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <BusFault_Handler+0x4>

0800159c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <UsageFault_Handler+0x4>

080015a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015b8:	4802      	ldr	r0, [pc, #8]	@ (80015c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80015ba:	f002 ff29 	bl	8004410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200002b4 	.word	0x200002b4

080015c8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80015cc:	4802      	ldr	r0, [pc, #8]	@ (80015d8 <ETH_IRQHandler+0x10>)
 80015ce:	f000 ff39 	bl	8002444 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20004e48 	.word	0x20004e48

080015dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return 1;
 80015e0:	2301      	movs	r3, #1
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_kill>:

int _kill(int pid, int sig)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015f6:	4b05      	ldr	r3, [pc, #20]	@ (800160c <_kill+0x20>)
 80015f8:	2216      	movs	r2, #22
 80015fa:	601a      	str	r2, [r3, #0]
  return -1;
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	2000d394 	.word	0x2000d394

08001610 <_exit>:

void _exit (int status)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ffe5 	bl	80015ec <_kill>
  while (1) {}    /* Make sure we hang here */
 8001622:	bf00      	nop
 8001624:	e7fd      	b.n	8001622 <_exit+0x12>

08001626 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	e00a      	b.n	800164e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001638:	f3af 8000 	nop.w
 800163c:	4601      	mov	r1, r0
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	60ba      	str	r2, [r7, #8]
 8001644:	b2ca      	uxtb	r2, r1
 8001646:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3301      	adds	r3, #1
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	429a      	cmp	r2, r3
 8001654:	dbf0      	blt.n	8001638 <_read+0x12>
  }

  return len;
 8001656:	687b      	ldr	r3, [r7, #4]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	e009      	b.n	8001686 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	60ba      	str	r2, [r7, #8]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fcc2 	bl	8001004 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	3301      	adds	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	429a      	cmp	r2, r3
 800168c:	dbf1      	blt.n	8001672 <_write+0x12>
  }
  return len;
 800168e:	687b      	ldr	r3, [r7, #4]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <_close>:

int _close(int file)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016c0:	605a      	str	r2, [r3, #4]
  return 0;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_isatty>:

int _isatty(int file)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b085      	sub	sp, #20
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001708:	4a14      	ldr	r2, [pc, #80]	@ (800175c <_sbrk+0x5c>)
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <_sbrk+0x60>)
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <_sbrk+0x64>)
 800171e:	4a12      	ldr	r2, [pc, #72]	@ (8001768 <_sbrk+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	d205      	bcs.n	800173c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001730:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <_sbrk+0x6c>)
 8001732:	220c      	movs	r2, #12
 8001734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	e009      	b.n	8001750 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800173c:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001742:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	4a06      	ldr	r2, [pc, #24]	@ (8001764 <_sbrk+0x64>)
 800174c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800174e:	68fb      	ldr	r3, [r7, #12]
}
 8001750:	4618      	mov	r0, r3
 8001752:	371c      	adds	r7, #28
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	20030000 	.word	0x20030000
 8001760:	00000400 	.word	0x00000400
 8001764:	200002fc 	.word	0x200002fc
 8001768:	2000d3a0 	.word	0x2000d3a0
 800176c:	2000d394 	.word	0x2000d394

08001770 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001774:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <SystemInit+0x20>)
 8001776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800177a:	4a05      	ldr	r2, [pc, #20]	@ (8001790 <SystemInit+0x20>)
 800177c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001780:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001794:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001798:	f7ff ffea 	bl	8001770 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800179c:	480c      	ldr	r0, [pc, #48]	@ (80017d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800179e:	490d      	ldr	r1, [pc, #52]	@ (80017d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a0:	4a0d      	ldr	r2, [pc, #52]	@ (80017d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a4:	e002      	b.n	80017ac <LoopCopyDataInit>

080017a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017aa:	3304      	adds	r3, #4

080017ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b0:	d3f9      	bcc.n	80017a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b2:	4a0a      	ldr	r2, [pc, #40]	@ (80017dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017b4:	4c0a      	ldr	r4, [pc, #40]	@ (80017e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b8:	e001      	b.n	80017be <LoopFillZerobss>

080017ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017bc:	3204      	adds	r2, #4

080017be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c0:	d3fb      	bcc.n	80017ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017c2:	f019 f86f 	bl	801a8a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017c6:	f7ff fc2f 	bl	8001028 <main>
  bx  lr    
 80017ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d4:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80017d8:	08021bbc 	.word	0x08021bbc
  ldr r2, =_sbss
 80017dc:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80017e0:	2000d39c 	.word	0x2000d39c

080017e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e4:	e7fe      	b.n	80017e4 <ADC_IRQHandler>

080017e6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00b      	beq.n	800180e <LAN8742_RegisterBusIO+0x28>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d007      	beq.n	800180e <LAN8742_RegisterBusIO+0x28>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <LAN8742_RegisterBusIO+0x28>
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	e014      	b.n	800183e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d17c      	bne.n	8001964 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2220      	movs	r2, #32
 800187c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	e01c      	b.n	80018be <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	f107 0208 	add.w	r2, r7, #8
 800188c:	2112      	movs	r1, #18
 800188e:	6978      	ldr	r0, [r7, #20]
 8001890:	4798      	blx	r3
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	da03      	bge.n	80018a0 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001898:	f06f 0304 	mvn.w	r3, #4
 800189c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800189e:	e00b      	b.n	80018b8 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d105      	bne.n	80018b8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
         break;
 80018b6:	e005      	b.n	80018c4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3301      	adds	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2b1f      	cmp	r3, #31
 80018c2:	d9df      	bls.n	8001884 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b1f      	cmp	r3, #31
 80018ca:	d902      	bls.n	80018d2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80018cc:	f06f 0302 	mvn.w	r3, #2
 80018d0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d145      	bne.n	8001964 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6810      	ldr	r0, [r2, #0]
 80018e0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018e4:	2100      	movs	r1, #0
 80018e6:	4798      	blx	r3
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db37      	blt.n	800195e <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6810      	ldr	r0, [r2, #0]
 80018f6:	f107 0208 	add.w	r2, r7, #8
 80018fa:	2100      	movs	r1, #0
 80018fc:	4798      	blx	r3
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	db28      	blt.n	8001956 <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4798      	blx	r3
 800190a:	4603      	mov	r3, r0
 800190c:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800190e:	e01c      	b.n	800194a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	4798      	blx	r3
 8001916:	4603      	mov	r3, r0
 8001918:	461a      	mov	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001922:	d80e      	bhi.n	8001942 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6810      	ldr	r0, [r2, #0]
 800192c:	f107 0208 	add.w	r2, r7, #8
 8001930:	2100      	movs	r1, #0
 8001932:	4798      	blx	r3
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	da07      	bge.n	800194a <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 800193a:	f06f 0304 	mvn.w	r3, #4
 800193e:	613b      	str	r3, [r7, #16]
                 break;
 8001940:	e010      	b.n	8001964 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001942:	f06f 0301 	mvn.w	r3, #1
 8001946:	613b      	str	r3, [r7, #16]
               break;
 8001948:	e00c      	b.n	8001964 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1dd      	bne.n	8001910 <LAN8742_Init+0xc6>
 8001954:	e006      	b.n	8001964 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001956:	f06f 0304 	mvn.w	r3, #4
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	e002      	b.n	8001964 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800195e:	f06f 0303 	mvn.w	r3, #3
 8001962:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d112      	bne.n	8001990 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	4798      	blx	r3
 8001970:	4603      	mov	r3, r0
 8001972:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001974:	bf00      	nop
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	4798      	blx	r3
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001988:	d9f5      	bls.n	8001976 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001990:	693b      	ldr	r3, [r7, #16]
 }
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6810      	ldr	r0, [r2, #0]
 80019ae:	f107 020c 	add.w	r2, r7, #12
 80019b2:	2101      	movs	r1, #1
 80019b4:	4798      	blx	r3
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	da02      	bge.n	80019c2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80019bc:	f06f 0304 	mvn.w	r3, #4
 80019c0:	e06e      	b.n	8001aa0 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6810      	ldr	r0, [r2, #0]
 80019ca:	f107 020c 	add.w	r2, r7, #12
 80019ce:	2101      	movs	r1, #1
 80019d0:	4798      	blx	r3
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	da02      	bge.n	80019de <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80019d8:	f06f 0304 	mvn.w	r3, #4
 80019dc:	e060      	b.n	8001aa0 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e059      	b.n	8001aa0 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6810      	ldr	r0, [r2, #0]
 80019f4:	f107 020c 	add.w	r2, r7, #12
 80019f8:	2100      	movs	r1, #0
 80019fa:	4798      	blx	r3
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	da02      	bge.n	8001a08 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001a02:	f06f 0304 	mvn.w	r3, #4
 8001a06:	e04b      	b.n	8001aa0 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d11b      	bne.n	8001a4a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <LAN8742_GetLinkState+0x90>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001a26:	2302      	movs	r3, #2
 8001a28:	e03a      	b.n	8001aa0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e033      	b.n	8001aa0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001a42:	2304      	movs	r3, #4
 8001a44:	e02c      	b.n	8001aa0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001a46:	2305      	movs	r3, #5
 8001a48:	e02a      	b.n	8001aa0 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6810      	ldr	r0, [r2, #0]
 8001a52:	f107 020c 	add.w	r2, r7, #12
 8001a56:	211f      	movs	r1, #31
 8001a58:	4798      	blx	r3
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	da02      	bge.n	8001a66 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001a60:	f06f 0304 	mvn.w	r3, #4
 8001a64:	e01c      	b.n	8001aa0 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001a70:	2306      	movs	r3, #6
 8001a72:	e015      	b.n	8001aa0 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 031c 	and.w	r3, r3, #28
 8001a7a:	2b18      	cmp	r3, #24
 8001a7c:	d101      	bne.n	8001a82 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e00e      	b.n	8001aa0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f003 031c 	and.w	r3, r3, #28
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d101      	bne.n	8001a90 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e007      	b.n	8001aa0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 031c 	and.w	r3, r3, #28
 8001a96:	2b14      	cmp	r3, #20
 8001a98:	d101      	bne.n	8001a9e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	e000      	b.n	8001aa0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001a9e:	2305      	movs	r3, #5
    }
  }
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aac:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <HAL_Init+0x40>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae8 <HAL_Init+0x40>)
 8001ab2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <HAL_Init+0x40>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <HAL_Init+0x40>)
 8001abe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <HAL_Init+0x40>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a07      	ldr	r2, [pc, #28]	@ (8001ae8 <HAL_Init+0x40>)
 8001aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 f8fc 	bl	8001cce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad6:	200f      	movs	r0, #15
 8001ad8:	f7ff fcdc 	bl	8001494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001adc:	f7ff fc1e 	bl	800131c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023c00 	.word	0x40023c00

08001aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af0:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <HAL_IncTick+0x20>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_IncTick+0x24>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a04      	ldr	r2, [pc, #16]	@ (8001b10 <HAL_IncTick+0x24>)
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	20000300 	.word	0x20000300

08001b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return uwTick;
 8001b18:	4b03      	ldr	r3, [pc, #12]	@ (8001b28 <HAL_GetTick+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000300 	.word	0x20000300

08001b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b34:	f7ff ffee 	bl	8001b14 <HAL_GetTick>
 8001b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b44:	d005      	beq.n	8001b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b46:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <HAL_Delay+0x44>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4413      	add	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b52:	bf00      	nop
 8001b54:	f7ff ffde 	bl	8001b14 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d8f7      	bhi.n	8001b54 <HAL_Delay+0x28>
  {
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000008 	.word	0x20000008

08001b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b84:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba6:	4a04      	ldr	r2, [pc, #16]	@ (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	60d3      	str	r3, [r2, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	@ (8001bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 0307 	and.w	r3, r3, #7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	db0b      	blt.n	8001c02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	4907      	ldr	r1, [pc, #28]	@ (8001c10 <__NVIC_EnableIRQ+0x38>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e100 	.word	0xe000e100

08001c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	db0a      	blt.n	8001c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	490c      	ldr	r1, [pc, #48]	@ (8001c60 <__NVIC_SetPriority+0x4c>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	440b      	add	r3, r1
 8001c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c3c:	e00a      	b.n	8001c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4908      	ldr	r1, [pc, #32]	@ (8001c64 <__NVIC_SetPriority+0x50>)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	3b04      	subs	r3, #4
 8001c4c:	0112      	lsls	r2, r2, #4
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	440b      	add	r3, r1
 8001c52:	761a      	strb	r2, [r3, #24]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f1c3 0307 	rsb	r3, r3, #7
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	bf28      	it	cs
 8001c86:	2304      	movcs	r3, #4
 8001c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d902      	bls.n	8001c98 <NVIC_EncodePriority+0x30>
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3b03      	subs	r3, #3
 8001c96:	e000      	b.n	8001c9a <NVIC_EncodePriority+0x32>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	401a      	ands	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	4313      	orrs	r3, r2
         );
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	@ 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ff4c 	bl	8001b74 <__NVIC_SetPriorityGrouping>
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf6:	f7ff ff61 	bl	8001bbc <__NVIC_GetPriorityGrouping>
 8001cfa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	68b9      	ldr	r1, [r7, #8]
 8001d00:	6978      	ldr	r0, [r7, #20]
 8001d02:	f7ff ffb1 	bl	8001c68 <NVIC_EncodePriority>
 8001d06:	4602      	mov	r2, r0
 8001d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ff80 	bl	8001c14 <__NVIC_SetPriority>
}
 8001d14:	bf00      	nop
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ff54 	bl	8001bd8 <__NVIC_EnableIRQ>
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e06c      	b.n	8001e24 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d106      	bne.n	8001d62 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2223      	movs	r2, #35	@ 0x23
 8001d58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f003 fd33 	bl	80057c8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	4b31      	ldr	r3, [pc, #196]	@ (8001e2c <HAL_ETH_Init+0xf4>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	4a30      	ldr	r2, [pc, #192]	@ (8001e2c <HAL_ETH_Init+0xf4>)
 8001d6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d72:	4b2e      	ldr	r3, [pc, #184]	@ (8001e2c <HAL_ETH_Init+0xf4>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d7e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e30 <HAL_ETH_Init+0xf8>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4a2b      	ldr	r2, [pc, #172]	@ (8001e30 <HAL_ETH_Init+0xf8>)
 8001d84:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001d88:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d8a:	4b29      	ldr	r3, [pc, #164]	@ (8001e30 <HAL_ETH_Init+0xf8>)
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	4927      	ldr	r1, [pc, #156]	@ (8001e30 <HAL_ETH_Init+0xf8>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001d98:	4b25      	ldr	r3, [pc, #148]	@ (8001e30 <HAL_ETH_Init+0xf8>)
 8001d9a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001db2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001db4:	f7ff feae 	bl	8001b14 <HAL_GetTick>
 8001db8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001dba:	e011      	b.n	8001de0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001dbc:	f7ff feaa 	bl	8001b14 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001dca:	d909      	bls.n	8001de0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2204      	movs	r2, #4
 8001dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	22e0      	movs	r2, #224	@ 0xe0
 8001dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e021      	b.n	8001e24 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1e4      	bne.n	8001dbc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 ff56 	bl	8002ca4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fffd 	bl	8002df8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f001 f853 	bl	8002eaa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 ffbb 	bl	8002d88 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2210      	movs	r2, #16
 8001e1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40013800 	.word	0x40013800

08001e34 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e42:	2b10      	cmp	r3, #16
 8001e44:	d17f      	bne.n	8001f46 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2223      	movs	r2, #35	@ 0x23
 8001e4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001e62:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e74:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e78:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001e8c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2204      	movs	r2, #4
 8001e94:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f9f8 	bl	800228c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0208 	orr.w	r2, r2, #8
 8001eaa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f7ff fe39 	bl	8001b2c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0204 	orr.w	r2, r2, #4
 8001ed0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eda:	2001      	movs	r0, #1
 8001edc:	f7ff fe26 	bl	8001b2c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 fd7c 	bl	80029e6 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f04:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f1c:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8001f30:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8001f34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f38:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2223      	movs	r2, #35	@ 0x23
 8001f3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e000      	b.n	8001f48 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
  }
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f5e:	2b23      	cmp	r3, #35	@ 0x23
 8001f60:	d170      	bne.n	8002044 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2223      	movs	r2, #35	@ 0x23
 8001f66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8001f7c:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8001f80:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f84:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001f98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f9c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	f023 0302 	bic.w	r3, r3, #2
 8001fb0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fb4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0204 	bic.w	r2, r2, #4
 8001fc4:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f7ff fdac 	bl	8001b2c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 fd02 	bl	80029e6 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0208 	bic.w	r2, r2, #8
 8001ff0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f7ff fd96 	bl	8001b2c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	e00e      	b.n	800202c <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	3212      	adds	r2, #18
 8002014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002018:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	3301      	adds	r3, #1
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2b03      	cmp	r3, #3
 8002030:	d9ed      	bls.n	800200e <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2210      	movs	r2, #16
 800203c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	e000      	b.n	8002046 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
  }
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d109      	bne.n	8002072 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002064:	f043 0201 	orr.w	r2, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e045      	b.n	80020fe <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002078:	2b23      	cmp	r3, #35	@ 0x23
 800207a:	d13f      	bne.n	80020fc <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002084:	2201      	movs	r2, #1
 8002086:	6839      	ldr	r1, [r7, #0]
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 ff7b 	bl	8002f84 <ETH_Prepare_Tx_Descriptors>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d009      	beq.n	80020a8 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800209a:	f043 0202 	orr.w	r2, r3, #2
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e02a      	b.n	80020fe <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80020a8:	f3bf 8f4f 	dsb	sy
}
 80020ac:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d904      	bls.n	80020ca <HAL_ETH_Transmit_IT+0x7c>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c4:	1f1a      	subs	r2, r3, #4
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00d      	beq.n	80020f8 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020e4:	461a      	mov	r2, r3
 80020e6:	2304      	movs	r3, #4
 80020e8:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020f2:	461a      	mov	r2, r3
 80020f4:	2300      	movs	r3, #0
 80020f6:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	e000      	b.n	80020fe <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
  }
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b088      	sub	sp, #32
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002124:	f043 0201 	orr.w	r2, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0a8      	b.n	8002284 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002138:	2b23      	cmp	r3, #35	@ 0x23
 800213a:	d001      	beq.n	8002140 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0a1      	b.n	8002284 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002144:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	3212      	adds	r2, #18
 800214c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002150:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002156:	f1c3 0304 	rsb	r3, r3, #4
 800215a:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800215c:	e06a      	b.n	8002234 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002166:	2b00      	cmp	r3, #0
 8002168:	d007      	beq.n	800217a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	69da      	ldr	r2, [r3, #28]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002182:	2b00      	cmp	r3, #0
 8002184:	d103      	bne.n	800218e <HAL_ETH_ReadData+0x88>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800218a:	2b00      	cmp	r3, #0
 800218c:	d040      	beq.n	8002210 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00c      	beq.n	80021d2 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0c1b      	lsrs	r3, r3, #16
 80021be:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80021c2:	3b04      	subs	r3, #4
 80021c4:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80021ce:	2301      	movs	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80021ea:	461a      	mov	r2, r3
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	f003 fcc4 	bl	8005b7c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	441a      	add	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2200      	movs	r2, #0
 800220e:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	3301      	adds	r3, #1
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	2b03      	cmp	r3, #3
 800221a:	d902      	bls.n	8002222 <HAL_ETH_ReadData+0x11c>
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	3b04      	subs	r3, #4
 8002220:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	3212      	adds	r2, #18
 8002228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	3301      	adds	r3, #1
 8002232:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002238:	2b00      	cmp	r3, #0
 800223a:	db06      	blt.n	800224a <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	429a      	cmp	r2, r3
 8002242:	d202      	bcs.n	800224a <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d089      	beq.n	800215e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	441a      	add	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f814 	bl	800228c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d108      	bne.n	8002282 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e000      	b.n	8002284 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
}
 8002284:	4618      	mov	r0, r3
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002294:	2300      	movs	r3, #0
 8002296:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002298:	2301      	movs	r3, #1
 800229a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022a0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	3212      	adds	r2, #18
 80022a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ac:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022b2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80022b4:	e03d      	b.n	8002332 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d112      	bne.n	80022e4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80022be:	f107 0308 	add.w	r3, r7, #8
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 fc2a 	bl	8005b1c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	74fb      	strb	r3, [r7, #19]
 80022d2:	e007      	b.n	80022e4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	461a      	mov	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	461a      	mov	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80022e4:	7cfb      	ldrb	r3, [r7, #19]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d023      	beq.n	8002332 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d103      	bne.n	80022fa <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	4a24      	ldr	r2, [pc, #144]	@ (8002388 <ETH_UpdateDescriptor+0xfc>)
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	e003      	b.n	8002302 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8002300:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3301      	adds	r3, #1
 8002312:	61fb      	str	r3, [r7, #28]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d902      	bls.n	8002320 <ETH_UpdateDescriptor+0x94>
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3b04      	subs	r3, #4
 800231e:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	3212      	adds	r2, #18
 8002326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232a:	617b      	str	r3, [r7, #20]
      desccount--;
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	3b01      	subs	r3, #1
 8002330:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <ETH_UpdateDescriptor+0xb2>
 8002338:	7cfb      	ldrb	r3, [r7, #19]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1bb      	bne.n	80022b6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	429a      	cmp	r2, r3
 8002346:	d01a      	beq.n	800237e <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	3301      	adds	r3, #1
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002352:	f3bf 8f5f 	dmb	sy
}
 8002356:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6919      	ldr	r1, [r3, #16]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	18ca      	adds	r2, r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002370:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800237e:	bf00      	nop
 8002380:	3720      	adds	r7, #32
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	80004600 	.word	0x80004600

0800238c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3318      	adds	r3, #24
 8002398:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80023aa:	e03f      	b.n	800242c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	3304      	adds	r3, #4
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d106      	bne.n	80023d4 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	3301      	adds	r3, #1
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80023d4:	7bbb      	ldrb	r3, [r7, #14]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d028      	beq.n	800242c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68d9      	ldr	r1, [r3, #12]
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	db1b      	blt.n	8002428 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	3304      	adds	r3, #4
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f003 fbfd 	bl	8005bfc <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	3304      	adds	r3, #4
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	2200      	movs	r2, #0
 800240e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	3301      	adds	r3, #1
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002426:	e001      	b.n	800242c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_ETH_ReleaseTxPacket+0xac>
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1b9      	bne.n	80023ac <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800245a:	2b40      	cmp	r3, #64	@ 0x40
 800245c:	d112      	bne.n	8002484 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800246c:	2b40      	cmp	r3, #64	@ 0x40
 800246e:	d109      	bne.n	8002484 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002478:	461a      	mov	r2, r3
 800247a:	4b50      	ldr	r3, [pc, #320]	@ (80025bc <HAL_ETH_IRQHandler+0x178>)
 800247c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f002 fef6 	bl	8005270 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b01      	cmp	r3, #1
 8002494:	d113      	bne.n	80024be <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d10a      	bne.n	80024be <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024b0:	461a      	mov	r2, r3
 80024b2:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80024b6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f002 fee9 	bl	8005290 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024d0:	d14c      	bne.n	800256c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024e4:	d142      	bne.n	800256c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ec:	f043 0208 	orr.w	r2, r3, #8
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002504:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002508:	d11a      	bne.n	8002540 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	4b2a      	ldr	r3, [pc, #168]	@ (80025c0 <HAL_ETH_IRQHandler+0x17c>)
 8002516:	4013      	ands	r3, r2
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002530:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002534:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	22e0      	movs	r2, #224	@ 0xe0
 800253a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800253e:	e012      	b.n	8002566 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	f248 6380 	movw	r3, #34432	@ 0x8680
 800254e:	4013      	ands	r3, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800255e:	461a      	mov	r2, r3
 8002560:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002564:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f002 fea2 	bl	80052b0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b08      	cmp	r3, #8
 8002578:	d10e      	bne.n	8002598 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002580:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f81c 	bl	80025c8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002598:	4b0a      	ldr	r3, [pc, #40]	@ (80025c4 <HAL_ETH_IRQHandler+0x180>)
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d006      	beq.n	80025b2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80025a4:	4b07      	ldr	r3, [pc, #28]	@ (80025c4 <HAL_ETH_IRQHandler+0x180>)
 80025a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80025aa:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f815 	bl	80025dc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	00010040 	.word	0x00010040
 80025c0:	007e2000 	.word	0x007e2000
 80025c4:	40013c00 	.word	0x40013c00

080025c8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f003 031c 	and.w	r3, r3, #28
 800260c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	02db      	lsls	r3, r3, #11
 8002612:	b29b      	uxth	r3, r3
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	019b      	lsls	r3, r3, #6
 800261e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f023 0302 	bic.w	r3, r3, #2
 800262e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002640:	f7ff fa68 	bl	8001b14 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002646:	e00d      	b.n	8002664 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002648:	f7ff fa64 	bl	8001b14 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002656:	d301      	bcc.n	800265c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e010      	b.n	800267e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1ec      	bne.n	8002648 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	b29b      	uxth	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f003 031c 	and.w	r3, r3, #28
 80026a2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	02db      	lsls	r3, r3, #11
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	019b      	lsls	r3, r3, #6
 80026b4:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026e0:	f7ff fa18 	bl	8001b14 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026e6:	e00d      	b.n	8002704 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80026e8:	f7ff fa14 	bl	8001b14 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026f6:	d301      	bcc.n	80026fc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e009      	b.n	8002710 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ec      	bne.n	80026e8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0d9      	b.n	80028e0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	2b00      	cmp	r3, #0
 8002738:	bf14      	ite	ne
 800273a:	2301      	movne	r3, #1
 800273c:	2300      	moveq	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002760:	2b00      	cmp	r3, #0
 8002762:	bf0c      	ite	eq
 8002764:	2301      	moveq	r3, #1
 8002766:	2300      	movne	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf14      	ite	ne
 8002780:	2301      	movne	r3, #1
 8002782:	2300      	moveq	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002796:	2b00      	cmp	r3, #0
 8002798:	bf0c      	ite	eq
 800279a:	2301      	moveq	r3, #1
 800279c:	2300      	movne	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf14      	ite	ne
 80027b4:	2301      	movne	r3, #1
 80027b6:	2300      	moveq	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	bf0c      	ite	eq
 80027ea:	2301      	moveq	r3, #1
 80027ec:	2300      	movne	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	461a      	mov	r2, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281a:	2b00      	cmp	r3, #0
 800281c:	bf14      	ite	ne
 800281e:	2301      	movne	r3, #1
 8002820:	2300      	moveq	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002842:	2b00      	cmp	r3, #0
 8002844:	bf14      	ite	ne
 8002846:	2301      	movne	r3, #1
 8002848:	2300      	moveq	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf14      	ite	ne
 8002860:	2301      	movne	r3, #1
 8002862:	2300      	moveq	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	0c1b      	lsrs	r3, r3, #16
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bf14      	ite	ne
 80028b4:	2301      	movne	r3, #1
 80028b6:	2300      	moveq	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf14      	ite	ne
 80028d0:	2301      	movne	r3, #1
 80028d2:	2300      	moveq	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e00b      	b.n	8002918 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002906:	2b10      	cmp	r3, #16
 8002908:	d105      	bne.n	8002916 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800290a:	6839      	ldr	r1, [r7, #0]
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f88f 	bl	8002a30 <ETH_SetMACConfig>

    return HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	e000      	b.n	8002918 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
  }
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f023 031c 	bic.w	r3, r3, #28
 8002936:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002938:	f001 fc3a 	bl	80041b0 <HAL_RCC_GetHCLKFreq>
 800293c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	4a1d      	ldr	r2, [pc, #116]	@ (80029b8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d908      	bls.n	8002958 <HAL_ETH_SetMDIOClockRange+0x38>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	4a1c      	ldr	r2, [pc, #112]	@ (80029bc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d804      	bhi.n	8002958 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f043 0308 	orr.w	r3, r3, #8
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	e027      	b.n	80029a8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	4a18      	ldr	r2, [pc, #96]	@ (80029bc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d908      	bls.n	8002972 <HAL_ETH_SetMDIOClockRange+0x52>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4a17      	ldr	r2, [pc, #92]	@ (80029c0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d204      	bcs.n	8002972 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f043 030c 	orr.w	r3, r3, #12
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	e01a      	b.n	80029a8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	4a12      	ldr	r2, [pc, #72]	@ (80029c0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d303      	bcc.n	8002982 <HAL_ETH_SetMDIOClockRange+0x62>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	4a11      	ldr	r2, [pc, #68]	@ (80029c4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d911      	bls.n	80029a6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	4a0f      	ldr	r2, [pc, #60]	@ (80029c4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d908      	bls.n	800299c <HAL_ETH_SetMDIOClockRange+0x7c>
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	4a0e      	ldr	r2, [pc, #56]	@ (80029c8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d804      	bhi.n	800299c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f043 0304 	orr.w	r3, r3, #4
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	e005      	b.n	80029a8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f043 0310 	orr.w	r3, r3, #16
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	e000      	b.n	80029a8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80029a6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	611a      	str	r2, [r3, #16]
}
 80029b0:	bf00      	nop
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	01312cff 	.word	0x01312cff
 80029bc:	02160ebf 	.word	0x02160ebf
 80029c0:	03938700 	.word	0x03938700
 80029c4:	05f5e0ff 	.word	0x05f5e0ff
 80029c8:	08f0d17f 	.word	0x08f0d17f

080029cc <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a08:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a16:	2001      	movs	r0, #1
 8002a18:	f7ff f888 	bl	8001b2c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a26:	6193      	str	r3, [r2, #24]
}
 8002a28:	bf00      	nop
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4b51      	ldr	r3, [pc, #324]	@ (8002b8c <ETH_SetMACConfig+0x15c>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	7c1b      	ldrb	r3, [r3, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d102      	bne.n	8002a58 <ETH_SetMACConfig+0x28>
 8002a52:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a56:	e000      	b.n	8002a5a <ETH_SetMACConfig+0x2a>
 8002a58:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	7c5b      	ldrb	r3, [r3, #17]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d102      	bne.n	8002a68 <ETH_SetMACConfig+0x38>
 8002a62:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a66:	e000      	b.n	8002a6a <ETH_SetMACConfig+0x3a>
 8002a68:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a6a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a70:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	7fdb      	ldrb	r3, [r3, #31]
 8002a76:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002a78:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	7f92      	ldrb	r2, [r2, #30]
 8002a84:	2a00      	cmp	r2, #0
 8002a86:	d102      	bne.n	8002a8e <ETH_SetMACConfig+0x5e>
 8002a88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a8c:	e000      	b.n	8002a90 <ETH_SetMACConfig+0x60>
 8002a8e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002a90:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	7f1b      	ldrb	r3, [r3, #28]
 8002a96:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a98:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a9e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	791b      	ldrb	r3, [r3, #4]
 8002aa4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002aa6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002aae:	2a00      	cmp	r2, #0
 8002ab0:	d102      	bne.n	8002ab8 <ETH_SetMACConfig+0x88>
 8002ab2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ab6:	e000      	b.n	8002aba <ETH_SetMACConfig+0x8a>
 8002ab8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002aba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	7bdb      	ldrb	r3, [r3, #15]
 8002ac0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ac2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ac8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ad0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002aea:	2001      	movs	r0, #1
 8002aec:	f7ff f81e 	bl	8001b2c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002b06:	4013      	ands	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b0e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002b16:	2a00      	cmp	r2, #0
 8002b18:	d101      	bne.n	8002b1e <ETH_SetMACConfig+0xee>
 8002b1a:	2280      	movs	r2, #128	@ 0x80
 8002b1c:	e000      	b.n	8002b20 <ETH_SetMACConfig+0xf0>
 8002b1e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b20:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b26:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002b2e:	2a01      	cmp	r2, #1
 8002b30:	d101      	bne.n	8002b36 <ETH_SetMACConfig+0x106>
 8002b32:	2208      	movs	r2, #8
 8002b34:	e000      	b.n	8002b38 <ETH_SetMACConfig+0x108>
 8002b36:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002b38:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002b40:	2a01      	cmp	r2, #1
 8002b42:	d101      	bne.n	8002b48 <ETH_SetMACConfig+0x118>
 8002b44:	2204      	movs	r2, #4
 8002b46:	e000      	b.n	8002b4a <ETH_SetMACConfig+0x11a>
 8002b48:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002b52:	2a01      	cmp	r2, #1
 8002b54:	d101      	bne.n	8002b5a <ETH_SetMACConfig+0x12a>
 8002b56:	2202      	movs	r2, #2
 8002b58:	e000      	b.n	8002b5c <ETH_SetMACConfig+0x12c>
 8002b5a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b74:	2001      	movs	r0, #1
 8002b76:	f7fe ffd9 	bl	8001b2c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	619a      	str	r2, [r3, #24]
}
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	ff20810f 	.word	0xff20810f

08002b90 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca0 <ETH_SetDMAConfig+0x110>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	7b1b      	ldrb	r3, [r3, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d102      	bne.n	8002bbc <ETH_SetDMAConfig+0x2c>
 8002bb6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002bba:	e000      	b.n	8002bbe <ETH_SetDMAConfig+0x2e>
 8002bbc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	7b5b      	ldrb	r3, [r3, #13]
 8002bc2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bc4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	7f52      	ldrb	r2, [r2, #29]
 8002bca:	2a00      	cmp	r2, #0
 8002bcc:	d102      	bne.n	8002bd4 <ETH_SetDMAConfig+0x44>
 8002bce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002bd2:	e000      	b.n	8002bd6 <ETH_SetDMAConfig+0x46>
 8002bd4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002bd6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	7b9b      	ldrb	r3, [r3, #14]
 8002bdc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002bde:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002be4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	7f1b      	ldrb	r3, [r3, #28]
 8002bea:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002bec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	7f9b      	ldrb	r3, [r3, #30]
 8002bf2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002bf4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002bfa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c02:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c04:	4313      	orrs	r3, r2
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c14:	461a      	mov	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c26:	2001      	movs	r0, #1
 8002c28:	f7fe ff80 	bl	8001b2c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c34:	461a      	mov	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	791b      	ldrb	r3, [r3, #4]
 8002c3e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c44:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002c4a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c50:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c58:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002c5a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c60:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c62:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c68:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c72:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c76:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c84:	2001      	movs	r0, #1
 8002c86:	f7fe ff51 	bl	8001b2c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c92:	461a      	mov	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6013      	str	r3, [r2, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	f8de3f23 	.word	0xf8de3f23

08002ca4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b0a6      	sub	sp, #152	@ 0x98
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002cac:	2301      	movs	r3, #1
 8002cae:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002d06:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d0c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d18:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff fe86 	bl	8002a30 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002d24:	2301      	movs	r3, #1
 8002d26:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002d32:	2301      	movs	r3, #1
 8002d34:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d46:	2300      	movs	r3, #0
 8002d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002d50:	2301      	movs	r3, #1
 8002d52:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002d54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d58:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d5e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d64:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002d74:	f107 0308 	add.w	r3, r7, #8
 8002d78:	4619      	mov	r1, r3
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff ff08 	bl	8002b90 <ETH_SetDMAConfig>
}
 8002d80:	bf00      	nop
 8002d82:	3798      	adds	r7, #152	@ 0x98
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3305      	adds	r3, #5
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	3204      	adds	r2, #4
 8002da0:	7812      	ldrb	r2, [r2, #0]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	4b11      	ldr	r3, [pc, #68]	@ (8002df0 <ETH_MACAddressConfig+0x68>)
 8002daa:	4413      	add	r3, r2
 8002dac:	461a      	mov	r2, r3
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3303      	adds	r3, #3
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	061a      	lsls	r2, r3, #24
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	041b      	lsls	r3, r3, #16
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	7812      	ldrb	r2, [r2, #0]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <ETH_MACAddressConfig+0x6c>)
 8002dda:	4413      	add	r3, r2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	6013      	str	r3, [r2, #0]
}
 8002de2:	bf00      	nop
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40028040 	.word	0x40028040
 8002df4:	40028044 	.word	0x40028044

08002df8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	e03e      	b.n	8002e84 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68d9      	ldr	r1, [r3, #12]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	440b      	add	r3, r1
 8002e16:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2200      	movs	r2, #0
 8002e22:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2200      	movs	r2, #0
 8002e28:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	3206      	adds	r2, #6
 8002e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d80c      	bhi.n	8002e68 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68d9      	ldr	r1, [r3, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	440b      	add	r3, r1
 8002e60:	461a      	mov	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	e004      	b.n	8002e72 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	3301      	adds	r3, #1
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d9bd      	bls.n	8002e06 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e9c:	611a      	str	r2, [r3, #16]
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b085      	sub	sp, #20
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	e046      	b.n	8002f46 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6919      	ldr	r1, [r3, #16]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	440b      	add	r3, r1
 8002ec8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2200      	movs	r2, #0
 8002eec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002ef4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8002efc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	3212      	adds	r2, #18
 8002f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d80c      	bhi.n	8002f36 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6919      	ldr	r1, [r3, #16]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	440b      	add	r3, r1
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	60da      	str	r2, [r3, #12]
 8002f34:	e004      	b.n	8002f40 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	3301      	adds	r3, #1
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d9b5      	bls.n	8002eb8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f76:	60da      	str	r2, [r3, #12]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b08d      	sub	sp, #52	@ 0x34
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3318      	adds	r3, #24
 8002f94:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fae:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fc6:	d007      	beq.n	8002fd8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fcc:	3304      	adds	r3, #4
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e103      	b.n	80031e4 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	3301      	adds	r3, #1
 8002fe0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002ff4:	f023 031f 	bic.w	r3, r3, #31
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	6852      	ldr	r2, [r2, #4]
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d008      	beq.n	8003020 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	431a      	orrs	r2, r3
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	431a      	orrs	r2, r3
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003062:	f3bf 8f5f 	dmb	sy
}
 8003066:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003074:	e084      	b.n	8003180 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d006      	beq.n	8003096 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	e005      	b.n	80030a2 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80030a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a4:	3301      	adds	r3, #1
 80030a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d902      	bls.n	80030b4 <ETH_Prepare_Tx_Descriptors+0x130>
 80030ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b0:	3b04      	subs	r3, #4
 80030b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030bc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80030d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030d6:	d007      	beq.n	80030e8 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030dc:	3304      	adds	r3, #4
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d029      	beq.n	800313c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80030f6:	2300      	movs	r3, #0
 80030f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030fa:	e019      	b.n	8003130 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80030fc:	f3bf 8f5f 	dmb	sy
}
 8003100:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800310e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003110:	3301      	adds	r3, #1
 8003112:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003116:	2b03      	cmp	r3, #3
 8003118:	d902      	bls.n	8003120 <ETH_Prepare_Tx_Descriptors+0x19c>
 800311a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800311c:	3b04      	subs	r3, #4
 800311e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003128:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800312a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312c:	3301      	adds	r3, #1
 800312e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003130:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	429a      	cmp	r2, r3
 8003136:	d3e1      	bcc.n	80030fc <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8003138:	2302      	movs	r3, #2
 800313a:	e053      	b.n	80031e4 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 800313c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313e:	3301      	adds	r3, #1
 8003140:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 800315a:	f023 031f 	bic.w	r3, r3, #31
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	6852      	ldr	r2, [r2, #4]
 8003162:	431a      	orrs	r2, r3
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	3301      	adds	r3, #1
 800316c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800316e:	f3bf 8f5f 	dmb	sy
}
 8003172:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	f47f af76 	bne.w	8003076 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d006      	beq.n	800319e <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	e005      	b.n	80031aa <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031ba:	6979      	ldr	r1, [r7, #20]
 80031bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031be:	3304      	adds	r3, #4
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031ca:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80031cc:	b672      	cpsid	i
}
 80031ce:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	4413      	add	r3, r2
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80031de:	b662      	cpsie	i
}
 80031e0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3734      	adds	r7, #52	@ 0x34
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b089      	sub	sp, #36	@ 0x24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031fe:	2300      	movs	r3, #0
 8003200:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003202:	2300      	movs	r3, #0
 8003204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
 800320a:	e177      	b.n	80034fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800320c:	2201      	movs	r2, #1
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	429a      	cmp	r2, r3
 8003226:	f040 8166 	bne.w	80034f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d005      	beq.n	8003242 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800323e:	2b02      	cmp	r3, #2
 8003240:	d130      	bne.n	80032a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	2203      	movs	r2, #3
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43db      	mvns	r3, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4013      	ands	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4313      	orrs	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003278:	2201      	movs	r2, #1
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	f003 0201 	and.w	r2, r3, #1
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d017      	beq.n	80032e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	2203      	movs	r2, #3
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d123      	bne.n	8003334 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	08da      	lsrs	r2, r3, #3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3208      	adds	r2, #8
 80032f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	220f      	movs	r2, #15
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	08da      	lsrs	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3208      	adds	r2, #8
 800332e:	69b9      	ldr	r1, [r7, #24]
 8003330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	2203      	movs	r2, #3
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 0203 	and.w	r2, r3, #3
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80c0 	beq.w	80034f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	4b66      	ldr	r3, [pc, #408]	@ (8003514 <HAL_GPIO_Init+0x324>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337e:	4a65      	ldr	r2, [pc, #404]	@ (8003514 <HAL_GPIO_Init+0x324>)
 8003380:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003384:	6453      	str	r3, [r2, #68]	@ 0x44
 8003386:	4b63      	ldr	r3, [pc, #396]	@ (8003514 <HAL_GPIO_Init+0x324>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003392:	4a61      	ldr	r2, [pc, #388]	@ (8003518 <HAL_GPIO_Init+0x328>)
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	089b      	lsrs	r3, r3, #2
 8003398:	3302      	adds	r3, #2
 800339a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	220f      	movs	r2, #15
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a58      	ldr	r2, [pc, #352]	@ (800351c <HAL_GPIO_Init+0x32c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d037      	beq.n	800342e <HAL_GPIO_Init+0x23e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a57      	ldr	r2, [pc, #348]	@ (8003520 <HAL_GPIO_Init+0x330>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d031      	beq.n	800342a <HAL_GPIO_Init+0x23a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a56      	ldr	r2, [pc, #344]	@ (8003524 <HAL_GPIO_Init+0x334>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d02b      	beq.n	8003426 <HAL_GPIO_Init+0x236>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a55      	ldr	r2, [pc, #340]	@ (8003528 <HAL_GPIO_Init+0x338>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d025      	beq.n	8003422 <HAL_GPIO_Init+0x232>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a54      	ldr	r2, [pc, #336]	@ (800352c <HAL_GPIO_Init+0x33c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d01f      	beq.n	800341e <HAL_GPIO_Init+0x22e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a53      	ldr	r2, [pc, #332]	@ (8003530 <HAL_GPIO_Init+0x340>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d019      	beq.n	800341a <HAL_GPIO_Init+0x22a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a52      	ldr	r2, [pc, #328]	@ (8003534 <HAL_GPIO_Init+0x344>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d013      	beq.n	8003416 <HAL_GPIO_Init+0x226>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a51      	ldr	r2, [pc, #324]	@ (8003538 <HAL_GPIO_Init+0x348>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00d      	beq.n	8003412 <HAL_GPIO_Init+0x222>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a50      	ldr	r2, [pc, #320]	@ (800353c <HAL_GPIO_Init+0x34c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d007      	beq.n	800340e <HAL_GPIO_Init+0x21e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a4f      	ldr	r2, [pc, #316]	@ (8003540 <HAL_GPIO_Init+0x350>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d101      	bne.n	800340a <HAL_GPIO_Init+0x21a>
 8003406:	2309      	movs	r3, #9
 8003408:	e012      	b.n	8003430 <HAL_GPIO_Init+0x240>
 800340a:	230a      	movs	r3, #10
 800340c:	e010      	b.n	8003430 <HAL_GPIO_Init+0x240>
 800340e:	2308      	movs	r3, #8
 8003410:	e00e      	b.n	8003430 <HAL_GPIO_Init+0x240>
 8003412:	2307      	movs	r3, #7
 8003414:	e00c      	b.n	8003430 <HAL_GPIO_Init+0x240>
 8003416:	2306      	movs	r3, #6
 8003418:	e00a      	b.n	8003430 <HAL_GPIO_Init+0x240>
 800341a:	2305      	movs	r3, #5
 800341c:	e008      	b.n	8003430 <HAL_GPIO_Init+0x240>
 800341e:	2304      	movs	r3, #4
 8003420:	e006      	b.n	8003430 <HAL_GPIO_Init+0x240>
 8003422:	2303      	movs	r3, #3
 8003424:	e004      	b.n	8003430 <HAL_GPIO_Init+0x240>
 8003426:	2302      	movs	r3, #2
 8003428:	e002      	b.n	8003430 <HAL_GPIO_Init+0x240>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <HAL_GPIO_Init+0x240>
 800342e:	2300      	movs	r3, #0
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	f002 0203 	and.w	r2, r2, #3
 8003436:	0092      	lsls	r2, r2, #2
 8003438:	4093      	lsls	r3, r2
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003440:	4935      	ldr	r1, [pc, #212]	@ (8003518 <HAL_GPIO_Init+0x328>)
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	3302      	adds	r3, #2
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800344e:	4b3d      	ldr	r3, [pc, #244]	@ (8003544 <HAL_GPIO_Init+0x354>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003472:	4a34      	ldr	r2, [pc, #208]	@ (8003544 <HAL_GPIO_Init+0x354>)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003478:	4b32      	ldr	r3, [pc, #200]	@ (8003544 <HAL_GPIO_Init+0x354>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800349c:	4a29      	ldr	r2, [pc, #164]	@ (8003544 <HAL_GPIO_Init+0x354>)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034a2:	4b28      	ldr	r3, [pc, #160]	@ (8003544 <HAL_GPIO_Init+0x354>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4013      	ands	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003544 <HAL_GPIO_Init+0x354>)
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003544 <HAL_GPIO_Init+0x354>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034f0:	4a14      	ldr	r2, [pc, #80]	@ (8003544 <HAL_GPIO_Init+0x354>)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3301      	adds	r3, #1
 80034fa:	61fb      	str	r3, [r7, #28]
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	2b0f      	cmp	r3, #15
 8003500:	f67f ae84 	bls.w	800320c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	3724      	adds	r7, #36	@ 0x24
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800
 8003518:	40013800 	.word	0x40013800
 800351c:	40020000 	.word	0x40020000
 8003520:	40020400 	.word	0x40020400
 8003524:	40020800 	.word	0x40020800
 8003528:	40020c00 	.word	0x40020c00
 800352c:	40021000 	.word	0x40021000
 8003530:	40021400 	.word	0x40021400
 8003534:	40021800 	.word	0x40021800
 8003538:	40021c00 	.word	0x40021c00
 800353c:	40022000 	.word	0x40022000
 8003540:	40022400 	.word	0x40022400
 8003544:	40013c00 	.word	0x40013c00

08003548 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e12b      	b.n	80037b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fd ff00 	bl	8001374 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2224      	movs	r2, #36	@ 0x24
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0201 	bic.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800359a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035ac:	f000 fe0c 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 80035b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4a81      	ldr	r2, [pc, #516]	@ (80037bc <HAL_I2C_Init+0x274>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d807      	bhi.n	80035cc <HAL_I2C_Init+0x84>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4a80      	ldr	r2, [pc, #512]	@ (80037c0 <HAL_I2C_Init+0x278>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	bf94      	ite	ls
 80035c4:	2301      	movls	r3, #1
 80035c6:	2300      	movhi	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	e006      	b.n	80035da <HAL_I2C_Init+0x92>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4a7d      	ldr	r2, [pc, #500]	@ (80037c4 <HAL_I2C_Init+0x27c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	bf94      	ite	ls
 80035d4:	2301      	movls	r3, #1
 80035d6:	2300      	movhi	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e0e7      	b.n	80037b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4a78      	ldr	r2, [pc, #480]	@ (80037c8 <HAL_I2C_Init+0x280>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	0c9b      	lsrs	r3, r3, #18
 80035ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a6a      	ldr	r2, [pc, #424]	@ (80037bc <HAL_I2C_Init+0x274>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d802      	bhi.n	800361c <HAL_I2C_Init+0xd4>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	3301      	adds	r3, #1
 800361a:	e009      	b.n	8003630 <HAL_I2C_Init+0xe8>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003622:	fb02 f303 	mul.w	r3, r2, r3
 8003626:	4a69      	ldr	r2, [pc, #420]	@ (80037cc <HAL_I2C_Init+0x284>)
 8003628:	fba2 2303 	umull	r2, r3, r2, r3
 800362c:	099b      	lsrs	r3, r3, #6
 800362e:	3301      	adds	r3, #1
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	430b      	orrs	r3, r1
 8003636:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003642:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	495c      	ldr	r1, [pc, #368]	@ (80037bc <HAL_I2C_Init+0x274>)
 800364c:	428b      	cmp	r3, r1
 800364e:	d819      	bhi.n	8003684 <HAL_I2C_Init+0x13c>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1e59      	subs	r1, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	fbb1 f3f3 	udiv	r3, r1, r3
 800365e:	1c59      	adds	r1, r3, #1
 8003660:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003664:	400b      	ands	r3, r1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_I2C_Init+0x138>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1e59      	subs	r1, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	fbb1 f3f3 	udiv	r3, r1, r3
 8003678:	3301      	adds	r3, #1
 800367a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800367e:	e051      	b.n	8003724 <HAL_I2C_Init+0x1dc>
 8003680:	2304      	movs	r3, #4
 8003682:	e04f      	b.n	8003724 <HAL_I2C_Init+0x1dc>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d111      	bne.n	80036b0 <HAL_I2C_Init+0x168>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1e58      	subs	r0, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	440b      	add	r3, r1
 800369a:	fbb0 f3f3 	udiv	r3, r0, r3
 800369e:	3301      	adds	r3, #1
 80036a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bf0c      	ite	eq
 80036a8:	2301      	moveq	r3, #1
 80036aa:	2300      	movne	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	e012      	b.n	80036d6 <HAL_I2C_Init+0x18e>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	1e58      	subs	r0, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6859      	ldr	r1, [r3, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	0099      	lsls	r1, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c6:	3301      	adds	r3, #1
 80036c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_I2C_Init+0x196>
 80036da:	2301      	movs	r3, #1
 80036dc:	e022      	b.n	8003724 <HAL_I2C_Init+0x1dc>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10e      	bne.n	8003704 <HAL_I2C_Init+0x1bc>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1e58      	subs	r0, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6859      	ldr	r1, [r3, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	440b      	add	r3, r1
 80036f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f8:	3301      	adds	r3, #1
 80036fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003702:	e00f      	b.n	8003724 <HAL_I2C_Init+0x1dc>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	1e58      	subs	r0, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	0099      	lsls	r1, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	fbb0 f3f3 	udiv	r3, r0, r3
 800371a:	3301      	adds	r3, #1
 800371c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003720:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	6809      	ldr	r1, [r1, #0]
 8003728:	4313      	orrs	r3, r2
 800372a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003752:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6911      	ldr	r1, [r2, #16]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	68d2      	ldr	r2, [r2, #12]
 800375e:	4311      	orrs	r1, r2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	430b      	orrs	r3, r1
 8003766:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695a      	ldr	r2, [r3, #20]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	000186a0 	.word	0x000186a0
 80037c0:	001e847f 	.word	0x001e847f
 80037c4:	003d08ff 	.word	0x003d08ff
 80037c8:	431bde83 	.word	0x431bde83
 80037cc:	10624dd3 	.word	0x10624dd3

080037d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b20      	cmp	r3, #32
 80037e4:	d129      	bne.n	800383a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2224      	movs	r2, #36	@ 0x24
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0201 	bic.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0210 	bic.w	r2, r2, #16
 800380c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f042 0201 	orr.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e000      	b.n	800383c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800383a:	2302      	movs	r3, #2
  }
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b20      	cmp	r3, #32
 8003860:	d12a      	bne.n	80038b8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2224      	movs	r2, #36	@ 0x24
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003880:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003882:	89fb      	ldrh	r3, [r7, #14]
 8003884:	f023 030f 	bic.w	r3, r3, #15
 8003888:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	b29a      	uxth	r2, r3
 800388e:	89fb      	ldrh	r3, [r7, #14]
 8003890:	4313      	orrs	r3, r2
 8003892:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	89fa      	ldrh	r2, [r7, #14]
 800389a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80038d2:	2300      	movs	r3, #0
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	4b20      	ldr	r3, [pc, #128]	@ (8003958 <HAL_PWREx_EnableOverDrive+0x90>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	4a1f      	ldr	r2, [pc, #124]	@ (8003958 <HAL_PWREx_EnableOverDrive+0x90>)
 80038dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003958 <HAL_PWREx_EnableOverDrive+0x90>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80038ee:	4b1b      	ldr	r3, [pc, #108]	@ (800395c <HAL_PWREx_EnableOverDrive+0x94>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038f4:	f7fe f90e 	bl	8001b14 <HAL_GetTick>
 80038f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038fa:	e009      	b.n	8003910 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038fc:	f7fe f90a 	bl	8001b14 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800390a:	d901      	bls.n	8003910 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e01f      	b.n	8003950 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003910:	4b13      	ldr	r3, [pc, #76]	@ (8003960 <HAL_PWREx_EnableOverDrive+0x98>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800391c:	d1ee      	bne.n	80038fc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800391e:	4b11      	ldr	r3, [pc, #68]	@ (8003964 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003924:	f7fe f8f6 	bl	8001b14 <HAL_GetTick>
 8003928:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800392a:	e009      	b.n	8003940 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800392c:	f7fe f8f2 	bl	8001b14 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800393a:	d901      	bls.n	8003940 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e007      	b.n	8003950 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003940:	4b07      	ldr	r3, [pc, #28]	@ (8003960 <HAL_PWREx_EnableOverDrive+0x98>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003948:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800394c:	d1ee      	bne.n	800392c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40023800 	.word	0x40023800
 800395c:	420e0040 	.word	0x420e0040
 8003960:	40007000 	.word	0x40007000
 8003964:	420e0044 	.word	0x420e0044

08003968 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e267      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d075      	beq.n	8003a72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003986:	4b88      	ldr	r3, [pc, #544]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b04      	cmp	r3, #4
 8003990:	d00c      	beq.n	80039ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003992:	4b85      	ldr	r3, [pc, #532]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800399a:	2b08      	cmp	r3, #8
 800399c:	d112      	bne.n	80039c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800399e:	4b82      	ldr	r3, [pc, #520]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039aa:	d10b      	bne.n	80039c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ac:	4b7e      	ldr	r3, [pc, #504]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d05b      	beq.n	8003a70 <HAL_RCC_OscConfig+0x108>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d157      	bne.n	8003a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e242      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039cc:	d106      	bne.n	80039dc <HAL_RCC_OscConfig+0x74>
 80039ce:	4b76      	ldr	r3, [pc, #472]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a75      	ldr	r2, [pc, #468]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e01d      	b.n	8003a18 <HAL_RCC_OscConfig+0xb0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x98>
 80039e6:	4b70      	ldr	r3, [pc, #448]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a6f      	ldr	r2, [pc, #444]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	4b6d      	ldr	r3, [pc, #436]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a6c      	ldr	r2, [pc, #432]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e00b      	b.n	8003a18 <HAL_RCC_OscConfig+0xb0>
 8003a00:	4b69      	ldr	r3, [pc, #420]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a68      	ldr	r2, [pc, #416]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	4b66      	ldr	r3, [pc, #408]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a65      	ldr	r2, [pc, #404]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d013      	beq.n	8003a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a20:	f7fe f878 	bl	8001b14 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a28:	f7fe f874 	bl	8001b14 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	@ 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e207      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0xc0>
 8003a46:	e014      	b.n	8003a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7fe f864 	bl	8001b14 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a50:	f7fe f860 	bl	8001b14 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	@ 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e1f3      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a62:	4b51      	ldr	r3, [pc, #324]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0xe8>
 8003a6e:	e000      	b.n	8003a72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d063      	beq.n	8003b46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a7e:	4b4a      	ldr	r3, [pc, #296]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8a:	4b47      	ldr	r3, [pc, #284]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d11c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a96:	4b44      	ldr	r3, [pc, #272]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d116      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa2:	4b41      	ldr	r3, [pc, #260]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_RCC_OscConfig+0x152>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d001      	beq.n	8003aba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e1c7      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aba:	4b3b      	ldr	r3, [pc, #236]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4937      	ldr	r1, [pc, #220]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ace:	e03a      	b.n	8003b46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d020      	beq.n	8003b1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad8:	4b34      	ldr	r3, [pc, #208]	@ (8003bac <HAL_RCC_OscConfig+0x244>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fe f819 	bl	8001b14 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae6:	f7fe f815 	bl	8001b14 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e1a8      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af8:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b04:	4b28      	ldr	r3, [pc, #160]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4925      	ldr	r1, [pc, #148]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	600b      	str	r3, [r1, #0]
 8003b18:	e015      	b.n	8003b46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1a:	4b24      	ldr	r3, [pc, #144]	@ (8003bac <HAL_RCC_OscConfig+0x244>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fd fff8 	bl	8001b14 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b28:	f7fd fff4 	bl	8001b14 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e187      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d036      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d016      	beq.n	8003b88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b5a:	4b15      	ldr	r3, [pc, #84]	@ (8003bb0 <HAL_RCC_OscConfig+0x248>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b60:	f7fd ffd8 	bl	8001b14 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b68:	f7fd ffd4 	bl	8001b14 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e167      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f0      	beq.n	8003b68 <HAL_RCC_OscConfig+0x200>
 8003b86:	e01b      	b.n	8003bc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b88:	4b09      	ldr	r3, [pc, #36]	@ (8003bb0 <HAL_RCC_OscConfig+0x248>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8e:	f7fd ffc1 	bl	8001b14 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b94:	e00e      	b.n	8003bb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b96:	f7fd ffbd 	bl	8001b14 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d907      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e150      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	42470000 	.word	0x42470000
 8003bb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb4:	4b88      	ldr	r3, [pc, #544]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003bb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1ea      	bne.n	8003b96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8097 	beq.w	8003cfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd2:	4b81      	ldr	r3, [pc, #516]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10f      	bne.n	8003bfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bde:	2300      	movs	r3, #0
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	4b7d      	ldr	r3, [pc, #500]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be6:	4a7c      	ldr	r2, [pc, #496]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bee:	4b7a      	ldr	r3, [pc, #488]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf6:	60bb      	str	r3, [r7, #8]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfe:	4b77      	ldr	r3, [pc, #476]	@ (8003ddc <HAL_RCC_OscConfig+0x474>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d118      	bne.n	8003c3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c0a:	4b74      	ldr	r3, [pc, #464]	@ (8003ddc <HAL_RCC_OscConfig+0x474>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a73      	ldr	r2, [pc, #460]	@ (8003ddc <HAL_RCC_OscConfig+0x474>)
 8003c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c16:	f7fd ff7d 	bl	8001b14 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c1e:	f7fd ff79 	bl	8001b14 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e10c      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c30:	4b6a      	ldr	r3, [pc, #424]	@ (8003ddc <HAL_RCC_OscConfig+0x474>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d106      	bne.n	8003c52 <HAL_RCC_OscConfig+0x2ea>
 8003c44:	4b64      	ldr	r3, [pc, #400]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c48:	4a63      	ldr	r2, [pc, #396]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c50:	e01c      	b.n	8003c8c <HAL_RCC_OscConfig+0x324>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b05      	cmp	r3, #5
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x30c>
 8003c5a:	4b5f      	ldr	r3, [pc, #380]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5e:	4a5e      	ldr	r2, [pc, #376]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c60:	f043 0304 	orr.w	r3, r3, #4
 8003c64:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c66:	4b5c      	ldr	r3, [pc, #368]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6a:	4a5b      	ldr	r2, [pc, #364]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	f043 0301 	orr.w	r3, r3, #1
 8003c70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c72:	e00b      	b.n	8003c8c <HAL_RCC_OscConfig+0x324>
 8003c74:	4b58      	ldr	r3, [pc, #352]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c78:	4a57      	ldr	r2, [pc, #348]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c7a:	f023 0301 	bic.w	r3, r3, #1
 8003c7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c80:	4b55      	ldr	r3, [pc, #340]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c84:	4a54      	ldr	r2, [pc, #336]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c86:	f023 0304 	bic.w	r3, r3, #4
 8003c8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d015      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c94:	f7fd ff3e 	bl	8001b14 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c9c:	f7fd ff3a 	bl	8001b14 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e0cb      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb2:	4b49      	ldr	r3, [pc, #292]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0ee      	beq.n	8003c9c <HAL_RCC_OscConfig+0x334>
 8003cbe:	e014      	b.n	8003cea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc0:	f7fd ff28 	bl	8001b14 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc8:	f7fd ff24 	bl	8001b14 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e0b5      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cde:	4b3e      	ldr	r3, [pc, #248]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1ee      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d105      	bne.n	8003cfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf0:	4b39      	ldr	r3, [pc, #228]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf4:	4a38      	ldr	r2, [pc, #224]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003cf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cfa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80a1 	beq.w	8003e48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d06:	4b34      	ldr	r3, [pc, #208]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d05c      	beq.n	8003dcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d141      	bne.n	8003d9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1a:	4b31      	ldr	r3, [pc, #196]	@ (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d20:	f7fd fef8 	bl	8001b14 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d28:	f7fd fef4 	bl	8001b14 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e087      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3a:	4b27      	ldr	r3, [pc, #156]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69da      	ldr	r2, [r3, #28]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	019b      	lsls	r3, r3, #6
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5c:	085b      	lsrs	r3, r3, #1
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	041b      	lsls	r3, r3, #16
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d68:	061b      	lsls	r3, r3, #24
 8003d6a:	491b      	ldr	r1, [pc, #108]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d70:	4b1b      	ldr	r3, [pc, #108]	@ (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d76:	f7fd fecd 	bl	8001b14 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d7e:	f7fd fec9 	bl	8001b14 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e05c      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d90:	4b11      	ldr	r3, [pc, #68]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x416>
 8003d9c:	e054      	b.n	8003e48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9e:	4b10      	ldr	r3, [pc, #64]	@ (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da4:	f7fd feb6 	bl	8001b14 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dac:	f7fd feb2 	bl	8001b14 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e045      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbe:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x444>
 8003dca:	e03d      	b.n	8003e48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d107      	bne.n	8003de4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e038      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003de4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e54 <HAL_RCC_OscConfig+0x4ec>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d028      	beq.n	8003e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d121      	bne.n	8003e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d11a      	bne.n	8003e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e14:	4013      	ands	r3, r2
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d111      	bne.n	8003e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d107      	bne.n	8003e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800

08003e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0cc      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e6c:	4b68      	ldr	r3, [pc, #416]	@ (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d90c      	bls.n	8003e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7a:	4b65      	ldr	r3, [pc, #404]	@ (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e82:	4b63      	ldr	r3, [pc, #396]	@ (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0b8      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d020      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eac:	4b59      	ldr	r3, [pc, #356]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	4a58      	ldr	r2, [pc, #352]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ec4:	4b53      	ldr	r3, [pc, #332]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	4a52      	ldr	r2, [pc, #328]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed0:	4b50      	ldr	r3, [pc, #320]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	494d      	ldr	r1, [pc, #308]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d044      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d107      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef6:	4b47      	ldr	r3, [pc, #284]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d119      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e07f      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d107      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f16:	4b3f      	ldr	r3, [pc, #252]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d109      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e06f      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f26:	4b3b      	ldr	r3, [pc, #236]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e067      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f36:	4b37      	ldr	r3, [pc, #220]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f023 0203 	bic.w	r2, r3, #3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	4934      	ldr	r1, [pc, #208]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f48:	f7fd fde4 	bl	8001b14 <HAL_GetTick>
 8003f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4e:	e00a      	b.n	8003f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f50:	f7fd fde0 	bl	8001b14 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e04f      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f66:	4b2b      	ldr	r3, [pc, #172]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 020c 	and.w	r2, r3, #12
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d1eb      	bne.n	8003f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f78:	4b25      	ldr	r3, [pc, #148]	@ (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d20c      	bcs.n	8003fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f86:	4b22      	ldr	r3, [pc, #136]	@ (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8e:	4b20      	ldr	r3, [pc, #128]	@ (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e032      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fac:	4b19      	ldr	r3, [pc, #100]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4916      	ldr	r1, [pc, #88]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fca:	4b12      	ldr	r3, [pc, #72]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	490e      	ldr	r1, [pc, #56]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fde:	f000 f821 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	490a      	ldr	r1, [pc, #40]	@ (8004018 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff0:	5ccb      	ldrb	r3, [r1, r3]
 8003ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff6:	4a09      	ldr	r2, [pc, #36]	@ (800401c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ffa:	4b09      	ldr	r3, [pc, #36]	@ (8004020 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fd fa48 	bl	8001494 <HAL_InitTick>

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40023c00 	.word	0x40023c00
 8004014:	40023800 	.word	0x40023800
 8004018:	08021594 	.word	0x08021594
 800401c:	20000000 	.word	0x20000000
 8004020:	20000004 	.word	0x20000004

08004024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004028:	b090      	sub	sp, #64	@ 0x40
 800402a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004030:	2300      	movs	r3, #0
 8004032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004034:	2300      	movs	r3, #0
 8004036:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800403c:	4b59      	ldr	r3, [pc, #356]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 030c 	and.w	r3, r3, #12
 8004044:	2b08      	cmp	r3, #8
 8004046:	d00d      	beq.n	8004064 <HAL_RCC_GetSysClockFreq+0x40>
 8004048:	2b08      	cmp	r3, #8
 800404a:	f200 80a1 	bhi.w	8004190 <HAL_RCC_GetSysClockFreq+0x16c>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_RCC_GetSysClockFreq+0x34>
 8004052:	2b04      	cmp	r3, #4
 8004054:	d003      	beq.n	800405e <HAL_RCC_GetSysClockFreq+0x3a>
 8004056:	e09b      	b.n	8004190 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004058:	4b53      	ldr	r3, [pc, #332]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800405a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800405c:	e09b      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800405e:	4b53      	ldr	r3, [pc, #332]	@ (80041ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004060:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004062:	e098      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004064:	4b4f      	ldr	r3, [pc, #316]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800406c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800406e:	4b4d      	ldr	r3, [pc, #308]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d028      	beq.n	80040cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407a:	4b4a      	ldr	r3, [pc, #296]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	099b      	lsrs	r3, r3, #6
 8004080:	2200      	movs	r2, #0
 8004082:	623b      	str	r3, [r7, #32]
 8004084:	627a      	str	r2, [r7, #36]	@ 0x24
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800408c:	2100      	movs	r1, #0
 800408e:	4b47      	ldr	r3, [pc, #284]	@ (80041ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004090:	fb03 f201 	mul.w	r2, r3, r1
 8004094:	2300      	movs	r3, #0
 8004096:	fb00 f303 	mul.w	r3, r0, r3
 800409a:	4413      	add	r3, r2
 800409c:	4a43      	ldr	r2, [pc, #268]	@ (80041ac <HAL_RCC_GetSysClockFreq+0x188>)
 800409e:	fba0 1202 	umull	r1, r2, r0, r2
 80040a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040a4:	460a      	mov	r2, r1
 80040a6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80040a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040aa:	4413      	add	r3, r2
 80040ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b0:	2200      	movs	r2, #0
 80040b2:	61bb      	str	r3, [r7, #24]
 80040b4:	61fa      	str	r2, [r7, #28]
 80040b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80040be:	f7fc fdf3 	bl	8000ca8 <__aeabi_uldivmod>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4613      	mov	r3, r2
 80040c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040ca:	e053      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040cc:	4b35      	ldr	r3, [pc, #212]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	099b      	lsrs	r3, r3, #6
 80040d2:	2200      	movs	r2, #0
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	617a      	str	r2, [r7, #20]
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040de:	f04f 0b00 	mov.w	fp, #0
 80040e2:	4652      	mov	r2, sl
 80040e4:	465b      	mov	r3, fp
 80040e6:	f04f 0000 	mov.w	r0, #0
 80040ea:	f04f 0100 	mov.w	r1, #0
 80040ee:	0159      	lsls	r1, r3, #5
 80040f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040f4:	0150      	lsls	r0, r2, #5
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	ebb2 080a 	subs.w	r8, r2, sl
 80040fe:	eb63 090b 	sbc.w	r9, r3, fp
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800410e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004112:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004116:	ebb2 0408 	subs.w	r4, r2, r8
 800411a:	eb63 0509 	sbc.w	r5, r3, r9
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	00eb      	lsls	r3, r5, #3
 8004128:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800412c:	00e2      	lsls	r2, r4, #3
 800412e:	4614      	mov	r4, r2
 8004130:	461d      	mov	r5, r3
 8004132:	eb14 030a 	adds.w	r3, r4, sl
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	eb45 030b 	adc.w	r3, r5, fp
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	e9d7 4500 	ldrd	r4, r5, [r7]
 800414a:	4629      	mov	r1, r5
 800414c:	028b      	lsls	r3, r1, #10
 800414e:	4621      	mov	r1, r4
 8004150:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004154:	4621      	mov	r1, r4
 8004156:	028a      	lsls	r2, r1, #10
 8004158:	4610      	mov	r0, r2
 800415a:	4619      	mov	r1, r3
 800415c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800415e:	2200      	movs	r2, #0
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	60fa      	str	r2, [r7, #12]
 8004164:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004168:	f7fc fd9e 	bl	8000ca8 <__aeabi_uldivmod>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4613      	mov	r3, r2
 8004172:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004174:	4b0b      	ldr	r3, [pc, #44]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	0c1b      	lsrs	r3, r3, #16
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	3301      	adds	r3, #1
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004184:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004188:	fbb2 f3f3 	udiv	r3, r2, r3
 800418c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800418e:	e002      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004190:	4b05      	ldr	r3, [pc, #20]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004192:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004198:	4618      	mov	r0, r3
 800419a:	3740      	adds	r7, #64	@ 0x40
 800419c:	46bd      	mov	sp, r7
 800419e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041a2:	bf00      	nop
 80041a4:	40023800 	.word	0x40023800
 80041a8:	00f42400 	.word	0x00f42400
 80041ac:	017d7840 	.word	0x017d7840

080041b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b4:	4b03      	ldr	r3, [pc, #12]	@ (80041c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041b6:	681b      	ldr	r3, [r3, #0]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	20000000 	.word	0x20000000

080041c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041cc:	f7ff fff0 	bl	80041b0 <HAL_RCC_GetHCLKFreq>
 80041d0:	4602      	mov	r2, r0
 80041d2:	4b05      	ldr	r3, [pc, #20]	@ (80041e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	0a9b      	lsrs	r3, r3, #10
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	4903      	ldr	r1, [pc, #12]	@ (80041ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80041de:	5ccb      	ldrb	r3, [r1, r3]
 80041e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40023800 	.word	0x40023800
 80041ec:	080215a4 	.word	0x080215a4

080041f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041f4:	f7ff ffdc 	bl	80041b0 <HAL_RCC_GetHCLKFreq>
 80041f8:	4602      	mov	r2, r0
 80041fa:	4b05      	ldr	r3, [pc, #20]	@ (8004210 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	0b5b      	lsrs	r3, r3, #13
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	4903      	ldr	r1, [pc, #12]	@ (8004214 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004206:	5ccb      	ldrb	r3, [r1, r3]
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800420c:	4618      	mov	r0, r3
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40023800 	.word	0x40023800
 8004214:	080215a4 	.word	0x080215a4

08004218 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	220f      	movs	r2, #15
 8004226:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004228:	4b12      	ldr	r3, [pc, #72]	@ (8004274 <HAL_RCC_GetClockConfig+0x5c>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 0203 	and.w	r2, r3, #3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004234:	4b0f      	ldr	r3, [pc, #60]	@ (8004274 <HAL_RCC_GetClockConfig+0x5c>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004240:	4b0c      	ldr	r3, [pc, #48]	@ (8004274 <HAL_RCC_GetClockConfig+0x5c>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800424c:	4b09      	ldr	r3, [pc, #36]	@ (8004274 <HAL_RCC_GetClockConfig+0x5c>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	08db      	lsrs	r3, r3, #3
 8004252:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800425a:	4b07      	ldr	r3, [pc, #28]	@ (8004278 <HAL_RCC_GetClockConfig+0x60>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 020f 	and.w	r2, r3, #15
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	601a      	str	r2, [r3, #0]
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40023800 	.word	0x40023800
 8004278:	40023c00 	.word	0x40023c00

0800427c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e041      	b.n	8004312 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f839 	bl	800431a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4619      	mov	r1, r3
 80042ba:	4610      	mov	r0, r2
 80042bc:	f000 f9c0 	bl	8004640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b01      	cmp	r3, #1
 8004342:	d001      	beq.n	8004348 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e04e      	b.n	80043e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a23      	ldr	r2, [pc, #140]	@ (80043f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d022      	beq.n	80043b0 <HAL_TIM_Base_Start_IT+0x80>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004372:	d01d      	beq.n	80043b0 <HAL_TIM_Base_Start_IT+0x80>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1f      	ldr	r2, [pc, #124]	@ (80043f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d018      	beq.n	80043b0 <HAL_TIM_Base_Start_IT+0x80>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1e      	ldr	r2, [pc, #120]	@ (80043fc <HAL_TIM_Base_Start_IT+0xcc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d013      	beq.n	80043b0 <HAL_TIM_Base_Start_IT+0x80>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1c      	ldr	r2, [pc, #112]	@ (8004400 <HAL_TIM_Base_Start_IT+0xd0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00e      	beq.n	80043b0 <HAL_TIM_Base_Start_IT+0x80>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1b      	ldr	r2, [pc, #108]	@ (8004404 <HAL_TIM_Base_Start_IT+0xd4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d009      	beq.n	80043b0 <HAL_TIM_Base_Start_IT+0x80>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a19      	ldr	r2, [pc, #100]	@ (8004408 <HAL_TIM_Base_Start_IT+0xd8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_TIM_Base_Start_IT+0x80>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a18      	ldr	r2, [pc, #96]	@ (800440c <HAL_TIM_Base_Start_IT+0xdc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d111      	bne.n	80043d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b06      	cmp	r3, #6
 80043c0:	d010      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0201 	orr.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d2:	e007      	b.n	80043e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40010000 	.word	0x40010000
 80043f8:	40000400 	.word	0x40000400
 80043fc:	40000800 	.word	0x40000800
 8004400:	40000c00 	.word	0x40000c00
 8004404:	40010400 	.word	0x40010400
 8004408:	40014000 	.word	0x40014000
 800440c:	40001800 	.word	0x40001800

08004410 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d020      	beq.n	8004474 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01b      	beq.n	8004474 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0202 	mvn.w	r2, #2
 8004444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f8d2 	bl	8004604 <HAL_TIM_IC_CaptureCallback>
 8004460:	e005      	b.n	800446e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f8c4 	bl	80045f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f8d5 	bl	8004618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b00      	cmp	r3, #0
 800447c:	d020      	beq.n	80044c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01b      	beq.n	80044c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0204 	mvn.w	r2, #4
 8004490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2202      	movs	r2, #2
 8004496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f8ac 	bl	8004604 <HAL_TIM_IC_CaptureCallback>
 80044ac:	e005      	b.n	80044ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f89e 	bl	80045f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f8af 	bl	8004618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d020      	beq.n	800450c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01b      	beq.n	800450c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0208 	mvn.w	r2, #8
 80044dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2204      	movs	r2, #4
 80044e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f886 	bl	8004604 <HAL_TIM_IC_CaptureCallback>
 80044f8:	e005      	b.n	8004506 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f878 	bl	80045f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f889 	bl	8004618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	2b00      	cmp	r3, #0
 8004514:	d020      	beq.n	8004558 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01b      	beq.n	8004558 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0210 	mvn.w	r2, #16
 8004528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2208      	movs	r2, #8
 800452e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f860 	bl	8004604 <HAL_TIM_IC_CaptureCallback>
 8004544:	e005      	b.n	8004552 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f852 	bl	80045f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f863 	bl	8004618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00c      	beq.n	800457c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d007      	beq.n	800457c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0201 	mvn.w	r2, #1
 8004574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fc feb8 	bl	80012ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00c      	beq.n	80045a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800458c:	2b00      	cmp	r3, #0
 800458e:	d007      	beq.n	80045a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f906 	bl	80047ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00c      	beq.n	80045c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d007      	beq.n	80045c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f834 	bl	800462c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00c      	beq.n	80045e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d007      	beq.n	80045e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0220 	mvn.w	r2, #32
 80045e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f8d8 	bl	8004798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045e8:	bf00      	nop
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a46      	ldr	r2, [pc, #280]	@ (800476c <TIM_Base_SetConfig+0x12c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d013      	beq.n	8004680 <TIM_Base_SetConfig+0x40>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800465e:	d00f      	beq.n	8004680 <TIM_Base_SetConfig+0x40>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a43      	ldr	r2, [pc, #268]	@ (8004770 <TIM_Base_SetConfig+0x130>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00b      	beq.n	8004680 <TIM_Base_SetConfig+0x40>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a42      	ldr	r2, [pc, #264]	@ (8004774 <TIM_Base_SetConfig+0x134>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d007      	beq.n	8004680 <TIM_Base_SetConfig+0x40>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a41      	ldr	r2, [pc, #260]	@ (8004778 <TIM_Base_SetConfig+0x138>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d003      	beq.n	8004680 <TIM_Base_SetConfig+0x40>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a40      	ldr	r2, [pc, #256]	@ (800477c <TIM_Base_SetConfig+0x13c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d108      	bne.n	8004692 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a35      	ldr	r2, [pc, #212]	@ (800476c <TIM_Base_SetConfig+0x12c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d02b      	beq.n	80046f2 <TIM_Base_SetConfig+0xb2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a0:	d027      	beq.n	80046f2 <TIM_Base_SetConfig+0xb2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a32      	ldr	r2, [pc, #200]	@ (8004770 <TIM_Base_SetConfig+0x130>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d023      	beq.n	80046f2 <TIM_Base_SetConfig+0xb2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a31      	ldr	r2, [pc, #196]	@ (8004774 <TIM_Base_SetConfig+0x134>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d01f      	beq.n	80046f2 <TIM_Base_SetConfig+0xb2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a30      	ldr	r2, [pc, #192]	@ (8004778 <TIM_Base_SetConfig+0x138>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d01b      	beq.n	80046f2 <TIM_Base_SetConfig+0xb2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a2f      	ldr	r2, [pc, #188]	@ (800477c <TIM_Base_SetConfig+0x13c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d017      	beq.n	80046f2 <TIM_Base_SetConfig+0xb2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a2e      	ldr	r2, [pc, #184]	@ (8004780 <TIM_Base_SetConfig+0x140>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d013      	beq.n	80046f2 <TIM_Base_SetConfig+0xb2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a2d      	ldr	r2, [pc, #180]	@ (8004784 <TIM_Base_SetConfig+0x144>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00f      	beq.n	80046f2 <TIM_Base_SetConfig+0xb2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a2c      	ldr	r2, [pc, #176]	@ (8004788 <TIM_Base_SetConfig+0x148>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00b      	beq.n	80046f2 <TIM_Base_SetConfig+0xb2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a2b      	ldr	r2, [pc, #172]	@ (800478c <TIM_Base_SetConfig+0x14c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d007      	beq.n	80046f2 <TIM_Base_SetConfig+0xb2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004790 <TIM_Base_SetConfig+0x150>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d003      	beq.n	80046f2 <TIM_Base_SetConfig+0xb2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a29      	ldr	r2, [pc, #164]	@ (8004794 <TIM_Base_SetConfig+0x154>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d108      	bne.n	8004704 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a10      	ldr	r2, [pc, #64]	@ (800476c <TIM_Base_SetConfig+0x12c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d003      	beq.n	8004738 <TIM_Base_SetConfig+0xf8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a12      	ldr	r2, [pc, #72]	@ (800477c <TIM_Base_SetConfig+0x13c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d103      	bne.n	8004740 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b01      	cmp	r3, #1
 8004750:	d105      	bne.n	800475e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f023 0201 	bic.w	r2, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	611a      	str	r2, [r3, #16]
  }
}
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40010000 	.word	0x40010000
 8004770:	40000400 	.word	0x40000400
 8004774:	40000800 	.word	0x40000800
 8004778:	40000c00 	.word	0x40000c00
 800477c:	40010400 	.word	0x40010400
 8004780:	40014000 	.word	0x40014000
 8004784:	40014400 	.word	0x40014400
 8004788:	40014800 	.word	0x40014800
 800478c:	40001800 	.word	0x40001800
 8004790:	40001c00 	.word	0x40001c00
 8004794:	40002000 	.word	0x40002000

08004798 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e042      	b.n	8004858 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fc fe0c 	bl	8001404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2224      	movs	r2, #36	@ 0x24
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f973 	bl	8004af0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695a      	ldr	r2, [r3, #20]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08a      	sub	sp, #40	@ 0x28
 8004864:	af02      	add	r7, sp, #8
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	4613      	mov	r3, r2
 800486e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b20      	cmp	r3, #32
 800487e:	d175      	bne.n	800496c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_UART_Transmit+0x2c>
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e06e      	b.n	800496e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2221      	movs	r2, #33	@ 0x21
 800489a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800489e:	f7fd f939 	bl	8001b14 <HAL_GetTick>
 80048a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	88fa      	ldrh	r2, [r7, #6]
 80048a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	88fa      	ldrh	r2, [r7, #6]
 80048ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048b8:	d108      	bne.n	80048cc <HAL_UART_Transmit+0x6c>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d104      	bne.n	80048cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048c2:	2300      	movs	r3, #0
 80048c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	61bb      	str	r3, [r7, #24]
 80048ca:	e003      	b.n	80048d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048d4:	e02e      	b.n	8004934 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2200      	movs	r2, #0
 80048de:	2180      	movs	r1, #128	@ 0x80
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f848 	bl	8004976 <UART_WaitOnFlagUntilTimeout>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e03a      	b.n	800496e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10b      	bne.n	8004916 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800490c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	3302      	adds	r3, #2
 8004912:	61bb      	str	r3, [r7, #24]
 8004914:	e007      	b.n	8004926 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	781a      	ldrb	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	3301      	adds	r3, #1
 8004924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800492a:	b29b      	uxth	r3, r3
 800492c:	3b01      	subs	r3, #1
 800492e:	b29a      	uxth	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1cb      	bne.n	80048d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2200      	movs	r2, #0
 8004946:	2140      	movs	r1, #64	@ 0x40
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f814 	bl	8004976 <UART_WaitOnFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e006      	b.n	800496e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004968:	2300      	movs	r3, #0
 800496a:	e000      	b.n	800496e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800496c:	2302      	movs	r3, #2
  }
}
 800496e:	4618      	mov	r0, r3
 8004970:	3720      	adds	r7, #32
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b086      	sub	sp, #24
 800497a:	af00      	add	r7, sp, #0
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	603b      	str	r3, [r7, #0]
 8004982:	4613      	mov	r3, r2
 8004984:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004986:	e03b      	b.n	8004a00 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	d037      	beq.n	8004a00 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004990:	f7fd f8c0 	bl	8001b14 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	6a3a      	ldr	r2, [r7, #32]
 800499c:	429a      	cmp	r2, r3
 800499e:	d302      	bcc.n	80049a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e03a      	b.n	8004a20 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d023      	beq.n	8004a00 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b80      	cmp	r3, #128	@ 0x80
 80049bc:	d020      	beq.n	8004a00 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b40      	cmp	r3, #64	@ 0x40
 80049c2:	d01d      	beq.n	8004a00 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d116      	bne.n	8004a00 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 f81d 	bl	8004a28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2208      	movs	r2, #8
 80049f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e00f      	b.n	8004a20 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	bf0c      	ite	eq
 8004a10:	2301      	moveq	r3, #1
 8004a12:	2300      	movne	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	461a      	mov	r2, r3
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d0b4      	beq.n	8004988 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b095      	sub	sp, #84	@ 0x54
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a3a:	e853 3f00 	ldrex	r3, [r3]
 8004a3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a50:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e5      	bne.n	8004a30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3314      	adds	r3, #20
 8004a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	e853 3f00 	ldrex	r3, [r3]
 8004a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	f023 0301 	bic.w	r3, r3, #1
 8004a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3314      	adds	r3, #20
 8004a82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e5      	bne.n	8004a64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d119      	bne.n	8004ad4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	330c      	adds	r3, #12
 8004aa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	e853 3f00 	ldrex	r3, [r3]
 8004aae:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f023 0310 	bic.w	r3, r3, #16
 8004ab6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	330c      	adds	r3, #12
 8004abe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ac0:	61ba      	str	r2, [r7, #24]
 8004ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac4:	6979      	ldr	r1, [r7, #20]
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	e841 2300 	strex	r3, r2, [r1]
 8004acc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e5      	bne.n	8004aa0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ae2:	bf00      	nop
 8004ae4:	3754      	adds	r7, #84	@ 0x54
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
	...

08004af0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004af4:	b0c0      	sub	sp, #256	@ 0x100
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b0c:	68d9      	ldr	r1, [r3, #12]
 8004b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	ea40 0301 	orr.w	r3, r0, r1
 8004b18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b48:	f021 010c 	bic.w	r1, r1, #12
 8004b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b56:	430b      	orrs	r3, r1
 8004b58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6a:	6999      	ldr	r1, [r3, #24]
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	ea40 0301 	orr.w	r3, r0, r1
 8004b76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	4b8f      	ldr	r3, [pc, #572]	@ (8004dbc <UART_SetConfig+0x2cc>)
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d005      	beq.n	8004b90 <UART_SetConfig+0xa0>
 8004b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	4b8d      	ldr	r3, [pc, #564]	@ (8004dc0 <UART_SetConfig+0x2d0>)
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d104      	bne.n	8004b9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b90:	f7ff fb2e 	bl	80041f0 <HAL_RCC_GetPCLK2Freq>
 8004b94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b98:	e003      	b.n	8004ba2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b9a:	f7ff fb15 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 8004b9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bac:	f040 810c 	bne.w	8004dc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004bba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004bbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004bc2:	4622      	mov	r2, r4
 8004bc4:	462b      	mov	r3, r5
 8004bc6:	1891      	adds	r1, r2, r2
 8004bc8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004bca:	415b      	adcs	r3, r3
 8004bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	eb12 0801 	adds.w	r8, r2, r1
 8004bd8:	4629      	mov	r1, r5
 8004bda:	eb43 0901 	adc.w	r9, r3, r1
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	f04f 0300 	mov.w	r3, #0
 8004be6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bf2:	4690      	mov	r8, r2
 8004bf4:	4699      	mov	r9, r3
 8004bf6:	4623      	mov	r3, r4
 8004bf8:	eb18 0303 	adds.w	r3, r8, r3
 8004bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c00:	462b      	mov	r3, r5
 8004c02:	eb49 0303 	adc.w	r3, r9, r3
 8004c06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c1e:	460b      	mov	r3, r1
 8004c20:	18db      	adds	r3, r3, r3
 8004c22:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c24:	4613      	mov	r3, r2
 8004c26:	eb42 0303 	adc.w	r3, r2, r3
 8004c2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c34:	f7fc f838 	bl	8000ca8 <__aeabi_uldivmod>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4b61      	ldr	r3, [pc, #388]	@ (8004dc4 <UART_SetConfig+0x2d4>)
 8004c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	011c      	lsls	r4, r3, #4
 8004c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c58:	4642      	mov	r2, r8
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	1891      	adds	r1, r2, r2
 8004c5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c60:	415b      	adcs	r3, r3
 8004c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c68:	4641      	mov	r1, r8
 8004c6a:	eb12 0a01 	adds.w	sl, r2, r1
 8004c6e:	4649      	mov	r1, r9
 8004c70:	eb43 0b01 	adc.w	fp, r3, r1
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c88:	4692      	mov	sl, r2
 8004c8a:	469b      	mov	fp, r3
 8004c8c:	4643      	mov	r3, r8
 8004c8e:	eb1a 0303 	adds.w	r3, sl, r3
 8004c92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c96:	464b      	mov	r3, r9
 8004c98:	eb4b 0303 	adc.w	r3, fp, r3
 8004c9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004cb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	18db      	adds	r3, r3, r3
 8004cb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cba:	4613      	mov	r3, r2
 8004cbc:	eb42 0303 	adc.w	r3, r2, r3
 8004cc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004cc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004cca:	f7fb ffed 	bl	8000ca8 <__aeabi_uldivmod>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8004dc4 <UART_SetConfig+0x2d4>)
 8004cd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	2264      	movs	r2, #100	@ 0x64
 8004cde:	fb02 f303 	mul.w	r3, r2, r3
 8004ce2:	1acb      	subs	r3, r1, r3
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004cea:	4b36      	ldr	r3, [pc, #216]	@ (8004dc4 <UART_SetConfig+0x2d4>)
 8004cec:	fba3 2302 	umull	r2, r3, r3, r2
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004cf8:	441c      	add	r4, r3
 8004cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d0c:	4642      	mov	r2, r8
 8004d0e:	464b      	mov	r3, r9
 8004d10:	1891      	adds	r1, r2, r2
 8004d12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d14:	415b      	adcs	r3, r3
 8004d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d1c:	4641      	mov	r1, r8
 8004d1e:	1851      	adds	r1, r2, r1
 8004d20:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d22:	4649      	mov	r1, r9
 8004d24:	414b      	adcs	r3, r1
 8004d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d34:	4659      	mov	r1, fp
 8004d36:	00cb      	lsls	r3, r1, #3
 8004d38:	4651      	mov	r1, sl
 8004d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d3e:	4651      	mov	r1, sl
 8004d40:	00ca      	lsls	r2, r1, #3
 8004d42:	4610      	mov	r0, r2
 8004d44:	4619      	mov	r1, r3
 8004d46:	4603      	mov	r3, r0
 8004d48:	4642      	mov	r2, r8
 8004d4a:	189b      	adds	r3, r3, r2
 8004d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d50:	464b      	mov	r3, r9
 8004d52:	460a      	mov	r2, r1
 8004d54:	eb42 0303 	adc.w	r3, r2, r3
 8004d58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d70:	460b      	mov	r3, r1
 8004d72:	18db      	adds	r3, r3, r3
 8004d74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d76:	4613      	mov	r3, r2
 8004d78:	eb42 0303 	adc.w	r3, r2, r3
 8004d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d86:	f7fb ff8f 	bl	8000ca8 <__aeabi_uldivmod>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc4 <UART_SetConfig+0x2d4>)
 8004d90:	fba3 1302 	umull	r1, r3, r3, r2
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	2164      	movs	r1, #100	@ 0x64
 8004d98:	fb01 f303 	mul.w	r3, r1, r3
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	3332      	adds	r3, #50	@ 0x32
 8004da2:	4a08      	ldr	r2, [pc, #32]	@ (8004dc4 <UART_SetConfig+0x2d4>)
 8004da4:	fba2 2303 	umull	r2, r3, r2, r3
 8004da8:	095b      	lsrs	r3, r3, #5
 8004daa:	f003 0207 	and.w	r2, r3, #7
 8004dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4422      	add	r2, r4
 8004db6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004db8:	e106      	b.n	8004fc8 <UART_SetConfig+0x4d8>
 8004dba:	bf00      	nop
 8004dbc:	40011000 	.word	0x40011000
 8004dc0:	40011400 	.word	0x40011400
 8004dc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004dd2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004dd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004dda:	4642      	mov	r2, r8
 8004ddc:	464b      	mov	r3, r9
 8004dde:	1891      	adds	r1, r2, r2
 8004de0:	6239      	str	r1, [r7, #32]
 8004de2:	415b      	adcs	r3, r3
 8004de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004de6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dea:	4641      	mov	r1, r8
 8004dec:	1854      	adds	r4, r2, r1
 8004dee:	4649      	mov	r1, r9
 8004df0:	eb43 0501 	adc.w	r5, r3, r1
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	00eb      	lsls	r3, r5, #3
 8004dfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e02:	00e2      	lsls	r2, r4, #3
 8004e04:	4614      	mov	r4, r2
 8004e06:	461d      	mov	r5, r3
 8004e08:	4643      	mov	r3, r8
 8004e0a:	18e3      	adds	r3, r4, r3
 8004e0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e10:	464b      	mov	r3, r9
 8004e12:	eb45 0303 	adc.w	r3, r5, r3
 8004e16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e36:	4629      	mov	r1, r5
 8004e38:	008b      	lsls	r3, r1, #2
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e40:	4621      	mov	r1, r4
 8004e42:	008a      	lsls	r2, r1, #2
 8004e44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e48:	f7fb ff2e 	bl	8000ca8 <__aeabi_uldivmod>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4b60      	ldr	r3, [pc, #384]	@ (8004fd4 <UART_SetConfig+0x4e4>)
 8004e52:	fba3 2302 	umull	r2, r3, r3, r2
 8004e56:	095b      	lsrs	r3, r3, #5
 8004e58:	011c      	lsls	r4, r3, #4
 8004e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e6c:	4642      	mov	r2, r8
 8004e6e:	464b      	mov	r3, r9
 8004e70:	1891      	adds	r1, r2, r2
 8004e72:	61b9      	str	r1, [r7, #24]
 8004e74:	415b      	adcs	r3, r3
 8004e76:	61fb      	str	r3, [r7, #28]
 8004e78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e7c:	4641      	mov	r1, r8
 8004e7e:	1851      	adds	r1, r2, r1
 8004e80:	6139      	str	r1, [r7, #16]
 8004e82:	4649      	mov	r1, r9
 8004e84:	414b      	adcs	r3, r1
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e94:	4659      	mov	r1, fp
 8004e96:	00cb      	lsls	r3, r1, #3
 8004e98:	4651      	mov	r1, sl
 8004e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e9e:	4651      	mov	r1, sl
 8004ea0:	00ca      	lsls	r2, r1, #3
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	4642      	mov	r2, r8
 8004eaa:	189b      	adds	r3, r3, r2
 8004eac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004eb0:	464b      	mov	r3, r9
 8004eb2:	460a      	mov	r2, r1
 8004eb4:	eb42 0303 	adc.w	r3, r2, r3
 8004eb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ec6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ed4:	4649      	mov	r1, r9
 8004ed6:	008b      	lsls	r3, r1, #2
 8004ed8:	4641      	mov	r1, r8
 8004eda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ede:	4641      	mov	r1, r8
 8004ee0:	008a      	lsls	r2, r1, #2
 8004ee2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ee6:	f7fb fedf 	bl	8000ca8 <__aeabi_uldivmod>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4611      	mov	r1, r2
 8004ef0:	4b38      	ldr	r3, [pc, #224]	@ (8004fd4 <UART_SetConfig+0x4e4>)
 8004ef2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	2264      	movs	r2, #100	@ 0x64
 8004efa:	fb02 f303 	mul.w	r3, r2, r3
 8004efe:	1acb      	subs	r3, r1, r3
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	3332      	adds	r3, #50	@ 0x32
 8004f04:	4a33      	ldr	r2, [pc, #204]	@ (8004fd4 <UART_SetConfig+0x4e4>)
 8004f06:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f10:	441c      	add	r4, r3
 8004f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f16:	2200      	movs	r2, #0
 8004f18:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f20:	4642      	mov	r2, r8
 8004f22:	464b      	mov	r3, r9
 8004f24:	1891      	adds	r1, r2, r2
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	415b      	adcs	r3, r3
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f30:	4641      	mov	r1, r8
 8004f32:	1851      	adds	r1, r2, r1
 8004f34:	6039      	str	r1, [r7, #0]
 8004f36:	4649      	mov	r1, r9
 8004f38:	414b      	adcs	r3, r1
 8004f3a:	607b      	str	r3, [r7, #4]
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	f04f 0300 	mov.w	r3, #0
 8004f44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f48:	4659      	mov	r1, fp
 8004f4a:	00cb      	lsls	r3, r1, #3
 8004f4c:	4651      	mov	r1, sl
 8004f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f52:	4651      	mov	r1, sl
 8004f54:	00ca      	lsls	r2, r1, #3
 8004f56:	4610      	mov	r0, r2
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	4642      	mov	r2, r8
 8004f5e:	189b      	adds	r3, r3, r2
 8004f60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f62:	464b      	mov	r3, r9
 8004f64:	460a      	mov	r2, r1
 8004f66:	eb42 0303 	adc.w	r3, r2, r3
 8004f6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f76:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f84:	4649      	mov	r1, r9
 8004f86:	008b      	lsls	r3, r1, #2
 8004f88:	4641      	mov	r1, r8
 8004f8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f8e:	4641      	mov	r1, r8
 8004f90:	008a      	lsls	r2, r1, #2
 8004f92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f96:	f7fb fe87 	bl	8000ca8 <__aeabi_uldivmod>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd4 <UART_SetConfig+0x4e4>)
 8004fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	2164      	movs	r1, #100	@ 0x64
 8004fa8:	fb01 f303 	mul.w	r3, r1, r3
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	3332      	adds	r3, #50	@ 0x32
 8004fb2:	4a08      	ldr	r2, [pc, #32]	@ (8004fd4 <UART_SetConfig+0x4e4>)
 8004fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb8:	095b      	lsrs	r3, r3, #5
 8004fba:	f003 020f 	and.w	r2, r3, #15
 8004fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4422      	add	r2, r4
 8004fc6:	609a      	str	r2, [r3, #8]
}
 8004fc8:	bf00      	nop
 8004fca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fd4:	51eb851f 	.word	0x51eb851f

08004fd8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 172;
 8004fde:	4b92      	ldr	r3, [pc, #584]	@ (8005228 <MX_LWIP_Init+0x250>)
 8004fe0:	22ac      	movs	r2, #172	@ 0xac
 8004fe2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 16;
 8004fe4:	4b90      	ldr	r3, [pc, #576]	@ (8005228 <MX_LWIP_Init+0x250>)
 8004fe6:	2210      	movs	r2, #16
 8004fe8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 20;
 8004fea:	4b8f      	ldr	r3, [pc, #572]	@ (8005228 <MX_LWIP_Init+0x250>)
 8004fec:	2214      	movs	r2, #20
 8004fee:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 39;
 8004ff0:	4b8d      	ldr	r3, [pc, #564]	@ (8005228 <MX_LWIP_Init+0x250>)
 8004ff2:	2227      	movs	r2, #39	@ 0x27
 8004ff4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004ff6:	4b8d      	ldr	r3, [pc, #564]	@ (800522c <MX_LWIP_Init+0x254>)
 8004ff8:	22ff      	movs	r2, #255	@ 0xff
 8004ffa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004ffc:	4b8b      	ldr	r3, [pc, #556]	@ (800522c <MX_LWIP_Init+0x254>)
 8004ffe:	22ff      	movs	r2, #255	@ 0xff
 8005000:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005002:	4b8a      	ldr	r3, [pc, #552]	@ (800522c <MX_LWIP_Init+0x254>)
 8005004:	22ff      	movs	r2, #255	@ 0xff
 8005006:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005008:	4b88      	ldr	r3, [pc, #544]	@ (800522c <MX_LWIP_Init+0x254>)
 800500a:	2200      	movs	r2, #0
 800500c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 172;
 800500e:	4b88      	ldr	r3, [pc, #544]	@ (8005230 <MX_LWIP_Init+0x258>)
 8005010:	22ac      	movs	r2, #172	@ 0xac
 8005012:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 16;
 8005014:	4b86      	ldr	r3, [pc, #536]	@ (8005230 <MX_LWIP_Init+0x258>)
 8005016:	2210      	movs	r2, #16
 8005018:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 20;
 800501a:	4b85      	ldr	r3, [pc, #532]	@ (8005230 <MX_LWIP_Init+0x258>)
 800501c:	2214      	movs	r2, #20
 800501e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005020:	4b83      	ldr	r3, [pc, #524]	@ (8005230 <MX_LWIP_Init+0x258>)
 8005022:	2201      	movs	r2, #1
 8005024:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005026:	2100      	movs	r1, #0
 8005028:	2000      	movs	r0, #0
 800502a:	f008 fce1 	bl	800d9f0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800502e:	4b7e      	ldr	r3, [pc, #504]	@ (8005228 <MX_LWIP_Init+0x250>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	061a      	lsls	r2, r3, #24
 8005034:	4b7c      	ldr	r3, [pc, #496]	@ (8005228 <MX_LWIP_Init+0x250>)
 8005036:	785b      	ldrb	r3, [r3, #1]
 8005038:	041b      	lsls	r3, r3, #16
 800503a:	431a      	orrs	r2, r3
 800503c:	4b7a      	ldr	r3, [pc, #488]	@ (8005228 <MX_LWIP_Init+0x250>)
 800503e:	789b      	ldrb	r3, [r3, #2]
 8005040:	021b      	lsls	r3, r3, #8
 8005042:	4313      	orrs	r3, r2
 8005044:	4a78      	ldr	r2, [pc, #480]	@ (8005228 <MX_LWIP_Init+0x250>)
 8005046:	78d2      	ldrb	r2, [r2, #3]
 8005048:	4313      	orrs	r3, r2
 800504a:	061a      	lsls	r2, r3, #24
 800504c:	4b76      	ldr	r3, [pc, #472]	@ (8005228 <MX_LWIP_Init+0x250>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	0619      	lsls	r1, r3, #24
 8005052:	4b75      	ldr	r3, [pc, #468]	@ (8005228 <MX_LWIP_Init+0x250>)
 8005054:	785b      	ldrb	r3, [r3, #1]
 8005056:	041b      	lsls	r3, r3, #16
 8005058:	4319      	orrs	r1, r3
 800505a:	4b73      	ldr	r3, [pc, #460]	@ (8005228 <MX_LWIP_Init+0x250>)
 800505c:	789b      	ldrb	r3, [r3, #2]
 800505e:	021b      	lsls	r3, r3, #8
 8005060:	430b      	orrs	r3, r1
 8005062:	4971      	ldr	r1, [pc, #452]	@ (8005228 <MX_LWIP_Init+0x250>)
 8005064:	78c9      	ldrb	r1, [r1, #3]
 8005066:	430b      	orrs	r3, r1
 8005068:	021b      	lsls	r3, r3, #8
 800506a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800506e:	431a      	orrs	r2, r3
 8005070:	4b6d      	ldr	r3, [pc, #436]	@ (8005228 <MX_LWIP_Init+0x250>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	0619      	lsls	r1, r3, #24
 8005076:	4b6c      	ldr	r3, [pc, #432]	@ (8005228 <MX_LWIP_Init+0x250>)
 8005078:	785b      	ldrb	r3, [r3, #1]
 800507a:	041b      	lsls	r3, r3, #16
 800507c:	4319      	orrs	r1, r3
 800507e:	4b6a      	ldr	r3, [pc, #424]	@ (8005228 <MX_LWIP_Init+0x250>)
 8005080:	789b      	ldrb	r3, [r3, #2]
 8005082:	021b      	lsls	r3, r3, #8
 8005084:	430b      	orrs	r3, r1
 8005086:	4968      	ldr	r1, [pc, #416]	@ (8005228 <MX_LWIP_Init+0x250>)
 8005088:	78c9      	ldrb	r1, [r1, #3]
 800508a:	430b      	orrs	r3, r1
 800508c:	0a1b      	lsrs	r3, r3, #8
 800508e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005092:	431a      	orrs	r2, r3
 8005094:	4b64      	ldr	r3, [pc, #400]	@ (8005228 <MX_LWIP_Init+0x250>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	0619      	lsls	r1, r3, #24
 800509a:	4b63      	ldr	r3, [pc, #396]	@ (8005228 <MX_LWIP_Init+0x250>)
 800509c:	785b      	ldrb	r3, [r3, #1]
 800509e:	041b      	lsls	r3, r3, #16
 80050a0:	4319      	orrs	r1, r3
 80050a2:	4b61      	ldr	r3, [pc, #388]	@ (8005228 <MX_LWIP_Init+0x250>)
 80050a4:	789b      	ldrb	r3, [r3, #2]
 80050a6:	021b      	lsls	r3, r3, #8
 80050a8:	430b      	orrs	r3, r1
 80050aa:	495f      	ldr	r1, [pc, #380]	@ (8005228 <MX_LWIP_Init+0x250>)
 80050ac:	78c9      	ldrb	r1, [r1, #3]
 80050ae:	430b      	orrs	r3, r1
 80050b0:	0e1b      	lsrs	r3, r3, #24
 80050b2:	4313      	orrs	r3, r2
 80050b4:	4a5f      	ldr	r2, [pc, #380]	@ (8005234 <MX_LWIP_Init+0x25c>)
 80050b6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80050b8:	4b5c      	ldr	r3, [pc, #368]	@ (800522c <MX_LWIP_Init+0x254>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	061a      	lsls	r2, r3, #24
 80050be:	4b5b      	ldr	r3, [pc, #364]	@ (800522c <MX_LWIP_Init+0x254>)
 80050c0:	785b      	ldrb	r3, [r3, #1]
 80050c2:	041b      	lsls	r3, r3, #16
 80050c4:	431a      	orrs	r2, r3
 80050c6:	4b59      	ldr	r3, [pc, #356]	@ (800522c <MX_LWIP_Init+0x254>)
 80050c8:	789b      	ldrb	r3, [r3, #2]
 80050ca:	021b      	lsls	r3, r3, #8
 80050cc:	4313      	orrs	r3, r2
 80050ce:	4a57      	ldr	r2, [pc, #348]	@ (800522c <MX_LWIP_Init+0x254>)
 80050d0:	78d2      	ldrb	r2, [r2, #3]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	061a      	lsls	r2, r3, #24
 80050d6:	4b55      	ldr	r3, [pc, #340]	@ (800522c <MX_LWIP_Init+0x254>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	0619      	lsls	r1, r3, #24
 80050dc:	4b53      	ldr	r3, [pc, #332]	@ (800522c <MX_LWIP_Init+0x254>)
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	041b      	lsls	r3, r3, #16
 80050e2:	4319      	orrs	r1, r3
 80050e4:	4b51      	ldr	r3, [pc, #324]	@ (800522c <MX_LWIP_Init+0x254>)
 80050e6:	789b      	ldrb	r3, [r3, #2]
 80050e8:	021b      	lsls	r3, r3, #8
 80050ea:	430b      	orrs	r3, r1
 80050ec:	494f      	ldr	r1, [pc, #316]	@ (800522c <MX_LWIP_Init+0x254>)
 80050ee:	78c9      	ldrb	r1, [r1, #3]
 80050f0:	430b      	orrs	r3, r1
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80050f8:	431a      	orrs	r2, r3
 80050fa:	4b4c      	ldr	r3, [pc, #304]	@ (800522c <MX_LWIP_Init+0x254>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	0619      	lsls	r1, r3, #24
 8005100:	4b4a      	ldr	r3, [pc, #296]	@ (800522c <MX_LWIP_Init+0x254>)
 8005102:	785b      	ldrb	r3, [r3, #1]
 8005104:	041b      	lsls	r3, r3, #16
 8005106:	4319      	orrs	r1, r3
 8005108:	4b48      	ldr	r3, [pc, #288]	@ (800522c <MX_LWIP_Init+0x254>)
 800510a:	789b      	ldrb	r3, [r3, #2]
 800510c:	021b      	lsls	r3, r3, #8
 800510e:	430b      	orrs	r3, r1
 8005110:	4946      	ldr	r1, [pc, #280]	@ (800522c <MX_LWIP_Init+0x254>)
 8005112:	78c9      	ldrb	r1, [r1, #3]
 8005114:	430b      	orrs	r3, r1
 8005116:	0a1b      	lsrs	r3, r3, #8
 8005118:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800511c:	431a      	orrs	r2, r3
 800511e:	4b43      	ldr	r3, [pc, #268]	@ (800522c <MX_LWIP_Init+0x254>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	0619      	lsls	r1, r3, #24
 8005124:	4b41      	ldr	r3, [pc, #260]	@ (800522c <MX_LWIP_Init+0x254>)
 8005126:	785b      	ldrb	r3, [r3, #1]
 8005128:	041b      	lsls	r3, r3, #16
 800512a:	4319      	orrs	r1, r3
 800512c:	4b3f      	ldr	r3, [pc, #252]	@ (800522c <MX_LWIP_Init+0x254>)
 800512e:	789b      	ldrb	r3, [r3, #2]
 8005130:	021b      	lsls	r3, r3, #8
 8005132:	430b      	orrs	r3, r1
 8005134:	493d      	ldr	r1, [pc, #244]	@ (800522c <MX_LWIP_Init+0x254>)
 8005136:	78c9      	ldrb	r1, [r1, #3]
 8005138:	430b      	orrs	r3, r1
 800513a:	0e1b      	lsrs	r3, r3, #24
 800513c:	4313      	orrs	r3, r2
 800513e:	4a3e      	ldr	r2, [pc, #248]	@ (8005238 <MX_LWIP_Init+0x260>)
 8005140:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005142:	4b3b      	ldr	r3, [pc, #236]	@ (8005230 <MX_LWIP_Init+0x258>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	061a      	lsls	r2, r3, #24
 8005148:	4b39      	ldr	r3, [pc, #228]	@ (8005230 <MX_LWIP_Init+0x258>)
 800514a:	785b      	ldrb	r3, [r3, #1]
 800514c:	041b      	lsls	r3, r3, #16
 800514e:	431a      	orrs	r2, r3
 8005150:	4b37      	ldr	r3, [pc, #220]	@ (8005230 <MX_LWIP_Init+0x258>)
 8005152:	789b      	ldrb	r3, [r3, #2]
 8005154:	021b      	lsls	r3, r3, #8
 8005156:	4313      	orrs	r3, r2
 8005158:	4a35      	ldr	r2, [pc, #212]	@ (8005230 <MX_LWIP_Init+0x258>)
 800515a:	78d2      	ldrb	r2, [r2, #3]
 800515c:	4313      	orrs	r3, r2
 800515e:	061a      	lsls	r2, r3, #24
 8005160:	4b33      	ldr	r3, [pc, #204]	@ (8005230 <MX_LWIP_Init+0x258>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	0619      	lsls	r1, r3, #24
 8005166:	4b32      	ldr	r3, [pc, #200]	@ (8005230 <MX_LWIP_Init+0x258>)
 8005168:	785b      	ldrb	r3, [r3, #1]
 800516a:	041b      	lsls	r3, r3, #16
 800516c:	4319      	orrs	r1, r3
 800516e:	4b30      	ldr	r3, [pc, #192]	@ (8005230 <MX_LWIP_Init+0x258>)
 8005170:	789b      	ldrb	r3, [r3, #2]
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	430b      	orrs	r3, r1
 8005176:	492e      	ldr	r1, [pc, #184]	@ (8005230 <MX_LWIP_Init+0x258>)
 8005178:	78c9      	ldrb	r1, [r1, #3]
 800517a:	430b      	orrs	r3, r1
 800517c:	021b      	lsls	r3, r3, #8
 800517e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005182:	431a      	orrs	r2, r3
 8005184:	4b2a      	ldr	r3, [pc, #168]	@ (8005230 <MX_LWIP_Init+0x258>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	0619      	lsls	r1, r3, #24
 800518a:	4b29      	ldr	r3, [pc, #164]	@ (8005230 <MX_LWIP_Init+0x258>)
 800518c:	785b      	ldrb	r3, [r3, #1]
 800518e:	041b      	lsls	r3, r3, #16
 8005190:	4319      	orrs	r1, r3
 8005192:	4b27      	ldr	r3, [pc, #156]	@ (8005230 <MX_LWIP_Init+0x258>)
 8005194:	789b      	ldrb	r3, [r3, #2]
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	430b      	orrs	r3, r1
 800519a:	4925      	ldr	r1, [pc, #148]	@ (8005230 <MX_LWIP_Init+0x258>)
 800519c:	78c9      	ldrb	r1, [r1, #3]
 800519e:	430b      	orrs	r3, r1
 80051a0:	0a1b      	lsrs	r3, r3, #8
 80051a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80051a6:	431a      	orrs	r2, r3
 80051a8:	4b21      	ldr	r3, [pc, #132]	@ (8005230 <MX_LWIP_Init+0x258>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	0619      	lsls	r1, r3, #24
 80051ae:	4b20      	ldr	r3, [pc, #128]	@ (8005230 <MX_LWIP_Init+0x258>)
 80051b0:	785b      	ldrb	r3, [r3, #1]
 80051b2:	041b      	lsls	r3, r3, #16
 80051b4:	4319      	orrs	r1, r3
 80051b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005230 <MX_LWIP_Init+0x258>)
 80051b8:	789b      	ldrb	r3, [r3, #2]
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	430b      	orrs	r3, r1
 80051be:	491c      	ldr	r1, [pc, #112]	@ (8005230 <MX_LWIP_Init+0x258>)
 80051c0:	78c9      	ldrb	r1, [r1, #3]
 80051c2:	430b      	orrs	r3, r1
 80051c4:	0e1b      	lsrs	r3, r3, #24
 80051c6:	4313      	orrs	r3, r2
 80051c8:	4a1c      	ldr	r2, [pc, #112]	@ (800523c <MX_LWIP_Init+0x264>)
 80051ca:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80051cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005240 <MX_LWIP_Init+0x268>)
 80051ce:	9302      	str	r3, [sp, #8]
 80051d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005244 <MX_LWIP_Init+0x26c>)
 80051d2:	9301      	str	r3, [sp, #4]
 80051d4:	2300      	movs	r3, #0
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	4b18      	ldr	r3, [pc, #96]	@ (800523c <MX_LWIP_Init+0x264>)
 80051da:	4a17      	ldr	r2, [pc, #92]	@ (8005238 <MX_LWIP_Init+0x260>)
 80051dc:	4915      	ldr	r1, [pc, #84]	@ (8005234 <MX_LWIP_Init+0x25c>)
 80051de:	481a      	ldr	r0, [pc, #104]	@ (8005248 <MX_LWIP_Init+0x270>)
 80051e0:	f009 f9d0 	bl	800e584 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80051e4:	4818      	ldr	r0, [pc, #96]	@ (8005248 <MX_LWIP_Init+0x270>)
 80051e6:	f009 fb7f 	bl	800e8e8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80051ea:	4817      	ldr	r0, [pc, #92]	@ (8005248 <MX_LWIP_Init+0x270>)
 80051ec:	f009 fb8c 	bl	800e908 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80051f0:	4916      	ldr	r1, [pc, #88]	@ (800524c <MX_LWIP_Init+0x274>)
 80051f2:	4815      	ldr	r0, [pc, #84]	@ (8005248 <MX_LWIP_Init+0x270>)
 80051f4:	f009 fc8a 	bl	800eb0c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80051f8:	2224      	movs	r2, #36	@ 0x24
 80051fa:	2100      	movs	r1, #0
 80051fc:	4814      	ldr	r0, [pc, #80]	@ (8005250 <MX_LWIP_Init+0x278>)
 80051fe:	f015 fa81 	bl	801a704 <memset>
  attributes.name = "EthLink";
 8005202:	4b13      	ldr	r3, [pc, #76]	@ (8005250 <MX_LWIP_Init+0x278>)
 8005204:	4a13      	ldr	r2, [pc, #76]	@ (8005254 <MX_LWIP_Init+0x27c>)
 8005206:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005208:	4b11      	ldr	r3, [pc, #68]	@ (8005250 <MX_LWIP_Init+0x278>)
 800520a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800520e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8005210:	4b0f      	ldr	r3, [pc, #60]	@ (8005250 <MX_LWIP_Init+0x278>)
 8005212:	2210      	movs	r2, #16
 8005214:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8005216:	4a0e      	ldr	r2, [pc, #56]	@ (8005250 <MX_LWIP_Init+0x278>)
 8005218:	490b      	ldr	r1, [pc, #44]	@ (8005248 <MX_LWIP_Init+0x270>)
 800521a:	480f      	ldr	r0, [pc, #60]	@ (8005258 <MX_LWIP_Init+0x280>)
 800521c:	f000 fd9d 	bl	8005d5a <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005220:	bf00      	nop
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20000344 	.word	0x20000344
 800522c:	20000348 	.word	0x20000348
 8005230:	2000034c 	.word	0x2000034c
 8005234:	20000338 	.word	0x20000338
 8005238:	2000033c 	.word	0x2000033c
 800523c:	20000340 	.word	0x20000340
 8005240:	0800d901 	.word	0x0800d901
 8005244:	0800571d 	.word	0x0800571d
 8005248:	20000304 	.word	0x20000304
 800524c:	0800525d 	.word	0x0800525d
 8005250:	20000350 	.word	0x20000350
 8005254:	0801dbd8 	.word	0x0801dbd8
 8005258:	08005a01 	.word	0x08005a01

0800525c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005278:	4b04      	ldr	r3, [pc, #16]	@ (800528c <HAL_ETH_RxCpltCallback+0x1c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f001 f803 	bl	8006288 <osSemaphoreRelease>
}
 8005282:	bf00      	nop
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20004e40 	.word	0x20004e40

08005290 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005298:	4b04      	ldr	r3, [pc, #16]	@ (80052ac <HAL_ETH_TxCpltCallback+0x1c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fff3 	bl	8006288 <osSemaphoreRelease>
}
 80052a2:	bf00      	nop
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20004e44 	.word	0x20004e44

080052b0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7fd fb87 	bl	80029cc <HAL_ETH_GetDMAError>
 80052be:	4603      	mov	r3, r0
 80052c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c4:	2b80      	cmp	r3, #128	@ 0x80
 80052c6:	d104      	bne.n	80052d2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80052c8:	4b04      	ldr	r3, [pc, #16]	@ (80052dc <HAL_ETH_ErrorCallback+0x2c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 ffdb 	bl	8006288 <osSemaphoreRelease>
  }
}
 80052d2:	bf00      	nop
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20004e40 	.word	0x20004e40

080052e0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b0aa      	sub	sp, #168	@ 0xa8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 80052fa:	f107 0310 	add.w	r3, r7, #16
 80052fe:	2264      	movs	r2, #100	@ 0x64
 8005300:	2100      	movs	r1, #0
 8005302:	4618      	mov	r0, r3
 8005304:	f015 f9fe 	bl	801a704 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005308:	4b89      	ldr	r3, [pc, #548]	@ (8005530 <low_level_init+0x250>)
 800530a:	4a8a      	ldr	r2, [pc, #552]	@ (8005534 <low_level_init+0x254>)
 800530c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800530e:	2300      	movs	r3, #0
 8005310:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005312:	2380      	movs	r3, #128	@ 0x80
 8005314:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005316:	23e1      	movs	r3, #225	@ 0xe1
 8005318:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800531a:	2300      	movs	r3, #0
 800531c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800531e:	2300      	movs	r3, #0
 8005320:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005322:	2300      	movs	r3, #0
 8005324:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005326:	4a82      	ldr	r2, [pc, #520]	@ (8005530 <low_level_init+0x250>)
 8005328:	f107 0308 	add.w	r3, r7, #8
 800532c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800532e:	4b80      	ldr	r3, [pc, #512]	@ (8005530 <low_level_init+0x250>)
 8005330:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005334:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005336:	4b7e      	ldr	r3, [pc, #504]	@ (8005530 <low_level_init+0x250>)
 8005338:	4a7f      	ldr	r2, [pc, #508]	@ (8005538 <low_level_init+0x258>)
 800533a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800533c:	4b7c      	ldr	r3, [pc, #496]	@ (8005530 <low_level_init+0x250>)
 800533e:	4a7f      	ldr	r2, [pc, #508]	@ (800553c <low_level_init+0x25c>)
 8005340:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005342:	4b7b      	ldr	r3, [pc, #492]	@ (8005530 <low_level_init+0x250>)
 8005344:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005348:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800534a:	4879      	ldr	r0, [pc, #484]	@ (8005530 <low_level_init+0x250>)
 800534c:	f7fc fcf4 	bl	8001d38 <HAL_ETH_Init>
 8005350:	4603      	mov	r3, r0
 8005352:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005356:	2238      	movs	r2, #56	@ 0x38
 8005358:	2100      	movs	r1, #0
 800535a:	4879      	ldr	r0, [pc, #484]	@ (8005540 <low_level_init+0x260>)
 800535c:	f015 f9d2 	bl	801a704 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005360:	4b77      	ldr	r3, [pc, #476]	@ (8005540 <low_level_init+0x260>)
 8005362:	2221      	movs	r2, #33	@ 0x21
 8005364:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005366:	4b76      	ldr	r3, [pc, #472]	@ (8005540 <low_level_init+0x260>)
 8005368:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800536c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800536e:	4b74      	ldr	r3, [pc, #464]	@ (8005540 <low_level_init+0x260>)
 8005370:	2200      	movs	r2, #0
 8005372:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005374:	4873      	ldr	r0, [pc, #460]	@ (8005544 <low_level_init+0x264>)
 8005376:	f008 ffbf 	bl	800e2f8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2206      	movs	r2, #6
 800537e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005382:	4b6b      	ldr	r3, [pc, #428]	@ (8005530 <low_level_init+0x250>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	781a      	ldrb	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800538e:	4b68      	ldr	r3, [pc, #416]	@ (8005530 <low_level_init+0x250>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	785a      	ldrb	r2, [r3, #1]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800539a:	4b65      	ldr	r3, [pc, #404]	@ (8005530 <low_level_init+0x250>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	789a      	ldrb	r2, [r3, #2]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80053a6:	4b62      	ldr	r3, [pc, #392]	@ (8005530 <low_level_init+0x250>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	78da      	ldrb	r2, [r3, #3]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80053b2:	4b5f      	ldr	r3, [pc, #380]	@ (8005530 <low_level_init+0x250>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	791a      	ldrb	r2, [r3, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80053be:	4b5c      	ldr	r3, [pc, #368]	@ (8005530 <low_level_init+0x250>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	795a      	ldrb	r2, [r3, #5]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80053d0:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80053d8:	f043 030a 	orr.w	r3, r3, #10
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80053e4:	2200      	movs	r2, #0
 80053e6:	2100      	movs	r1, #0
 80053e8:	2001      	movs	r0, #1
 80053ea:	f000 fe71 	bl	80060d0 <osSemaphoreNew>
 80053ee:	4603      	mov	r3, r0
 80053f0:	4a55      	ldr	r2, [pc, #340]	@ (8005548 <low_level_init+0x268>)
 80053f2:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80053f4:	2200      	movs	r2, #0
 80053f6:	2100      	movs	r1, #0
 80053f8:	2001      	movs	r0, #1
 80053fa:	f000 fe69 	bl	80060d0 <osSemaphoreNew>
 80053fe:	4603      	mov	r3, r0
 8005400:	4a52      	ldr	r2, [pc, #328]	@ (800554c <low_level_init+0x26c>)
 8005402:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005404:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8005408:	2224      	movs	r2, #36	@ 0x24
 800540a:	2100      	movs	r1, #0
 800540c:	4618      	mov	r0, r3
 800540e:	f015 f979 	bl	801a704 <memset>
  attributes.name = "EthIf";
 8005412:	4b4f      	ldr	r3, [pc, #316]	@ (8005550 <low_level_init+0x270>)
 8005414:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005416:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800541a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800541e:	2330      	movs	r3, #48	@ 0x30
 8005420:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005424:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8005428:	461a      	mov	r2, r3
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	4849      	ldr	r0, [pc, #292]	@ (8005554 <low_level_init+0x274>)
 800542e:	f000 fc94 	bl	8005d5a <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005432:	4949      	ldr	r1, [pc, #292]	@ (8005558 <low_level_init+0x278>)
 8005434:	4849      	ldr	r0, [pc, #292]	@ (800555c <low_level_init+0x27c>)
 8005436:	f7fc f9d6 	bl	80017e6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800543a:	4848      	ldr	r0, [pc, #288]	@ (800555c <low_level_init+0x27c>)
 800543c:	f7fc fa05 	bl	800184a <LAN8742_Init>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d006      	beq.n	8005454 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f009 fb30 	bl	800eaac <netif_set_link_down>
    netif_set_down(netif);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f009 fac7 	bl	800e9e0 <netif_set_down>
 8005452:	e06a      	b.n	800552a <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8005454:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8005458:	2b00      	cmp	r3, #0
 800545a:	d164      	bne.n	8005526 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800545c:	483f      	ldr	r0, [pc, #252]	@ (800555c <low_level_init+0x27c>)
 800545e:	f7fc fa9c 	bl	800199a <LAN8742_GetLinkState>
 8005462:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005466:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800546a:	2b01      	cmp	r3, #1
 800546c:	dc06      	bgt.n	800547c <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f009 fb1c 	bl	800eaac <netif_set_link_down>
      netif_set_down(netif);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f009 fab3 	bl	800e9e0 <netif_set_down>
 800547a:	e056      	b.n	800552a <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800547c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005480:	3b02      	subs	r3, #2
 8005482:	2b03      	cmp	r3, #3
 8005484:	d82a      	bhi.n	80054dc <low_level_init+0x1fc>
 8005486:	a201      	add	r2, pc, #4	@ (adr r2, 800548c <low_level_init+0x1ac>)
 8005488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548c:	0800549d 	.word	0x0800549d
 8005490:	080054af 	.word	0x080054af
 8005494:	080054bf 	.word	0x080054bf
 8005498:	080054cf 	.word	0x080054cf
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800549c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80054a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 80054a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80054a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80054ac:	e01f      	b.n	80054ee <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80054ae:	2300      	movs	r3, #0
 80054b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 80054b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80054b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80054bc:	e017      	b.n	80054ee <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80054be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80054c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 80054c6:	2300      	movs	r3, #0
 80054c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80054cc:	e00f      	b.n	80054ee <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 80054d4:	2300      	movs	r3, #0
 80054d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80054da:	e008      	b.n	80054ee <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 80054dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80054e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 80054e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80054e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80054ec:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80054ee:	f107 0310 	add.w	r3, r7, #16
 80054f2:	4619      	mov	r1, r3
 80054f4:	480e      	ldr	r0, [pc, #56]	@ (8005530 <low_level_init+0x250>)
 80054f6:	f7fd f90f 	bl	8002718 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80054fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80054fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8005500:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005504:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005506:	f107 0310 	add.w	r3, r7, #16
 800550a:	4619      	mov	r1, r3
 800550c:	4808      	ldr	r0, [pc, #32]	@ (8005530 <low_level_init+0x250>)
 800550e:	f7fd f9ed 	bl	80028ec <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8005512:	4807      	ldr	r0, [pc, #28]	@ (8005530 <low_level_init+0x250>)
 8005514:	f7fc fc8e 	bl	8001e34 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f009 f9f5 	bl	800e908 <netif_set_up>
    netif_set_link_up(netif);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f009 fa90 	bl	800ea44 <netif_set_link_up>
 8005524:	e001      	b.n	800552a <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8005526:	f7fb fef3 	bl	8001310 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800552a:	37a8      	adds	r7, #168	@ 0xa8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20004e48 	.word	0x20004e48
 8005534:	40028000 	.word	0x40028000
 8005538:	20004da0 	.word	0x20004da0
 800553c:	20004d00 	.word	0x20004d00
 8005540:	20004ef8 	.word	0x20004ef8
 8005544:	080215ac 	.word	0x080215ac
 8005548:	20004e40 	.word	0x20004e40
 800554c:	20004e44 	.word	0x20004e44
 8005550:	0801dbe0 	.word	0x0801dbe0
 8005554:	080056c9 	.word	0x080056c9
 8005558:	2000000c 	.word	0x2000000c
 800555c:	20004f30 	.word	0x20004f30

08005560 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b092      	sub	sp, #72	@ 0x48
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800556e:	2300      	movs	r3, #0
 8005570:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005578:	f107 030c 	add.w	r3, r7, #12
 800557c:	2230      	movs	r2, #48	@ 0x30
 800557e:	2100      	movs	r1, #0
 8005580:	4618      	mov	r0, r3
 8005582:	f015 f8bf 	bl	801a704 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005586:	f107 030c 	add.w	r3, r7, #12
 800558a:	2230      	movs	r2, #48	@ 0x30
 800558c:	2100      	movs	r1, #0
 800558e:	4618      	mov	r0, r3
 8005590:	f015 f8b8 	bl	801a704 <memset>

  for(q = p; q != NULL; q = q->next)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	643b      	str	r3, [r7, #64]	@ 0x40
 8005598:	e045      	b.n	8005626 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800559a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800559c:	2b03      	cmp	r3, #3
 800559e:	d902      	bls.n	80055a6 <low_level_output+0x46>
      return ERR_IF;
 80055a0:	f06f 030b 	mvn.w	r3, #11
 80055a4:	e06c      	b.n	8005680 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 80055a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055a8:	6859      	ldr	r1, [r3, #4]
 80055aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055ac:	4613      	mov	r3, r2
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	4413      	add	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	3348      	adds	r3, #72	@ 0x48
 80055b6:	443b      	add	r3, r7
 80055b8:	3b3c      	subs	r3, #60	@ 0x3c
 80055ba:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80055bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055be:	895b      	ldrh	r3, [r3, #10]
 80055c0:	4619      	mov	r1, r3
 80055c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055c4:	4613      	mov	r3, r2
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	4413      	add	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	3348      	adds	r3, #72	@ 0x48
 80055ce:	443b      	add	r3, r7
 80055d0:	3b38      	subs	r3, #56	@ 0x38
 80055d2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80055d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d011      	beq.n	80055fe <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80055da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055dc:	1e5a      	subs	r2, r3, #1
 80055de:	f107 000c 	add.w	r0, r7, #12
 80055e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80055e4:	460b      	mov	r3, r1
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	440b      	add	r3, r1
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	18c1      	adds	r1, r0, r3
 80055ee:	4613      	mov	r3, r2
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	4413      	add	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	3348      	adds	r3, #72	@ 0x48
 80055f8:	443b      	add	r3, r7
 80055fa:	3b34      	subs	r3, #52	@ 0x34
 80055fc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80055fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005606:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005608:	4613      	mov	r3, r2
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	3348      	adds	r3, #72	@ 0x48
 8005612:	443b      	add	r3, r7
 8005614:	3b34      	subs	r3, #52	@ 0x34
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]
    }

    i++;
 800561a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800561c:	3301      	adds	r3, #1
 800561e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	643b      	str	r3, [r7, #64]	@ 0x40
 8005626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1b6      	bne.n	800559a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	891b      	ldrh	r3, [r3, #8]
 8005630:	461a      	mov	r2, r3
 8005632:	4b15      	ldr	r3, [pc, #84]	@ (8005688 <low_level_output+0x128>)
 8005634:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005636:	4a14      	ldr	r2, [pc, #80]	@ (8005688 <low_level_output+0x128>)
 8005638:	f107 030c 	add.w	r3, r7, #12
 800563c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800563e:	4a12      	ldr	r2, [pc, #72]	@ (8005688 <low_level_output+0x128>)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8005644:	6838      	ldr	r0, [r7, #0]
 8005646:	f009 ff1f 	bl	800f488 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 800564a:	490f      	ldr	r1, [pc, #60]	@ (8005688 <low_level_output+0x128>)
 800564c:	480f      	ldr	r0, [pc, #60]	@ (800568c <low_level_output+0x12c>)
 800564e:	f7fc fcfe 	bl	800204e <HAL_ETH_Transmit_IT>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10e      	bne.n	8005676 <low_level_output+0x116>
    while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005658:	bf00      	nop
 800565a:	4b0d      	ldr	r3, [pc, #52]	@ (8005690 <low_level_output+0x130>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f04f 31ff 	mov.w	r1, #4294967295
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fdbe 	bl	80061e4 <osSemaphoreAcquire>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f5      	bne.n	800565a <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 800566e:	4807      	ldr	r0, [pc, #28]	@ (800568c <low_level_output+0x12c>)
 8005670:	f7fc fe8c 	bl	800238c <HAL_ETH_ReleaseTxPacket>
 8005674:	e002      	b.n	800567c <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8005676:	6838      	ldr	r0, [r7, #0]
 8005678:	f009 fe60 	bl	800f33c <pbuf_free>
  }

  return errval;
 800567c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005680:	4618      	mov	r0, r3
 8005682:	3748      	adds	r7, #72	@ 0x48
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	20004ef8 	.word	0x20004ef8
 800568c:	20004e48 	.word	0x20004e48
 8005690:	20004e44 	.word	0x20004e44

08005694 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80056a0:	4b07      	ldr	r3, [pc, #28]	@ (80056c0 <low_level_input+0x2c>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d105      	bne.n	80056b4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80056a8:	f107 030c 	add.w	r3, r7, #12
 80056ac:	4619      	mov	r1, r3
 80056ae:	4805      	ldr	r0, [pc, #20]	@ (80056c4 <low_level_input+0x30>)
 80056b0:	f7fc fd29 	bl	8002106 <HAL_ETH_ReadData>
  }

  return p;
 80056b4:	68fb      	ldr	r3, [r7, #12]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20004cfc 	.word	0x20004cfc
 80056c4:	20004e48 	.word	0x20004e48

080056c8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80056d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005718 <ethernetif_input+0x50>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f04f 31ff 	mov.w	r1, #4294967295
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fd7f 	bl	80061e4 <osSemaphoreAcquire>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1f5      	bne.n	80056d8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80056ec:	68b8      	ldr	r0, [r7, #8]
 80056ee:	f7ff ffd1 	bl	8005694 <low_level_input>
 80056f2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	68b9      	ldr	r1, [r7, #8]
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	4798      	blx	r3
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f009 fe16 	bl	800f33c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1ea      	bne.n	80056ec <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005716:	e7df      	b.n	80056d8 <ethernetif_input+0x10>
 8005718:	20004e40 	.word	0x20004e40

0800571c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d106      	bne.n	8005738 <ethernetif_init+0x1c>
 800572a:	4b0e      	ldr	r3, [pc, #56]	@ (8005764 <ethernetif_init+0x48>)
 800572c:	f44f 72f6 	mov.w	r2, #492	@ 0x1ec
 8005730:	490d      	ldr	r1, [pc, #52]	@ (8005768 <ethernetif_init+0x4c>)
 8005732:	480e      	ldr	r0, [pc, #56]	@ (800576c <ethernetif_init+0x50>)
 8005734:	f014 fe54 	bl	801a3e0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2273      	movs	r2, #115	@ 0x73
 800573c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2274      	movs	r2, #116	@ 0x74
 8005744:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a09      	ldr	r2, [pc, #36]	@ (8005770 <ethernetif_init+0x54>)
 800574c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a08      	ldr	r2, [pc, #32]	@ (8005774 <ethernetif_init+0x58>)
 8005752:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7ff fdc3 	bl	80052e0 <low_level_init>

  return ERR_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	0801dbe8 	.word	0x0801dbe8
 8005768:	0801dc04 	.word	0x0801dc04
 800576c:	0801dc14 	.word	0x0801dc14
 8005770:	08016f5d 	.word	0x08016f5d
 8005774:	08005561 	.word	0x08005561

08005778 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005784:	68f9      	ldr	r1, [r7, #12]
 8005786:	4809      	ldr	r0, [pc, #36]	@ (80057ac <pbuf_free_custom+0x34>)
 8005788:	f008 fea6 	bl	800e4d8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800578c:	4b08      	ldr	r3, [pc, #32]	@ (80057b0 <pbuf_free_custom+0x38>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d107      	bne.n	80057a4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005794:	4b06      	ldr	r3, [pc, #24]	@ (80057b0 <pbuf_free_custom+0x38>)
 8005796:	2200      	movs	r2, #0
 8005798:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800579a:	4b06      	ldr	r3, [pc, #24]	@ (80057b4 <pbuf_free_custom+0x3c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fd72 	bl	8006288 <osSemaphoreRelease>
  }
}
 80057a4:	bf00      	nop
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	080215ac 	.word	0x080215ac
 80057b0:	20004cfc 	.word	0x20004cfc
 80057b4:	20004e40 	.word	0x20004e40

080057b8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80057bc:	f7fc f9aa 	bl	8001b14 <HAL_GetTick>
 80057c0:	4603      	mov	r3, r0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08e      	sub	sp, #56	@ 0x38
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	605a      	str	r2, [r3, #4]
 80057da:	609a      	str	r2, [r3, #8]
 80057dc:	60da      	str	r2, [r3, #12]
 80057de:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a59      	ldr	r2, [pc, #356]	@ (800594c <HAL_ETH_MspInit+0x184>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	f040 80ac 	bne.w	8005944 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80057ec:	2300      	movs	r3, #0
 80057ee:	623b      	str	r3, [r7, #32]
 80057f0:	4b57      	ldr	r3, [pc, #348]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 80057f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f4:	4a56      	ldr	r2, [pc, #344]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 80057f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80057fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80057fc:	4b54      	ldr	r3, [pc, #336]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 80057fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005804:	623b      	str	r3, [r7, #32]
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	2300      	movs	r3, #0
 800580a:	61fb      	str	r3, [r7, #28]
 800580c:	4b50      	ldr	r3, [pc, #320]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 800580e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005810:	4a4f      	ldr	r2, [pc, #316]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 8005812:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005816:	6313      	str	r3, [r2, #48]	@ 0x30
 8005818:	4b4d      	ldr	r3, [pc, #308]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 800581a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	2300      	movs	r3, #0
 8005826:	61bb      	str	r3, [r7, #24]
 8005828:	4b49      	ldr	r3, [pc, #292]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 800582a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582c:	4a48      	ldr	r2, [pc, #288]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 800582e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005832:	6313      	str	r3, [r2, #48]	@ 0x30
 8005834:	4b46      	ldr	r3, [pc, #280]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 8005836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800583c:	61bb      	str	r3, [r7, #24]
 800583e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	4b42      	ldr	r3, [pc, #264]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 8005846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005848:	4a41      	ldr	r2, [pc, #260]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 800584a:	f043 0304 	orr.w	r3, r3, #4
 800584e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005850:	4b3f      	ldr	r3, [pc, #252]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 8005852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800585c:	2300      	movs	r3, #0
 800585e:	613b      	str	r3, [r7, #16]
 8005860:	4b3b      	ldr	r3, [pc, #236]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 8005862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005864:	4a3a      	ldr	r2, [pc, #232]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 8005866:	f043 0301 	orr.w	r3, r3, #1
 800586a:	6313      	str	r3, [r2, #48]	@ 0x30
 800586c:	4b38      	ldr	r3, [pc, #224]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 800586e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	613b      	str	r3, [r7, #16]
 8005876:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005878:	2300      	movs	r3, #0
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	4b34      	ldr	r3, [pc, #208]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 800587e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005880:	4a33      	ldr	r2, [pc, #204]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 8005882:	f043 0302 	orr.w	r3, r3, #2
 8005886:	6313      	str	r3, [r2, #48]	@ 0x30
 8005888:	4b31      	ldr	r3, [pc, #196]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 800588a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005894:	2300      	movs	r3, #0
 8005896:	60bb      	str	r3, [r7, #8]
 8005898:	4b2d      	ldr	r3, [pc, #180]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 800589a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589c:	4a2c      	ldr	r2, [pc, #176]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 800589e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80058a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005950 <HAL_ETH_MspInit+0x188>)
 80058a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ac:	60bb      	str	r3, [r7, #8]
 80058ae:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80058b0:	2332      	movs	r3, #50	@ 0x32
 80058b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058b4:	2302      	movs	r3, #2
 80058b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058b8:	2300      	movs	r3, #0
 80058ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058bc:	2303      	movs	r3, #3
 80058be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80058c0:	230b      	movs	r3, #11
 80058c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058c8:	4619      	mov	r1, r3
 80058ca:	4822      	ldr	r0, [pc, #136]	@ (8005954 <HAL_ETH_MspInit+0x18c>)
 80058cc:	f7fd fc90 	bl	80031f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80058d0:	2386      	movs	r3, #134	@ 0x86
 80058d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058d4:	2302      	movs	r3, #2
 80058d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058dc:	2303      	movs	r3, #3
 80058de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80058e0:	230b      	movs	r3, #11
 80058e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058e8:	4619      	mov	r1, r3
 80058ea:	481b      	ldr	r0, [pc, #108]	@ (8005958 <HAL_ETH_MspInit+0x190>)
 80058ec:	f7fd fc80 	bl	80031f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80058f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80058f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058f6:	2302      	movs	r3, #2
 80058f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058fa:	2300      	movs	r3, #0
 80058fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058fe:	2303      	movs	r3, #3
 8005900:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005902:	230b      	movs	r3, #11
 8005904:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800590a:	4619      	mov	r1, r3
 800590c:	4813      	ldr	r0, [pc, #76]	@ (800595c <HAL_ETH_MspInit+0x194>)
 800590e:	f7fd fc6f 	bl	80031f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8005912:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8005916:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005918:	2302      	movs	r3, #2
 800591a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800591c:	2300      	movs	r3, #0
 800591e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005920:	2303      	movs	r3, #3
 8005922:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005924:	230b      	movs	r3, #11
 8005926:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005928:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800592c:	4619      	mov	r1, r3
 800592e:	480c      	ldr	r0, [pc, #48]	@ (8005960 <HAL_ETH_MspInit+0x198>)
 8005930:	f7fd fc5e 	bl	80031f0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005934:	2200      	movs	r2, #0
 8005936:	2105      	movs	r1, #5
 8005938:	203d      	movs	r0, #61	@ 0x3d
 800593a:	f7fc f9d3 	bl	8001ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800593e:	203d      	movs	r0, #61	@ 0x3d
 8005940:	f7fc f9ec 	bl	8001d1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005944:	bf00      	nop
 8005946:	3738      	adds	r7, #56	@ 0x38
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	40028000 	.word	0x40028000
 8005950:	40023800 	.word	0x40023800
 8005954:	40020800 	.word	0x40020800
 8005958:	40020000 	.word	0x40020000
 800595c:	40020400 	.word	0x40020400
 8005960:	40021800 	.word	0x40021800

08005964 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005968:	4802      	ldr	r0, [pc, #8]	@ (8005974 <ETH_PHY_IO_Init+0x10>)
 800596a:	f7fc ffd9 	bl	8002920 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	bd80      	pop	{r7, pc}
 8005974:	20004e48 	.word	0x20004e48

08005978 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  return 0;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	68f9      	ldr	r1, [r7, #12]
 800599a:	4807      	ldr	r0, [pc, #28]	@ (80059b8 <ETH_PHY_IO_ReadReg+0x30>)
 800599c:	f7fc fe28 	bl	80025f0 <HAL_ETH_ReadPHYRegister>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80059a6:	f04f 33ff 	mov.w	r3, #4294967295
 80059aa:	e000      	b.n	80059ae <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20004e48 	.word	0x20004e48

080059bc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	68f9      	ldr	r1, [r7, #12]
 80059ce:	4807      	ldr	r0, [pc, #28]	@ (80059ec <ETH_PHY_IO_WriteReg+0x30>)
 80059d0:	f7fc fe59 	bl	8002686 <HAL_ETH_WritePHYRegister>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80059da:	f04f 33ff 	mov.w	r3, #4294967295
 80059de:	e000      	b.n	80059e2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	20004e48 	.word	0x20004e48

080059f0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80059f4:	f7fc f88e 	bl	8001b14 <HAL_GetTick>
 80059f8:	4603      	mov	r3, r0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b0a0      	sub	sp, #128	@ 0x80
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005a08:	f107 0308 	add.w	r3, r7, #8
 8005a0c:	2264      	movs	r2, #100	@ 0x64
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4618      	mov	r0, r3
 8005a12:	f014 fe77 	bl	801a704 <memset>
  int32_t PHYLinkState = 0;
 8005a16:	2300      	movs	r3, #0
 8005a18:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a1e:	2300      	movs	r3, #0
 8005a20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a22:	2300      	movs	r3, #0
 8005a24:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005a2a:	483a      	ldr	r0, [pc, #232]	@ (8005b14 <ethernet_link_thread+0x114>)
 8005a2c:	f7fb ffb5 	bl	800199a <LAN8742_GetLinkState>
 8005a30:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005a32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a34:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005a38:	089b      	lsrs	r3, r3, #2
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00c      	beq.n	8005a5e <ethernet_link_thread+0x5e>
 8005a44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	dc09      	bgt.n	8005a5e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005a4a:	4833      	ldr	r0, [pc, #204]	@ (8005b18 <ethernet_link_thread+0x118>)
 8005a4c:	f7fc fa80 	bl	8001f50 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005a50:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005a52:	f008 ffc5 	bl	800e9e0 <netif_set_down>
    netif_set_link_down(netif);
 8005a56:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005a58:	f009 f828 	bl	800eaac <netif_set_link_down>
 8005a5c:	e055      	b.n	8005b0a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005a5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a60:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d14e      	bne.n	8005b0a <ethernet_link_thread+0x10a>
 8005a6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	dd4b      	ble.n	8005b0a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8005a72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a74:	3b02      	subs	r3, #2
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d82a      	bhi.n	8005ad0 <ethernet_link_thread+0xd0>
 8005a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a80 <ethernet_link_thread+0x80>)
 8005a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a80:	08005a91 	.word	0x08005a91
 8005a84:	08005aa3 	.word	0x08005aa3
 8005a88:	08005ab3 	.word	0x08005ab3
 8005a8c:	08005ac3 	.word	0x08005ac3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005a90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005a94:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005a96:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005a9a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005aa0:	e017      	b.n	8005ad2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005aa6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005aaa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005aac:	2301      	movs	r3, #1
 8005aae:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005ab0:	e00f      	b.n	8005ad2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005ab2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005ab6:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005abc:	2301      	movs	r3, #1
 8005abe:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005ac0:	e007      	b.n	8005ad2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005aca:	2301      	movs	r3, #1
 8005acc:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005ace:	e000      	b.n	8005ad2 <ethernet_link_thread+0xd2>
    default:
      break;
 8005ad0:	bf00      	nop
    }

    if(linkchanged)
 8005ad2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d018      	beq.n	8005b0a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005ad8:	f107 0308 	add.w	r3, r7, #8
 8005adc:	4619      	mov	r1, r3
 8005ade:	480e      	ldr	r0, [pc, #56]	@ (8005b18 <ethernet_link_thread+0x118>)
 8005ae0:	f7fc fe1a 	bl	8002718 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005ae4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ae6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005ae8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aea:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005aec:	f107 0308 	add.w	r3, r7, #8
 8005af0:	4619      	mov	r1, r3
 8005af2:	4809      	ldr	r0, [pc, #36]	@ (8005b18 <ethernet_link_thread+0x118>)
 8005af4:	f7fc fefa 	bl	80028ec <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8005af8:	4807      	ldr	r0, [pc, #28]	@ (8005b18 <ethernet_link_thread+0x118>)
 8005afa:	f7fc f99b 	bl	8001e34 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005afe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b00:	f008 ff02 	bl	800e908 <netif_set_up>
      netif_set_link_up(netif);
 8005b04:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b06:	f008 ff9d 	bl	800ea44 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005b0a:	2064      	movs	r0, #100	@ 0x64
 8005b0c:	f000 f9b7 	bl	8005e7e <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005b10:	e78b      	b.n	8005a2a <ethernet_link_thread+0x2a>
 8005b12:	bf00      	nop
 8005b14:	20004f30 	.word	0x20004f30
 8005b18:	20004e48 	.word	0x20004e48

08005b1c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005b24:	4812      	ldr	r0, [pc, #72]	@ (8005b70 <HAL_ETH_RxAllocateCallback+0x54>)
 8005b26:	f008 fc63 	bl	800e3f0 <memp_malloc_pool>
 8005b2a:	60f8      	str	r0, [r7, #12]
  if (p)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d014      	beq.n	8005b5c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f103 0220 	add.w	r2, r3, #32
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4a0d      	ldr	r2, [pc, #52]	@ (8005b74 <HAL_ETH_RxAllocateCallback+0x58>)
 8005b40:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005b4a:	9201      	str	r2, [sp, #4]
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2241      	movs	r2, #65	@ 0x41
 8005b52:	2100      	movs	r1, #0
 8005b54:	2000      	movs	r0, #0
 8005b56:	f009 fa05 	bl	800ef64 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005b5a:	e005      	b.n	8005b68 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005b5c:	4b06      	ldr	r3, [pc, #24]	@ (8005b78 <HAL_ETH_RxAllocateCallback+0x5c>)
 8005b5e:	2201      	movs	r2, #1
 8005b60:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]
}
 8005b68:	bf00      	nop
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	080215ac 	.word	0x080215ac
 8005b74:	08005779 	.word	0x08005779
 8005b78:	20004cfc 	.word	0x20004cfc

08005b7c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b089      	sub	sp, #36	@ 0x24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
 8005b88:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	3b20      	subs	r3, #32
 8005b9a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	887a      	ldrh	r2, [r7, #2]
 8005bac:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d103      	bne.n	8005bbe <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	e003      	b.n	8005bc6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	61fb      	str	r3, [r7, #28]
 8005bd2:	e009      	b.n	8005be8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	891a      	ldrh	r2, [r3, #8]
 8005bd8:	887b      	ldrh	r3, [r7, #2]
 8005bda:	4413      	add	r3, r2
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	61fb      	str	r3, [r7, #28]
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1f2      	bne.n	8005bd4 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005bee:	bf00      	nop
 8005bf0:	bf00      	nop
 8005bf2:	3724      	adds	r7, #36	@ 0x24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f009 fb99 	bl	800f33c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005c0a:	bf00      	nop
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c14 <__NVIC_SetPriority>:
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	6039      	str	r1, [r7, #0]
 8005c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	db0a      	blt.n	8005c3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	490c      	ldr	r1, [pc, #48]	@ (8005c60 <__NVIC_SetPriority+0x4c>)
 8005c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c32:	0112      	lsls	r2, r2, #4
 8005c34:	b2d2      	uxtb	r2, r2
 8005c36:	440b      	add	r3, r1
 8005c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005c3c:	e00a      	b.n	8005c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	4908      	ldr	r1, [pc, #32]	@ (8005c64 <__NVIC_SetPriority+0x50>)
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	3b04      	subs	r3, #4
 8005c4c:	0112      	lsls	r2, r2, #4
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	440b      	add	r3, r1
 8005c52:	761a      	strb	r2, [r3, #24]
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	e000e100 	.word	0xe000e100
 8005c64:	e000ed00 	.word	0xe000ed00

08005c68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005c6c:	4b05      	ldr	r3, [pc, #20]	@ (8005c84 <SysTick_Handler+0x1c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005c70:	f002 fd6c 	bl	800874c <xTaskGetSchedulerState>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d001      	beq.n	8005c7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005c7a:	f003 fc65 	bl	8009548 <xPortSysTickHandler>
  }
}
 8005c7e:	bf00      	nop
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	e000e010 	.word	0xe000e010

08005c88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	f06f 0004 	mvn.w	r0, #4
 8005c92:	f7ff ffbf 	bl	8005c14 <__NVIC_SetPriority>
#endif
}
 8005c96:	bf00      	nop
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ca2:	f3ef 8305 	mrs	r3, IPSR
 8005ca6:	603b      	str	r3, [r7, #0]
  return(result);
 8005ca8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005cae:	f06f 0305 	mvn.w	r3, #5
 8005cb2:	607b      	str	r3, [r7, #4]
 8005cb4:	e00c      	b.n	8005cd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce0 <osKernelInitialize+0x44>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d105      	bne.n	8005cca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005cbe:	4b08      	ldr	r3, [pc, #32]	@ (8005ce0 <osKernelInitialize+0x44>)
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	607b      	str	r3, [r7, #4]
 8005cc8:	e002      	b.n	8005cd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005cca:	f04f 33ff 	mov.w	r3, #4294967295
 8005cce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005cd0:	687b      	ldr	r3, [r7, #4]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	20004f50 	.word	0x20004f50

08005ce4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cea:	f3ef 8305 	mrs	r3, IPSR
 8005cee:	603b      	str	r3, [r7, #0]
  return(result);
 8005cf0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <osKernelStart+0x1a>
    stat = osErrorISR;
 8005cf6:	f06f 0305 	mvn.w	r3, #5
 8005cfa:	607b      	str	r3, [r7, #4]
 8005cfc:	e010      	b.n	8005d20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8005d2c <osKernelStart+0x48>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d109      	bne.n	8005d1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005d06:	f7ff ffbf 	bl	8005c88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d0a:	4b08      	ldr	r3, [pc, #32]	@ (8005d2c <osKernelStart+0x48>)
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d10:	f002 f896 	bl	8007e40 <vTaskStartScheduler>
      stat = osOK;
 8005d14:	2300      	movs	r3, #0
 8005d16:	607b      	str	r3, [r7, #4]
 8005d18:	e002      	b.n	8005d20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d20:	687b      	ldr	r3, [r7, #4]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20004f50 	.word	0x20004f50

08005d30 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d36:	f3ef 8305 	mrs	r3, IPSR
 8005d3a:	603b      	str	r3, [r7, #0]
  return(result);
 8005d3c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005d42:	f002 f9a9 	bl	8008098 <xTaskGetTickCountFromISR>
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	e002      	b.n	8005d50 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005d4a:	f002 f995 	bl	8008078 <xTaskGetTickCount>
 8005d4e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005d50:	687b      	ldr	r3, [r7, #4]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b08e      	sub	sp, #56	@ 0x38
 8005d5e:	af04      	add	r7, sp, #16
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d6a:	f3ef 8305 	mrs	r3, IPSR
 8005d6e:	617b      	str	r3, [r7, #20]
  return(result);
 8005d70:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d17e      	bne.n	8005e74 <osThreadNew+0x11a>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d07b      	beq.n	8005e74 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005d7c:	2380      	movs	r3, #128	@ 0x80
 8005d7e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005d80:	2318      	movs	r3, #24
 8005d82:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005d88:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d045      	beq.n	8005e20 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <osThreadNew+0x48>
        name = attr->name;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d008      	beq.n	8005dc8 <osThreadNew+0x6e>
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	2b38      	cmp	r3, #56	@ 0x38
 8005dba:	d805      	bhi.n	8005dc8 <osThreadNew+0x6e>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <osThreadNew+0x72>
        return (NULL);
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e054      	b.n	8005e76 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	089b      	lsrs	r3, r3, #2
 8005dda:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00e      	beq.n	8005e02 <osThreadNew+0xa8>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	2ba7      	cmp	r3, #167	@ 0xa7
 8005dea:	d90a      	bls.n	8005e02 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d006      	beq.n	8005e02 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <osThreadNew+0xa8>
        mem = 1;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	61bb      	str	r3, [r7, #24]
 8005e00:	e010      	b.n	8005e24 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10c      	bne.n	8005e24 <osThreadNew+0xca>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d108      	bne.n	8005e24 <osThreadNew+0xca>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d104      	bne.n	8005e24 <osThreadNew+0xca>
          mem = 0;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	e001      	b.n	8005e24 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005e20:	2300      	movs	r3, #0
 8005e22:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d110      	bne.n	8005e4c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e32:	9202      	str	r2, [sp, #8]
 8005e34:	9301      	str	r3, [sp, #4]
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	6a3a      	ldr	r2, [r7, #32]
 8005e3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f001 fe09 	bl	8007a58 <xTaskCreateStatic>
 8005e46:	4603      	mov	r3, r0
 8005e48:	613b      	str	r3, [r7, #16]
 8005e4a:	e013      	b.n	8005e74 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d110      	bne.n	8005e74 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	f107 0310 	add.w	r3, r7, #16
 8005e5a:	9301      	str	r3, [sp, #4]
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f001 fe57 	bl	8007b18 <xTaskCreate>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d001      	beq.n	8005e74 <osThreadNew+0x11a>
            hTask = NULL;
 8005e70:	2300      	movs	r3, #0
 8005e72:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005e74:	693b      	ldr	r3, [r7, #16]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3728      	adds	r7, #40	@ 0x28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e86:	f3ef 8305 	mrs	r3, IPSR
 8005e8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <osDelay+0x1c>
    stat = osErrorISR;
 8005e92:	f06f 0305 	mvn.w	r3, #5
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	e007      	b.n	8005eaa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <osDelay+0x2c>
      vTaskDelay(ticks);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f001 ff95 	bl	8007dd4 <vTaskDelay>
    }
  }

  return (stat);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b088      	sub	sp, #32
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ec0:	f3ef 8305 	mrs	r3, IPSR
 8005ec4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ec6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d174      	bne.n	8005fb6 <osMutexNew+0x102>
    if (attr != NULL) {
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <osMutexNew+0x26>
      type = attr->attr_bits;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	61bb      	str	r3, [r7, #24]
 8005ed8:	e001      	b.n	8005ede <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <osMutexNew+0x3a>
      rmtx = 1U;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	e001      	b.n	8005ef2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d15c      	bne.n	8005fb6 <osMutexNew+0x102>
      mem = -1;
 8005efc:	f04f 33ff 	mov.w	r3, #4294967295
 8005f00:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d015      	beq.n	8005f34 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d006      	beq.n	8005f1e <osMutexNew+0x6a>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	2b4f      	cmp	r3, #79	@ 0x4f
 8005f16:	d902      	bls.n	8005f1e <osMutexNew+0x6a>
          mem = 1;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	e00c      	b.n	8005f38 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d108      	bne.n	8005f38 <osMutexNew+0x84>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d104      	bne.n	8005f38 <osMutexNew+0x84>
            mem = 0;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	e001      	b.n	8005f38 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005f34:	2300      	movs	r3, #0
 8005f36:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d112      	bne.n	8005f64 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d007      	beq.n	8005f54 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	2004      	movs	r0, #4
 8005f4c:	f000 fdd9 	bl	8006b02 <xQueueCreateMutexStatic>
 8005f50:	61f8      	str	r0, [r7, #28]
 8005f52:	e016      	b.n	8005f82 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	2001      	movs	r0, #1
 8005f5c:	f000 fdd1 	bl	8006b02 <xQueueCreateMutexStatic>
 8005f60:	61f8      	str	r0, [r7, #28]
 8005f62:	e00e      	b.n	8005f82 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10b      	bne.n	8005f82 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d004      	beq.n	8005f7a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005f70:	2004      	movs	r0, #4
 8005f72:	f000 fdae 	bl	8006ad2 <xQueueCreateMutex>
 8005f76:	61f8      	str	r0, [r7, #28]
 8005f78:	e003      	b.n	8005f82 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	f000 fda9 	bl	8006ad2 <xQueueCreateMutex>
 8005f80:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00c      	beq.n	8005fa2 <osMutexNew+0xee>
        if (attr != NULL) {
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <osMutexNew+0xe2>
          name = attr->name;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e001      	b.n	8005f9a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005f9a:	68f9      	ldr	r1, [r7, #12]
 8005f9c:	69f8      	ldr	r0, [r7, #28]
 8005f9e:	f001 fcd3 	bl	8007948 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d006      	beq.n	8005fb6 <osMutexNew+0x102>
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	f043 0301 	orr.w	r3, r3, #1
 8005fb4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005fb6:	69fb      	ldr	r3, [r7, #28]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3720      	adds	r7, #32
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f023 0301 	bic.w	r3, r3, #1
 8005fd0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fde:	f3ef 8305 	mrs	r3, IPSR
 8005fe2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fe4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005fea:	f06f 0305 	mvn.w	r3, #5
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	e02c      	b.n	800604c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d103      	bne.n	8006000 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005ff8:	f06f 0303 	mvn.w	r3, #3
 8005ffc:	617b      	str	r3, [r7, #20]
 8005ffe:	e025      	b.n	800604c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d011      	beq.n	800602a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006006:	6839      	ldr	r1, [r7, #0]
 8006008:	6938      	ldr	r0, [r7, #16]
 800600a:	f000 fdca 	bl	8006ba2 <xQueueTakeMutexRecursive>
 800600e:	4603      	mov	r3, r0
 8006010:	2b01      	cmp	r3, #1
 8006012:	d01b      	beq.n	800604c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800601a:	f06f 0301 	mvn.w	r3, #1
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	e014      	b.n	800604c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006022:	f06f 0302 	mvn.w	r3, #2
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e010      	b.n	800604c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800602a:	6839      	ldr	r1, [r7, #0]
 800602c:	6938      	ldr	r0, [r7, #16]
 800602e:	f001 f96f 	bl	8007310 <xQueueSemaphoreTake>
 8006032:	4603      	mov	r3, r0
 8006034:	2b01      	cmp	r3, #1
 8006036:	d009      	beq.n	800604c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800603e:	f06f 0301 	mvn.w	r3, #1
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	e002      	b.n	800604c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006046:	f06f 0302 	mvn.w	r3, #2
 800604a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800604c:	697b      	ldr	r3, [r7, #20]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006056:	b580      	push	{r7, lr}
 8006058:	b086      	sub	sp, #24
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f023 0301 	bic.w	r3, r3, #1
 8006064:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800606e:	2300      	movs	r3, #0
 8006070:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006072:	f3ef 8305 	mrs	r3, IPSR
 8006076:	60bb      	str	r3, [r7, #8]
  return(result);
 8006078:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <osMutexRelease+0x30>
    stat = osErrorISR;
 800607e:	f06f 0305 	mvn.w	r3, #5
 8006082:	617b      	str	r3, [r7, #20]
 8006084:	e01f      	b.n	80060c6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d103      	bne.n	8006094 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800608c:	f06f 0303 	mvn.w	r3, #3
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	e018      	b.n	80060c6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d009      	beq.n	80060ae <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800609a:	6938      	ldr	r0, [r7, #16]
 800609c:	f000 fd4c 	bl	8006b38 <xQueueGiveMutexRecursive>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d00f      	beq.n	80060c6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80060a6:	f06f 0302 	mvn.w	r3, #2
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	e00b      	b.n	80060c6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80060ae:	2300      	movs	r3, #0
 80060b0:	2200      	movs	r2, #0
 80060b2:	2100      	movs	r1, #0
 80060b4:	6938      	ldr	r0, [r7, #16]
 80060b6:	f000 fe19 	bl	8006cec <xQueueGenericSend>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d002      	beq.n	80060c6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80060c0:	f06f 0302 	mvn.w	r3, #2
 80060c4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80060c6:	697b      	ldr	r3, [r7, #20]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08a      	sub	sp, #40	@ 0x28
 80060d4:	af02      	add	r7, sp, #8
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80060dc:	2300      	movs	r3, #0
 80060de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060e0:	f3ef 8305 	mrs	r3, IPSR
 80060e4:	613b      	str	r3, [r7, #16]
  return(result);
 80060e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d175      	bne.n	80061d8 <osSemaphoreNew+0x108>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d072      	beq.n	80061d8 <osSemaphoreNew+0x108>
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d86e      	bhi.n	80061d8 <osSemaphoreNew+0x108>
    mem = -1;
 80060fa:	f04f 33ff 	mov.w	r3, #4294967295
 80060fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d015      	beq.n	8006132 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d006      	beq.n	800611c <osSemaphoreNew+0x4c>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	2b4f      	cmp	r3, #79	@ 0x4f
 8006114:	d902      	bls.n	800611c <osSemaphoreNew+0x4c>
        mem = 1;
 8006116:	2301      	movs	r3, #1
 8006118:	61bb      	str	r3, [r7, #24]
 800611a:	e00c      	b.n	8006136 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d108      	bne.n	8006136 <osSemaphoreNew+0x66>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d104      	bne.n	8006136 <osSemaphoreNew+0x66>
          mem = 0;
 800612c:	2300      	movs	r3, #0
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	e001      	b.n	8006136 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006132:	2300      	movs	r3, #0
 8006134:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613c:	d04c      	beq.n	80061d8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d128      	bne.n	8006196 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d10a      	bne.n	8006160 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	2203      	movs	r2, #3
 8006150:	9200      	str	r2, [sp, #0]
 8006152:	2200      	movs	r2, #0
 8006154:	2100      	movs	r1, #0
 8006156:	2001      	movs	r0, #1
 8006158:	f000 fbc6 	bl	80068e8 <xQueueGenericCreateStatic>
 800615c:	61f8      	str	r0, [r7, #28]
 800615e:	e005      	b.n	800616c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006160:	2203      	movs	r2, #3
 8006162:	2100      	movs	r1, #0
 8006164:	2001      	movs	r0, #1
 8006166:	f000 fc3c 	bl	80069e2 <xQueueGenericCreate>
 800616a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d022      	beq.n	80061b8 <osSemaphoreNew+0xe8>
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01f      	beq.n	80061b8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006178:	2300      	movs	r3, #0
 800617a:	2200      	movs	r2, #0
 800617c:	2100      	movs	r1, #0
 800617e:	69f8      	ldr	r0, [r7, #28]
 8006180:	f000 fdb4 	bl	8006cec <xQueueGenericSend>
 8006184:	4603      	mov	r3, r0
 8006186:	2b01      	cmp	r3, #1
 8006188:	d016      	beq.n	80061b8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800618a:	69f8      	ldr	r0, [r7, #28]
 800618c:	f001 fa90 	bl	80076b0 <vQueueDelete>
            hSemaphore = NULL;
 8006190:	2300      	movs	r3, #0
 8006192:	61fb      	str	r3, [r7, #28]
 8006194:	e010      	b.n	80061b8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d108      	bne.n	80061ae <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	461a      	mov	r2, r3
 80061a2:	68b9      	ldr	r1, [r7, #8]
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 fd33 	bl	8006c10 <xQueueCreateCountingSemaphoreStatic>
 80061aa:	61f8      	str	r0, [r7, #28]
 80061ac:	e004      	b.n	80061b8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80061ae:	68b9      	ldr	r1, [r7, #8]
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 fd66 	bl	8006c82 <xQueueCreateCountingSemaphore>
 80061b6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00c      	beq.n	80061d8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d003      	beq.n	80061cc <osSemaphoreNew+0xfc>
          name = attr->name;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	617b      	str	r3, [r7, #20]
 80061ca:	e001      	b.n	80061d0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80061cc:	2300      	movs	r3, #0
 80061ce:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80061d0:	6979      	ldr	r1, [r7, #20]
 80061d2:	69f8      	ldr	r0, [r7, #28]
 80061d4:	f001 fbb8 	bl	8007948 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80061d8:	69fb      	ldr	r3, [r7, #28]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3720      	adds	r7, #32
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d103      	bne.n	8006204 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80061fc:	f06f 0303 	mvn.w	r3, #3
 8006200:	617b      	str	r3, [r7, #20]
 8006202:	e039      	b.n	8006278 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006204:	f3ef 8305 	mrs	r3, IPSR
 8006208:	60fb      	str	r3, [r7, #12]
  return(result);
 800620a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800620c:	2b00      	cmp	r3, #0
 800620e:	d022      	beq.n	8006256 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006216:	f06f 0303 	mvn.w	r3, #3
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	e02c      	b.n	8006278 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800621e:	2300      	movs	r3, #0
 8006220:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006222:	f107 0308 	add.w	r3, r7, #8
 8006226:	461a      	mov	r2, r3
 8006228:	2100      	movs	r1, #0
 800622a:	6938      	ldr	r0, [r7, #16]
 800622c:	f001 f980 	bl	8007530 <xQueueReceiveFromISR>
 8006230:	4603      	mov	r3, r0
 8006232:	2b01      	cmp	r3, #1
 8006234:	d003      	beq.n	800623e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006236:	f06f 0302 	mvn.w	r3, #2
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	e01c      	b.n	8006278 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d019      	beq.n	8006278 <osSemaphoreAcquire+0x94>
 8006244:	4b0f      	ldr	r3, [pc, #60]	@ (8006284 <osSemaphoreAcquire+0xa0>)
 8006246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	e010      	b.n	8006278 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006256:	6839      	ldr	r1, [r7, #0]
 8006258:	6938      	ldr	r0, [r7, #16]
 800625a:	f001 f859 	bl	8007310 <xQueueSemaphoreTake>
 800625e:	4603      	mov	r3, r0
 8006260:	2b01      	cmp	r3, #1
 8006262:	d009      	beq.n	8006278 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800626a:	f06f 0301 	mvn.w	r3, #1
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	e002      	b.n	8006278 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006272:	f06f 0302 	mvn.w	r3, #2
 8006276:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006278:	697b      	ldr	r3, [r7, #20]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	e000ed04 	.word	0xe000ed04

08006288 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006294:	2300      	movs	r3, #0
 8006296:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d103      	bne.n	80062a6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800629e:	f06f 0303 	mvn.w	r3, #3
 80062a2:	617b      	str	r3, [r7, #20]
 80062a4:	e02c      	b.n	8006300 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062a6:	f3ef 8305 	mrs	r3, IPSR
 80062aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80062ac:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d01a      	beq.n	80062e8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80062b6:	f107 0308 	add.w	r3, r7, #8
 80062ba:	4619      	mov	r1, r3
 80062bc:	6938      	ldr	r0, [r7, #16]
 80062be:	f000 feb5 	bl	800702c <xQueueGiveFromISR>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d003      	beq.n	80062d0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80062c8:	f06f 0302 	mvn.w	r3, #2
 80062cc:	617b      	str	r3, [r7, #20]
 80062ce:	e017      	b.n	8006300 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d014      	beq.n	8006300 <osSemaphoreRelease+0x78>
 80062d6:	4b0d      	ldr	r3, [pc, #52]	@ (800630c <osSemaphoreRelease+0x84>)
 80062d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	e00b      	b.n	8006300 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80062e8:	2300      	movs	r3, #0
 80062ea:	2200      	movs	r2, #0
 80062ec:	2100      	movs	r1, #0
 80062ee:	6938      	ldr	r0, [r7, #16]
 80062f0:	f000 fcfc 	bl	8006cec <xQueueGenericSend>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d002      	beq.n	8006300 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80062fa:	f06f 0302 	mvn.w	r3, #2
 80062fe:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006300:	697b      	ldr	r3, [r7, #20]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	e000ed04 	.word	0xe000ed04

08006310 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800631c:	f3ef 8305 	mrs	r3, IPSR
 8006320:	60fb      	str	r3, [r7, #12]
  return(result);
 8006322:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006324:	2b00      	cmp	r3, #0
 8006326:	d003      	beq.n	8006330 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8006328:	f06f 0305 	mvn.w	r3, #5
 800632c:	617b      	str	r3, [r7, #20]
 800632e:	e00e      	b.n	800634e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d103      	bne.n	800633e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8006336:	f06f 0303 	mvn.w	r3, #3
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	e007      	b.n	800634e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800633e:	6938      	ldr	r0, [r7, #16]
 8006340:	f001 fb2c 	bl	800799c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006344:	2300      	movs	r3, #0
 8006346:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8006348:	6938      	ldr	r0, [r7, #16]
 800634a:	f001 f9b1 	bl	80076b0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800634e:	697b      	ldr	r3, [r7, #20]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	@ 0x28
 800635c:	af02      	add	r7, sp, #8
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006364:	2300      	movs	r3, #0
 8006366:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006368:	f3ef 8305 	mrs	r3, IPSR
 800636c:	613b      	str	r3, [r7, #16]
  return(result);
 800636e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006370:	2b00      	cmp	r3, #0
 8006372:	d15f      	bne.n	8006434 <osMessageQueueNew+0xdc>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d05c      	beq.n	8006434 <osMessageQueueNew+0xdc>
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d059      	beq.n	8006434 <osMessageQueueNew+0xdc>
    mem = -1;
 8006380:	f04f 33ff 	mov.w	r3, #4294967295
 8006384:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d029      	beq.n	80063e0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d012      	beq.n	80063ba <osMessageQueueNew+0x62>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	2b4f      	cmp	r3, #79	@ 0x4f
 800639a:	d90e      	bls.n	80063ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00a      	beq.n	80063ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	695a      	ldr	r2, [r3, #20]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	68b9      	ldr	r1, [r7, #8]
 80063ac:	fb01 f303 	mul.w	r3, r1, r3
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d302      	bcc.n	80063ba <osMessageQueueNew+0x62>
        mem = 1;
 80063b4:	2301      	movs	r3, #1
 80063b6:	61bb      	str	r3, [r7, #24]
 80063b8:	e014      	b.n	80063e4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d110      	bne.n	80063e4 <osMessageQueueNew+0x8c>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10c      	bne.n	80063e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d108      	bne.n	80063e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d104      	bne.n	80063e4 <osMessageQueueNew+0x8c>
          mem = 0;
 80063da:	2300      	movs	r3, #0
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	e001      	b.n	80063e4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80063e0:	2300      	movs	r3, #0
 80063e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d10b      	bne.n	8006402 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	2100      	movs	r1, #0
 80063f4:	9100      	str	r1, [sp, #0]
 80063f6:	68b9      	ldr	r1, [r7, #8]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fa75 	bl	80068e8 <xQueueGenericCreateStatic>
 80063fe:	61f8      	str	r0, [r7, #28]
 8006400:	e008      	b.n	8006414 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d105      	bne.n	8006414 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006408:	2200      	movs	r2, #0
 800640a:	68b9      	ldr	r1, [r7, #8]
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 fae8 	bl	80069e2 <xQueueGenericCreate>
 8006412:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00c      	beq.n	8006434 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d003      	beq.n	8006428 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	617b      	str	r3, [r7, #20]
 8006426:	e001      	b.n	800642c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006428:	2300      	movs	r3, #0
 800642a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800642c:	6979      	ldr	r1, [r7, #20]
 800642e:	69f8      	ldr	r0, [r7, #28]
 8006430:	f001 fa8a 	bl	8007948 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006434:	69fb      	ldr	r3, [r7, #28]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3720      	adds	r7, #32
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	4613      	mov	r3, r2
 800644e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006454:	2300      	movs	r3, #0
 8006456:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006458:	f3ef 8305 	mrs	r3, IPSR
 800645c:	617b      	str	r3, [r7, #20]
  return(result);
 800645e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006460:	2b00      	cmp	r3, #0
 8006462:	d028      	beq.n	80064b6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d005      	beq.n	8006476 <osMessageQueuePut+0x36>
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <osMessageQueuePut+0x36>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006476:	f06f 0303 	mvn.w	r3, #3
 800647a:	61fb      	str	r3, [r7, #28]
 800647c:	e038      	b.n	80064f0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800647e:	2300      	movs	r3, #0
 8006480:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006482:	f107 0210 	add.w	r2, r7, #16
 8006486:	2300      	movs	r3, #0
 8006488:	68b9      	ldr	r1, [r7, #8]
 800648a:	69b8      	ldr	r0, [r7, #24]
 800648c:	f000 fd30 	bl	8006ef0 <xQueueGenericSendFromISR>
 8006490:	4603      	mov	r3, r0
 8006492:	2b01      	cmp	r3, #1
 8006494:	d003      	beq.n	800649e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006496:	f06f 0302 	mvn.w	r3, #2
 800649a:	61fb      	str	r3, [r7, #28]
 800649c:	e028      	b.n	80064f0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d025      	beq.n	80064f0 <osMessageQueuePut+0xb0>
 80064a4:	4b15      	ldr	r3, [pc, #84]	@ (80064fc <osMessageQueuePut+0xbc>)
 80064a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	e01c      	b.n	80064f0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <osMessageQueuePut+0x82>
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d103      	bne.n	80064ca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80064c2:	f06f 0303 	mvn.w	r3, #3
 80064c6:	61fb      	str	r3, [r7, #28]
 80064c8:	e012      	b.n	80064f0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80064ca:	2300      	movs	r3, #0
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	68b9      	ldr	r1, [r7, #8]
 80064d0:	69b8      	ldr	r0, [r7, #24]
 80064d2:	f000 fc0b 	bl	8006cec <xQueueGenericSend>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d009      	beq.n	80064f0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80064e2:	f06f 0301 	mvn.w	r3, #1
 80064e6:	61fb      	str	r3, [r7, #28]
 80064e8:	e002      	b.n	80064f0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80064ea:	f06f 0302 	mvn.w	r3, #2
 80064ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80064f0:	69fb      	ldr	r3, [r7, #28]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3720      	adds	r7, #32
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	e000ed04 	.word	0xe000ed04

08006500 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006512:	2300      	movs	r3, #0
 8006514:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006516:	f3ef 8305 	mrs	r3, IPSR
 800651a:	617b      	str	r3, [r7, #20]
  return(result);
 800651c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800651e:	2b00      	cmp	r3, #0
 8006520:	d028      	beq.n	8006574 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d005      	beq.n	8006534 <osMessageQueueGet+0x34>
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <osMessageQueueGet+0x34>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006534:	f06f 0303 	mvn.w	r3, #3
 8006538:	61fb      	str	r3, [r7, #28]
 800653a:	e037      	b.n	80065ac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800653c:	2300      	movs	r3, #0
 800653e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006540:	f107 0310 	add.w	r3, r7, #16
 8006544:	461a      	mov	r2, r3
 8006546:	68b9      	ldr	r1, [r7, #8]
 8006548:	69b8      	ldr	r0, [r7, #24]
 800654a:	f000 fff1 	bl	8007530 <xQueueReceiveFromISR>
 800654e:	4603      	mov	r3, r0
 8006550:	2b01      	cmp	r3, #1
 8006552:	d003      	beq.n	800655c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006554:	f06f 0302 	mvn.w	r3, #2
 8006558:	61fb      	str	r3, [r7, #28]
 800655a:	e027      	b.n	80065ac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d024      	beq.n	80065ac <osMessageQueueGet+0xac>
 8006562:	4b15      	ldr	r3, [pc, #84]	@ (80065b8 <osMessageQueueGet+0xb8>)
 8006564:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	e01b      	b.n	80065ac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d002      	beq.n	8006580 <osMessageQueueGet+0x80>
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d103      	bne.n	8006588 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006580:	f06f 0303 	mvn.w	r3, #3
 8006584:	61fb      	str	r3, [r7, #28]
 8006586:	e011      	b.n	80065ac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	68b9      	ldr	r1, [r7, #8]
 800658c:	69b8      	ldr	r0, [r7, #24]
 800658e:	f000 fddd 	bl	800714c <xQueueReceive>
 8006592:	4603      	mov	r3, r0
 8006594:	2b01      	cmp	r3, #1
 8006596:	d009      	beq.n	80065ac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800659e:	f06f 0301 	mvn.w	r3, #1
 80065a2:	61fb      	str	r3, [r7, #28]
 80065a4:	e002      	b.n	80065ac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80065a6:	f06f 0302 	mvn.w	r3, #2
 80065aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80065ac:	69fb      	ldr	r3, [r7, #28]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3720      	adds	r7, #32
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	e000ed04 	.word	0xe000ed04

080065bc <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d102      	bne.n	80065d4 <osMessageQueueGetCount+0x18>
    count = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	e00e      	b.n	80065f2 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065d4:	f3ef 8305 	mrs	r3, IPSR
 80065d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80065da:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d004      	beq.n	80065ea <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80065e0:	6938      	ldr	r0, [r7, #16]
 80065e2:	f001 f846 	bl	8007672 <uxQueueMessagesWaitingFromISR>
 80065e6:	6178      	str	r0, [r7, #20]
 80065e8:	e003      	b.n	80065f2 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80065ea:	6938      	ldr	r0, [r7, #16]
 80065ec:	f001 f822 	bl	8007634 <uxQueueMessagesWaiting>
 80065f0:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80065f2:	697b      	ldr	r3, [r7, #20]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006608:	f3ef 8305 	mrs	r3, IPSR
 800660c:	60fb      	str	r3, [r7, #12]
  return(result);
 800660e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8006614:	f06f 0305 	mvn.w	r3, #5
 8006618:	617b      	str	r3, [r7, #20]
 800661a:	e00e      	b.n	800663a <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d103      	bne.n	800662a <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 8006622:	f06f 0303 	mvn.w	r3, #3
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	e007      	b.n	800663a <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800662a:	6938      	ldr	r0, [r7, #16]
 800662c:	f001 f9b6 	bl	800799c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006630:	2300      	movs	r3, #0
 8006632:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8006634:	6938      	ldr	r0, [r7, #16]
 8006636:	f001 f83b 	bl	80076b0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800663a:	697b      	ldr	r3, [r7, #20]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4a07      	ldr	r2, [pc, #28]	@ (8006670 <vApplicationGetIdleTaskMemory+0x2c>)
 8006654:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	4a06      	ldr	r2, [pc, #24]	@ (8006674 <vApplicationGetIdleTaskMemory+0x30>)
 800665a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2280      	movs	r2, #128	@ 0x80
 8006660:	601a      	str	r2, [r3, #0]
}
 8006662:	bf00      	nop
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	20004f54 	.word	0x20004f54
 8006674:	20004ffc 	.word	0x20004ffc

08006678 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4a07      	ldr	r2, [pc, #28]	@ (80066a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006688:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	4a06      	ldr	r2, [pc, #24]	@ (80066a8 <vApplicationGetTimerTaskMemory+0x30>)
 800668e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006696:	601a      	str	r2, [r3, #0]
}
 8006698:	bf00      	nop
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	200051fc 	.word	0x200051fc
 80066a8:	200052a4 	.word	0x200052a4

080066ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f103 0208 	add.w	r2, r3, #8
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f04f 32ff 	mov.w	r2, #4294967295
 80066c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f103 0208 	add.w	r2, r3, #8
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f103 0208 	add.w	r2, r3, #8
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066fa:	bf00      	nop
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006706:	b480      	push	{r7}
 8006708:	b085      	sub	sp, #20
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	601a      	str	r2, [r3, #0]
}
 8006742:	bf00      	nop
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800674e:	b480      	push	{r7}
 8006750:	b085      	sub	sp, #20
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006764:	d103      	bne.n	800676e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	e00c      	b.n	8006788 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	3308      	adds	r3, #8
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	e002      	b.n	800677c <vListInsert+0x2e>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	429a      	cmp	r2, r3
 8006786:	d2f6      	bcs.n	8006776 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	1c5a      	adds	r2, r3, #1
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	601a      	str	r2, [r3, #0]
}
 80067b4:	bf00      	nop
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	6892      	ldr	r2, [r2, #8]
 80067d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	6852      	ldr	r2, [r2, #4]
 80067e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d103      	bne.n	80067f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	1e5a      	subs	r2, r3, #1
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10b      	bne.n	8006840 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682c:	f383 8811 	msr	BASEPRI, r3
 8006830:	f3bf 8f6f 	isb	sy
 8006834:	f3bf 8f4f 	dsb	sy
 8006838:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800683a:	bf00      	nop
 800683c:	bf00      	nop
 800683e:	e7fd      	b.n	800683c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006840:	f002 fdf2 	bl	8009428 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800684c:	68f9      	ldr	r1, [r7, #12]
 800684e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006850:	fb01 f303 	mul.w	r3, r1, r3
 8006854:	441a      	add	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006870:	3b01      	subs	r3, #1
 8006872:	68f9      	ldr	r1, [r7, #12]
 8006874:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006876:	fb01 f303 	mul.w	r3, r1, r3
 800687a:	441a      	add	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	22ff      	movs	r2, #255	@ 0xff
 8006884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	22ff      	movs	r2, #255	@ 0xff
 800688c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d114      	bne.n	80068c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d01a      	beq.n	80068d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3310      	adds	r3, #16
 80068a2:	4618      	mov	r0, r3
 80068a4:	f001 fd7c 	bl	80083a0 <xTaskRemoveFromEventList>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d012      	beq.n	80068d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80068ae:	4b0d      	ldr	r3, [pc, #52]	@ (80068e4 <xQueueGenericReset+0xd0>)
 80068b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	e009      	b.n	80068d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3310      	adds	r3, #16
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff fef1 	bl	80066ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3324      	adds	r3, #36	@ 0x24
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7ff feec 	bl	80066ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068d4:	f002 fdda 	bl	800948c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068d8:	2301      	movs	r3, #1
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	e000ed04 	.word	0xe000ed04

080068e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08e      	sub	sp, #56	@ 0x38
 80068ec:	af02      	add	r7, sp, #8
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10b      	bne.n	8006914 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800690e:	bf00      	nop
 8006910:	bf00      	nop
 8006912:	e7fd      	b.n	8006910 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10b      	bne.n	8006932 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800691a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800692c:	bf00      	nop
 800692e:	bf00      	nop
 8006930:	e7fd      	b.n	800692e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <xQueueGenericCreateStatic+0x56>
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <xQueueGenericCreateStatic+0x5a>
 800693e:	2301      	movs	r3, #1
 8006940:	e000      	b.n	8006944 <xQueueGenericCreateStatic+0x5c>
 8006942:	2300      	movs	r3, #0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10b      	bne.n	8006960 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	623b      	str	r3, [r7, #32]
}
 800695a:	bf00      	nop
 800695c:	bf00      	nop
 800695e:	e7fd      	b.n	800695c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d102      	bne.n	800696c <xQueueGenericCreateStatic+0x84>
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <xQueueGenericCreateStatic+0x88>
 800696c:	2301      	movs	r3, #1
 800696e:	e000      	b.n	8006972 <xQueueGenericCreateStatic+0x8a>
 8006970:	2300      	movs	r3, #0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10b      	bne.n	800698e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	61fb      	str	r3, [r7, #28]
}
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	e7fd      	b.n	800698a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800698e:	2350      	movs	r3, #80	@ 0x50
 8006990:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2b50      	cmp	r3, #80	@ 0x50
 8006996:	d00b      	beq.n	80069b0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	61bb      	str	r3, [r7, #24]
}
 80069aa:	bf00      	nop
 80069ac:	bf00      	nop
 80069ae:	e7fd      	b.n	80069ac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80069b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80069b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00d      	beq.n	80069d8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80069bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069c4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80069c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	4613      	mov	r3, r2
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	68b9      	ldr	r1, [r7, #8]
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 f840 	bl	8006a58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80069da:	4618      	mov	r0, r3
 80069dc:	3730      	adds	r7, #48	@ 0x30
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b08a      	sub	sp, #40	@ 0x28
 80069e6:	af02      	add	r7, sp, #8
 80069e8:	60f8      	str	r0, [r7, #12]
 80069ea:	60b9      	str	r1, [r7, #8]
 80069ec:	4613      	mov	r3, r2
 80069ee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10b      	bne.n	8006a0e <xQueueGenericCreate+0x2c>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	613b      	str	r3, [r7, #16]
}
 8006a08:	bf00      	nop
 8006a0a:	bf00      	nop
 8006a0c:	e7fd      	b.n	8006a0a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	fb02 f303 	mul.w	r3, r2, r3
 8006a16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	3350      	adds	r3, #80	@ 0x50
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f002 fe25 	bl	800966c <pvPortMalloc>
 8006a22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d011      	beq.n	8006a4e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	3350      	adds	r3, #80	@ 0x50
 8006a32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a3c:	79fa      	ldrb	r2, [r7, #7]
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	4613      	mov	r3, r2
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	68b9      	ldr	r1, [r7, #8]
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 f805 	bl	8006a58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a4e:	69bb      	ldr	r3, [r7, #24]
	}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3720      	adds	r7, #32
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d103      	bne.n	8006a74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	e002      	b.n	8006a7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a86:	2101      	movs	r1, #1
 8006a88:	69b8      	ldr	r0, [r7, #24]
 8006a8a:	f7ff fec3 	bl	8006814 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	78fa      	ldrb	r2, [r7, #3]
 8006a92:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a96:	bf00      	nop
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b082      	sub	sp, #8
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00e      	beq.n	8006aca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006abe:	2300      	movs	r3, #0
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f911 	bl	8006cec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006aca:	bf00      	nop
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b086      	sub	sp, #24
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	4603      	mov	r3, r0
 8006ada:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006adc:	2301      	movs	r3, #1
 8006ade:	617b      	str	r3, [r7, #20]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	6939      	ldr	r1, [r7, #16]
 8006aea:	6978      	ldr	r0, [r7, #20]
 8006aec:	f7ff ff79 	bl	80069e2 <xQueueGenericCreate>
 8006af0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f7ff ffd3 	bl	8006a9e <prvInitialiseMutex>

		return xNewQueue;
 8006af8:	68fb      	ldr	r3, [r7, #12]
	}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b088      	sub	sp, #32
 8006b06:	af02      	add	r7, sp, #8
 8006b08:	4603      	mov	r3, r0
 8006b0a:	6039      	str	r1, [r7, #0]
 8006b0c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	2300      	movs	r3, #0
 8006b14:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006b16:	79fb      	ldrb	r3, [r7, #7]
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	6939      	ldr	r1, [r7, #16]
 8006b20:	6978      	ldr	r0, [r7, #20]
 8006b22:	f7ff fee1 	bl	80068e8 <xQueueGenericCreateStatic>
 8006b26:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f7ff ffb8 	bl	8006a9e <prvInitialiseMutex>

		return xNewQueue;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
	}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006b38:	b590      	push	{r4, r7, lr}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10b      	bne.n	8006b62 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	60fb      	str	r3, [r7, #12]
}
 8006b5c:	bf00      	nop
 8006b5e:	bf00      	nop
 8006b60:	e7fd      	b.n	8006b5e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	689c      	ldr	r4, [r3, #8]
 8006b66:	f001 fde1 	bl	800872c <xTaskGetCurrentTaskHandle>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	429c      	cmp	r4, r3
 8006b6e:	d111      	bne.n	8006b94 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	1e5a      	subs	r2, r3, #1
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d105      	bne.n	8006b8e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006b82:	2300      	movs	r3, #0
 8006b84:	2200      	movs	r2, #0
 8006b86:	2100      	movs	r1, #0
 8006b88:	6938      	ldr	r0, [r7, #16]
 8006b8a:	f000 f8af 	bl	8006cec <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	e001      	b.n	8006b98 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006b94:	2300      	movs	r3, #0
 8006b96:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006b98:	697b      	ldr	r3, [r7, #20]
	}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	371c      	adds	r7, #28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd90      	pop	{r4, r7, pc}

08006ba2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006ba2:	b590      	push	{r4, r7, lr}
 8006ba4:	b087      	sub	sp, #28
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10b      	bne.n	8006bce <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	60fb      	str	r3, [r7, #12]
}
 8006bc8:	bf00      	nop
 8006bca:	bf00      	nop
 8006bcc:	e7fd      	b.n	8006bca <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	689c      	ldr	r4, [r3, #8]
 8006bd2:	f001 fdab 	bl	800872c <xTaskGetCurrentTaskHandle>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	429c      	cmp	r4, r3
 8006bda:	d107      	bne.n	8006bec <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	1c5a      	adds	r2, r3, #1
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006be6:	2301      	movs	r3, #1
 8006be8:	617b      	str	r3, [r7, #20]
 8006bea:	e00c      	b.n	8006c06 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	6938      	ldr	r0, [r7, #16]
 8006bf0:	f000 fb8e 	bl	8007310 <xQueueSemaphoreTake>
 8006bf4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d004      	beq.n	8006c06 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006c06:	697b      	ldr	r3, [r7, #20]
	}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	371c      	adds	r7, #28
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd90      	pop	{r4, r7, pc}

08006c10 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08a      	sub	sp, #40	@ 0x28
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10b      	bne.n	8006c3a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	61bb      	str	r3, [r7, #24]
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop
 8006c38:	e7fd      	b.n	8006c36 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d90b      	bls.n	8006c5a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	617b      	str	r3, [r7, #20]
}
 8006c54:	bf00      	nop
 8006c56:	bf00      	nop
 8006c58:	e7fd      	b.n	8006c56 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	2100      	movs	r1, #0
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f7ff fe3f 	bl	80068e8 <xQueueGenericCreateStatic>
 8006c6a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d002      	beq.n	8006c78 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006c78:	69fb      	ldr	r3, [r7, #28]
	}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3720      	adds	r7, #32
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b086      	sub	sp, #24
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10b      	bne.n	8006caa <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	613b      	str	r3, [r7, #16]
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop
 8006ca8:	e7fd      	b.n	8006ca6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d90b      	bls.n	8006cca <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	60fb      	str	r3, [r7, #12]
}
 8006cc4:	bf00      	nop
 8006cc6:	bf00      	nop
 8006cc8:	e7fd      	b.n	8006cc6 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006cca:	2202      	movs	r2, #2
 8006ccc:	2100      	movs	r1, #0
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7ff fe87 	bl	80069e2 <xQueueGenericCreate>
 8006cd4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006ce2:	697b      	ldr	r3, [r7, #20]
	}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3718      	adds	r7, #24
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b08e      	sub	sp, #56	@ 0x38
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
 8006cf8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10b      	bne.n	8006d20 <xQueueGenericSend+0x34>
	__asm volatile
 8006d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d1a:	bf00      	nop
 8006d1c:	bf00      	nop
 8006d1e:	e7fd      	b.n	8006d1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d103      	bne.n	8006d2e <xQueueGenericSend+0x42>
 8006d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <xQueueGenericSend+0x46>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e000      	b.n	8006d34 <xQueueGenericSend+0x48>
 8006d32:	2300      	movs	r3, #0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10b      	bne.n	8006d50 <xQueueGenericSend+0x64>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d4a:	bf00      	nop
 8006d4c:	bf00      	nop
 8006d4e:	e7fd      	b.n	8006d4c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d103      	bne.n	8006d5e <xQueueGenericSend+0x72>
 8006d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d101      	bne.n	8006d62 <xQueueGenericSend+0x76>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <xQueueGenericSend+0x78>
 8006d62:	2300      	movs	r3, #0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10b      	bne.n	8006d80 <xQueueGenericSend+0x94>
	__asm volatile
 8006d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	623b      	str	r3, [r7, #32]
}
 8006d7a:	bf00      	nop
 8006d7c:	bf00      	nop
 8006d7e:	e7fd      	b.n	8006d7c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d80:	f001 fce4 	bl	800874c <xTaskGetSchedulerState>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d102      	bne.n	8006d90 <xQueueGenericSend+0xa4>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <xQueueGenericSend+0xa8>
 8006d90:	2301      	movs	r3, #1
 8006d92:	e000      	b.n	8006d96 <xQueueGenericSend+0xaa>
 8006d94:	2300      	movs	r3, #0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10b      	bne.n	8006db2 <xQueueGenericSend+0xc6>
	__asm volatile
 8006d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	61fb      	str	r3, [r7, #28]
}
 8006dac:	bf00      	nop
 8006dae:	bf00      	nop
 8006db0:	e7fd      	b.n	8006dae <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006db2:	f002 fb39 	bl	8009428 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d302      	bcc.n	8006dc8 <xQueueGenericSend+0xdc>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d129      	bne.n	8006e1c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	68b9      	ldr	r1, [r7, #8]
 8006dcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006dce:	f000 fcab 	bl	8007728 <prvCopyDataToQueue>
 8006dd2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d010      	beq.n	8006dfe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dde:	3324      	adds	r3, #36	@ 0x24
 8006de0:	4618      	mov	r0, r3
 8006de2:	f001 fadd 	bl	80083a0 <xTaskRemoveFromEventList>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d013      	beq.n	8006e14 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006dec:	4b3f      	ldr	r3, [pc, #252]	@ (8006eec <xQueueGenericSend+0x200>)
 8006dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	e00a      	b.n	8006e14 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d007      	beq.n	8006e14 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e04:	4b39      	ldr	r3, [pc, #228]	@ (8006eec <xQueueGenericSend+0x200>)
 8006e06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e14:	f002 fb3a 	bl	800948c <vPortExitCritical>
				return pdPASS;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e063      	b.n	8006ee4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d103      	bne.n	8006e2a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e22:	f002 fb33 	bl	800948c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e26:	2300      	movs	r3, #0
 8006e28:	e05c      	b.n	8006ee4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e30:	f107 0314 	add.w	r3, r7, #20
 8006e34:	4618      	mov	r0, r3
 8006e36:	f001 fb17 	bl	8008468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e3e:	f002 fb25 	bl	800948c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e42:	f001 f86d 	bl	8007f20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e46:	f002 faef 	bl	8009428 <vPortEnterCritical>
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e50:	b25b      	sxtb	r3, r3
 8006e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e56:	d103      	bne.n	8006e60 <xQueueGenericSend+0x174>
 8006e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e66:	b25b      	sxtb	r3, r3
 8006e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6c:	d103      	bne.n	8006e76 <xQueueGenericSend+0x18a>
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e76:	f002 fb09 	bl	800948c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e7a:	1d3a      	adds	r2, r7, #4
 8006e7c:	f107 0314 	add.w	r3, r7, #20
 8006e80:	4611      	mov	r1, r2
 8006e82:	4618      	mov	r0, r3
 8006e84:	f001 fb06 	bl	8008494 <xTaskCheckForTimeOut>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d124      	bne.n	8006ed8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e90:	f000 fd42 	bl	8007918 <prvIsQueueFull>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d018      	beq.n	8006ecc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9c:	3310      	adds	r3, #16
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	4611      	mov	r1, r2
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f001 fa2a 	bl	80082fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ea8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006eaa:	f000 fccd 	bl	8007848 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006eae:	f001 f845 	bl	8007f3c <xTaskResumeAll>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f47f af7c 	bne.w	8006db2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006eba:	4b0c      	ldr	r3, [pc, #48]	@ (8006eec <xQueueGenericSend+0x200>)
 8006ebc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	e772      	b.n	8006db2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ecc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ece:	f000 fcbb 	bl	8007848 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ed2:	f001 f833 	bl	8007f3c <xTaskResumeAll>
 8006ed6:	e76c      	b.n	8006db2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ed8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006eda:	f000 fcb5 	bl	8007848 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ede:	f001 f82d 	bl	8007f3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ee2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3738      	adds	r7, #56	@ 0x38
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	e000ed04 	.word	0xe000ed04

08006ef0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b090      	sub	sp, #64	@ 0x40
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10b      	bne.n	8006f20 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f1a:	bf00      	nop
 8006f1c:	bf00      	nop
 8006f1e:	e7fd      	b.n	8006f1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d103      	bne.n	8006f2e <xQueueGenericSendFromISR+0x3e>
 8006f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <xQueueGenericSendFromISR+0x42>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e000      	b.n	8006f34 <xQueueGenericSendFromISR+0x44>
 8006f32:	2300      	movs	r3, #0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10b      	bne.n	8006f50 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f4a:	bf00      	nop
 8006f4c:	bf00      	nop
 8006f4e:	e7fd      	b.n	8006f4c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d103      	bne.n	8006f5e <xQueueGenericSendFromISR+0x6e>
 8006f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d101      	bne.n	8006f62 <xQueueGenericSendFromISR+0x72>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e000      	b.n	8006f64 <xQueueGenericSendFromISR+0x74>
 8006f62:	2300      	movs	r3, #0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10b      	bne.n	8006f80 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	623b      	str	r3, [r7, #32]
}
 8006f7a:	bf00      	nop
 8006f7c:	bf00      	nop
 8006f7e:	e7fd      	b.n	8006f7c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f80:	f002 fb32 	bl	80095e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f84:	f3ef 8211 	mrs	r2, BASEPRI
 8006f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	61fa      	str	r2, [r7, #28]
 8006f9a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f9c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f9e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d302      	bcc.n	8006fb2 <xQueueGenericSendFromISR+0xc2>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d12f      	bne.n	8007012 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	68b9      	ldr	r1, [r7, #8]
 8006fc6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006fc8:	f000 fbae 	bl	8007728 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fcc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd4:	d112      	bne.n	8006ffc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d016      	beq.n	800700c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe0:	3324      	adds	r3, #36	@ 0x24
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f001 f9dc 	bl	80083a0 <xTaskRemoveFromEventList>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00e      	beq.n	800700c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00b      	beq.n	800700c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	e007      	b.n	800700c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ffc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007000:	3301      	adds	r3, #1
 8007002:	b2db      	uxtb	r3, r3
 8007004:	b25a      	sxtb	r2, r3
 8007006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007008:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800700c:	2301      	movs	r3, #1
 800700e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007010:	e001      	b.n	8007016 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007012:	2300      	movs	r3, #0
 8007014:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007018:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007020:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007024:	4618      	mov	r0, r3
 8007026:	3740      	adds	r7, #64	@ 0x40
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b08e      	sub	sp, #56	@ 0x38
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800703a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10b      	bne.n	8007058 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	623b      	str	r3, [r7, #32]
}
 8007052:	bf00      	nop
 8007054:	bf00      	nop
 8007056:	e7fd      	b.n	8007054 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00b      	beq.n	8007078 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	61fb      	str	r3, [r7, #28]
}
 8007072:	bf00      	nop
 8007074:	bf00      	nop
 8007076:	e7fd      	b.n	8007074 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d103      	bne.n	8007088 <xQueueGiveFromISR+0x5c>
 8007080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <xQueueGiveFromISR+0x60>
 8007088:	2301      	movs	r3, #1
 800708a:	e000      	b.n	800708e <xQueueGiveFromISR+0x62>
 800708c:	2300      	movs	r3, #0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10b      	bne.n	80070aa <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	61bb      	str	r3, [r7, #24]
}
 80070a4:	bf00      	nop
 80070a6:	bf00      	nop
 80070a8:	e7fd      	b.n	80070a6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070aa:	f002 fa9d 	bl	80095e8 <vPortValidateInterruptPriority>
	__asm volatile
 80070ae:	f3ef 8211 	mrs	r2, BASEPRI
 80070b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	617a      	str	r2, [r7, #20]
 80070c4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80070c6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80070d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d22b      	bcs.n	8007132 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e6:	1c5a      	adds	r2, r3, #1
 80070e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80070ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80070f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f4:	d112      	bne.n	800711c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d016      	beq.n	800712c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007100:	3324      	adds	r3, #36	@ 0x24
 8007102:	4618      	mov	r0, r3
 8007104:	f001 f94c 	bl	80083a0 <xTaskRemoveFromEventList>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00e      	beq.n	800712c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00b      	beq.n	800712c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	2201      	movs	r2, #1
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	e007      	b.n	800712c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800711c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007120:	3301      	adds	r3, #1
 8007122:	b2db      	uxtb	r3, r3
 8007124:	b25a      	sxtb	r2, r3
 8007126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800712c:	2301      	movs	r3, #1
 800712e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007130:	e001      	b.n	8007136 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007132:	2300      	movs	r3, #0
 8007134:	637b      	str	r3, [r7, #52]	@ 0x34
 8007136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007138:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f383 8811 	msr	BASEPRI, r3
}
 8007140:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007144:	4618      	mov	r0, r3
 8007146:	3738      	adds	r7, #56	@ 0x38
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08c      	sub	sp, #48	@ 0x30
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007158:	2300      	movs	r3, #0
 800715a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10b      	bne.n	800717e <xQueueReceive+0x32>
	__asm volatile
 8007166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716a:	f383 8811 	msr	BASEPRI, r3
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	623b      	str	r3, [r7, #32]
}
 8007178:	bf00      	nop
 800717a:	bf00      	nop
 800717c:	e7fd      	b.n	800717a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d103      	bne.n	800718c <xQueueReceive+0x40>
 8007184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <xQueueReceive+0x44>
 800718c:	2301      	movs	r3, #1
 800718e:	e000      	b.n	8007192 <xQueueReceive+0x46>
 8007190:	2300      	movs	r3, #0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10b      	bne.n	80071ae <xQueueReceive+0x62>
	__asm volatile
 8007196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	61fb      	str	r3, [r7, #28]
}
 80071a8:	bf00      	nop
 80071aa:	bf00      	nop
 80071ac:	e7fd      	b.n	80071aa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071ae:	f001 facd 	bl	800874c <xTaskGetSchedulerState>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d102      	bne.n	80071be <xQueueReceive+0x72>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <xQueueReceive+0x76>
 80071be:	2301      	movs	r3, #1
 80071c0:	e000      	b.n	80071c4 <xQueueReceive+0x78>
 80071c2:	2300      	movs	r3, #0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10b      	bne.n	80071e0 <xQueueReceive+0x94>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	61bb      	str	r3, [r7, #24]
}
 80071da:	bf00      	nop
 80071dc:	bf00      	nop
 80071de:	e7fd      	b.n	80071dc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071e0:	f002 f922 	bl	8009428 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01f      	beq.n	8007230 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071f4:	f000 fb02 	bl	80077fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fa:	1e5a      	subs	r2, r3, #1
 80071fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00f      	beq.n	8007228 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720a:	3310      	adds	r3, #16
 800720c:	4618      	mov	r0, r3
 800720e:	f001 f8c7 	bl	80083a0 <xTaskRemoveFromEventList>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d007      	beq.n	8007228 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007218:	4b3c      	ldr	r3, [pc, #240]	@ (800730c <xQueueReceive+0x1c0>)
 800721a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007228:	f002 f930 	bl	800948c <vPortExitCritical>
				return pdPASS;
 800722c:	2301      	movs	r3, #1
 800722e:	e069      	b.n	8007304 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d103      	bne.n	800723e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007236:	f002 f929 	bl	800948c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800723a:	2300      	movs	r3, #0
 800723c:	e062      	b.n	8007304 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800723e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007240:	2b00      	cmp	r3, #0
 8007242:	d106      	bne.n	8007252 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007244:	f107 0310 	add.w	r3, r7, #16
 8007248:	4618      	mov	r0, r3
 800724a:	f001 f90d 	bl	8008468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800724e:	2301      	movs	r3, #1
 8007250:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007252:	f002 f91b 	bl	800948c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007256:	f000 fe63 	bl	8007f20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800725a:	f002 f8e5 	bl	8009428 <vPortEnterCritical>
 800725e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007260:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007264:	b25b      	sxtb	r3, r3
 8007266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726a:	d103      	bne.n	8007274 <xQueueReceive+0x128>
 800726c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007276:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800727a:	b25b      	sxtb	r3, r3
 800727c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007280:	d103      	bne.n	800728a <xQueueReceive+0x13e>
 8007282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800728a:	f002 f8ff 	bl	800948c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800728e:	1d3a      	adds	r2, r7, #4
 8007290:	f107 0310 	add.w	r3, r7, #16
 8007294:	4611      	mov	r1, r2
 8007296:	4618      	mov	r0, r3
 8007298:	f001 f8fc 	bl	8008494 <xTaskCheckForTimeOut>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d123      	bne.n	80072ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072a4:	f000 fb22 	bl	80078ec <prvIsQueueEmpty>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d017      	beq.n	80072de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b0:	3324      	adds	r3, #36	@ 0x24
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	4611      	mov	r1, r2
 80072b6:	4618      	mov	r0, r3
 80072b8:	f001 f820 	bl	80082fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072be:	f000 fac3 	bl	8007848 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072c2:	f000 fe3b 	bl	8007f3c <xTaskResumeAll>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d189      	bne.n	80071e0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80072cc:	4b0f      	ldr	r3, [pc, #60]	@ (800730c <xQueueReceive+0x1c0>)
 80072ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	e780      	b.n	80071e0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80072de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072e0:	f000 fab2 	bl	8007848 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072e4:	f000 fe2a 	bl	8007f3c <xTaskResumeAll>
 80072e8:	e77a      	b.n	80071e0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80072ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072ec:	f000 faac 	bl	8007848 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072f0:	f000 fe24 	bl	8007f3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072f6:	f000 faf9 	bl	80078ec <prvIsQueueEmpty>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f43f af6f 	beq.w	80071e0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007302:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007304:	4618      	mov	r0, r3
 8007306:	3730      	adds	r7, #48	@ 0x30
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	e000ed04 	.word	0xe000ed04

08007310 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08e      	sub	sp, #56	@ 0x38
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800731a:	2300      	movs	r3, #0
 800731c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007322:	2300      	movs	r3, #0
 8007324:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10b      	bne.n	8007344 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	623b      	str	r3, [r7, #32]
}
 800733e:	bf00      	nop
 8007340:	bf00      	nop
 8007342:	e7fd      	b.n	8007340 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00b      	beq.n	8007364 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	61fb      	str	r3, [r7, #28]
}
 800735e:	bf00      	nop
 8007360:	bf00      	nop
 8007362:	e7fd      	b.n	8007360 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007364:	f001 f9f2 	bl	800874c <xTaskGetSchedulerState>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d102      	bne.n	8007374 <xQueueSemaphoreTake+0x64>
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <xQueueSemaphoreTake+0x68>
 8007374:	2301      	movs	r3, #1
 8007376:	e000      	b.n	800737a <xQueueSemaphoreTake+0x6a>
 8007378:	2300      	movs	r3, #0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10b      	bne.n	8007396 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	61bb      	str	r3, [r7, #24]
}
 8007390:	bf00      	nop
 8007392:	bf00      	nop
 8007394:	e7fd      	b.n	8007392 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007396:	f002 f847 	bl	8009428 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800739a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800739c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80073a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d024      	beq.n	80073f0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80073a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a8:	1e5a      	subs	r2, r3, #1
 80073aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ac:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d104      	bne.n	80073c0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80073b6:	f001 fb43 	bl	8008a40 <pvTaskIncrementMutexHeldCount>
 80073ba:	4602      	mov	r2, r0
 80073bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073be:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00f      	beq.n	80073e8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ca:	3310      	adds	r3, #16
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 ffe7 	bl	80083a0 <xTaskRemoveFromEventList>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d007      	beq.n	80073e8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073d8:	4b54      	ldr	r3, [pc, #336]	@ (800752c <xQueueSemaphoreTake+0x21c>)
 80073da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80073e8:	f002 f850 	bl	800948c <vPortExitCritical>
				return pdPASS;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e098      	b.n	8007522 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d112      	bne.n	800741c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80073f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00b      	beq.n	8007414 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	617b      	str	r3, [r7, #20]
}
 800740e:	bf00      	nop
 8007410:	bf00      	nop
 8007412:	e7fd      	b.n	8007410 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007414:	f002 f83a 	bl	800948c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007418:	2300      	movs	r3, #0
 800741a:	e082      	b.n	8007522 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800741c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800741e:	2b00      	cmp	r3, #0
 8007420:	d106      	bne.n	8007430 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007422:	f107 030c 	add.w	r3, r7, #12
 8007426:	4618      	mov	r0, r3
 8007428:	f001 f81e 	bl	8008468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800742c:	2301      	movs	r3, #1
 800742e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007430:	f002 f82c 	bl	800948c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007434:	f000 fd74 	bl	8007f20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007438:	f001 fff6 	bl	8009428 <vPortEnterCritical>
 800743c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800743e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007442:	b25b      	sxtb	r3, r3
 8007444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007448:	d103      	bne.n	8007452 <xQueueSemaphoreTake+0x142>
 800744a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007454:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007458:	b25b      	sxtb	r3, r3
 800745a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745e:	d103      	bne.n	8007468 <xQueueSemaphoreTake+0x158>
 8007460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007468:	f002 f810 	bl	800948c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800746c:	463a      	mov	r2, r7
 800746e:	f107 030c 	add.w	r3, r7, #12
 8007472:	4611      	mov	r1, r2
 8007474:	4618      	mov	r0, r3
 8007476:	f001 f80d 	bl	8008494 <xTaskCheckForTimeOut>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d132      	bne.n	80074e6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007480:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007482:	f000 fa33 	bl	80078ec <prvIsQueueEmpty>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d026      	beq.n	80074da <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800748c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d109      	bne.n	80074a8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007494:	f001 ffc8 	bl	8009428 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	4618      	mov	r0, r3
 800749e:	f001 f973 	bl	8008788 <xTaskPriorityInherit>
 80074a2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80074a4:	f001 fff2 	bl	800948c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074aa:	3324      	adds	r3, #36	@ 0x24
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	4611      	mov	r1, r2
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 ff23 	bl	80082fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80074b8:	f000 f9c6 	bl	8007848 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074bc:	f000 fd3e 	bl	8007f3c <xTaskResumeAll>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f47f af67 	bne.w	8007396 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80074c8:	4b18      	ldr	r3, [pc, #96]	@ (800752c <xQueueSemaphoreTake+0x21c>)
 80074ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	e75d      	b.n	8007396 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80074da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80074dc:	f000 f9b4 	bl	8007848 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074e0:	f000 fd2c 	bl	8007f3c <xTaskResumeAll>
 80074e4:	e757      	b.n	8007396 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80074e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80074e8:	f000 f9ae 	bl	8007848 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074ec:	f000 fd26 	bl	8007f3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80074f2:	f000 f9fb 	bl	80078ec <prvIsQueueEmpty>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f43f af4c 	beq.w	8007396 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80074fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00d      	beq.n	8007520 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007504:	f001 ff90 	bl	8009428 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007508:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800750a:	f000 f8f5 	bl	80076f8 <prvGetDisinheritPriorityAfterTimeout>
 800750e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007516:	4618      	mov	r0, r3
 8007518:	f001 fa0e 	bl	8008938 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800751c:	f001 ffb6 	bl	800948c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007520:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007522:	4618      	mov	r0, r3
 8007524:	3738      	adds	r7, #56	@ 0x38
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	e000ed04 	.word	0xe000ed04

08007530 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b08e      	sub	sp, #56	@ 0x38
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10b      	bne.n	800755e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	623b      	str	r3, [r7, #32]
}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	e7fd      	b.n	800755a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d103      	bne.n	800756c <xQueueReceiveFromISR+0x3c>
 8007564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <xQueueReceiveFromISR+0x40>
 800756c:	2301      	movs	r3, #1
 800756e:	e000      	b.n	8007572 <xQueueReceiveFromISR+0x42>
 8007570:	2300      	movs	r3, #0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10b      	bne.n	800758e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	61fb      	str	r3, [r7, #28]
}
 8007588:	bf00      	nop
 800758a:	bf00      	nop
 800758c:	e7fd      	b.n	800758a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800758e:	f002 f82b 	bl	80095e8 <vPortValidateInterruptPriority>
	__asm volatile
 8007592:	f3ef 8211 	mrs	r2, BASEPRI
 8007596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	61ba      	str	r2, [r7, #24]
 80075a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80075aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d02f      	beq.n	800761a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80075ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075c4:	68b9      	ldr	r1, [r7, #8]
 80075c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075c8:	f000 f918 	bl	80077fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ce:	1e5a      	subs	r2, r3, #1
 80075d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80075d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80075d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075dc:	d112      	bne.n	8007604 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d016      	beq.n	8007614 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e8:	3310      	adds	r3, #16
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fed8 	bl	80083a0 <xTaskRemoveFromEventList>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00e      	beq.n	8007614 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00b      	beq.n	8007614 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	e007      	b.n	8007614 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007604:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007608:	3301      	adds	r3, #1
 800760a:	b2db      	uxtb	r3, r3
 800760c:	b25a      	sxtb	r2, r3
 800760e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007610:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007614:	2301      	movs	r3, #1
 8007616:	637b      	str	r3, [r7, #52]	@ 0x34
 8007618:	e001      	b.n	800761e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800761a:	2300      	movs	r3, #0
 800761c:	637b      	str	r3, [r7, #52]	@ 0x34
 800761e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007620:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	f383 8811 	msr	BASEPRI, r3
}
 8007628:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800762a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800762c:	4618      	mov	r0, r3
 800762e:	3738      	adds	r7, #56	@ 0x38
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10b      	bne.n	800765a <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	60bb      	str	r3, [r7, #8]
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop
 8007658:	e7fd      	b.n	8007656 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800765a:	f001 fee5 	bl	8009428 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007662:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007664:	f001 ff12 	bl	800948c <vPortExitCritical>

	return uxReturn;
 8007668:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007672:	b480      	push	{r7}
 8007674:	b087      	sub	sp, #28
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10b      	bne.n	800769c <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8007684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	60fb      	str	r3, [r7, #12]
}
 8007696:	bf00      	nop
 8007698:	bf00      	nop
 800769a:	e7fd      	b.n	8007698 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80076a2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80076a4:	4618      	mov	r0, r3
 80076a6:	371c      	adds	r7, #28
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10b      	bne.n	80076da <vQueueDelete+0x2a>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	60bb      	str	r3, [r7, #8]
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop
 80076d8:	e7fd      	b.n	80076d6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 f95e 	bl	800799c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d102      	bne.n	80076f0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f002 f88c 	bl	8009808 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80076f0:	bf00      	nop
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007704:	2b00      	cmp	r3, #0
 8007706:	d006      	beq.n	8007716 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	e001      	b.n	800771a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800771a:	68fb      	ldr	r3, [r7, #12]
	}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007734:	2300      	movs	r3, #0
 8007736:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800773c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10d      	bne.n	8007762 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d14d      	bne.n	80077ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	4618      	mov	r0, r3
 8007754:	f001 f880 	bl	8008858 <xTaskPriorityDisinherit>
 8007758:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	609a      	str	r2, [r3, #8]
 8007760:	e043      	b.n	80077ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d119      	bne.n	800779c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6858      	ldr	r0, [r3, #4]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007770:	461a      	mov	r2, r3
 8007772:	68b9      	ldr	r1, [r7, #8]
 8007774:	f013 f8bd 	bl	801a8f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007780:	441a      	add	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	429a      	cmp	r2, r3
 8007790:	d32b      	bcc.n	80077ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	605a      	str	r2, [r3, #4]
 800779a:	e026      	b.n	80077ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	68d8      	ldr	r0, [r3, #12]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a4:	461a      	mov	r2, r3
 80077a6:	68b9      	ldr	r1, [r7, #8]
 80077a8:	f013 f8a3 	bl	801a8f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	68da      	ldr	r2, [r3, #12]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b4:	425b      	negs	r3, r3
 80077b6:	441a      	add	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d207      	bcs.n	80077d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d0:	425b      	negs	r3, r3
 80077d2:	441a      	add	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d105      	bne.n	80077ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	1c5a      	adds	r2, r3, #1
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80077f2:	697b      	ldr	r3, [r7, #20]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3718      	adds	r7, #24
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800780a:	2b00      	cmp	r3, #0
 800780c:	d018      	beq.n	8007840 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68da      	ldr	r2, [r3, #12]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007816:	441a      	add	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68da      	ldr	r2, [r3, #12]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	429a      	cmp	r2, r3
 8007826:	d303      	bcc.n	8007830 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68d9      	ldr	r1, [r3, #12]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007838:	461a      	mov	r2, r3
 800783a:	6838      	ldr	r0, [r7, #0]
 800783c:	f013 f859 	bl	801a8f2 <memcpy>
	}
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007850:	f001 fdea 	bl	8009428 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800785a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800785c:	e011      	b.n	8007882 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007862:	2b00      	cmp	r3, #0
 8007864:	d012      	beq.n	800788c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	3324      	adds	r3, #36	@ 0x24
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fd98 	bl	80083a0 <xTaskRemoveFromEventList>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007876:	f000 fe71 	bl	800855c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	3b01      	subs	r3, #1
 800787e:	b2db      	uxtb	r3, r3
 8007880:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007886:	2b00      	cmp	r3, #0
 8007888:	dce9      	bgt.n	800785e <prvUnlockQueue+0x16>
 800788a:	e000      	b.n	800788e <prvUnlockQueue+0x46>
					break;
 800788c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	22ff      	movs	r2, #255	@ 0xff
 8007892:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007896:	f001 fdf9 	bl	800948c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800789a:	f001 fdc5 	bl	8009428 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078a6:	e011      	b.n	80078cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d012      	beq.n	80078d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	3310      	adds	r3, #16
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 fd73 	bl	80083a0 <xTaskRemoveFromEventList>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80078c0:	f000 fe4c 	bl	800855c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80078c4:	7bbb      	ldrb	r3, [r7, #14]
 80078c6:	3b01      	subs	r3, #1
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	dce9      	bgt.n	80078a8 <prvUnlockQueue+0x60>
 80078d4:	e000      	b.n	80078d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80078d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	22ff      	movs	r2, #255	@ 0xff
 80078dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80078e0:	f001 fdd4 	bl	800948c <vPortExitCritical>
}
 80078e4:	bf00      	nop
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078f4:	f001 fd98 	bl	8009428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d102      	bne.n	8007906 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007900:	2301      	movs	r3, #1
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	e001      	b.n	800790a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007906:	2300      	movs	r3, #0
 8007908:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800790a:	f001 fdbf 	bl	800948c <vPortExitCritical>

	return xReturn;
 800790e:	68fb      	ldr	r3, [r7, #12]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007920:	f001 fd82 	bl	8009428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800792c:	429a      	cmp	r2, r3
 800792e:	d102      	bne.n	8007936 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007930:	2301      	movs	r3, #1
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	e001      	b.n	800793a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007936:	2300      	movs	r3, #0
 8007938:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800793a:	f001 fda7 	bl	800948c <vPortExitCritical>

	return xReturn;
 800793e:	68fb      	ldr	r3, [r7, #12]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007952:	2300      	movs	r3, #0
 8007954:	60fb      	str	r3, [r7, #12]
 8007956:	e014      	b.n	8007982 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007958:	4a0f      	ldr	r2, [pc, #60]	@ (8007998 <vQueueAddToRegistry+0x50>)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10b      	bne.n	800797c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007964:	490c      	ldr	r1, [pc, #48]	@ (8007998 <vQueueAddToRegistry+0x50>)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800796e:	4a0a      	ldr	r2, [pc, #40]	@ (8007998 <vQueueAddToRegistry+0x50>)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	4413      	add	r3, r2
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800797a:	e006      	b.n	800798a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3301      	adds	r3, #1
 8007980:	60fb      	str	r3, [r7, #12]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2b07      	cmp	r3, #7
 8007986:	d9e7      	bls.n	8007958 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007988:	bf00      	nop
 800798a:	bf00      	nop
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	200056a4 	.word	0x200056a4

0800799c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	e016      	b.n	80079d8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80079aa:	4a10      	ldr	r2, [pc, #64]	@ (80079ec <vQueueUnregisterQueue+0x50>)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	00db      	lsls	r3, r3, #3
 80079b0:	4413      	add	r3, r2
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d10b      	bne.n	80079d2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80079ba:	4a0c      	ldr	r2, [pc, #48]	@ (80079ec <vQueueUnregisterQueue+0x50>)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2100      	movs	r1, #0
 80079c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80079c4:	4a09      	ldr	r2, [pc, #36]	@ (80079ec <vQueueUnregisterQueue+0x50>)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	00db      	lsls	r3, r3, #3
 80079ca:	4413      	add	r3, r2
 80079cc:	2200      	movs	r2, #0
 80079ce:	605a      	str	r2, [r3, #4]
				break;
 80079d0:	e006      	b.n	80079e0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3301      	adds	r3, #1
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2b07      	cmp	r3, #7
 80079dc:	d9e5      	bls.n	80079aa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80079de:	bf00      	nop
 80079e0:	bf00      	nop
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr
 80079ec:	200056a4 	.word	0x200056a4

080079f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a00:	f001 fd12 	bl	8009428 <vPortEnterCritical>
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a0a:	b25b      	sxtb	r3, r3
 8007a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a10:	d103      	bne.n	8007a1a <vQueueWaitForMessageRestricted+0x2a>
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a20:	b25b      	sxtb	r3, r3
 8007a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a26:	d103      	bne.n	8007a30 <vQueueWaitForMessageRestricted+0x40>
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a30:	f001 fd2c 	bl	800948c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d106      	bne.n	8007a4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	3324      	adds	r3, #36	@ 0x24
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	68b9      	ldr	r1, [r7, #8]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f000 fc7f 	bl	8008348 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007a4a:	6978      	ldr	r0, [r7, #20]
 8007a4c:	f7ff fefc 	bl	8007848 <prvUnlockQueue>
	}
 8007a50:	bf00      	nop
 8007a52:	3718      	adds	r7, #24
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b08e      	sub	sp, #56	@ 0x38
 8007a5c:	af04      	add	r7, sp, #16
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
 8007a64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10b      	bne.n	8007a84 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a70:	f383 8811 	msr	BASEPRI, r3
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	623b      	str	r3, [r7, #32]
}
 8007a7e:	bf00      	nop
 8007a80:	bf00      	nop
 8007a82:	e7fd      	b.n	8007a80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10b      	bne.n	8007aa2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	61fb      	str	r3, [r7, #28]
}
 8007a9c:	bf00      	nop
 8007a9e:	bf00      	nop
 8007aa0:	e7fd      	b.n	8007a9e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007aa2:	23a8      	movs	r3, #168	@ 0xa8
 8007aa4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	2ba8      	cmp	r3, #168	@ 0xa8
 8007aaa:	d00b      	beq.n	8007ac4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	61bb      	str	r3, [r7, #24]
}
 8007abe:	bf00      	nop
 8007ac0:	bf00      	nop
 8007ac2:	e7fd      	b.n	8007ac0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ac4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d01e      	beq.n	8007b0a <xTaskCreateStatic+0xb2>
 8007acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d01b      	beq.n	8007b0a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ada:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	9303      	str	r3, [sp, #12]
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aea:	9302      	str	r3, [sp, #8]
 8007aec:	f107 0314 	add.w	r3, r7, #20
 8007af0:	9301      	str	r3, [sp, #4]
 8007af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	68b9      	ldr	r1, [r7, #8]
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 f851 	bl	8007ba4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b04:	f000 f8f6 	bl	8007cf4 <prvAddNewTaskToReadyList>
 8007b08:	e001      	b.n	8007b0e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b0e:	697b      	ldr	r3, [r7, #20]
	}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3728      	adds	r7, #40	@ 0x28
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08c      	sub	sp, #48	@ 0x30
 8007b1c:	af04      	add	r7, sp, #16
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	603b      	str	r3, [r7, #0]
 8007b24:	4613      	mov	r3, r2
 8007b26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b28:	88fb      	ldrh	r3, [r7, #6]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f001 fd9d 	bl	800966c <pvPortMalloc>
 8007b32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00e      	beq.n	8007b58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b3a:	20a8      	movs	r0, #168	@ 0xa8
 8007b3c:	f001 fd96 	bl	800966c <pvPortMalloc>
 8007b40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d003      	beq.n	8007b50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b4e:	e005      	b.n	8007b5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b50:	6978      	ldr	r0, [r7, #20]
 8007b52:	f001 fe59 	bl	8009808 <vPortFree>
 8007b56:	e001      	b.n	8007b5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d017      	beq.n	8007b92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b6a:	88fa      	ldrh	r2, [r7, #6]
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	9303      	str	r3, [sp, #12]
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	9302      	str	r3, [sp, #8]
 8007b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b76:	9301      	str	r3, [sp, #4]
 8007b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	68b9      	ldr	r1, [r7, #8]
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 f80f 	bl	8007ba4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b86:	69f8      	ldr	r0, [r7, #28]
 8007b88:	f000 f8b4 	bl	8007cf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	61bb      	str	r3, [r7, #24]
 8007b90:	e002      	b.n	8007b98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b92:	f04f 33ff 	mov.w	r3, #4294967295
 8007b96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b98:	69bb      	ldr	r3, [r7, #24]
	}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3720      	adds	r7, #32
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
	...

08007ba4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b088      	sub	sp, #32
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
 8007bb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	461a      	mov	r2, r3
 8007bbc:	21a5      	movs	r1, #165	@ 0xa5
 8007bbe:	f012 fda1 	bl	801a704 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	f023 0307 	bic.w	r3, r3, #7
 8007bda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	f003 0307 	and.w	r3, r3, #7
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00b      	beq.n	8007bfe <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	617b      	str	r3, [r7, #20]
}
 8007bf8:	bf00      	nop
 8007bfa:	bf00      	nop
 8007bfc:	e7fd      	b.n	8007bfa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d01f      	beq.n	8007c44 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c04:	2300      	movs	r3, #0
 8007c06:	61fb      	str	r3, [r7, #28]
 8007c08:	e012      	b.n	8007c30 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	4413      	add	r3, r2
 8007c10:	7819      	ldrb	r1, [r3, #0]
 8007c12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	4413      	add	r3, r2
 8007c18:	3334      	adds	r3, #52	@ 0x34
 8007c1a:	460a      	mov	r2, r1
 8007c1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	4413      	add	r3, r2
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d006      	beq.n	8007c38 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	61fb      	str	r3, [r7, #28]
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	2b0f      	cmp	r3, #15
 8007c34:	d9e9      	bls.n	8007c0a <prvInitialiseNewTask+0x66>
 8007c36:	e000      	b.n	8007c3a <prvInitialiseNewTask+0x96>
			{
				break;
 8007c38:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c42:	e003      	b.n	8007c4c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4e:	2b37      	cmp	r3, #55	@ 0x37
 8007c50:	d901      	bls.n	8007c56 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c52:	2337      	movs	r3, #55	@ 0x37
 8007c54:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c60:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c64:	2200      	movs	r2, #0
 8007c66:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fe fd3d 	bl	80066ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c74:	3318      	adds	r3, #24
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe fd38 	bl	80066ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c90:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c94:	2200      	movs	r2, #0
 8007c96:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca4:	3354      	adds	r3, #84	@ 0x54
 8007ca6:	224c      	movs	r2, #76	@ 0x4c
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4618      	mov	r0, r3
 8007cac:	f012 fd2a 	bl	801a704 <memset>
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb2:	4a0d      	ldr	r2, [pc, #52]	@ (8007ce8 <prvInitialiseNewTask+0x144>)
 8007cb4:	659a      	str	r2, [r3, #88]	@ 0x58
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb8:	4a0c      	ldr	r2, [pc, #48]	@ (8007cec <prvInitialiseNewTask+0x148>)
 8007cba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8007cf0 <prvInitialiseNewTask+0x14c>)
 8007cc0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007cc2:	683a      	ldr	r2, [r7, #0]
 8007cc4:	68f9      	ldr	r1, [r7, #12]
 8007cc6:	69b8      	ldr	r0, [r7, #24]
 8007cc8:	f001 fa7c 	bl	80091c4 <pxPortInitialiseStack>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d002      	beq.n	8007cde <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cde:	bf00      	nop
 8007ce0:	3720      	adds	r7, #32
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	2000d258 	.word	0x2000d258
 8007cec:	2000d2c0 	.word	0x2000d2c0
 8007cf0:	2000d328 	.word	0x2000d328

08007cf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007cfc:	f001 fb94 	bl	8009428 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d00:	4b2d      	ldr	r3, [pc, #180]	@ (8007db8 <prvAddNewTaskToReadyList+0xc4>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3301      	adds	r3, #1
 8007d06:	4a2c      	ldr	r2, [pc, #176]	@ (8007db8 <prvAddNewTaskToReadyList+0xc4>)
 8007d08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d0a:	4b2c      	ldr	r3, [pc, #176]	@ (8007dbc <prvAddNewTaskToReadyList+0xc8>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d109      	bne.n	8007d26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d12:	4a2a      	ldr	r2, [pc, #168]	@ (8007dbc <prvAddNewTaskToReadyList+0xc8>)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d18:	4b27      	ldr	r3, [pc, #156]	@ (8007db8 <prvAddNewTaskToReadyList+0xc4>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d110      	bne.n	8007d42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d20:	f000 fc40 	bl	80085a4 <prvInitialiseTaskLists>
 8007d24:	e00d      	b.n	8007d42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d26:	4b26      	ldr	r3, [pc, #152]	@ (8007dc0 <prvAddNewTaskToReadyList+0xcc>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d109      	bne.n	8007d42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d2e:	4b23      	ldr	r3, [pc, #140]	@ (8007dbc <prvAddNewTaskToReadyList+0xc8>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d802      	bhi.n	8007d42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8007dbc <prvAddNewTaskToReadyList+0xc8>)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d42:	4b20      	ldr	r3, [pc, #128]	@ (8007dc4 <prvAddNewTaskToReadyList+0xd0>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3301      	adds	r3, #1
 8007d48:	4a1e      	ldr	r2, [pc, #120]	@ (8007dc4 <prvAddNewTaskToReadyList+0xd0>)
 8007d4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8007dc4 <prvAddNewTaskToReadyList+0xd0>)
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d58:	4b1b      	ldr	r3, [pc, #108]	@ (8007dc8 <prvAddNewTaskToReadyList+0xd4>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d903      	bls.n	8007d68 <prvAddNewTaskToReadyList+0x74>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d64:	4a18      	ldr	r2, [pc, #96]	@ (8007dc8 <prvAddNewTaskToReadyList+0xd4>)
 8007d66:	6013      	str	r3, [r2, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4a15      	ldr	r2, [pc, #84]	@ (8007dcc <prvAddNewTaskToReadyList+0xd8>)
 8007d76:	441a      	add	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	4610      	mov	r0, r2
 8007d80:	f7fe fcc1 	bl	8006706 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d84:	f001 fb82 	bl	800948c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d88:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc0 <prvAddNewTaskToReadyList+0xcc>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00e      	beq.n	8007dae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d90:	4b0a      	ldr	r3, [pc, #40]	@ (8007dbc <prvAddNewTaskToReadyList+0xc8>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d207      	bcs.n	8007dae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8007dd0 <prvAddNewTaskToReadyList+0xdc>)
 8007da0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007da4:	601a      	str	r2, [r3, #0]
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dae:	bf00      	nop
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20005bb8 	.word	0x20005bb8
 8007dbc:	200056e4 	.word	0x200056e4
 8007dc0:	20005bc4 	.word	0x20005bc4
 8007dc4:	20005bd4 	.word	0x20005bd4
 8007dc8:	20005bc0 	.word	0x20005bc0
 8007dcc:	200056e8 	.word	0x200056e8
 8007dd0:	e000ed04 	.word	0xe000ed04

08007dd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d018      	beq.n	8007e18 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007de6:	4b14      	ldr	r3, [pc, #80]	@ (8007e38 <vTaskDelay+0x64>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00b      	beq.n	8007e06 <vTaskDelay+0x32>
	__asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	60bb      	str	r3, [r7, #8]
}
 8007e00:	bf00      	nop
 8007e02:	bf00      	nop
 8007e04:	e7fd      	b.n	8007e02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e06:	f000 f88b 	bl	8007f20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fe2b 	bl	8008a68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e12:	f000 f893 	bl	8007f3c <xTaskResumeAll>
 8007e16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d107      	bne.n	8007e2e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007e1e:	4b07      	ldr	r3, [pc, #28]	@ (8007e3c <vTaskDelay+0x68>)
 8007e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e2e:	bf00      	nop
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20005be0 	.word	0x20005be0
 8007e3c:	e000ed04 	.word	0xe000ed04

08007e40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b08a      	sub	sp, #40	@ 0x28
 8007e44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e4e:	463a      	mov	r2, r7
 8007e50:	1d39      	adds	r1, r7, #4
 8007e52:	f107 0308 	add.w	r3, r7, #8
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe fbf4 	bl	8006644 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	9202      	str	r2, [sp, #8]
 8007e64:	9301      	str	r3, [sp, #4]
 8007e66:	2300      	movs	r3, #0
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	460a      	mov	r2, r1
 8007e6e:	4924      	ldr	r1, [pc, #144]	@ (8007f00 <vTaskStartScheduler+0xc0>)
 8007e70:	4824      	ldr	r0, [pc, #144]	@ (8007f04 <vTaskStartScheduler+0xc4>)
 8007e72:	f7ff fdf1 	bl	8007a58 <xTaskCreateStatic>
 8007e76:	4603      	mov	r3, r0
 8007e78:	4a23      	ldr	r2, [pc, #140]	@ (8007f08 <vTaskStartScheduler+0xc8>)
 8007e7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007e7c:	4b22      	ldr	r3, [pc, #136]	@ (8007f08 <vTaskStartScheduler+0xc8>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007e84:	2301      	movs	r3, #1
 8007e86:	617b      	str	r3, [r7, #20]
 8007e88:	e001      	b.n	8007e8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d102      	bne.n	8007e9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007e94:	f000 fe3c 	bl	8008b10 <xTimerCreateTimerTask>
 8007e98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d11b      	bne.n	8007ed8 <vTaskStartScheduler+0x98>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	613b      	str	r3, [r7, #16]
}
 8007eb2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007eb4:	4b15      	ldr	r3, [pc, #84]	@ (8007f0c <vTaskStartScheduler+0xcc>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3354      	adds	r3, #84	@ 0x54
 8007eba:	4a15      	ldr	r2, [pc, #84]	@ (8007f10 <vTaskStartScheduler+0xd0>)
 8007ebc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ebe:	4b15      	ldr	r3, [pc, #84]	@ (8007f14 <vTaskStartScheduler+0xd4>)
 8007ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ec6:	4b14      	ldr	r3, [pc, #80]	@ (8007f18 <vTaskStartScheduler+0xd8>)
 8007ec8:	2201      	movs	r2, #1
 8007eca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ecc:	4b13      	ldr	r3, [pc, #76]	@ (8007f1c <vTaskStartScheduler+0xdc>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ed2:	f001 fa05 	bl	80092e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ed6:	e00f      	b.n	8007ef8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ede:	d10b      	bne.n	8007ef8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	60fb      	str	r3, [r7, #12]
}
 8007ef2:	bf00      	nop
 8007ef4:	bf00      	nop
 8007ef6:	e7fd      	b.n	8007ef4 <vTaskStartScheduler+0xb4>
}
 8007ef8:	bf00      	nop
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	0801dc3c 	.word	0x0801dc3c
 8007f04:	08008575 	.word	0x08008575
 8007f08:	20005bdc 	.word	0x20005bdc
 8007f0c:	200056e4 	.word	0x200056e4
 8007f10:	2000003c 	.word	0x2000003c
 8007f14:	20005bd8 	.word	0x20005bd8
 8007f18:	20005bc4 	.word	0x20005bc4
 8007f1c:	20005bbc 	.word	0x20005bbc

08007f20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f20:	b480      	push	{r7}
 8007f22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007f24:	4b04      	ldr	r3, [pc, #16]	@ (8007f38 <vTaskSuspendAll+0x18>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	4a03      	ldr	r2, [pc, #12]	@ (8007f38 <vTaskSuspendAll+0x18>)
 8007f2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007f2e:	bf00      	nop
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	20005be0 	.word	0x20005be0

08007f3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f42:	2300      	movs	r3, #0
 8007f44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f46:	2300      	movs	r3, #0
 8007f48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f4a:	4b42      	ldr	r3, [pc, #264]	@ (8008054 <xTaskResumeAll+0x118>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10b      	bne.n	8007f6a <xTaskResumeAll+0x2e>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	603b      	str	r3, [r7, #0]
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop
 8007f68:	e7fd      	b.n	8007f66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f6a:	f001 fa5d 	bl	8009428 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f6e:	4b39      	ldr	r3, [pc, #228]	@ (8008054 <xTaskResumeAll+0x118>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	3b01      	subs	r3, #1
 8007f74:	4a37      	ldr	r2, [pc, #220]	@ (8008054 <xTaskResumeAll+0x118>)
 8007f76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f78:	4b36      	ldr	r3, [pc, #216]	@ (8008054 <xTaskResumeAll+0x118>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d162      	bne.n	8008046 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f80:	4b35      	ldr	r3, [pc, #212]	@ (8008058 <xTaskResumeAll+0x11c>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d05e      	beq.n	8008046 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f88:	e02f      	b.n	8007fea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f8a:	4b34      	ldr	r3, [pc, #208]	@ (800805c <xTaskResumeAll+0x120>)
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	3318      	adds	r3, #24
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe fc12 	bl	80067c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fe fc0d 	bl	80067c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007faa:	4b2d      	ldr	r3, [pc, #180]	@ (8008060 <xTaskResumeAll+0x124>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d903      	bls.n	8007fba <xTaskResumeAll+0x7e>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8008060 <xTaskResumeAll+0x124>)
 8007fb8:	6013      	str	r3, [r2, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4a27      	ldr	r2, [pc, #156]	@ (8008064 <xTaskResumeAll+0x128>)
 8007fc8:	441a      	add	r2, r3
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	3304      	adds	r3, #4
 8007fce:	4619      	mov	r1, r3
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	f7fe fb98 	bl	8006706 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fda:	4b23      	ldr	r3, [pc, #140]	@ (8008068 <xTaskResumeAll+0x12c>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d302      	bcc.n	8007fea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007fe4:	4b21      	ldr	r3, [pc, #132]	@ (800806c <xTaskResumeAll+0x130>)
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fea:	4b1c      	ldr	r3, [pc, #112]	@ (800805c <xTaskResumeAll+0x120>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1cb      	bne.n	8007f8a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ff8:	f000 fb78 	bl	80086ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8008070 <xTaskResumeAll+0x134>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d010      	beq.n	800802a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008008:	f000 f858 	bl	80080bc <xTaskIncrementTick>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d002      	beq.n	8008018 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008012:	4b16      	ldr	r3, [pc, #88]	@ (800806c <xTaskResumeAll+0x130>)
 8008014:	2201      	movs	r2, #1
 8008016:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	3b01      	subs	r3, #1
 800801c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1f1      	bne.n	8008008 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008024:	4b12      	ldr	r3, [pc, #72]	@ (8008070 <xTaskResumeAll+0x134>)
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800802a:	4b10      	ldr	r3, [pc, #64]	@ (800806c <xTaskResumeAll+0x130>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d009      	beq.n	8008046 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008032:	2301      	movs	r3, #1
 8008034:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008036:	4b0f      	ldr	r3, [pc, #60]	@ (8008074 <xTaskResumeAll+0x138>)
 8008038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008046:	f001 fa21 	bl	800948c <vPortExitCritical>

	return xAlreadyYielded;
 800804a:	68bb      	ldr	r3, [r7, #8]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	20005be0 	.word	0x20005be0
 8008058:	20005bb8 	.word	0x20005bb8
 800805c:	20005b78 	.word	0x20005b78
 8008060:	20005bc0 	.word	0x20005bc0
 8008064:	200056e8 	.word	0x200056e8
 8008068:	200056e4 	.word	0x200056e4
 800806c:	20005bcc 	.word	0x20005bcc
 8008070:	20005bc8 	.word	0x20005bc8
 8008074:	e000ed04 	.word	0xe000ed04

08008078 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800807e:	4b05      	ldr	r3, [pc, #20]	@ (8008094 <xTaskGetTickCount+0x1c>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008084:	687b      	ldr	r3, [r7, #4]
}
 8008086:	4618      	mov	r0, r3
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	20005bbc 	.word	0x20005bbc

08008098 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800809e:	f001 faa3 	bl	80095e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80080a2:	2300      	movs	r3, #0
 80080a4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80080a6:	4b04      	ldr	r3, [pc, #16]	@ (80080b8 <xTaskGetTickCountFromISR+0x20>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080ac:	683b      	ldr	r3, [r7, #0]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	20005bbc 	.word	0x20005bbc

080080bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80080c2:	2300      	movs	r3, #0
 80080c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080c6:	4b4f      	ldr	r3, [pc, #316]	@ (8008204 <xTaskIncrementTick+0x148>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f040 8090 	bne.w	80081f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80080d0:	4b4d      	ldr	r3, [pc, #308]	@ (8008208 <xTaskIncrementTick+0x14c>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3301      	adds	r3, #1
 80080d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80080d8:	4a4b      	ldr	r2, [pc, #300]	@ (8008208 <xTaskIncrementTick+0x14c>)
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d121      	bne.n	8008128 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80080e4:	4b49      	ldr	r3, [pc, #292]	@ (800820c <xTaskIncrementTick+0x150>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00b      	beq.n	8008106 <xTaskIncrementTick+0x4a>
	__asm volatile
 80080ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	603b      	str	r3, [r7, #0]
}
 8008100:	bf00      	nop
 8008102:	bf00      	nop
 8008104:	e7fd      	b.n	8008102 <xTaskIncrementTick+0x46>
 8008106:	4b41      	ldr	r3, [pc, #260]	@ (800820c <xTaskIncrementTick+0x150>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	60fb      	str	r3, [r7, #12]
 800810c:	4b40      	ldr	r3, [pc, #256]	@ (8008210 <xTaskIncrementTick+0x154>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a3e      	ldr	r2, [pc, #248]	@ (800820c <xTaskIncrementTick+0x150>)
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	4a3e      	ldr	r2, [pc, #248]	@ (8008210 <xTaskIncrementTick+0x154>)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6013      	str	r3, [r2, #0]
 800811a:	4b3e      	ldr	r3, [pc, #248]	@ (8008214 <xTaskIncrementTick+0x158>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3301      	adds	r3, #1
 8008120:	4a3c      	ldr	r2, [pc, #240]	@ (8008214 <xTaskIncrementTick+0x158>)
 8008122:	6013      	str	r3, [r2, #0]
 8008124:	f000 fae2 	bl	80086ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008128:	4b3b      	ldr	r3, [pc, #236]	@ (8008218 <xTaskIncrementTick+0x15c>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	429a      	cmp	r2, r3
 8008130:	d349      	bcc.n	80081c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008132:	4b36      	ldr	r3, [pc, #216]	@ (800820c <xTaskIncrementTick+0x150>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d104      	bne.n	8008146 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800813c:	4b36      	ldr	r3, [pc, #216]	@ (8008218 <xTaskIncrementTick+0x15c>)
 800813e:	f04f 32ff 	mov.w	r2, #4294967295
 8008142:	601a      	str	r2, [r3, #0]
					break;
 8008144:	e03f      	b.n	80081c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008146:	4b31      	ldr	r3, [pc, #196]	@ (800820c <xTaskIncrementTick+0x150>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	429a      	cmp	r2, r3
 800815c:	d203      	bcs.n	8008166 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800815e:	4a2e      	ldr	r2, [pc, #184]	@ (8008218 <xTaskIncrementTick+0x15c>)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008164:	e02f      	b.n	80081c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	3304      	adds	r3, #4
 800816a:	4618      	mov	r0, r3
 800816c:	f7fe fb28 	bl	80067c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008174:	2b00      	cmp	r3, #0
 8008176:	d004      	beq.n	8008182 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	3318      	adds	r3, #24
 800817c:	4618      	mov	r0, r3
 800817e:	f7fe fb1f 	bl	80067c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008186:	4b25      	ldr	r3, [pc, #148]	@ (800821c <xTaskIncrementTick+0x160>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d903      	bls.n	8008196 <xTaskIncrementTick+0xda>
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008192:	4a22      	ldr	r2, [pc, #136]	@ (800821c <xTaskIncrementTick+0x160>)
 8008194:	6013      	str	r3, [r2, #0]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800819a:	4613      	mov	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4a1f      	ldr	r2, [pc, #124]	@ (8008220 <xTaskIncrementTick+0x164>)
 80081a4:	441a      	add	r2, r3
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	3304      	adds	r3, #4
 80081aa:	4619      	mov	r1, r3
 80081ac:	4610      	mov	r0, r2
 80081ae:	f7fe faaa 	bl	8006706 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081b6:	4b1b      	ldr	r3, [pc, #108]	@ (8008224 <xTaskIncrementTick+0x168>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081bc:	429a      	cmp	r2, r3
 80081be:	d3b8      	bcc.n	8008132 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80081c0:	2301      	movs	r3, #1
 80081c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081c4:	e7b5      	b.n	8008132 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80081c6:	4b17      	ldr	r3, [pc, #92]	@ (8008224 <xTaskIncrementTick+0x168>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081cc:	4914      	ldr	r1, [pc, #80]	@ (8008220 <xTaskIncrementTick+0x164>)
 80081ce:	4613      	mov	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	440b      	add	r3, r1
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d901      	bls.n	80081e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80081de:	2301      	movs	r3, #1
 80081e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80081e2:	4b11      	ldr	r3, [pc, #68]	@ (8008228 <xTaskIncrementTick+0x16c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d007      	beq.n	80081fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80081ea:	2301      	movs	r3, #1
 80081ec:	617b      	str	r3, [r7, #20]
 80081ee:	e004      	b.n	80081fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80081f0:	4b0e      	ldr	r3, [pc, #56]	@ (800822c <xTaskIncrementTick+0x170>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3301      	adds	r3, #1
 80081f6:	4a0d      	ldr	r2, [pc, #52]	@ (800822c <xTaskIncrementTick+0x170>)
 80081f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80081fa:	697b      	ldr	r3, [r7, #20]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	20005be0 	.word	0x20005be0
 8008208:	20005bbc 	.word	0x20005bbc
 800820c:	20005b70 	.word	0x20005b70
 8008210:	20005b74 	.word	0x20005b74
 8008214:	20005bd0 	.word	0x20005bd0
 8008218:	20005bd8 	.word	0x20005bd8
 800821c:	20005bc0 	.word	0x20005bc0
 8008220:	200056e8 	.word	0x200056e8
 8008224:	200056e4 	.word	0x200056e4
 8008228:	20005bcc 	.word	0x20005bcc
 800822c:	20005bc8 	.word	0x20005bc8

08008230 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008236:	4b2b      	ldr	r3, [pc, #172]	@ (80082e4 <vTaskSwitchContext+0xb4>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800823e:	4b2a      	ldr	r3, [pc, #168]	@ (80082e8 <vTaskSwitchContext+0xb8>)
 8008240:	2201      	movs	r2, #1
 8008242:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008244:	e047      	b.n	80082d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008246:	4b28      	ldr	r3, [pc, #160]	@ (80082e8 <vTaskSwitchContext+0xb8>)
 8008248:	2200      	movs	r2, #0
 800824a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800824c:	4b27      	ldr	r3, [pc, #156]	@ (80082ec <vTaskSwitchContext+0xbc>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	60fb      	str	r3, [r7, #12]
 8008252:	e011      	b.n	8008278 <vTaskSwitchContext+0x48>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10b      	bne.n	8008272 <vTaskSwitchContext+0x42>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	607b      	str	r3, [r7, #4]
}
 800826c:	bf00      	nop
 800826e:	bf00      	nop
 8008270:	e7fd      	b.n	800826e <vTaskSwitchContext+0x3e>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	3b01      	subs	r3, #1
 8008276:	60fb      	str	r3, [r7, #12]
 8008278:	491d      	ldr	r1, [pc, #116]	@ (80082f0 <vTaskSwitchContext+0xc0>)
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	4613      	mov	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4413      	add	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	440b      	add	r3, r1
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d0e3      	beq.n	8008254 <vTaskSwitchContext+0x24>
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	4613      	mov	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4a16      	ldr	r2, [pc, #88]	@ (80082f0 <vTaskSwitchContext+0xc0>)
 8008298:	4413      	add	r3, r2
 800829a:	60bb      	str	r3, [r7, #8]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	685a      	ldr	r2, [r3, #4]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	605a      	str	r2, [r3, #4]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	3308      	adds	r3, #8
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d104      	bne.n	80082bc <vTaskSwitchContext+0x8c>
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	685a      	ldr	r2, [r3, #4]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	605a      	str	r2, [r3, #4]
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	4a0c      	ldr	r2, [pc, #48]	@ (80082f4 <vTaskSwitchContext+0xc4>)
 80082c4:	6013      	str	r3, [r2, #0]
 80082c6:	4a09      	ldr	r2, [pc, #36]	@ (80082ec <vTaskSwitchContext+0xbc>)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80082cc:	4b09      	ldr	r3, [pc, #36]	@ (80082f4 <vTaskSwitchContext+0xc4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3354      	adds	r3, #84	@ 0x54
 80082d2:	4a09      	ldr	r2, [pc, #36]	@ (80082f8 <vTaskSwitchContext+0xc8>)
 80082d4:	6013      	str	r3, [r2, #0]
}
 80082d6:	bf00      	nop
 80082d8:	3714      	adds	r7, #20
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	20005be0 	.word	0x20005be0
 80082e8:	20005bcc 	.word	0x20005bcc
 80082ec:	20005bc0 	.word	0x20005bc0
 80082f0:	200056e8 	.word	0x200056e8
 80082f4:	200056e4 	.word	0x200056e4
 80082f8:	2000003c 	.word	0x2000003c

080082fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10b      	bne.n	8008324 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800830c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	60fb      	str	r3, [r7, #12]
}
 800831e:	bf00      	nop
 8008320:	bf00      	nop
 8008322:	e7fd      	b.n	8008320 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008324:	4b07      	ldr	r3, [pc, #28]	@ (8008344 <vTaskPlaceOnEventList+0x48>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	3318      	adds	r3, #24
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7fe fa0e 	bl	800674e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008332:	2101      	movs	r1, #1
 8008334:	6838      	ldr	r0, [r7, #0]
 8008336:	f000 fb97 	bl	8008a68 <prvAddCurrentTaskToDelayedList>
}
 800833a:	bf00      	nop
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	200056e4 	.word	0x200056e4

08008348 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10b      	bne.n	8008372 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	617b      	str	r3, [r7, #20]
}
 800836c:	bf00      	nop
 800836e:	bf00      	nop
 8008370:	e7fd      	b.n	800836e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008372:	4b0a      	ldr	r3, [pc, #40]	@ (800839c <vTaskPlaceOnEventListRestricted+0x54>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3318      	adds	r3, #24
 8008378:	4619      	mov	r1, r3
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f7fe f9c3 	bl	8006706 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d002      	beq.n	800838c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008386:	f04f 33ff 	mov.w	r3, #4294967295
 800838a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800838c:	6879      	ldr	r1, [r7, #4]
 800838e:	68b8      	ldr	r0, [r7, #8]
 8008390:	f000 fb6a 	bl	8008a68 <prvAddCurrentTaskToDelayedList>
	}
 8008394:	bf00      	nop
 8008396:	3718      	adds	r7, #24
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	200056e4 	.word	0x200056e4

080083a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10b      	bne.n	80083ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	60fb      	str	r3, [r7, #12]
}
 80083c8:	bf00      	nop
 80083ca:	bf00      	nop
 80083cc:	e7fd      	b.n	80083ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	3318      	adds	r3, #24
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fe f9f4 	bl	80067c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083d8:	4b1d      	ldr	r3, [pc, #116]	@ (8008450 <xTaskRemoveFromEventList+0xb0>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d11d      	bne.n	800841c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	3304      	adds	r3, #4
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fe f9eb 	bl	80067c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ee:	4b19      	ldr	r3, [pc, #100]	@ (8008454 <xTaskRemoveFromEventList+0xb4>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d903      	bls.n	80083fe <xTaskRemoveFromEventList+0x5e>
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083fa:	4a16      	ldr	r2, [pc, #88]	@ (8008454 <xTaskRemoveFromEventList+0xb4>)
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4a13      	ldr	r2, [pc, #76]	@ (8008458 <xTaskRemoveFromEventList+0xb8>)
 800840c:	441a      	add	r2, r3
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	3304      	adds	r3, #4
 8008412:	4619      	mov	r1, r3
 8008414:	4610      	mov	r0, r2
 8008416:	f7fe f976 	bl	8006706 <vListInsertEnd>
 800841a:	e005      	b.n	8008428 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	3318      	adds	r3, #24
 8008420:	4619      	mov	r1, r3
 8008422:	480e      	ldr	r0, [pc, #56]	@ (800845c <xTaskRemoveFromEventList+0xbc>)
 8008424:	f7fe f96f 	bl	8006706 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800842c:	4b0c      	ldr	r3, [pc, #48]	@ (8008460 <xTaskRemoveFromEventList+0xc0>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008432:	429a      	cmp	r2, r3
 8008434:	d905      	bls.n	8008442 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008436:	2301      	movs	r3, #1
 8008438:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800843a:	4b0a      	ldr	r3, [pc, #40]	@ (8008464 <xTaskRemoveFromEventList+0xc4>)
 800843c:	2201      	movs	r2, #1
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	e001      	b.n	8008446 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008442:	2300      	movs	r3, #0
 8008444:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008446:	697b      	ldr	r3, [r7, #20]
}
 8008448:	4618      	mov	r0, r3
 800844a:	3718      	adds	r7, #24
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	20005be0 	.word	0x20005be0
 8008454:	20005bc0 	.word	0x20005bc0
 8008458:	200056e8 	.word	0x200056e8
 800845c:	20005b78 	.word	0x20005b78
 8008460:	200056e4 	.word	0x200056e4
 8008464:	20005bcc 	.word	0x20005bcc

08008468 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008470:	4b06      	ldr	r3, [pc, #24]	@ (800848c <vTaskInternalSetTimeOutState+0x24>)
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008478:	4b05      	ldr	r3, [pc, #20]	@ (8008490 <vTaskInternalSetTimeOutState+0x28>)
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	605a      	str	r2, [r3, #4]
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	20005bd0 	.word	0x20005bd0
 8008490:	20005bbc 	.word	0x20005bbc

08008494 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b088      	sub	sp, #32
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10b      	bne.n	80084bc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80084a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	613b      	str	r3, [r7, #16]
}
 80084b6:	bf00      	nop
 80084b8:	bf00      	nop
 80084ba:	e7fd      	b.n	80084b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10b      	bne.n	80084da <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80084c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c6:	f383 8811 	msr	BASEPRI, r3
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	60fb      	str	r3, [r7, #12]
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop
 80084d8:	e7fd      	b.n	80084d6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80084da:	f000 ffa5 	bl	8009428 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80084de:	4b1d      	ldr	r3, [pc, #116]	@ (8008554 <xTaskCheckForTimeOut+0xc0>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f6:	d102      	bne.n	80084fe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80084f8:	2300      	movs	r3, #0
 80084fa:	61fb      	str	r3, [r7, #28]
 80084fc:	e023      	b.n	8008546 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	4b15      	ldr	r3, [pc, #84]	@ (8008558 <xTaskCheckForTimeOut+0xc4>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	429a      	cmp	r2, r3
 8008508:	d007      	beq.n	800851a <xTaskCheckForTimeOut+0x86>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	69ba      	ldr	r2, [r7, #24]
 8008510:	429a      	cmp	r2, r3
 8008512:	d302      	bcc.n	800851a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008514:	2301      	movs	r3, #1
 8008516:	61fb      	str	r3, [r7, #28]
 8008518:	e015      	b.n	8008546 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	429a      	cmp	r2, r3
 8008522:	d20b      	bcs.n	800853c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	1ad2      	subs	r2, r2, r3
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f7ff ff99 	bl	8008468 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008536:	2300      	movs	r3, #0
 8008538:	61fb      	str	r3, [r7, #28]
 800853a:	e004      	b.n	8008546 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	2200      	movs	r2, #0
 8008540:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008542:	2301      	movs	r3, #1
 8008544:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008546:	f000 ffa1 	bl	800948c <vPortExitCritical>

	return xReturn;
 800854a:	69fb      	ldr	r3, [r7, #28]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3720      	adds	r7, #32
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	20005bbc 	.word	0x20005bbc
 8008558:	20005bd0 	.word	0x20005bd0

0800855c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800855c:	b480      	push	{r7}
 800855e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008560:	4b03      	ldr	r3, [pc, #12]	@ (8008570 <vTaskMissedYield+0x14>)
 8008562:	2201      	movs	r2, #1
 8008564:	601a      	str	r2, [r3, #0]
}
 8008566:	bf00      	nop
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr
 8008570:	20005bcc 	.word	0x20005bcc

08008574 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800857c:	f000 f852 	bl	8008624 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008580:	4b06      	ldr	r3, [pc, #24]	@ (800859c <prvIdleTask+0x28>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d9f9      	bls.n	800857c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008588:	4b05      	ldr	r3, [pc, #20]	@ (80085a0 <prvIdleTask+0x2c>)
 800858a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800858e:	601a      	str	r2, [r3, #0]
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008598:	e7f0      	b.n	800857c <prvIdleTask+0x8>
 800859a:	bf00      	nop
 800859c:	200056e8 	.word	0x200056e8
 80085a0:	e000ed04 	.word	0xe000ed04

080085a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085aa:	2300      	movs	r3, #0
 80085ac:	607b      	str	r3, [r7, #4]
 80085ae:	e00c      	b.n	80085ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	4613      	mov	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4a12      	ldr	r2, [pc, #72]	@ (8008604 <prvInitialiseTaskLists+0x60>)
 80085bc:	4413      	add	r3, r2
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fe f874 	bl	80066ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	3301      	adds	r3, #1
 80085c8:	607b      	str	r3, [r7, #4]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b37      	cmp	r3, #55	@ 0x37
 80085ce:	d9ef      	bls.n	80085b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80085d0:	480d      	ldr	r0, [pc, #52]	@ (8008608 <prvInitialiseTaskLists+0x64>)
 80085d2:	f7fe f86b 	bl	80066ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80085d6:	480d      	ldr	r0, [pc, #52]	@ (800860c <prvInitialiseTaskLists+0x68>)
 80085d8:	f7fe f868 	bl	80066ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80085dc:	480c      	ldr	r0, [pc, #48]	@ (8008610 <prvInitialiseTaskLists+0x6c>)
 80085de:	f7fe f865 	bl	80066ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80085e2:	480c      	ldr	r0, [pc, #48]	@ (8008614 <prvInitialiseTaskLists+0x70>)
 80085e4:	f7fe f862 	bl	80066ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80085e8:	480b      	ldr	r0, [pc, #44]	@ (8008618 <prvInitialiseTaskLists+0x74>)
 80085ea:	f7fe f85f 	bl	80066ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80085ee:	4b0b      	ldr	r3, [pc, #44]	@ (800861c <prvInitialiseTaskLists+0x78>)
 80085f0:	4a05      	ldr	r2, [pc, #20]	@ (8008608 <prvInitialiseTaskLists+0x64>)
 80085f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80085f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008620 <prvInitialiseTaskLists+0x7c>)
 80085f6:	4a05      	ldr	r2, [pc, #20]	@ (800860c <prvInitialiseTaskLists+0x68>)
 80085f8:	601a      	str	r2, [r3, #0]
}
 80085fa:	bf00      	nop
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	200056e8 	.word	0x200056e8
 8008608:	20005b48 	.word	0x20005b48
 800860c:	20005b5c 	.word	0x20005b5c
 8008610:	20005b78 	.word	0x20005b78
 8008614:	20005b8c 	.word	0x20005b8c
 8008618:	20005ba4 	.word	0x20005ba4
 800861c:	20005b70 	.word	0x20005b70
 8008620:	20005b74 	.word	0x20005b74

08008624 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800862a:	e019      	b.n	8008660 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800862c:	f000 fefc 	bl	8009428 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008630:	4b10      	ldr	r3, [pc, #64]	@ (8008674 <prvCheckTasksWaitingTermination+0x50>)
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3304      	adds	r3, #4
 800863c:	4618      	mov	r0, r3
 800863e:	f7fe f8bf 	bl	80067c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008642:	4b0d      	ldr	r3, [pc, #52]	@ (8008678 <prvCheckTasksWaitingTermination+0x54>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3b01      	subs	r3, #1
 8008648:	4a0b      	ldr	r2, [pc, #44]	@ (8008678 <prvCheckTasksWaitingTermination+0x54>)
 800864a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800864c:	4b0b      	ldr	r3, [pc, #44]	@ (800867c <prvCheckTasksWaitingTermination+0x58>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	3b01      	subs	r3, #1
 8008652:	4a0a      	ldr	r2, [pc, #40]	@ (800867c <prvCheckTasksWaitingTermination+0x58>)
 8008654:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008656:	f000 ff19 	bl	800948c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f810 	bl	8008680 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008660:	4b06      	ldr	r3, [pc, #24]	@ (800867c <prvCheckTasksWaitingTermination+0x58>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1e1      	bne.n	800862c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008668:	bf00      	nop
 800866a:	bf00      	nop
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	20005b8c 	.word	0x20005b8c
 8008678:	20005bb8 	.word	0x20005bb8
 800867c:	20005ba0 	.word	0x20005ba0

08008680 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	3354      	adds	r3, #84	@ 0x54
 800868c:	4618      	mov	r0, r3
 800868e:	f012 f867 	bl	801a760 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008698:	2b00      	cmp	r3, #0
 800869a:	d108      	bne.n	80086ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086a0:	4618      	mov	r0, r3
 80086a2:	f001 f8b1 	bl	8009808 <vPortFree>
				vPortFree( pxTCB );
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f001 f8ae 	bl	8009808 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80086ac:	e019      	b.n	80086e2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d103      	bne.n	80086c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f001 f8a5 	bl	8009808 <vPortFree>
	}
 80086be:	e010      	b.n	80086e2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d00b      	beq.n	80086e2 <prvDeleteTCB+0x62>
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	60fb      	str	r3, [r7, #12]
}
 80086dc:	bf00      	nop
 80086de:	bf00      	nop
 80086e0:	e7fd      	b.n	80086de <prvDeleteTCB+0x5e>
	}
 80086e2:	bf00      	nop
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
	...

080086ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008724 <prvResetNextTaskUnblockTime+0x38>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d104      	bne.n	8008706 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80086fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008728 <prvResetNextTaskUnblockTime+0x3c>)
 80086fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008702:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008704:	e008      	b.n	8008718 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008706:	4b07      	ldr	r3, [pc, #28]	@ (8008724 <prvResetNextTaskUnblockTime+0x38>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	4a04      	ldr	r2, [pc, #16]	@ (8008728 <prvResetNextTaskUnblockTime+0x3c>)
 8008716:	6013      	str	r3, [r2, #0]
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	20005b70 	.word	0x20005b70
 8008728:	20005bd8 	.word	0x20005bd8

0800872c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008732:	4b05      	ldr	r3, [pc, #20]	@ (8008748 <xTaskGetCurrentTaskHandle+0x1c>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008738:	687b      	ldr	r3, [r7, #4]
	}
 800873a:	4618      	mov	r0, r3
 800873c:	370c      	adds	r7, #12
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	200056e4 	.word	0x200056e4

0800874c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008752:	4b0b      	ldr	r3, [pc, #44]	@ (8008780 <xTaskGetSchedulerState+0x34>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d102      	bne.n	8008760 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800875a:	2301      	movs	r3, #1
 800875c:	607b      	str	r3, [r7, #4]
 800875e:	e008      	b.n	8008772 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008760:	4b08      	ldr	r3, [pc, #32]	@ (8008784 <xTaskGetSchedulerState+0x38>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d102      	bne.n	800876e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008768:	2302      	movs	r3, #2
 800876a:	607b      	str	r3, [r7, #4]
 800876c:	e001      	b.n	8008772 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800876e:	2300      	movs	r3, #0
 8008770:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008772:	687b      	ldr	r3, [r7, #4]
	}
 8008774:	4618      	mov	r0, r3
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	20005bc4 	.word	0x20005bc4
 8008784:	20005be0 	.word	0x20005be0

08008788 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008794:	2300      	movs	r3, #0
 8008796:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d051      	beq.n	8008842 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087a2:	4b2a      	ldr	r3, [pc, #168]	@ (800884c <xTaskPriorityInherit+0xc4>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d241      	bcs.n	8008830 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	db06      	blt.n	80087c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087b4:	4b25      	ldr	r3, [pc, #148]	@ (800884c <xTaskPriorityInherit+0xc4>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	6959      	ldr	r1, [r3, #20]
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ca:	4613      	mov	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	4a1f      	ldr	r2, [pc, #124]	@ (8008850 <xTaskPriorityInherit+0xc8>)
 80087d4:	4413      	add	r3, r2
 80087d6:	4299      	cmp	r1, r3
 80087d8:	d122      	bne.n	8008820 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	3304      	adds	r3, #4
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fd ffee 	bl	80067c0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80087e4:	4b19      	ldr	r3, [pc, #100]	@ (800884c <xTaskPriorityInherit+0xc4>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f2:	4b18      	ldr	r3, [pc, #96]	@ (8008854 <xTaskPriorityInherit+0xcc>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d903      	bls.n	8008802 <xTaskPriorityInherit+0x7a>
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087fe:	4a15      	ldr	r2, [pc, #84]	@ (8008854 <xTaskPriorityInherit+0xcc>)
 8008800:	6013      	str	r3, [r2, #0]
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008806:	4613      	mov	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4a10      	ldr	r2, [pc, #64]	@ (8008850 <xTaskPriorityInherit+0xc8>)
 8008810:	441a      	add	r2, r3
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	3304      	adds	r3, #4
 8008816:	4619      	mov	r1, r3
 8008818:	4610      	mov	r0, r2
 800881a:	f7fd ff74 	bl	8006706 <vListInsertEnd>
 800881e:	e004      	b.n	800882a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008820:	4b0a      	ldr	r3, [pc, #40]	@ (800884c <xTaskPriorityInherit+0xc4>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800882a:	2301      	movs	r3, #1
 800882c:	60fb      	str	r3, [r7, #12]
 800882e:	e008      	b.n	8008842 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008834:	4b05      	ldr	r3, [pc, #20]	@ (800884c <xTaskPriorityInherit+0xc4>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800883a:	429a      	cmp	r2, r3
 800883c:	d201      	bcs.n	8008842 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800883e:	2301      	movs	r3, #1
 8008840:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008842:	68fb      	ldr	r3, [r7, #12]
	}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	200056e4 	.word	0x200056e4
 8008850:	200056e8 	.word	0x200056e8
 8008854:	20005bc0 	.word	0x20005bc0

08008858 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008864:	2300      	movs	r3, #0
 8008866:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d058      	beq.n	8008920 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800886e:	4b2f      	ldr	r3, [pc, #188]	@ (800892c <xTaskPriorityDisinherit+0xd4>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	429a      	cmp	r2, r3
 8008876:	d00b      	beq.n	8008890 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887c:	f383 8811 	msr	BASEPRI, r3
 8008880:	f3bf 8f6f 	isb	sy
 8008884:	f3bf 8f4f 	dsb	sy
 8008888:	60fb      	str	r3, [r7, #12]
}
 800888a:	bf00      	nop
 800888c:	bf00      	nop
 800888e:	e7fd      	b.n	800888c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10b      	bne.n	80088b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	60bb      	str	r3, [r7, #8]
}
 80088aa:	bf00      	nop
 80088ac:	bf00      	nop
 80088ae:	e7fd      	b.n	80088ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088b4:	1e5a      	subs	r2, r3, #1
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d02c      	beq.n	8008920 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d128      	bne.n	8008920 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	3304      	adds	r3, #4
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fd ff74 	bl	80067c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008930 <xTaskPriorityDisinherit+0xd8>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d903      	bls.n	8008900 <xTaskPriorityDisinherit+0xa8>
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088fc:	4a0c      	ldr	r2, [pc, #48]	@ (8008930 <xTaskPriorityDisinherit+0xd8>)
 80088fe:	6013      	str	r3, [r2, #0]
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008904:	4613      	mov	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4a09      	ldr	r2, [pc, #36]	@ (8008934 <xTaskPriorityDisinherit+0xdc>)
 800890e:	441a      	add	r2, r3
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	3304      	adds	r3, #4
 8008914:	4619      	mov	r1, r3
 8008916:	4610      	mov	r0, r2
 8008918:	f7fd fef5 	bl	8006706 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800891c:	2301      	movs	r3, #1
 800891e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008920:	697b      	ldr	r3, [r7, #20]
	}
 8008922:	4618      	mov	r0, r3
 8008924:	3718      	adds	r7, #24
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	200056e4 	.word	0x200056e4
 8008930:	20005bc0 	.word	0x20005bc0
 8008934:	200056e8 	.word	0x200056e8

08008938 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008946:	2301      	movs	r3, #1
 8008948:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d06c      	beq.n	8008a2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10b      	bne.n	8008970 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	60fb      	str	r3, [r7, #12]
}
 800896a:	bf00      	nop
 800896c:	bf00      	nop
 800896e:	e7fd      	b.n	800896c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	429a      	cmp	r2, r3
 8008978:	d902      	bls.n	8008980 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	61fb      	str	r3, [r7, #28]
 800897e:	e002      	b.n	8008986 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008984:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898a:	69fa      	ldr	r2, [r7, #28]
 800898c:	429a      	cmp	r2, r3
 800898e:	d04c      	beq.n	8008a2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	429a      	cmp	r2, r3
 8008998:	d147      	bne.n	8008a2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800899a:	4b26      	ldr	r3, [pc, #152]	@ (8008a34 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d10b      	bne.n	80089bc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	60bb      	str	r3, [r7, #8]
}
 80089b6:	bf00      	nop
 80089b8:	bf00      	nop
 80089ba:	e7fd      	b.n	80089b8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	69fa      	ldr	r2, [r7, #28]
 80089c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	db04      	blt.n	80089da <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	6959      	ldr	r1, [r3, #20]
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	4613      	mov	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4a13      	ldr	r2, [pc, #76]	@ (8008a38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80089ea:	4413      	add	r3, r2
 80089ec:	4299      	cmp	r1, r3
 80089ee:	d11c      	bne.n	8008a2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	3304      	adds	r3, #4
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fd fee3 	bl	80067c0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089fe:	4b0f      	ldr	r3, [pc, #60]	@ (8008a3c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d903      	bls.n	8008a0e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8008a3c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008a0c:	6013      	str	r3, [r2, #0]
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a12:	4613      	mov	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4a07      	ldr	r2, [pc, #28]	@ (8008a38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008a1c:	441a      	add	r2, r3
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	3304      	adds	r3, #4
 8008a22:	4619      	mov	r1, r3
 8008a24:	4610      	mov	r0, r2
 8008a26:	f7fd fe6e 	bl	8006706 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a2a:	bf00      	nop
 8008a2c:	3720      	adds	r7, #32
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	200056e4 	.word	0x200056e4
 8008a38:	200056e8 	.word	0x200056e8
 8008a3c:	20005bc0 	.word	0x20005bc0

08008a40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008a40:	b480      	push	{r7}
 8008a42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008a44:	4b07      	ldr	r3, [pc, #28]	@ (8008a64 <pvTaskIncrementMutexHeldCount+0x24>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d004      	beq.n	8008a56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008a4c:	4b05      	ldr	r3, [pc, #20]	@ (8008a64 <pvTaskIncrementMutexHeldCount+0x24>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a52:	3201      	adds	r2, #1
 8008a54:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008a56:	4b03      	ldr	r3, [pc, #12]	@ (8008a64 <pvTaskIncrementMutexHeldCount+0x24>)
 8008a58:	681b      	ldr	r3, [r3, #0]
	}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	200056e4 	.word	0x200056e4

08008a68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a72:	4b21      	ldr	r3, [pc, #132]	@ (8008af8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a78:	4b20      	ldr	r3, [pc, #128]	@ (8008afc <prvAddCurrentTaskToDelayedList+0x94>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fd fe9e 	bl	80067c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8a:	d10a      	bne.n	8008aa2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d007      	beq.n	8008aa2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a92:	4b1a      	ldr	r3, [pc, #104]	@ (8008afc <prvAddCurrentTaskToDelayedList+0x94>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3304      	adds	r3, #4
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4819      	ldr	r0, [pc, #100]	@ (8008b00 <prvAddCurrentTaskToDelayedList+0x98>)
 8008a9c:	f7fd fe33 	bl	8006706 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008aa0:	e026      	b.n	8008af0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008aaa:	4b14      	ldr	r3, [pc, #80]	@ (8008afc <prvAddCurrentTaskToDelayedList+0x94>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d209      	bcs.n	8008ace <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008aba:	4b12      	ldr	r3, [pc, #72]	@ (8008b04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	4b0f      	ldr	r3, [pc, #60]	@ (8008afc <prvAddCurrentTaskToDelayedList+0x94>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	3304      	adds	r3, #4
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	f7fd fe41 	bl	800674e <vListInsert>
}
 8008acc:	e010      	b.n	8008af0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ace:	4b0e      	ldr	r3, [pc, #56]	@ (8008b08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8008afc <prvAddCurrentTaskToDelayedList+0x94>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3304      	adds	r3, #4
 8008ad8:	4619      	mov	r1, r3
 8008ada:	4610      	mov	r0, r2
 8008adc:	f7fd fe37 	bl	800674e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8008b0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d202      	bcs.n	8008af0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008aea:	4a08      	ldr	r2, [pc, #32]	@ (8008b0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	6013      	str	r3, [r2, #0]
}
 8008af0:	bf00      	nop
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	20005bbc 	.word	0x20005bbc
 8008afc:	200056e4 	.word	0x200056e4
 8008b00:	20005ba4 	.word	0x20005ba4
 8008b04:	20005b74 	.word	0x20005b74
 8008b08:	20005b70 	.word	0x20005b70
 8008b0c:	20005bd8 	.word	0x20005bd8

08008b10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b08a      	sub	sp, #40	@ 0x28
 8008b14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008b16:	2300      	movs	r3, #0
 8008b18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008b1a:	f000 fb13 	bl	8009144 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8008b94 <xTimerCreateTimerTask+0x84>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d021      	beq.n	8008b6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b26:	2300      	movs	r3, #0
 8008b28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b2e:	1d3a      	adds	r2, r7, #4
 8008b30:	f107 0108 	add.w	r1, r7, #8
 8008b34:	f107 030c 	add.w	r3, r7, #12
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fd fd9d 	bl	8006678 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	9202      	str	r2, [sp, #8]
 8008b46:	9301      	str	r3, [sp, #4]
 8008b48:	2302      	movs	r3, #2
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	460a      	mov	r2, r1
 8008b50:	4911      	ldr	r1, [pc, #68]	@ (8008b98 <xTimerCreateTimerTask+0x88>)
 8008b52:	4812      	ldr	r0, [pc, #72]	@ (8008b9c <xTimerCreateTimerTask+0x8c>)
 8008b54:	f7fe ff80 	bl	8007a58 <xTaskCreateStatic>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	4a11      	ldr	r2, [pc, #68]	@ (8008ba0 <xTimerCreateTimerTask+0x90>)
 8008b5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b5e:	4b10      	ldr	r3, [pc, #64]	@ (8008ba0 <xTimerCreateTimerTask+0x90>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008b66:	2301      	movs	r3, #1
 8008b68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10b      	bne.n	8008b88 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	613b      	str	r3, [r7, #16]
}
 8008b82:	bf00      	nop
 8008b84:	bf00      	nop
 8008b86:	e7fd      	b.n	8008b84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008b88:	697b      	ldr	r3, [r7, #20]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20005c14 	.word	0x20005c14
 8008b98:	0801dc44 	.word	0x0801dc44
 8008b9c:	08008cdd 	.word	0x08008cdd
 8008ba0:	20005c18 	.word	0x20005c18

08008ba4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b08a      	sub	sp, #40	@ 0x28
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
 8008bb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10b      	bne.n	8008bd4 <xTimerGenericCommand+0x30>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	623b      	str	r3, [r7, #32]
}
 8008bce:	bf00      	nop
 8008bd0:	bf00      	nop
 8008bd2:	e7fd      	b.n	8008bd0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008bd4:	4b19      	ldr	r3, [pc, #100]	@ (8008c3c <xTimerGenericCommand+0x98>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d02a      	beq.n	8008c32 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2b05      	cmp	r3, #5
 8008bec:	dc18      	bgt.n	8008c20 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008bee:	f7ff fdad 	bl	800874c <xTaskGetSchedulerState>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d109      	bne.n	8008c0c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008bf8:	4b10      	ldr	r3, [pc, #64]	@ (8008c3c <xTimerGenericCommand+0x98>)
 8008bfa:	6818      	ldr	r0, [r3, #0]
 8008bfc:	f107 0110 	add.w	r1, r7, #16
 8008c00:	2300      	movs	r3, #0
 8008c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c04:	f7fe f872 	bl	8006cec <xQueueGenericSend>
 8008c08:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c0a:	e012      	b.n	8008c32 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8008c3c <xTimerGenericCommand+0x98>)
 8008c0e:	6818      	ldr	r0, [r3, #0]
 8008c10:	f107 0110 	add.w	r1, r7, #16
 8008c14:	2300      	movs	r3, #0
 8008c16:	2200      	movs	r2, #0
 8008c18:	f7fe f868 	bl	8006cec <xQueueGenericSend>
 8008c1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c1e:	e008      	b.n	8008c32 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008c20:	4b06      	ldr	r3, [pc, #24]	@ (8008c3c <xTimerGenericCommand+0x98>)
 8008c22:	6818      	ldr	r0, [r3, #0]
 8008c24:	f107 0110 	add.w	r1, r7, #16
 8008c28:	2300      	movs	r3, #0
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	f7fe f960 	bl	8006ef0 <xQueueGenericSendFromISR>
 8008c30:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3728      	adds	r7, #40	@ 0x28
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	20005c14 	.word	0x20005c14

08008c40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af02      	add	r7, sp, #8
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c4a:	4b23      	ldr	r3, [pc, #140]	@ (8008cd8 <prvProcessExpiredTimer+0x98>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	3304      	adds	r3, #4
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fd fdb1 	bl	80067c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c64:	f003 0304 	and.w	r3, r3, #4
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d023      	beq.n	8008cb4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	699a      	ldr	r2, [r3, #24]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	18d1      	adds	r1, r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	6978      	ldr	r0, [r7, #20]
 8008c7a:	f000 f8d5 	bl	8008e28 <prvInsertTimerInActiveList>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d020      	beq.n	8008cc6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c84:	2300      	movs	r3, #0
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	2300      	movs	r3, #0
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	6978      	ldr	r0, [r7, #20]
 8008c90:	f7ff ff88 	bl	8008ba4 <xTimerGenericCommand>
 8008c94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d114      	bne.n	8008cc6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca0:	f383 8811 	msr	BASEPRI, r3
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	60fb      	str	r3, [r7, #12]
}
 8008cae:	bf00      	nop
 8008cb0:	bf00      	nop
 8008cb2:	e7fd      	b.n	8008cb0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cba:	f023 0301 	bic.w	r3, r3, #1
 8008cbe:	b2da      	uxtb	r2, r3
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	6978      	ldr	r0, [r7, #20]
 8008ccc:	4798      	blx	r3
}
 8008cce:	bf00      	nop
 8008cd0:	3718      	adds	r7, #24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	20005c0c 	.word	0x20005c0c

08008cdc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ce4:	f107 0308 	add.w	r3, r7, #8
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f000 f859 	bl	8008da0 <prvGetNextExpireTime>
 8008cee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f000 f805 	bl	8008d04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008cfa:	f000 f8d7 	bl	8008eac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cfe:	bf00      	nop
 8008d00:	e7f0      	b.n	8008ce4 <prvTimerTask+0x8>
	...

08008d04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008d0e:	f7ff f907 	bl	8007f20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d12:	f107 0308 	add.w	r3, r7, #8
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 f866 	bl	8008de8 <prvSampleTimeNow>
 8008d1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d130      	bne.n	8008d86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10a      	bne.n	8008d40 <prvProcessTimerOrBlockTask+0x3c>
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d806      	bhi.n	8008d40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d32:	f7ff f903 	bl	8007f3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d36:	68f9      	ldr	r1, [r7, #12]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7ff ff81 	bl	8008c40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d3e:	e024      	b.n	8008d8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d008      	beq.n	8008d58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d46:	4b13      	ldr	r3, [pc, #76]	@ (8008d94 <prvProcessTimerOrBlockTask+0x90>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d101      	bne.n	8008d54 <prvProcessTimerOrBlockTask+0x50>
 8008d50:	2301      	movs	r3, #1
 8008d52:	e000      	b.n	8008d56 <prvProcessTimerOrBlockTask+0x52>
 8008d54:	2300      	movs	r3, #0
 8008d56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d58:	4b0f      	ldr	r3, [pc, #60]	@ (8008d98 <prvProcessTimerOrBlockTask+0x94>)
 8008d5a:	6818      	ldr	r0, [r3, #0]
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	4619      	mov	r1, r3
 8008d66:	f7fe fe43 	bl	80079f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d6a:	f7ff f8e7 	bl	8007f3c <xTaskResumeAll>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10a      	bne.n	8008d8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008d74:	4b09      	ldr	r3, [pc, #36]	@ (8008d9c <prvProcessTimerOrBlockTask+0x98>)
 8008d76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d7a:	601a      	str	r2, [r3, #0]
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	f3bf 8f6f 	isb	sy
}
 8008d84:	e001      	b.n	8008d8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d86:	f7ff f8d9 	bl	8007f3c <xTaskResumeAll>
}
 8008d8a:	bf00      	nop
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	20005c10 	.word	0x20005c10
 8008d98:	20005c14 	.word	0x20005c14
 8008d9c:	e000ed04 	.word	0xe000ed04

08008da0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008da8:	4b0e      	ldr	r3, [pc, #56]	@ (8008de4 <prvGetNextExpireTime+0x44>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d101      	bne.n	8008db6 <prvGetNextExpireTime+0x16>
 8008db2:	2201      	movs	r2, #1
 8008db4:	e000      	b.n	8008db8 <prvGetNextExpireTime+0x18>
 8008db6:	2200      	movs	r2, #0
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d105      	bne.n	8008dd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008dc4:	4b07      	ldr	r3, [pc, #28]	@ (8008de4 <prvGetNextExpireTime+0x44>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	60fb      	str	r3, [r7, #12]
 8008dce:	e001      	b.n	8008dd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3714      	adds	r7, #20
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	20005c0c 	.word	0x20005c0c

08008de8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008df0:	f7ff f942 	bl	8008078 <xTaskGetTickCount>
 8008df4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008df6:	4b0b      	ldr	r3, [pc, #44]	@ (8008e24 <prvSampleTimeNow+0x3c>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d205      	bcs.n	8008e0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008e00:	f000 f93a 	bl	8009078 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	601a      	str	r2, [r3, #0]
 8008e0a:	e002      	b.n	8008e12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008e12:	4a04      	ldr	r2, [pc, #16]	@ (8008e24 <prvSampleTimeNow+0x3c>)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008e18:	68fb      	ldr	r3, [r7, #12]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	20005c1c 	.word	0x20005c1c

08008e28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
 8008e34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e36:	2300      	movs	r3, #0
 8008e38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d812      	bhi.n	8008e74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	1ad2      	subs	r2, r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d302      	bcc.n	8008e62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	617b      	str	r3, [r7, #20]
 8008e60:	e01b      	b.n	8008e9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e62:	4b10      	ldr	r3, [pc, #64]	@ (8008ea4 <prvInsertTimerInActiveList+0x7c>)
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3304      	adds	r3, #4
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	f7fd fc6e 	bl	800674e <vListInsert>
 8008e72:	e012      	b.n	8008e9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d206      	bcs.n	8008e8a <prvInsertTimerInActiveList+0x62>
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d302      	bcc.n	8008e8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e84:	2301      	movs	r3, #1
 8008e86:	617b      	str	r3, [r7, #20]
 8008e88:	e007      	b.n	8008e9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e8a:	4b07      	ldr	r3, [pc, #28]	@ (8008ea8 <prvInsertTimerInActiveList+0x80>)
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3304      	adds	r3, #4
 8008e92:	4619      	mov	r1, r3
 8008e94:	4610      	mov	r0, r2
 8008e96:	f7fd fc5a 	bl	800674e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008e9a:	697b      	ldr	r3, [r7, #20]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3718      	adds	r7, #24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	20005c10 	.word	0x20005c10
 8008ea8:	20005c0c 	.word	0x20005c0c

08008eac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08e      	sub	sp, #56	@ 0x38
 8008eb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008eb2:	e0ce      	b.n	8009052 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	da19      	bge.n	8008eee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008eba:	1d3b      	adds	r3, r7, #4
 8008ebc:	3304      	adds	r3, #4
 8008ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10b      	bne.n	8008ede <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	61fb      	str	r3, [r7, #28]
}
 8008ed8:	bf00      	nop
 8008eda:	bf00      	nop
 8008edc:	e7fd      	b.n	8008eda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ee4:	6850      	ldr	r0, [r2, #4]
 8008ee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ee8:	6892      	ldr	r2, [r2, #8]
 8008eea:	4611      	mov	r1, r2
 8008eec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f2c0 80ae 	blt.w	8009052 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008efc:	695b      	ldr	r3, [r3, #20]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d004      	beq.n	8008f0c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f04:	3304      	adds	r3, #4
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fd fc5a 	bl	80067c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f0c:	463b      	mov	r3, r7
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7ff ff6a 	bl	8008de8 <prvSampleTimeNow>
 8008f14:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2b09      	cmp	r3, #9
 8008f1a:	f200 8097 	bhi.w	800904c <prvProcessReceivedCommands+0x1a0>
 8008f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f24 <prvProcessReceivedCommands+0x78>)
 8008f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f24:	08008f4d 	.word	0x08008f4d
 8008f28:	08008f4d 	.word	0x08008f4d
 8008f2c:	08008f4d 	.word	0x08008f4d
 8008f30:	08008fc3 	.word	0x08008fc3
 8008f34:	08008fd7 	.word	0x08008fd7
 8008f38:	08009023 	.word	0x08009023
 8008f3c:	08008f4d 	.word	0x08008f4d
 8008f40:	08008f4d 	.word	0x08008f4d
 8008f44:	08008fc3 	.word	0x08008fc3
 8008f48:	08008fd7 	.word	0x08008fd7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f52:	f043 0301 	orr.w	r3, r3, #1
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	18d1      	adds	r1, r2, r3
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f6c:	f7ff ff5c 	bl	8008e28 <prvInsertTimerInActiveList>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d06c      	beq.n	8009050 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f84:	f003 0304 	and.w	r3, r3, #4
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d061      	beq.n	8009050 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	441a      	add	r2, r3
 8008f94:	2300      	movs	r3, #0
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	2300      	movs	r3, #0
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f9e:	f7ff fe01 	bl	8008ba4 <xTimerGenericCommand>
 8008fa2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008fa4:	6a3b      	ldr	r3, [r7, #32]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d152      	bne.n	8009050 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	61bb      	str	r3, [r7, #24]
}
 8008fbc:	bf00      	nop
 8008fbe:	bf00      	nop
 8008fc0:	e7fd      	b.n	8008fbe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fc8:	f023 0301 	bic.w	r3, r3, #1
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008fd4:	e03d      	b.n	8009052 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fdc:	f043 0301 	orr.w	r3, r3, #1
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff0:	699b      	ldr	r3, [r3, #24]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d10b      	bne.n	800900e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ffa:	f383 8811 	msr	BASEPRI, r3
 8008ffe:	f3bf 8f6f 	isb	sy
 8009002:	f3bf 8f4f 	dsb	sy
 8009006:	617b      	str	r3, [r7, #20]
}
 8009008:	bf00      	nop
 800900a:	bf00      	nop
 800900c:	e7fd      	b.n	800900a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800900e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009010:	699a      	ldr	r2, [r3, #24]
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009014:	18d1      	adds	r1, r2, r3
 8009016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800901a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800901c:	f7ff ff04 	bl	8008e28 <prvInsertTimerInActiveList>
					break;
 8009020:	e017      	b.n	8009052 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009024:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009028:	f003 0302 	and.w	r3, r3, #2
 800902c:	2b00      	cmp	r3, #0
 800902e:	d103      	bne.n	8009038 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009030:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009032:	f000 fbe9 	bl	8009808 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009036:	e00c      	b.n	8009052 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800903a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800903e:	f023 0301 	bic.w	r3, r3, #1
 8009042:	b2da      	uxtb	r2, r3
 8009044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009046:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800904a:	e002      	b.n	8009052 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800904c:	bf00      	nop
 800904e:	e000      	b.n	8009052 <prvProcessReceivedCommands+0x1a6>
					break;
 8009050:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009052:	4b08      	ldr	r3, [pc, #32]	@ (8009074 <prvProcessReceivedCommands+0x1c8>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	1d39      	adds	r1, r7, #4
 8009058:	2200      	movs	r2, #0
 800905a:	4618      	mov	r0, r3
 800905c:	f7fe f876 	bl	800714c <xQueueReceive>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	f47f af26 	bne.w	8008eb4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009068:	bf00      	nop
 800906a:	bf00      	nop
 800906c:	3730      	adds	r7, #48	@ 0x30
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20005c14 	.word	0x20005c14

08009078 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b088      	sub	sp, #32
 800907c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800907e:	e049      	b.n	8009114 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009080:	4b2e      	ldr	r3, [pc, #184]	@ (800913c <prvSwitchTimerLists+0xc4>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800908a:	4b2c      	ldr	r3, [pc, #176]	@ (800913c <prvSwitchTimerLists+0xc4>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	3304      	adds	r3, #4
 8009098:	4618      	mov	r0, r3
 800909a:	f7fd fb91 	bl	80067c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6a1b      	ldr	r3, [r3, #32]
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090ac:	f003 0304 	and.w	r3, r3, #4
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d02f      	beq.n	8009114 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	4413      	add	r3, r2
 80090bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d90e      	bls.n	80090e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090d2:	4b1a      	ldr	r3, [pc, #104]	@ (800913c <prvSwitchTimerLists+0xc4>)
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	3304      	adds	r3, #4
 80090da:	4619      	mov	r1, r3
 80090dc:	4610      	mov	r0, r2
 80090de:	f7fd fb36 	bl	800674e <vListInsert>
 80090e2:	e017      	b.n	8009114 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090e4:	2300      	movs	r3, #0
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	2300      	movs	r3, #0
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	2100      	movs	r1, #0
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f7ff fd58 	bl	8008ba4 <xTimerGenericCommand>
 80090f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10b      	bne.n	8009114 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80090fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009100:	f383 8811 	msr	BASEPRI, r3
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	603b      	str	r3, [r7, #0]
}
 800910e:	bf00      	nop
 8009110:	bf00      	nop
 8009112:	e7fd      	b.n	8009110 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009114:	4b09      	ldr	r3, [pc, #36]	@ (800913c <prvSwitchTimerLists+0xc4>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1b0      	bne.n	8009080 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800911e:	4b07      	ldr	r3, [pc, #28]	@ (800913c <prvSwitchTimerLists+0xc4>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009124:	4b06      	ldr	r3, [pc, #24]	@ (8009140 <prvSwitchTimerLists+0xc8>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a04      	ldr	r2, [pc, #16]	@ (800913c <prvSwitchTimerLists+0xc4>)
 800912a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800912c:	4a04      	ldr	r2, [pc, #16]	@ (8009140 <prvSwitchTimerLists+0xc8>)
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	6013      	str	r3, [r2, #0]
}
 8009132:	bf00      	nop
 8009134:	3718      	adds	r7, #24
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	20005c0c 	.word	0x20005c0c
 8009140:	20005c10 	.word	0x20005c10

08009144 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800914a:	f000 f96d 	bl	8009428 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800914e:	4b15      	ldr	r3, [pc, #84]	@ (80091a4 <prvCheckForValidListAndQueue+0x60>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d120      	bne.n	8009198 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009156:	4814      	ldr	r0, [pc, #80]	@ (80091a8 <prvCheckForValidListAndQueue+0x64>)
 8009158:	f7fd faa8 	bl	80066ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800915c:	4813      	ldr	r0, [pc, #76]	@ (80091ac <prvCheckForValidListAndQueue+0x68>)
 800915e:	f7fd faa5 	bl	80066ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009162:	4b13      	ldr	r3, [pc, #76]	@ (80091b0 <prvCheckForValidListAndQueue+0x6c>)
 8009164:	4a10      	ldr	r2, [pc, #64]	@ (80091a8 <prvCheckForValidListAndQueue+0x64>)
 8009166:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009168:	4b12      	ldr	r3, [pc, #72]	@ (80091b4 <prvCheckForValidListAndQueue+0x70>)
 800916a:	4a10      	ldr	r2, [pc, #64]	@ (80091ac <prvCheckForValidListAndQueue+0x68>)
 800916c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800916e:	2300      	movs	r3, #0
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	4b11      	ldr	r3, [pc, #68]	@ (80091b8 <prvCheckForValidListAndQueue+0x74>)
 8009174:	4a11      	ldr	r2, [pc, #68]	@ (80091bc <prvCheckForValidListAndQueue+0x78>)
 8009176:	2110      	movs	r1, #16
 8009178:	200a      	movs	r0, #10
 800917a:	f7fd fbb5 	bl	80068e8 <xQueueGenericCreateStatic>
 800917e:	4603      	mov	r3, r0
 8009180:	4a08      	ldr	r2, [pc, #32]	@ (80091a4 <prvCheckForValidListAndQueue+0x60>)
 8009182:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009184:	4b07      	ldr	r3, [pc, #28]	@ (80091a4 <prvCheckForValidListAndQueue+0x60>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d005      	beq.n	8009198 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800918c:	4b05      	ldr	r3, [pc, #20]	@ (80091a4 <prvCheckForValidListAndQueue+0x60>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	490b      	ldr	r1, [pc, #44]	@ (80091c0 <prvCheckForValidListAndQueue+0x7c>)
 8009192:	4618      	mov	r0, r3
 8009194:	f7fe fbd8 	bl	8007948 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009198:	f000 f978 	bl	800948c <vPortExitCritical>
}
 800919c:	bf00      	nop
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20005c14 	.word	0x20005c14
 80091a8:	20005be4 	.word	0x20005be4
 80091ac:	20005bf8 	.word	0x20005bf8
 80091b0:	20005c0c 	.word	0x20005c0c
 80091b4:	20005c10 	.word	0x20005c10
 80091b8:	20005cc0 	.word	0x20005cc0
 80091bc:	20005c20 	.word	0x20005c20
 80091c0:	0801dc4c 	.word	0x0801dc4c

080091c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	3b04      	subs	r3, #4
 80091d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80091dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	3b04      	subs	r3, #4
 80091e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	f023 0201 	bic.w	r2, r3, #1
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	3b04      	subs	r3, #4
 80091f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80091f4:	4a0c      	ldr	r2, [pc, #48]	@ (8009228 <pxPortInitialiseStack+0x64>)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	3b14      	subs	r3, #20
 80091fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	3b04      	subs	r3, #4
 800920a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f06f 0202 	mvn.w	r2, #2
 8009212:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	3b20      	subs	r3, #32
 8009218:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800921a:	68fb      	ldr	r3, [r7, #12]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr
 8009228:	0800922d 	.word	0x0800922d

0800922c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009236:	4b13      	ldr	r3, [pc, #76]	@ (8009284 <prvTaskExitError+0x58>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923e:	d00b      	beq.n	8009258 <prvTaskExitError+0x2c>
	__asm volatile
 8009240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	60fb      	str	r3, [r7, #12]
}
 8009252:	bf00      	nop
 8009254:	bf00      	nop
 8009256:	e7fd      	b.n	8009254 <prvTaskExitError+0x28>
	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	60bb      	str	r3, [r7, #8]
}
 800926a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800926c:	bf00      	nop
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d0fc      	beq.n	800926e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009274:	bf00      	nop
 8009276:	bf00      	nop
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	20000020 	.word	0x20000020
	...

08009290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009290:	4b07      	ldr	r3, [pc, #28]	@ (80092b0 <pxCurrentTCBConst2>)
 8009292:	6819      	ldr	r1, [r3, #0]
 8009294:	6808      	ldr	r0, [r1, #0]
 8009296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800929a:	f380 8809 	msr	PSP, r0
 800929e:	f3bf 8f6f 	isb	sy
 80092a2:	f04f 0000 	mov.w	r0, #0
 80092a6:	f380 8811 	msr	BASEPRI, r0
 80092aa:	4770      	bx	lr
 80092ac:	f3af 8000 	nop.w

080092b0 <pxCurrentTCBConst2>:
 80092b0:	200056e4 	.word	0x200056e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80092b4:	bf00      	nop
 80092b6:	bf00      	nop

080092b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80092b8:	4808      	ldr	r0, [pc, #32]	@ (80092dc <prvPortStartFirstTask+0x24>)
 80092ba:	6800      	ldr	r0, [r0, #0]
 80092bc:	6800      	ldr	r0, [r0, #0]
 80092be:	f380 8808 	msr	MSP, r0
 80092c2:	f04f 0000 	mov.w	r0, #0
 80092c6:	f380 8814 	msr	CONTROL, r0
 80092ca:	b662      	cpsie	i
 80092cc:	b661      	cpsie	f
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	df00      	svc	0
 80092d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092da:	bf00      	nop
 80092dc:	e000ed08 	.word	0xe000ed08

080092e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80092e6:	4b47      	ldr	r3, [pc, #284]	@ (8009404 <xPortStartScheduler+0x124>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a47      	ldr	r2, [pc, #284]	@ (8009408 <xPortStartScheduler+0x128>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d10b      	bne.n	8009308 <xPortStartScheduler+0x28>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	613b      	str	r3, [r7, #16]
}
 8009302:	bf00      	nop
 8009304:	bf00      	nop
 8009306:	e7fd      	b.n	8009304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009308:	4b3e      	ldr	r3, [pc, #248]	@ (8009404 <xPortStartScheduler+0x124>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a3f      	ldr	r2, [pc, #252]	@ (800940c <xPortStartScheduler+0x12c>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d10b      	bne.n	800932a <xPortStartScheduler+0x4a>
	__asm volatile
 8009312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	60fb      	str	r3, [r7, #12]
}
 8009324:	bf00      	nop
 8009326:	bf00      	nop
 8009328:	e7fd      	b.n	8009326 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800932a:	4b39      	ldr	r3, [pc, #228]	@ (8009410 <xPortStartScheduler+0x130>)
 800932c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	22ff      	movs	r2, #255	@ 0xff
 800933a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	b2db      	uxtb	r3, r3
 8009342:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009344:	78fb      	ldrb	r3, [r7, #3]
 8009346:	b2db      	uxtb	r3, r3
 8009348:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800934c:	b2da      	uxtb	r2, r3
 800934e:	4b31      	ldr	r3, [pc, #196]	@ (8009414 <xPortStartScheduler+0x134>)
 8009350:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009352:	4b31      	ldr	r3, [pc, #196]	@ (8009418 <xPortStartScheduler+0x138>)
 8009354:	2207      	movs	r2, #7
 8009356:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009358:	e009      	b.n	800936e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800935a:	4b2f      	ldr	r3, [pc, #188]	@ (8009418 <xPortStartScheduler+0x138>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3b01      	subs	r3, #1
 8009360:	4a2d      	ldr	r2, [pc, #180]	@ (8009418 <xPortStartScheduler+0x138>)
 8009362:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009364:	78fb      	ldrb	r3, [r7, #3]
 8009366:	b2db      	uxtb	r3, r3
 8009368:	005b      	lsls	r3, r3, #1
 800936a:	b2db      	uxtb	r3, r3
 800936c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800936e:	78fb      	ldrb	r3, [r7, #3]
 8009370:	b2db      	uxtb	r3, r3
 8009372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009376:	2b80      	cmp	r3, #128	@ 0x80
 8009378:	d0ef      	beq.n	800935a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800937a:	4b27      	ldr	r3, [pc, #156]	@ (8009418 <xPortStartScheduler+0x138>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f1c3 0307 	rsb	r3, r3, #7
 8009382:	2b04      	cmp	r3, #4
 8009384:	d00b      	beq.n	800939e <xPortStartScheduler+0xbe>
	__asm volatile
 8009386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800938a:	f383 8811 	msr	BASEPRI, r3
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	60bb      	str	r3, [r7, #8]
}
 8009398:	bf00      	nop
 800939a:	bf00      	nop
 800939c:	e7fd      	b.n	800939a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800939e:	4b1e      	ldr	r3, [pc, #120]	@ (8009418 <xPortStartScheduler+0x138>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	021b      	lsls	r3, r3, #8
 80093a4:	4a1c      	ldr	r2, [pc, #112]	@ (8009418 <xPortStartScheduler+0x138>)
 80093a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80093a8:	4b1b      	ldr	r3, [pc, #108]	@ (8009418 <xPortStartScheduler+0x138>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80093b0:	4a19      	ldr	r2, [pc, #100]	@ (8009418 <xPortStartScheduler+0x138>)
 80093b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	b2da      	uxtb	r2, r3
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80093bc:	4b17      	ldr	r3, [pc, #92]	@ (800941c <xPortStartScheduler+0x13c>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a16      	ldr	r2, [pc, #88]	@ (800941c <xPortStartScheduler+0x13c>)
 80093c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80093c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80093c8:	4b14      	ldr	r3, [pc, #80]	@ (800941c <xPortStartScheduler+0x13c>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a13      	ldr	r2, [pc, #76]	@ (800941c <xPortStartScheduler+0x13c>)
 80093ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80093d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80093d4:	f000 f8da 	bl	800958c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80093d8:	4b11      	ldr	r3, [pc, #68]	@ (8009420 <xPortStartScheduler+0x140>)
 80093da:	2200      	movs	r2, #0
 80093dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80093de:	f000 f8f9 	bl	80095d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80093e2:	4b10      	ldr	r3, [pc, #64]	@ (8009424 <xPortStartScheduler+0x144>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a0f      	ldr	r2, [pc, #60]	@ (8009424 <xPortStartScheduler+0x144>)
 80093e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80093ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80093ee:	f7ff ff63 	bl	80092b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80093f2:	f7fe ff1d 	bl	8008230 <vTaskSwitchContext>
	prvTaskExitError();
 80093f6:	f7ff ff19 	bl	800922c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3718      	adds	r7, #24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	e000ed00 	.word	0xe000ed00
 8009408:	410fc271 	.word	0x410fc271
 800940c:	410fc270 	.word	0x410fc270
 8009410:	e000e400 	.word	0xe000e400
 8009414:	20005d10 	.word	0x20005d10
 8009418:	20005d14 	.word	0x20005d14
 800941c:	e000ed20 	.word	0xe000ed20
 8009420:	20000020 	.word	0x20000020
 8009424:	e000ef34 	.word	0xe000ef34

08009428 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	607b      	str	r3, [r7, #4]
}
 8009440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009442:	4b10      	ldr	r3, [pc, #64]	@ (8009484 <vPortEnterCritical+0x5c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3301      	adds	r3, #1
 8009448:	4a0e      	ldr	r2, [pc, #56]	@ (8009484 <vPortEnterCritical+0x5c>)
 800944a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800944c:	4b0d      	ldr	r3, [pc, #52]	@ (8009484 <vPortEnterCritical+0x5c>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d110      	bne.n	8009476 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009454:	4b0c      	ldr	r3, [pc, #48]	@ (8009488 <vPortEnterCritical+0x60>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00b      	beq.n	8009476 <vPortEnterCritical+0x4e>
	__asm volatile
 800945e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009462:	f383 8811 	msr	BASEPRI, r3
 8009466:	f3bf 8f6f 	isb	sy
 800946a:	f3bf 8f4f 	dsb	sy
 800946e:	603b      	str	r3, [r7, #0]
}
 8009470:	bf00      	nop
 8009472:	bf00      	nop
 8009474:	e7fd      	b.n	8009472 <vPortEnterCritical+0x4a>
	}
}
 8009476:	bf00      	nop
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	20000020 	.word	0x20000020
 8009488:	e000ed04 	.word	0xe000ed04

0800948c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009492:	4b12      	ldr	r3, [pc, #72]	@ (80094dc <vPortExitCritical+0x50>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10b      	bne.n	80094b2 <vPortExitCritical+0x26>
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	607b      	str	r3, [r7, #4]
}
 80094ac:	bf00      	nop
 80094ae:	bf00      	nop
 80094b0:	e7fd      	b.n	80094ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80094b2:	4b0a      	ldr	r3, [pc, #40]	@ (80094dc <vPortExitCritical+0x50>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	3b01      	subs	r3, #1
 80094b8:	4a08      	ldr	r2, [pc, #32]	@ (80094dc <vPortExitCritical+0x50>)
 80094ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80094bc:	4b07      	ldr	r3, [pc, #28]	@ (80094dc <vPortExitCritical+0x50>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d105      	bne.n	80094d0 <vPortExitCritical+0x44>
 80094c4:	2300      	movs	r3, #0
 80094c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	f383 8811 	msr	BASEPRI, r3
}
 80094ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	20000020 	.word	0x20000020

080094e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80094e0:	f3ef 8009 	mrs	r0, PSP
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	4b15      	ldr	r3, [pc, #84]	@ (8009540 <pxCurrentTCBConst>)
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	f01e 0f10 	tst.w	lr, #16
 80094f0:	bf08      	it	eq
 80094f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80094f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fa:	6010      	str	r0, [r2, #0]
 80094fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009500:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009504:	f380 8811 	msr	BASEPRI, r0
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f7fe fe8e 	bl	8008230 <vTaskSwitchContext>
 8009514:	f04f 0000 	mov.w	r0, #0
 8009518:	f380 8811 	msr	BASEPRI, r0
 800951c:	bc09      	pop	{r0, r3}
 800951e:	6819      	ldr	r1, [r3, #0]
 8009520:	6808      	ldr	r0, [r1, #0]
 8009522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009526:	f01e 0f10 	tst.w	lr, #16
 800952a:	bf08      	it	eq
 800952c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009530:	f380 8809 	msr	PSP, r0
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	f3af 8000 	nop.w

08009540 <pxCurrentTCBConst>:
 8009540:	200056e4 	.word	0x200056e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009544:	bf00      	nop
 8009546:	bf00      	nop

08009548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
	__asm volatile
 800954e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	607b      	str	r3, [r7, #4]
}
 8009560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009562:	f7fe fdab 	bl	80080bc <xTaskIncrementTick>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800956c:	4b06      	ldr	r3, [pc, #24]	@ (8009588 <xPortSysTickHandler+0x40>)
 800956e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	2300      	movs	r3, #0
 8009576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	f383 8811 	msr	BASEPRI, r3
}
 800957e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009580:	bf00      	nop
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	e000ed04 	.word	0xe000ed04

0800958c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800958c:	b480      	push	{r7}
 800958e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009590:	4b0b      	ldr	r3, [pc, #44]	@ (80095c0 <vPortSetupTimerInterrupt+0x34>)
 8009592:	2200      	movs	r2, #0
 8009594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009596:	4b0b      	ldr	r3, [pc, #44]	@ (80095c4 <vPortSetupTimerInterrupt+0x38>)
 8009598:	2200      	movs	r2, #0
 800959a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800959c:	4b0a      	ldr	r3, [pc, #40]	@ (80095c8 <vPortSetupTimerInterrupt+0x3c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a0a      	ldr	r2, [pc, #40]	@ (80095cc <vPortSetupTimerInterrupt+0x40>)
 80095a2:	fba2 2303 	umull	r2, r3, r2, r3
 80095a6:	099b      	lsrs	r3, r3, #6
 80095a8:	4a09      	ldr	r2, [pc, #36]	@ (80095d0 <vPortSetupTimerInterrupt+0x44>)
 80095aa:	3b01      	subs	r3, #1
 80095ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80095ae:	4b04      	ldr	r3, [pc, #16]	@ (80095c0 <vPortSetupTimerInterrupt+0x34>)
 80095b0:	2207      	movs	r2, #7
 80095b2:	601a      	str	r2, [r3, #0]
}
 80095b4:	bf00      	nop
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	e000e010 	.word	0xe000e010
 80095c4:	e000e018 	.word	0xe000e018
 80095c8:	20000000 	.word	0x20000000
 80095cc:	10624dd3 	.word	0x10624dd3
 80095d0:	e000e014 	.word	0xe000e014

080095d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80095d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80095e4 <vPortEnableVFP+0x10>
 80095d8:	6801      	ldr	r1, [r0, #0]
 80095da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80095de:	6001      	str	r1, [r0, #0]
 80095e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80095e2:	bf00      	nop
 80095e4:	e000ed88 	.word	0xe000ed88

080095e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80095ee:	f3ef 8305 	mrs	r3, IPSR
 80095f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2b0f      	cmp	r3, #15
 80095f8:	d915      	bls.n	8009626 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80095fa:	4a18      	ldr	r2, [pc, #96]	@ (800965c <vPortValidateInterruptPriority+0x74>)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	4413      	add	r3, r2
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009604:	4b16      	ldr	r3, [pc, #88]	@ (8009660 <vPortValidateInterruptPriority+0x78>)
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	7afa      	ldrb	r2, [r7, #11]
 800960a:	429a      	cmp	r2, r3
 800960c:	d20b      	bcs.n	8009626 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800960e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	607b      	str	r3, [r7, #4]
}
 8009620:	bf00      	nop
 8009622:	bf00      	nop
 8009624:	e7fd      	b.n	8009622 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009626:	4b0f      	ldr	r3, [pc, #60]	@ (8009664 <vPortValidateInterruptPriority+0x7c>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800962e:	4b0e      	ldr	r3, [pc, #56]	@ (8009668 <vPortValidateInterruptPriority+0x80>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	429a      	cmp	r2, r3
 8009634:	d90b      	bls.n	800964e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	603b      	str	r3, [r7, #0]
}
 8009648:	bf00      	nop
 800964a:	bf00      	nop
 800964c:	e7fd      	b.n	800964a <vPortValidateInterruptPriority+0x62>
	}
 800964e:	bf00      	nop
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	e000e3f0 	.word	0xe000e3f0
 8009660:	20005d10 	.word	0x20005d10
 8009664:	e000ed0c 	.word	0xe000ed0c
 8009668:	20005d14 	.word	0x20005d14

0800966c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b08a      	sub	sp, #40	@ 0x28
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009674:	2300      	movs	r3, #0
 8009676:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009678:	f7fe fc52 	bl	8007f20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800967c:	4b5c      	ldr	r3, [pc, #368]	@ (80097f0 <pvPortMalloc+0x184>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009684:	f000 f924 	bl	80098d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009688:	4b5a      	ldr	r3, [pc, #360]	@ (80097f4 <pvPortMalloc+0x188>)
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4013      	ands	r3, r2
 8009690:	2b00      	cmp	r3, #0
 8009692:	f040 8095 	bne.w	80097c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d01e      	beq.n	80096da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800969c:	2208      	movs	r2, #8
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4413      	add	r3, r2
 80096a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f003 0307 	and.w	r3, r3, #7
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d015      	beq.n	80096da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f023 0307 	bic.w	r3, r3, #7
 80096b4:	3308      	adds	r3, #8
 80096b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f003 0307 	and.w	r3, r3, #7
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00b      	beq.n	80096da <pvPortMalloc+0x6e>
	__asm volatile
 80096c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c6:	f383 8811 	msr	BASEPRI, r3
 80096ca:	f3bf 8f6f 	isb	sy
 80096ce:	f3bf 8f4f 	dsb	sy
 80096d2:	617b      	str	r3, [r7, #20]
}
 80096d4:	bf00      	nop
 80096d6:	bf00      	nop
 80096d8:	e7fd      	b.n	80096d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d06f      	beq.n	80097c0 <pvPortMalloc+0x154>
 80096e0:	4b45      	ldr	r3, [pc, #276]	@ (80097f8 <pvPortMalloc+0x18c>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d86a      	bhi.n	80097c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096ea:	4b44      	ldr	r3, [pc, #272]	@ (80097fc <pvPortMalloc+0x190>)
 80096ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80096ee:	4b43      	ldr	r3, [pc, #268]	@ (80097fc <pvPortMalloc+0x190>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096f4:	e004      	b.n	8009700 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80096f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	429a      	cmp	r2, r3
 8009708:	d903      	bls.n	8009712 <pvPortMalloc+0xa6>
 800970a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1f1      	bne.n	80096f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009712:	4b37      	ldr	r3, [pc, #220]	@ (80097f0 <pvPortMalloc+0x184>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009718:	429a      	cmp	r2, r3
 800971a:	d051      	beq.n	80097c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800971c:	6a3b      	ldr	r3, [r7, #32]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2208      	movs	r2, #8
 8009722:	4413      	add	r3, r2
 8009724:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800972e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	1ad2      	subs	r2, r2, r3
 8009736:	2308      	movs	r3, #8
 8009738:	005b      	lsls	r3, r3, #1
 800973a:	429a      	cmp	r2, r3
 800973c:	d920      	bls.n	8009780 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800973e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4413      	add	r3, r2
 8009744:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	f003 0307 	and.w	r3, r3, #7
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00b      	beq.n	8009768 <pvPortMalloc+0xfc>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	613b      	str	r3, [r7, #16]
}
 8009762:	bf00      	nop
 8009764:	bf00      	nop
 8009766:	e7fd      	b.n	8009764 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	1ad2      	subs	r2, r2, r3
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800977a:	69b8      	ldr	r0, [r7, #24]
 800977c:	f000 f90a 	bl	8009994 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009780:	4b1d      	ldr	r3, [pc, #116]	@ (80097f8 <pvPortMalloc+0x18c>)
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	4a1b      	ldr	r2, [pc, #108]	@ (80097f8 <pvPortMalloc+0x18c>)
 800978c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800978e:	4b1a      	ldr	r3, [pc, #104]	@ (80097f8 <pvPortMalloc+0x18c>)
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	4b1b      	ldr	r3, [pc, #108]	@ (8009800 <pvPortMalloc+0x194>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	429a      	cmp	r2, r3
 8009798:	d203      	bcs.n	80097a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800979a:	4b17      	ldr	r3, [pc, #92]	@ (80097f8 <pvPortMalloc+0x18c>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a18      	ldr	r2, [pc, #96]	@ (8009800 <pvPortMalloc+0x194>)
 80097a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80097a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	4b13      	ldr	r3, [pc, #76]	@ (80097f4 <pvPortMalloc+0x188>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	431a      	orrs	r2, r3
 80097ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80097b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b2:	2200      	movs	r2, #0
 80097b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80097b6:	4b13      	ldr	r3, [pc, #76]	@ (8009804 <pvPortMalloc+0x198>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	3301      	adds	r3, #1
 80097bc:	4a11      	ldr	r2, [pc, #68]	@ (8009804 <pvPortMalloc+0x198>)
 80097be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80097c0:	f7fe fbbc 	bl	8007f3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	f003 0307 	and.w	r3, r3, #7
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00b      	beq.n	80097e6 <pvPortMalloc+0x17a>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	60fb      	str	r3, [r7, #12]
}
 80097e0:	bf00      	nop
 80097e2:	bf00      	nop
 80097e4:	e7fd      	b.n	80097e2 <pvPortMalloc+0x176>
	return pvReturn;
 80097e6:	69fb      	ldr	r3, [r7, #28]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3728      	adds	r7, #40	@ 0x28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	20009920 	.word	0x20009920
 80097f4:	20009934 	.word	0x20009934
 80097f8:	20009924 	.word	0x20009924
 80097fc:	20009918 	.word	0x20009918
 8009800:	20009928 	.word	0x20009928
 8009804:	2000992c 	.word	0x2000992c

08009808 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d04f      	beq.n	80098ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800981a:	2308      	movs	r3, #8
 800981c:	425b      	negs	r3, r3
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	4413      	add	r3, r2
 8009822:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	4b25      	ldr	r3, [pc, #148]	@ (80098c4 <vPortFree+0xbc>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4013      	ands	r3, r2
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10b      	bne.n	800984e <vPortFree+0x46>
	__asm volatile
 8009836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	60fb      	str	r3, [r7, #12]
}
 8009848:	bf00      	nop
 800984a:	bf00      	nop
 800984c:	e7fd      	b.n	800984a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00b      	beq.n	800986e <vPortFree+0x66>
	__asm volatile
 8009856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	60bb      	str	r3, [r7, #8]
}
 8009868:	bf00      	nop
 800986a:	bf00      	nop
 800986c:	e7fd      	b.n	800986a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	685a      	ldr	r2, [r3, #4]
 8009872:	4b14      	ldr	r3, [pc, #80]	@ (80098c4 <vPortFree+0xbc>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4013      	ands	r3, r2
 8009878:	2b00      	cmp	r3, #0
 800987a:	d01e      	beq.n	80098ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d11a      	bne.n	80098ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	685a      	ldr	r2, [r3, #4]
 8009888:	4b0e      	ldr	r3, [pc, #56]	@ (80098c4 <vPortFree+0xbc>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	43db      	mvns	r3, r3
 800988e:	401a      	ands	r2, r3
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009894:	f7fe fb44 	bl	8007f20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	4b0a      	ldr	r3, [pc, #40]	@ (80098c8 <vPortFree+0xc0>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4413      	add	r3, r2
 80098a2:	4a09      	ldr	r2, [pc, #36]	@ (80098c8 <vPortFree+0xc0>)
 80098a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80098a6:	6938      	ldr	r0, [r7, #16]
 80098a8:	f000 f874 	bl	8009994 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80098ac:	4b07      	ldr	r3, [pc, #28]	@ (80098cc <vPortFree+0xc4>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	3301      	adds	r3, #1
 80098b2:	4a06      	ldr	r2, [pc, #24]	@ (80098cc <vPortFree+0xc4>)
 80098b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80098b6:	f7fe fb41 	bl	8007f3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80098ba:	bf00      	nop
 80098bc:	3718      	adds	r7, #24
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	20009934 	.word	0x20009934
 80098c8:	20009924 	.word	0x20009924
 80098cc:	20009930 	.word	0x20009930

080098d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80098d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80098da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80098dc:	4b27      	ldr	r3, [pc, #156]	@ (800997c <prvHeapInit+0xac>)
 80098de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f003 0307 	and.w	r3, r3, #7
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00c      	beq.n	8009904 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3307      	adds	r3, #7
 80098ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f023 0307 	bic.w	r3, r3, #7
 80098f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	4a1f      	ldr	r2, [pc, #124]	@ (800997c <prvHeapInit+0xac>)
 8009900:	4413      	add	r3, r2
 8009902:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009908:	4a1d      	ldr	r2, [pc, #116]	@ (8009980 <prvHeapInit+0xb0>)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800990e:	4b1c      	ldr	r3, [pc, #112]	@ (8009980 <prvHeapInit+0xb0>)
 8009910:	2200      	movs	r2, #0
 8009912:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	4413      	add	r3, r2
 800991a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800991c:	2208      	movs	r2, #8
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	1a9b      	subs	r3, r3, r2
 8009922:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f023 0307 	bic.w	r3, r3, #7
 800992a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4a15      	ldr	r2, [pc, #84]	@ (8009984 <prvHeapInit+0xb4>)
 8009930:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009932:	4b14      	ldr	r3, [pc, #80]	@ (8009984 <prvHeapInit+0xb4>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2200      	movs	r2, #0
 8009938:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800993a:	4b12      	ldr	r3, [pc, #72]	@ (8009984 <prvHeapInit+0xb4>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2200      	movs	r2, #0
 8009940:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	1ad2      	subs	r2, r2, r3
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009950:	4b0c      	ldr	r3, [pc, #48]	@ (8009984 <prvHeapInit+0xb4>)
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	4a0a      	ldr	r2, [pc, #40]	@ (8009988 <prvHeapInit+0xb8>)
 800995e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	4a09      	ldr	r2, [pc, #36]	@ (800998c <prvHeapInit+0xbc>)
 8009966:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009968:	4b09      	ldr	r3, [pc, #36]	@ (8009990 <prvHeapInit+0xc0>)
 800996a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800996e:	601a      	str	r2, [r3, #0]
}
 8009970:	bf00      	nop
 8009972:	3714      	adds	r7, #20
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	20005d18 	.word	0x20005d18
 8009980:	20009918 	.word	0x20009918
 8009984:	20009920 	.word	0x20009920
 8009988:	20009928 	.word	0x20009928
 800998c:	20009924 	.word	0x20009924
 8009990:	20009934 	.word	0x20009934

08009994 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800999c:	4b28      	ldr	r3, [pc, #160]	@ (8009a40 <prvInsertBlockIntoFreeList+0xac>)
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	e002      	b.n	80099a8 <prvInsertBlockIntoFreeList+0x14>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	60fb      	str	r3, [r7, #12]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d8f7      	bhi.n	80099a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	4413      	add	r3, r2
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d108      	bne.n	80099d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	685a      	ldr	r2, [r3, #4]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	441a      	add	r2, r3
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	441a      	add	r2, r3
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d118      	bne.n	8009a1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	4b15      	ldr	r3, [pc, #84]	@ (8009a44 <prvInsertBlockIntoFreeList+0xb0>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d00d      	beq.n	8009a12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	441a      	add	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	601a      	str	r2, [r3, #0]
 8009a10:	e008      	b.n	8009a24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a12:	4b0c      	ldr	r3, [pc, #48]	@ (8009a44 <prvInsertBlockIntoFreeList+0xb0>)
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	601a      	str	r2, [r3, #0]
 8009a1a:	e003      	b.n	8009a24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d002      	beq.n	8009a32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a32:	bf00      	nop
 8009a34:	3714      	adds	r7, #20
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	20009918 	.word	0x20009918
 8009a44:	20009920 	.word	0x20009920

08009a48 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	330c      	adds	r3, #12
 8009a58:	461a      	mov	r2, r3
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f003 ffb1 	bl	800d9c4 <tcpip_send_msg_wait_sem>
 8009a62:	4603      	mov	r3, r0
 8009a64:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d103      	bne.n	8009a76 <netconn_apimsg+0x2e>
    return apimsg->err;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009a74:	e001      	b.n	8009a7a <netconn_apimsg+0x32>
  }
  return err;
 8009a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
	...

08009a84 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b08c      	sub	sp, #48	@ 0x30
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	603a      	str	r2, [r7, #0]
 8009a8e:	71fb      	strb	r3, [r7, #7]
 8009a90:	460b      	mov	r3, r1
 8009a92:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009a94:	79fb      	ldrb	r3, [r7, #7]
 8009a96:	6839      	ldr	r1, [r7, #0]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f001 f9a3 	bl	800ade4 <netconn_alloc>
 8009a9e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8009aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d054      	beq.n	8009b50 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8009aa6:	79bb      	ldrb	r3, [r7, #6]
 8009aa8:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8009aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aac:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009aae:	f107 0308 	add.w	r3, r7, #8
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	4829      	ldr	r0, [pc, #164]	@ (8009b5c <netconn_new_with_proto_and_callback+0xd8>)
 8009ab6:	f7ff ffc7 	bl	8009a48 <netconn_apimsg>
 8009aba:	4603      	mov	r3, r0
 8009abc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8009ac0:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d043      	beq.n	8009b50 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8009ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d005      	beq.n	8009adc <netconn_new_with_proto_and_callback+0x58>
 8009ad0:	4b23      	ldr	r3, [pc, #140]	@ (8009b60 <netconn_new_with_proto_and_callback+0xdc>)
 8009ad2:	22a3      	movs	r2, #163	@ 0xa3
 8009ad4:	4923      	ldr	r1, [pc, #140]	@ (8009b64 <netconn_new_with_proto_and_callback+0xe0>)
 8009ad6:	4824      	ldr	r0, [pc, #144]	@ (8009b68 <netconn_new_with_proto_and_callback+0xe4>)
 8009ad8:	f010 fc82 	bl	801a3e0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ade:	3310      	adds	r3, #16
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f00f f9d3 	bl	8018e8c <sys_mbox_valid>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d105      	bne.n	8009af8 <netconn_new_with_proto_and_callback+0x74>
 8009aec:	4b1c      	ldr	r3, [pc, #112]	@ (8009b60 <netconn_new_with_proto_and_callback+0xdc>)
 8009aee:	22a4      	movs	r2, #164	@ 0xa4
 8009af0:	491e      	ldr	r1, [pc, #120]	@ (8009b6c <netconn_new_with_proto_and_callback+0xe8>)
 8009af2:	481d      	ldr	r0, [pc, #116]	@ (8009b68 <netconn_new_with_proto_and_callback+0xe4>)
 8009af4:	f010 fc74 	bl	801a3e0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8009af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009afa:	3314      	adds	r3, #20
 8009afc:	4618      	mov	r0, r3
 8009afe:	f00f f9c5 	bl	8018e8c <sys_mbox_valid>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d005      	beq.n	8009b14 <netconn_new_with_proto_and_callback+0x90>
 8009b08:	4b15      	ldr	r3, [pc, #84]	@ (8009b60 <netconn_new_with_proto_and_callback+0xdc>)
 8009b0a:	22a6      	movs	r2, #166	@ 0xa6
 8009b0c:	4918      	ldr	r1, [pc, #96]	@ (8009b70 <netconn_new_with_proto_and_callback+0xec>)
 8009b0e:	4816      	ldr	r0, [pc, #88]	@ (8009b68 <netconn_new_with_proto_and_callback+0xe4>)
 8009b10:	f010 fc66 	bl	801a3e0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b16:	330c      	adds	r3, #12
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f00f fa45 	bl	8018fa8 <sys_sem_valid>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d105      	bne.n	8009b30 <netconn_new_with_proto_and_callback+0xac>
 8009b24:	4b0e      	ldr	r3, [pc, #56]	@ (8009b60 <netconn_new_with_proto_and_callback+0xdc>)
 8009b26:	22a9      	movs	r2, #169	@ 0xa9
 8009b28:	4912      	ldr	r1, [pc, #72]	@ (8009b74 <netconn_new_with_proto_and_callback+0xf0>)
 8009b2a:	480f      	ldr	r0, [pc, #60]	@ (8009b68 <netconn_new_with_proto_and_callback+0xe4>)
 8009b2c:	f010 fc58 	bl	801a3e0 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b32:	330c      	adds	r3, #12
 8009b34:	4618      	mov	r0, r3
 8009b36:	f00f fa2a 	bl	8018f8e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8009b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3c:	3310      	adds	r3, #16
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f00f f930 	bl	8018da4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009b44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b46:	2007      	movs	r0, #7
 8009b48:	f004 fcea 	bl	800e520 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	e000      	b.n	8009b52 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3730      	adds	r7, #48	@ 0x30
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	0800adb9 	.word	0x0800adb9
 8009b60:	0801dc54 	.word	0x0801dc54
 8009b64:	0801dc88 	.word	0x0801dc88
 8009b68:	0801dcac 	.word	0x0801dcac
 8009b6c:	0801dcd4 	.word	0x0801dcd4
 8009b70:	0801dcec 	.word	0x0801dcec
 8009b74:	0801dd10 	.word	0x0801dd10

08009b78 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b08c      	sub	sp, #48	@ 0x30
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d101      	bne.n	8009b8a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8009b86:	2300      	movs	r3, #0
 8009b88:	e014      	b.n	8009bb4 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009b8e:	2329      	movs	r3, #41	@ 0x29
 8009b90:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009b92:	f107 030c 	add.w	r3, r7, #12
 8009b96:	4619      	mov	r1, r3
 8009b98:	4808      	ldr	r0, [pc, #32]	@ (8009bbc <netconn_prepare_delete+0x44>)
 8009b9a:	f7ff ff55 	bl	8009a48 <netconn_apimsg>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009ba4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <netconn_prepare_delete+0x3a>
    return err;
 8009bac:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009bb0:	e000      	b.n	8009bb4 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3730      	adds	r7, #48	@ 0x30
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	0800b325 	.word	0x0800b325

08009bc0 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d101      	bne.n	8009bd2 <netconn_delete+0x12>
    return ERR_OK;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	e00d      	b.n	8009bee <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7ff ffd0 	bl	8009b78 <netconn_prepare_delete>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8009bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d102      	bne.n	8009bea <netconn_delete+0x2a>
    netconn_free(conn);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f001 f96b 	bl	800aec0 <netconn_free>
  }
  return err;
 8009bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
	...

08009bf8 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b08e      	sub	sp, #56	@ 0x38
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
 8009c04:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d109      	bne.n	8009c20 <netconn_getaddr+0x28>
 8009c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8009c84 <netconn_getaddr+0x8c>)
 8009c0e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8009c12:	491d      	ldr	r1, [pc, #116]	@ (8009c88 <netconn_getaddr+0x90>)
 8009c14:	481d      	ldr	r0, [pc, #116]	@ (8009c8c <netconn_getaddr+0x94>)
 8009c16:	f010 fbe3 	bl	801a3e0 <iprintf>
 8009c1a:	f06f 030f 	mvn.w	r3, #15
 8009c1e:	e02d      	b.n	8009c7c <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d109      	bne.n	8009c3a <netconn_getaddr+0x42>
 8009c26:	4b17      	ldr	r3, [pc, #92]	@ (8009c84 <netconn_getaddr+0x8c>)
 8009c28:	f240 1213 	movw	r2, #275	@ 0x113
 8009c2c:	4918      	ldr	r1, [pc, #96]	@ (8009c90 <netconn_getaddr+0x98>)
 8009c2e:	4817      	ldr	r0, [pc, #92]	@ (8009c8c <netconn_getaddr+0x94>)
 8009c30:	f010 fbd6 	bl	801a3e0 <iprintf>
 8009c34:	f06f 030f 	mvn.w	r3, #15
 8009c38:	e020      	b.n	8009c7c <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d109      	bne.n	8009c54 <netconn_getaddr+0x5c>
 8009c40:	4b10      	ldr	r3, [pc, #64]	@ (8009c84 <netconn_getaddr+0x8c>)
 8009c42:	f44f 728a 	mov.w	r2, #276	@ 0x114
 8009c46:	4913      	ldr	r1, [pc, #76]	@ (8009c94 <netconn_getaddr+0x9c>)
 8009c48:	4810      	ldr	r0, [pc, #64]	@ (8009c8c <netconn_getaddr+0x94>)
 8009c4a:	f010 fbc9 	bl	801a3e0 <iprintf>
 8009c4e:	f06f 030f 	mvn.w	r3, #15
 8009c52:	e013      	b.n	8009c7c <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8009c58:	78fb      	ldrb	r3, [r7, #3]
 8009c5a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8009c66:	f107 0314 	add.w	r3, r7, #20
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	480a      	ldr	r0, [pc, #40]	@ (8009c98 <netconn_getaddr+0xa0>)
 8009c6e:	f7ff feeb 	bl	8009a48 <netconn_apimsg>
 8009c72:	4603      	mov	r3, r0
 8009c74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8009c78:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3738      	adds	r7, #56	@ 0x38
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	0801dc54 	.word	0x0801dc54
 8009c88:	0801dd2c 	.word	0x0801dd2c
 8009c8c:	0801dcac 	.word	0x0801dcac
 8009c90:	0801dd4c 	.word	0x0801dd4c
 8009c94:	0801dd6c 	.word	0x0801dd6c
 8009c98:	0800bc45 	.word	0x0800bc45

08009c9c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08e      	sub	sp, #56	@ 0x38
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d109      	bne.n	8009cc4 <netconn_bind+0x28>
 8009cb0:	4b11      	ldr	r3, [pc, #68]	@ (8009cf8 <netconn_bind+0x5c>)
 8009cb2:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8009cb6:	4911      	ldr	r1, [pc, #68]	@ (8009cfc <netconn_bind+0x60>)
 8009cb8:	4811      	ldr	r0, [pc, #68]	@ (8009d00 <netconn_bind+0x64>)
 8009cba:	f010 fb91 	bl	801a3e0 <iprintf>
 8009cbe:	f06f 030f 	mvn.w	r3, #15
 8009cc2:	e015      	b.n	8009cf0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d101      	bne.n	8009cce <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8009cca:	4b0e      	ldr	r3, [pc, #56]	@ (8009d04 <netconn_bind+0x68>)
 8009ccc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009cd6:	88fb      	ldrh	r3, [r7, #6]
 8009cd8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8009cda:	f107 0314 	add.w	r3, r7, #20
 8009cde:	4619      	mov	r1, r3
 8009ce0:	4809      	ldr	r0, [pc, #36]	@ (8009d08 <netconn_bind+0x6c>)
 8009ce2:	f7ff feb1 	bl	8009a48 <netconn_apimsg>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8009cec:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3738      	adds	r7, #56	@ 0x38
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	0801dc54 	.word	0x0801dc54
 8009cfc:	0801dd8c 	.word	0x0801dd8c
 8009d00:	0801dcac 	.word	0x0801dcac
 8009d04:	08021710 	.word	0x08021710
 8009d08:	0800b4ed 	.word	0x0800b4ed

08009d0c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b08c      	sub	sp, #48	@ 0x30
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	460b      	mov	r3, r1
 8009d16:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d109      	bne.n	8009d32 <netconn_listen_with_backlog+0x26>
 8009d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8009d54 <netconn_listen_with_backlog+0x48>)
 8009d20:	f240 12bb 	movw	r2, #443	@ 0x1bb
 8009d24:	490c      	ldr	r1, [pc, #48]	@ (8009d58 <netconn_listen_with_backlog+0x4c>)
 8009d26:	480d      	ldr	r0, [pc, #52]	@ (8009d5c <netconn_listen_with_backlog+0x50>)
 8009d28:	f010 fb5a 	bl	801a3e0 <iprintf>
 8009d2c:	f06f 030f 	mvn.w	r3, #15
 8009d30:	e00c      	b.n	8009d4c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8009d36:	f107 030c 	add.w	r3, r7, #12
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	4808      	ldr	r0, [pc, #32]	@ (8009d60 <netconn_listen_with_backlog+0x54>)
 8009d3e:	f7ff fe83 	bl	8009a48 <netconn_apimsg>
 8009d42:	4603      	mov	r3, r0
 8009d44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009d48:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3730      	adds	r7, #48	@ 0x30
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	0801dc54 	.word	0x0801dc54
 8009d58:	0801de0c 	.word	0x0801de0c
 8009d5c:	0801dcac 	.word	0x0801dcac
 8009d60:	0800b561 	.word	0x0800b561

08009d64 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d109      	bne.n	8009d88 <netconn_accept+0x24>
 8009d74:	4b3d      	ldr	r3, [pc, #244]	@ (8009e6c <netconn_accept+0x108>)
 8009d76:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8009d7a:	493d      	ldr	r1, [pc, #244]	@ (8009e70 <netconn_accept+0x10c>)
 8009d7c:	483d      	ldr	r0, [pc, #244]	@ (8009e74 <netconn_accept+0x110>)
 8009d7e:	f010 fb2f 	bl	801a3e0 <iprintf>
 8009d82:	f06f 030f 	mvn.w	r3, #15
 8009d86:	e06c      	b.n	8009e62 <netconn_accept+0xfe>
  *new_conn = NULL;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d109      	bne.n	8009da8 <netconn_accept+0x44>
 8009d94:	4b35      	ldr	r3, [pc, #212]	@ (8009e6c <netconn_accept+0x108>)
 8009d96:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8009d9a:	4937      	ldr	r1, [pc, #220]	@ (8009e78 <netconn_accept+0x114>)
 8009d9c:	4835      	ldr	r0, [pc, #212]	@ (8009e74 <netconn_accept+0x110>)
 8009d9e:	f010 fb1f 	bl	801a3e0 <iprintf>
 8009da2:	f06f 030f 	mvn.w	r3, #15
 8009da6:	e05c      	b.n	8009e62 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 fb99 	bl	800a4e0 <netconn_err>
 8009dae:	4603      	mov	r3, r0
 8009db0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8009db2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d002      	beq.n	8009dc0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8009dba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009dbe:	e050      	b.n	8009e62 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	3314      	adds	r3, #20
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f00f f861 	bl	8018e8c <sys_mbox_valid>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d005      	beq.n	8009ddc <netconn_accept+0x78>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	7f1b      	ldrb	r3, [r3, #28]
 8009dd4:	f003 0301 	and.w	r3, r3, #1
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d002      	beq.n	8009de2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8009ddc:	f06f 030e 	mvn.w	r3, #14
 8009de0:	e03f      	b.n	8009e62 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	7f1b      	ldrb	r3, [r3, #28]
 8009de6:	f003 0302 	and.w	r3, r3, #2
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00e      	beq.n	8009e0c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	3314      	adds	r3, #20
 8009df2:	f107 020c 	add.w	r2, r7, #12
 8009df6:	4611      	mov	r1, r2
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f00f f830 	bl	8018e5e <sys_arch_mbox_tryfetch>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e04:	d10a      	bne.n	8009e1c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8009e06:	f06f 0306 	mvn.w	r3, #6
 8009e0a:	e02a      	b.n	8009e62 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	3314      	adds	r3, #20
 8009e10:	f107 010c 	add.w	r1, r7, #12
 8009e14:	2200      	movs	r2, #0
 8009e16:	4618      	mov	r0, r3
 8009e18:	f00e fff0 	bl	8018dfc <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d005      	beq.n	8009e30 <netconn_accept+0xcc>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e28:	2200      	movs	r2, #0
 8009e2a:	2101      	movs	r1, #1
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f107 0213 	add.w	r2, r7, #19
 8009e36:	4611      	mov	r1, r2
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f000 fba3 	bl	800a584 <lwip_netconn_is_err_msg>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d002      	beq.n	8009e4a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8009e44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e48:	e00b      	b.n	8009e62 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d102      	bne.n	8009e56 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8009e50:	f06f 030e 	mvn.w	r3, #14
 8009e54:	e005      	b.n	8009e62 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009e60:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3718      	adds	r7, #24
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	0801dc54 	.word	0x0801dc54
 8009e70:	0801de2c 	.word	0x0801de2c
 8009e74:	0801dcac 	.word	0x0801dcac
 8009e78:	0801de4c 	.word	0x0801de4c

08009e7c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b088      	sub	sp, #32
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	4613      	mov	r3, r2
 8009e88:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d109      	bne.n	8009ea8 <netconn_recv_data+0x2c>
 8009e94:	4b58      	ldr	r3, [pc, #352]	@ (8009ff8 <netconn_recv_data+0x17c>)
 8009e96:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8009e9a:	4958      	ldr	r1, [pc, #352]	@ (8009ffc <netconn_recv_data+0x180>)
 8009e9c:	4858      	ldr	r0, [pc, #352]	@ (800a000 <netconn_recv_data+0x184>)
 8009e9e:	f010 fa9f 	bl	801a3e0 <iprintf>
 8009ea2:	f06f 030f 	mvn.w	r3, #15
 8009ea6:	e0a2      	b.n	8009fee <netconn_recv_data+0x172>
  *new_buf = NULL;
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d109      	bne.n	8009ec8 <netconn_recv_data+0x4c>
 8009eb4:	4b50      	ldr	r3, [pc, #320]	@ (8009ff8 <netconn_recv_data+0x17c>)
 8009eb6:	f240 224a 	movw	r2, #586	@ 0x24a
 8009eba:	4952      	ldr	r1, [pc, #328]	@ (800a004 <netconn_recv_data+0x188>)
 8009ebc:	4850      	ldr	r0, [pc, #320]	@ (800a000 <netconn_recv_data+0x184>)
 8009ebe:	f010 fa8f 	bl	801a3e0 <iprintf>
 8009ec2:	f06f 030f 	mvn.w	r3, #15
 8009ec6:	e092      	b.n	8009fee <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	3310      	adds	r3, #16
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f00e ffdd 	bl	8018e8c <sys_mbox_valid>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d10e      	bne.n	8009ef6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	f000 fb01 	bl	800a4e0 <netconn_err>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009ee2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d002      	beq.n	8009ef0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8009eea:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009eee:	e07e      	b.n	8009fee <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8009ef0:	f06f 030a 	mvn.w	r3, #10
 8009ef4:	e07b      	b.n	8009fee <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	7f1b      	ldrb	r3, [r3, #28]
 8009efa:	f003 0302 	and.w	r3, r3, #2
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d10f      	bne.n	8009f22 <netconn_recv_data+0xa6>
 8009f02:	79fb      	ldrb	r3, [r7, #7]
 8009f04:	f003 0304 	and.w	r3, r3, #4
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10a      	bne.n	8009f22 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	7f1b      	ldrb	r3, [r3, #28]
 8009f10:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d104      	bne.n	8009f22 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d023      	beq.n	8009f6a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	3310      	adds	r3, #16
 8009f26:	f107 0218 	add.w	r2, r7, #24
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f00e ff96 	bl	8018e5e <sys_arch_mbox_tryfetch>
 8009f32:	4603      	mov	r3, r0
 8009f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f38:	d11f      	bne.n	8009f7a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f000 fad0 	bl	800a4e0 <netconn_err>
 8009f40:	4603      	mov	r3, r0
 8009f42:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009f44:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8009f4c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009f50:	e04d      	b.n	8009fee <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	7f1b      	ldrb	r3, [r3, #28]
 8009f56:	f003 0301 	and.w	r3, r3, #1
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d002      	beq.n	8009f64 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8009f5e:	f06f 030a 	mvn.w	r3, #10
 8009f62:	e044      	b.n	8009fee <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8009f64:	f06f 0306 	mvn.w	r3, #6
 8009f68:	e041      	b.n	8009fee <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	3310      	adds	r3, #16
 8009f6e:	f107 0118 	add.w	r1, r7, #24
 8009f72:	2200      	movs	r2, #0
 8009f74:	4618      	mov	r0, r3
 8009f76:	f00e ff41 	bl	8018dfc <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f82:	2b10      	cmp	r3, #16
 8009f84:	d117      	bne.n	8009fb6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	f107 0217 	add.w	r2, r7, #23
 8009f8c:	4611      	mov	r1, r2
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f000 faf8 	bl	800a584 <lwip_netconn_is_err_msg>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d009      	beq.n	8009fae <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8009f9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f9e:	f113 0f0f 	cmn.w	r3, #15
 8009fa2:	d101      	bne.n	8009fa8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	e022      	b.n	8009fee <netconn_recv_data+0x172>
      }
      return err;
 8009fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fac:	e01f      	b.n	8009fee <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	891b      	ldrh	r3, [r3, #8]
 8009fb2:	83fb      	strh	r3, [r7, #30]
 8009fb4:	e00d      	b.n	8009fd2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d106      	bne.n	8009fca <netconn_recv_data+0x14e>
 8009fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8009ff8 <netconn_recv_data+0x17c>)
 8009fbe:	f240 2291 	movw	r2, #657	@ 0x291
 8009fc2:	4911      	ldr	r1, [pc, #68]	@ (800a008 <netconn_recv_data+0x18c>)
 8009fc4:	480e      	ldr	r0, [pc, #56]	@ (800a000 <netconn_recv_data+0x184>)
 8009fc6:	f010 fa0b 	bl	801a3e0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	891b      	ldrh	r3, [r3, #8]
 8009fd0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d005      	beq.n	8009fe6 <netconn_recv_data+0x16a>
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fde:	8bfa      	ldrh	r2, [r7, #30]
 8009fe0:	2101      	movs	r1, #1
 8009fe2:	68f8      	ldr	r0, [r7, #12]
 8009fe4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009fe6:	69ba      	ldr	r2, [r7, #24]
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3720      	adds	r7, #32
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	0801dc54 	.word	0x0801dc54
 8009ffc:	0801de6c 	.word	0x0801de6c
 800a000:	0801dcac 	.word	0x0801dcac
 800a004:	0801de8c 	.word	0x0801de8c
 800a008:	0801dea8 	.word	0x0801dea8

0800a00c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d005      	beq.n	800a02a <netconn_tcp_recvd_msg+0x1e>
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a026:	2b10      	cmp	r3, #16
 800a028:	d009      	beq.n	800a03e <netconn_tcp_recvd_msg+0x32>
 800a02a:	4b0c      	ldr	r3, [pc, #48]	@ (800a05c <netconn_tcp_recvd_msg+0x50>)
 800a02c:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800a030:	490b      	ldr	r1, [pc, #44]	@ (800a060 <netconn_tcp_recvd_msg+0x54>)
 800a032:	480c      	ldr	r0, [pc, #48]	@ (800a064 <netconn_tcp_recvd_msg+0x58>)
 800a034:	f010 f9d4 	bl	801a3e0 <iprintf>
 800a038:	f06f 030f 	mvn.w	r3, #15
 800a03c:	e00a      	b.n	800a054 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a04a:	6879      	ldr	r1, [r7, #4]
 800a04c:	4806      	ldr	r0, [pc, #24]	@ (800a068 <netconn_tcp_recvd_msg+0x5c>)
 800a04e:	f7ff fcfb 	bl	8009a48 <netconn_apimsg>
 800a052:	4603      	mov	r3, r0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	0801dc54 	.word	0x0801dc54
 800a060:	0801deb4 	.word	0x0801deb4
 800a064:	0801dcac 	.word	0x0801dcac
 800a068:	0800b72b 	.word	0x0800b72b

0800a06c <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b08c      	sub	sp, #48	@ 0x30
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d005      	beq.n	800a088 <netconn_tcp_recvd+0x1c>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a084:	2b10      	cmp	r3, #16
 800a086:	d009      	beq.n	800a09c <netconn_tcp_recvd+0x30>
 800a088:	4b0c      	ldr	r3, [pc, #48]	@ (800a0bc <netconn_tcp_recvd+0x50>)
 800a08a:	f240 22b5 	movw	r2, #693	@ 0x2b5
 800a08e:	490c      	ldr	r1, [pc, #48]	@ (800a0c0 <netconn_tcp_recvd+0x54>)
 800a090:	480c      	ldr	r0, [pc, #48]	@ (800a0c4 <netconn_tcp_recvd+0x58>)
 800a092:	f010 f9a5 	bl	801a3e0 <iprintf>
 800a096:	f06f 030f 	mvn.w	r3, #15
 800a09a:	e00b      	b.n	800a0b4 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800a09c:	f107 030c 	add.w	r3, r7, #12
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	6839      	ldr	r1, [r7, #0]
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f7ff ffb1 	bl	800a00c <netconn_tcp_recvd_msg>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800a0b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3730      	adds	r7, #48	@ 0x30
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	0801dc54 	.word	0x0801dc54
 800a0c0:	0801deb4 	.word	0x0801deb4
 800a0c4:	0801dcac 	.word	0x0801dcac

0800a0c8 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b090      	sub	sp, #64	@ 0x40
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	3310      	adds	r3, #16
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f00e fed6 	bl	8018e8c <sys_mbox_valid>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d102      	bne.n	800a0ec <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800a0e6:	f06f 030a 	mvn.w	r3, #10
 800a0ea:	e06d      	b.n	800a1c8 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	7f1b      	ldrb	r3, [r3, #28]
 800a0f0:	b25b      	sxtb	r3, r3
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	da07      	bge.n	800a106 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	7f1b      	ldrb	r3, [r3, #28]
 800a0fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0fe:	b2da      	uxtb	r2, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800a104:	e039      	b.n	800a17a <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a106:	79fb      	ldrb	r3, [r7, #7]
 800a108:	461a      	mov	r2, r3
 800a10a:	68b9      	ldr	r1, [r7, #8]
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f7ff feb5 	bl	8009e7c <netconn_recv_data>
 800a112:	4603      	mov	r3, r0
 800a114:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800a118:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d002      	beq.n	800a126 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800a120:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a124:	e050      	b.n	800a1c8 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a12c:	79fb      	ldrb	r3, [r7, #7]
 800a12e:	f003 0308 	and.w	r3, r3, #8
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10e      	bne.n	800a154 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800a136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d002      	beq.n	800a142 <netconn_recv_data_tcp+0x7a>
 800a13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a13e:	891b      	ldrh	r3, [r3, #8]
 800a140:	e000      	b.n	800a144 <netconn_recv_data_tcp+0x7c>
 800a142:	2301      	movs	r3, #1
 800a144:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800a146:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a148:	f107 0214 	add.w	r2, r7, #20
 800a14c:	4619      	mov	r1, r3
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f7ff ff5c 	bl	800a00c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800a154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a156:	2b00      	cmp	r3, #0
 800a158:	d134      	bne.n	800a1c4 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800a15a:	79fb      	ldrb	r3, [r7, #7]
 800a15c:	f003 0310 	and.w	r3, r3, #16
 800a160:	2b00      	cmp	r3, #0
 800a162:	d009      	beq.n	800a178 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	7f1b      	ldrb	r3, [r3, #28]
 800a168:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a16c:	b2da      	uxtb	r2, r3
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800a172:	f06f 0306 	mvn.w	r3, #6
 800a176:	e027      	b.n	800a1c8 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800a178:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d005      	beq.n	800a18e <netconn_recv_data_tcp+0xc6>
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a186:	2200      	movs	r2, #0
 800a188:	2101      	movs	r1, #1
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d10f      	bne.n	800a1b6 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f000 f9a2 	bl	800a4e0 <netconn_err>
 800a19c:	4603      	mov	r3, r0
 800a19e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800a1a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d002      	beq.n	800a1b0 <netconn_recv_data_tcp+0xe8>
          return err;
 800a1aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a1ae:	e00b      	b.n	800a1c8 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800a1b0:	f06f 030d 	mvn.w	r3, #13
 800a1b4:	e008      	b.n	800a1c8 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f000 f961 	bl	800a480 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800a1be:	f06f 030e 	mvn.w	r3, #14
 800a1c2:	e001      	b.n	800a1c8 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800a1c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3740      	adds	r7, #64	@ 0x40
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d005      	beq.n	800a1f0 <netconn_recv_tcp_pbuf_flags+0x20>
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a1ec:	2b10      	cmp	r3, #16
 800a1ee:	d009      	beq.n	800a204 <netconn_recv_tcp_pbuf_flags+0x34>
 800a1f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a21c <netconn_recv_tcp_pbuf_flags+0x4c>)
 800a1f2:	f240 3225 	movw	r2, #805	@ 0x325
 800a1f6:	490a      	ldr	r1, [pc, #40]	@ (800a220 <netconn_recv_tcp_pbuf_flags+0x50>)
 800a1f8:	480a      	ldr	r0, [pc, #40]	@ (800a224 <netconn_recv_tcp_pbuf_flags+0x54>)
 800a1fa:	f010 f8f1 	bl	801a3e0 <iprintf>
 800a1fe:	f06f 030f 	mvn.w	r3, #15
 800a202:	e006      	b.n	800a212 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800a204:	79fb      	ldrb	r3, [r7, #7]
 800a206:	461a      	mov	r2, r3
 800a208:	68b9      	ldr	r1, [r7, #8]
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f7ff ff5c 	bl	800a0c8 <netconn_recv_data_tcp>
 800a210:	4603      	mov	r3, r0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	0801dc54 	.word	0x0801dc54
 800a220:	0801deb4 	.word	0x0801deb4
 800a224:	0801dcac 	.word	0x0801dcac

0800a228 <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	4613      	mov	r3, r2
 800a234:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d005      	beq.n	800a248 <netconn_recv_udp_raw_netbuf_flags+0x20>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a244:	2b10      	cmp	r3, #16
 800a246:	d109      	bne.n	800a25c <netconn_recv_udp_raw_netbuf_flags+0x34>
 800a248:	4b0a      	ldr	r3, [pc, #40]	@ (800a274 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800a24a:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 800a24e:	490a      	ldr	r1, [pc, #40]	@ (800a278 <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800a250:	480a      	ldr	r0, [pc, #40]	@ (800a27c <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800a252:	f010 f8c5 	bl	801a3e0 <iprintf>
 800a256:	f06f 030f 	mvn.w	r3, #15
 800a25a:	e006      	b.n	800a26a <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a25c:	79fb      	ldrb	r3, [r7, #7]
 800a25e:	461a      	mov	r2, r3
 800a260:	68b9      	ldr	r1, [r7, #8]
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f7ff fe0a 	bl	8009e7c <netconn_recv_data>
 800a268:	4603      	mov	r3, r0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	0801dc54 	.word	0x0801dc54
 800a278:	0801ded8 	.word	0x0801ded8
 800a27c:	0801dcac 	.word	0x0801dcac

0800a280 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b08c      	sub	sp, #48	@ 0x30
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d109      	bne.n	800a2a4 <netconn_send+0x24>
 800a290:	4b0e      	ldr	r3, [pc, #56]	@ (800a2cc <netconn_send+0x4c>)
 800a292:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800a296:	490e      	ldr	r1, [pc, #56]	@ (800a2d0 <netconn_send+0x50>)
 800a298:	480e      	ldr	r0, [pc, #56]	@ (800a2d4 <netconn_send+0x54>)
 800a29a:	f010 f8a1 	bl	801a3e0 <iprintf>
 800a29e:	f06f 030f 	mvn.w	r3, #15
 800a2a2:	e00e      	b.n	800a2c2 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800a2ac:	f107 030c 	add.w	r3, r7, #12
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	4809      	ldr	r0, [pc, #36]	@ (800a2d8 <netconn_send+0x58>)
 800a2b4:	f7ff fbc8 	bl	8009a48 <netconn_apimsg>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a2be:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3730      	adds	r7, #48	@ 0x30
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	0801dc54 	.word	0x0801dc54
 800a2d0:	0801df10 	.word	0x0801df10
 800a2d4:	0801dcac 	.word	0x0801dcac
 800a2d8:	0800b691 	.word	0x0800b691

0800a2dc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b088      	sub	sp, #32
 800a2e0:	af02      	add	r7, sp, #8
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
 800a2e8:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800a2f2:	78fa      	ldrb	r2, [r7, #3]
 800a2f4:	f107 0110 	add.w	r1, r7, #16
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	9300      	str	r3, [sp, #0]
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	2201      	movs	r2, #1
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f000 f805 	bl	800a310 <netconn_write_vectors_partly>
 800a306:	4603      	mov	r3, r0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3718      	adds	r7, #24
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b092      	sub	sp, #72	@ 0x48
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	4611      	mov	r1, r2
 800a31c:	461a      	mov	r2, r3
 800a31e:	460b      	mov	r3, r1
 800a320:	80fb      	strh	r3, [r7, #6]
 800a322:	4613      	mov	r3, r2
 800a324:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d109      	bne.n	800a340 <netconn_write_vectors_partly+0x30>
 800a32c:	4b4e      	ldr	r3, [pc, #312]	@ (800a468 <netconn_write_vectors_partly+0x158>)
 800a32e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800a332:	494e      	ldr	r1, [pc, #312]	@ (800a46c <netconn_write_vectors_partly+0x15c>)
 800a334:	484e      	ldr	r0, [pc, #312]	@ (800a470 <netconn_write_vectors_partly+0x160>)
 800a336:	f010 f853 	bl	801a3e0 <iprintf>
 800a33a:	f06f 030f 	mvn.w	r3, #15
 800a33e:	e08e      	b.n	800a45e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a348:	2b10      	cmp	r3, #16
 800a34a:	d009      	beq.n	800a360 <netconn_write_vectors_partly+0x50>
 800a34c:	4b46      	ldr	r3, [pc, #280]	@ (800a468 <netconn_write_vectors_partly+0x158>)
 800a34e:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800a352:	4948      	ldr	r1, [pc, #288]	@ (800a474 <netconn_write_vectors_partly+0x164>)
 800a354:	4846      	ldr	r0, [pc, #280]	@ (800a470 <netconn_write_vectors_partly+0x160>)
 800a356:	f010 f843 	bl	801a3e0 <iprintf>
 800a35a:	f06f 0305 	mvn.w	r3, #5
 800a35e:	e07e      	b.n	800a45e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	7f1b      	ldrb	r3, [r3, #28]
 800a364:	f003 0302 	and.w	r3, r3, #2
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d104      	bne.n	800a376 <netconn_write_vectors_partly+0x66>
 800a36c:	797b      	ldrb	r3, [r7, #5]
 800a36e:	f003 0304 	and.w	r3, r3, #4
 800a372:	2b00      	cmp	r3, #0
 800a374:	d001      	beq.n	800a37a <netconn_write_vectors_partly+0x6a>
 800a376:	2301      	movs	r3, #1
 800a378:	e000      	b.n	800a37c <netconn_write_vectors_partly+0x6c>
 800a37a:	2300      	movs	r3, #0
 800a37c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800a380:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a384:	2b00      	cmp	r3, #0
 800a386:	d005      	beq.n	800a394 <netconn_write_vectors_partly+0x84>
 800a388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d102      	bne.n	800a394 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800a38e:	f06f 0305 	mvn.w	r3, #5
 800a392:	e064      	b.n	800a45e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800a394:	2300      	movs	r3, #0
 800a396:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800a398:	2300      	movs	r3, #0
 800a39a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a39c:	e015      	b.n	800a3ca <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800a39e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3a0:	00db      	lsls	r3, r3, #3
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a3aa:	4413      	add	r3, r2
 800a3ac:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800a3ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3b0:	00db      	lsls	r3, r3, #3
 800a3b2:	68ba      	ldr	r2, [r7, #8]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d202      	bcs.n	800a3c4 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800a3be:	f06f 0305 	mvn.w	r3, #5
 800a3c2:	e04c      	b.n	800a45e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800a3c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3ca:	88fb      	ldrh	r3, [r7, #6]
 800a3cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	dbe5      	blt.n	800a39e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800a3d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d101      	bne.n	800a3dc <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	e040      	b.n	800a45e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800a3dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	da0a      	bge.n	800a3f8 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800a3e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d102      	bne.n	800a3ee <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800a3e8:	f06f 0305 	mvn.w	r3, #5
 800a3ec:	e037      	b.n	800a45e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800a3ee:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a3f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800a3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f6:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800a400:	88fb      	ldrh	r3, [r7, #6]
 800a402:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800a404:	2300      	movs	r3, #0
 800a406:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800a408:	797b      	ldrb	r3, [r7, #5]
 800a40a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800a40e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a410:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800a412:	2300      	movs	r3, #0
 800a414:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800a416:	f107 0314 	add.w	r3, r7, #20
 800a41a:	4619      	mov	r1, r3
 800a41c:	4816      	ldr	r0, [pc, #88]	@ (800a478 <netconn_write_vectors_partly+0x168>)
 800a41e:	f7ff fb13 	bl	8009a48 <netconn_apimsg>
 800a422:	4603      	mov	r3, r0
 800a424:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800a428:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d114      	bne.n	800a45a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800a430:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a432:	2b00      	cmp	r3, #0
 800a434:	d002      	beq.n	800a43c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800a436:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a438:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a43a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800a43c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10a      	bne.n	800a45a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800a444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a446:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a448:	429a      	cmp	r2, r3
 800a44a:	d006      	beq.n	800a45a <netconn_write_vectors_partly+0x14a>
 800a44c:	4b06      	ldr	r3, [pc, #24]	@ (800a468 <netconn_write_vectors_partly+0x158>)
 800a44e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800a452:	490a      	ldr	r1, [pc, #40]	@ (800a47c <netconn_write_vectors_partly+0x16c>)
 800a454:	4806      	ldr	r0, [pc, #24]	@ (800a470 <netconn_write_vectors_partly+0x160>)
 800a456:	f00f ffc3 	bl	801a3e0 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800a45a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3748      	adds	r7, #72	@ 0x48
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	0801dc54 	.word	0x0801dc54
 800a46c:	0801df2c 	.word	0x0801df2c
 800a470:	0801dcac 	.word	0x0801dcac
 800a474:	0801df48 	.word	0x0801df48
 800a478:	0800bb2d 	.word	0x0800bb2d
 800a47c:	0801df6c 	.word	0x0801df6c

0800a480 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b08c      	sub	sp, #48	@ 0x30
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	460b      	mov	r3, r1
 800a48a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d109      	bne.n	800a4a6 <netconn_close_shutdown+0x26>
 800a492:	4b0f      	ldr	r3, [pc, #60]	@ (800a4d0 <netconn_close_shutdown+0x50>)
 800a494:	f240 4247 	movw	r2, #1095	@ 0x447
 800a498:	490e      	ldr	r1, [pc, #56]	@ (800a4d4 <netconn_close_shutdown+0x54>)
 800a49a:	480f      	ldr	r0, [pc, #60]	@ (800a4d8 <netconn_close_shutdown+0x58>)
 800a49c:	f00f ffa0 	bl	801a3e0 <iprintf>
 800a4a0:	f06f 030f 	mvn.w	r3, #15
 800a4a4:	e010      	b.n	800a4c8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800a4aa:	78fb      	ldrb	r3, [r7, #3]
 800a4ac:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a4ae:	2329      	movs	r3, #41	@ 0x29
 800a4b0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800a4b2:	f107 030c 	add.w	r3, r7, #12
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	4808      	ldr	r0, [pc, #32]	@ (800a4dc <netconn_close_shutdown+0x5c>)
 800a4ba:	f7ff fac5 	bl	8009a48 <netconn_apimsg>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a4c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3730      	adds	r7, #48	@ 0x30
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	0801dc54 	.word	0x0801dc54
 800a4d4:	0801df90 	.word	0x0801df90
 800a4d8:	0801dcac 	.word	0x0801dcac
 800a4dc:	0800bd51 	.word	0x0800bd51

0800a4e0 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d101      	bne.n	800a4f2 <netconn_err+0x12>
    return ERR_OK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	e00d      	b.n	800a50e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800a4f2:	f00e fdd5 	bl	80190a0 <sys_arch_protect>
 800a4f6:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	7a1b      	ldrb	r3, [r3, #8]
 800a4fc:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f00e fdd9 	bl	80190bc <sys_arch_unprotect>
  return err;
 800a50a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
	...

0800a518 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	4603      	mov	r3, r0
 800a520:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800a522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a526:	f113 0f0d 	cmn.w	r3, #13
 800a52a:	d009      	beq.n	800a540 <lwip_netconn_err_to_msg+0x28>
 800a52c:	f113 0f0d 	cmn.w	r3, #13
 800a530:	dc0c      	bgt.n	800a54c <lwip_netconn_err_to_msg+0x34>
 800a532:	f113 0f0f 	cmn.w	r3, #15
 800a536:	d007      	beq.n	800a548 <lwip_netconn_err_to_msg+0x30>
 800a538:	f113 0f0e 	cmn.w	r3, #14
 800a53c:	d002      	beq.n	800a544 <lwip_netconn_err_to_msg+0x2c>
 800a53e:	e005      	b.n	800a54c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800a540:	4b0a      	ldr	r3, [pc, #40]	@ (800a56c <lwip_netconn_err_to_msg+0x54>)
 800a542:	e00e      	b.n	800a562 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800a544:	4b0a      	ldr	r3, [pc, #40]	@ (800a570 <lwip_netconn_err_to_msg+0x58>)
 800a546:	e00c      	b.n	800a562 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800a548:	4b0a      	ldr	r3, [pc, #40]	@ (800a574 <lwip_netconn_err_to_msg+0x5c>)
 800a54a:	e00a      	b.n	800a562 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800a54c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d005      	beq.n	800a560 <lwip_netconn_err_to_msg+0x48>
 800a554:	4b08      	ldr	r3, [pc, #32]	@ (800a578 <lwip_netconn_err_to_msg+0x60>)
 800a556:	227d      	movs	r2, #125	@ 0x7d
 800a558:	4908      	ldr	r1, [pc, #32]	@ (800a57c <lwip_netconn_err_to_msg+0x64>)
 800a55a:	4809      	ldr	r0, [pc, #36]	@ (800a580 <lwip_netconn_err_to_msg+0x68>)
 800a55c:	f00f ff40 	bl	801a3e0 <iprintf>
      return NULL;
 800a560:	2300      	movs	r3, #0
  }
}
 800a562:	4618      	mov	r0, r3
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	080215b8 	.word	0x080215b8
 800a570:	080215b9 	.word	0x080215b9
 800a574:	080215ba 	.word	0x080215ba
 800a578:	0801dfac 	.word	0x0801dfac
 800a57c:	0801dfe0 	.word	0x0801dfe0
 800a580:	0801dff0 	.word	0x0801dff0

0800a584 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d105      	bne.n	800a5a0 <lwip_netconn_is_err_msg+0x1c>
 800a594:	4b12      	ldr	r3, [pc, #72]	@ (800a5e0 <lwip_netconn_is_err_msg+0x5c>)
 800a596:	2285      	movs	r2, #133	@ 0x85
 800a598:	4912      	ldr	r1, [pc, #72]	@ (800a5e4 <lwip_netconn_is_err_msg+0x60>)
 800a59a:	4813      	ldr	r0, [pc, #76]	@ (800a5e8 <lwip_netconn_is_err_msg+0x64>)
 800a59c:	f00f ff20 	bl	801a3e0 <iprintf>

  if (msg == &netconn_aborted) {
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4a12      	ldr	r2, [pc, #72]	@ (800a5ec <lwip_netconn_is_err_msg+0x68>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d104      	bne.n	800a5b2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	22f3      	movs	r2, #243	@ 0xf3
 800a5ac:	701a      	strb	r2, [r3, #0]
    return 1;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e012      	b.n	800a5d8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4a0e      	ldr	r2, [pc, #56]	@ (800a5f0 <lwip_netconn_is_err_msg+0x6c>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d104      	bne.n	800a5c4 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	22f2      	movs	r2, #242	@ 0xf2
 800a5be:	701a      	strb	r2, [r3, #0]
    return 1;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e009      	b.n	800a5d8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a0b      	ldr	r2, [pc, #44]	@ (800a5f4 <lwip_netconn_is_err_msg+0x70>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d104      	bne.n	800a5d6 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	22f1      	movs	r2, #241	@ 0xf1
 800a5d0:	701a      	strb	r2, [r3, #0]
    return 1;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e000      	b.n	800a5d8 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3708      	adds	r7, #8
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	0801dfac 	.word	0x0801dfac
 800a5e4:	0801e018 	.word	0x0801e018
 800a5e8:	0801dff0 	.word	0x0801dff0
 800a5ec:	080215b8 	.word	0x080215b8
 800a5f0:	080215b9 	.word	0x080215b9
 800a5f4:	080215ba 	.word	0x080215ba

0800a5f8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b088      	sub	sp, #32
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	607a      	str	r2, [r7, #4]
 800a604:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d105      	bne.n	800a618 <recv_udp+0x20>
 800a60c:	4b34      	ldr	r3, [pc, #208]	@ (800a6e0 <recv_udp+0xe8>)
 800a60e:	22e5      	movs	r2, #229	@ 0xe5
 800a610:	4934      	ldr	r1, [pc, #208]	@ (800a6e4 <recv_udp+0xec>)
 800a612:	4835      	ldr	r0, [pc, #212]	@ (800a6e8 <recv_udp+0xf0>)
 800a614:	f00f fee4 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d105      	bne.n	800a62a <recv_udp+0x32>
 800a61e:	4b30      	ldr	r3, [pc, #192]	@ (800a6e0 <recv_udp+0xe8>)
 800a620:	22e6      	movs	r2, #230	@ 0xe6
 800a622:	4932      	ldr	r1, [pc, #200]	@ (800a6ec <recv_udp+0xf4>)
 800a624:	4830      	ldr	r0, [pc, #192]	@ (800a6e8 <recv_udp+0xf0>)
 800a626:	f00f fedb 	bl	801a3e0 <iprintf>
  conn = (struct netconn *)arg;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d103      	bne.n	800a63c <recv_udp+0x44>
    pbuf_free(p);
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f004 fe81 	bl	800f33c <pbuf_free>
    return;
 800a63a:	e04d      	b.n	800a6d8 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	429a      	cmp	r2, r3
 800a644:	d005      	beq.n	800a652 <recv_udp+0x5a>
 800a646:	4b26      	ldr	r3, [pc, #152]	@ (800a6e0 <recv_udp+0xe8>)
 800a648:	22ee      	movs	r2, #238	@ 0xee
 800a64a:	4929      	ldr	r1, [pc, #164]	@ (800a6f0 <recv_udp+0xf8>)
 800a64c:	4826      	ldr	r0, [pc, #152]	@ (800a6e8 <recv_udp+0xf0>)
 800a64e:	f00f fec7 	bl	801a3e0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	3310      	adds	r3, #16
 800a656:	4618      	mov	r0, r3
 800a658:	f00e fc18 	bl	8018e8c <sys_mbox_valid>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d103      	bne.n	800a66a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f004 fe6a 	bl	800f33c <pbuf_free>
    return;
 800a668:	e036      	b.n	800a6d8 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a66a:	2006      	movs	r0, #6
 800a66c:	f003 fee2 	bl	800e434 <memp_malloc>
 800a670:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d103      	bne.n	800a680 <recv_udp+0x88>
    pbuf_free(p);
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f004 fe5f 	bl	800f33c <pbuf_free>
    return;
 800a67e:	e02b      	b.n	800a6d8 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d002      	beq.n	800a698 <recv_udp+0xa0>
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	e000      	b.n	800a69a <recv_udp+0xa2>
 800a698:	2300      	movs	r3, #0
 800a69a:	69ba      	ldr	r2, [r7, #24]
 800a69c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a6a2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	891b      	ldrh	r3, [r3, #8]
 800a6a8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	3310      	adds	r3, #16
 800a6ae:	69b9      	ldr	r1, [r7, #24]
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f00e fb89 	bl	8018dc8 <sys_mbox_trypost>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d003      	beq.n	800a6c4 <recv_udp+0xcc>
    netbuf_delete(buf);
 800a6bc:	69b8      	ldr	r0, [r7, #24]
 800a6be:	f001 fbf1 	bl	800bea4 <netbuf_delete>
    return;
 800a6c2:	e009      	b.n	800a6d8 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d005      	beq.n	800a6d8 <recv_udp+0xe0>
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d0:	8afa      	ldrh	r2, [r7, #22]
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	69f8      	ldr	r0, [r7, #28]
 800a6d6:	4798      	blx	r3
  }
}
 800a6d8:	3720      	adds	r7, #32
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	0801dfac 	.word	0x0801dfac
 800a6e4:	0801e024 	.word	0x0801e024
 800a6e8:	0801dff0 	.word	0x0801dff0
 800a6ec:	0801e048 	.word	0x0801e048
 800a6f0:	0801e068 	.word	0x0801e068

0800a6f4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b088      	sub	sp, #32
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
 800a700:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d106      	bne.n	800a716 <recv_tcp+0x22>
 800a708:	4b36      	ldr	r3, [pc, #216]	@ (800a7e4 <recv_tcp+0xf0>)
 800a70a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a70e:	4936      	ldr	r1, [pc, #216]	@ (800a7e8 <recv_tcp+0xf4>)
 800a710:	4836      	ldr	r0, [pc, #216]	@ (800a7ec <recv_tcp+0xf8>)
 800a712:	f00f fe65 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d106      	bne.n	800a72a <recv_tcp+0x36>
 800a71c:	4b31      	ldr	r3, [pc, #196]	@ (800a7e4 <recv_tcp+0xf0>)
 800a71e:	f240 122d 	movw	r2, #301	@ 0x12d
 800a722:	4933      	ldr	r1, [pc, #204]	@ (800a7f0 <recv_tcp+0xfc>)
 800a724:	4831      	ldr	r0, [pc, #196]	@ (800a7ec <recv_tcp+0xf8>)
 800a726:	f00f fe5b 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a72a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d006      	beq.n	800a740 <recv_tcp+0x4c>
 800a732:	4b2c      	ldr	r3, [pc, #176]	@ (800a7e4 <recv_tcp+0xf0>)
 800a734:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800a738:	492e      	ldr	r1, [pc, #184]	@ (800a7f4 <recv_tcp+0x100>)
 800a73a:	482c      	ldr	r0, [pc, #176]	@ (800a7ec <recv_tcp+0xf8>)
 800a73c:	f00f fe50 	bl	801a3e0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d102      	bne.n	800a750 <recv_tcp+0x5c>
    return ERR_VAL;
 800a74a:	f06f 0305 	mvn.w	r3, #5
 800a74e:	e045      	b.n	800a7dc <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	68ba      	ldr	r2, [r7, #8]
 800a756:	429a      	cmp	r2, r3
 800a758:	d006      	beq.n	800a768 <recv_tcp+0x74>
 800a75a:	4b22      	ldr	r3, [pc, #136]	@ (800a7e4 <recv_tcp+0xf0>)
 800a75c:	f240 1235 	movw	r2, #309	@ 0x135
 800a760:	4925      	ldr	r1, [pc, #148]	@ (800a7f8 <recv_tcp+0x104>)
 800a762:	4822      	ldr	r0, [pc, #136]	@ (800a7ec <recv_tcp+0xf8>)
 800a764:	f00f fe3c 	bl	801a3e0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	3310      	adds	r3, #16
 800a76c:	4618      	mov	r0, r3
 800a76e:	f00e fb8d 	bl	8018e8c <sys_mbox_valid>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10d      	bne.n	800a794 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d008      	beq.n	800a790 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	891b      	ldrh	r3, [r3, #8]
 800a782:	4619      	mov	r1, r3
 800a784:	68b8      	ldr	r0, [r7, #8]
 800a786:	f005 fdbb 	bl	8010300 <tcp_recved>
      pbuf_free(p);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f004 fdd6 	bl	800f33c <pbuf_free>
    }
    return ERR_OK;
 800a790:	2300      	movs	r3, #0
 800a792:	e023      	b.n	800a7dc <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d005      	beq.n	800a7a6 <recv_tcp+0xb2>
    msg = p;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	891b      	ldrh	r3, [r3, #8]
 800a7a2:	83fb      	strh	r3, [r7, #30]
 800a7a4:	e003      	b.n	800a7ae <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a7a6:	4b15      	ldr	r3, [pc, #84]	@ (800a7fc <recv_tcp+0x108>)
 800a7a8:	61bb      	str	r3, [r7, #24]
    len = 0;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	3310      	adds	r3, #16
 800a7b2:	69b9      	ldr	r1, [r7, #24]
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f00e fb07 	bl	8018dc8 <sys_mbox_trypost>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d002      	beq.n	800a7c6 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a7c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c4:	e00a      	b.n	800a7dc <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d005      	beq.n	800a7da <recv_tcp+0xe6>
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7d2:	8bfa      	ldrh	r2, [r7, #30]
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	6978      	ldr	r0, [r7, #20]
 800a7d8:	4798      	blx	r3
  }

  return ERR_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3720      	adds	r7, #32
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	0801dfac 	.word	0x0801dfac
 800a7e8:	0801e088 	.word	0x0801e088
 800a7ec:	0801dff0 	.word	0x0801dff0
 800a7f0:	0801e0ac 	.word	0x0801e0ac
 800a7f4:	0801e0cc 	.word	0x0801e0cc
 800a7f8:	0801e0e4 	.word	0x0801e0e4
 800a7fc:	080215ba 	.word	0x080215ba

0800a800 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d106      	bne.n	800a822 <poll_tcp+0x22>
 800a814:	4b29      	ldr	r3, [pc, #164]	@ (800a8bc <poll_tcp+0xbc>)
 800a816:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800a81a:	4929      	ldr	r1, [pc, #164]	@ (800a8c0 <poll_tcp+0xc0>)
 800a81c:	4829      	ldr	r0, [pc, #164]	@ (800a8c4 <poll_tcp+0xc4>)
 800a81e:	f00f fddf 	bl	801a3e0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	785b      	ldrb	r3, [r3, #1]
 800a826:	2b01      	cmp	r3, #1
 800a828:	d104      	bne.n	800a834 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a82a:	2101      	movs	r1, #1
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	f000 ffb1 	bl	800b794 <lwip_netconn_do_writemore>
 800a832:	e016      	b.n	800a862 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	785b      	ldrb	r3, [r3, #1]
 800a838:	2b04      	cmp	r3, #4
 800a83a:	d112      	bne.n	800a862 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6a1b      	ldr	r3, [r3, #32]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00a      	beq.n	800a85a <poll_tcp+0x5a>
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6a1b      	ldr	r3, [r3, #32]
 800a848:	7a5b      	ldrb	r3, [r3, #9]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d005      	beq.n	800a85a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	7a5a      	ldrb	r2, [r3, #9]
 800a854:	3a01      	subs	r2, #1
 800a856:	b2d2      	uxtb	r2, r2
 800a858:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a85a:	2101      	movs	r1, #1
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f000 fbf7 	bl	800b050 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	7f1b      	ldrb	r3, [r3, #28]
 800a866:	f003 0310 	and.w	r3, r3, #16
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d021      	beq.n	800a8b2 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d01d      	beq.n	800a8b2 <poll_tcp+0xb2>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a87e:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800a882:	d316      	bcc.n	800a8b2 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a88c:	2b04      	cmp	r3, #4
 800a88e:	d810      	bhi.n	800a8b2 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	7f1b      	ldrb	r3, [r3, #28]
 800a894:	f023 0310 	bic.w	r3, r3, #16
 800a898:	b2da      	uxtb	r2, r3
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d005      	beq.n	800a8b2 <poll_tcp+0xb2>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	2102      	movs	r1, #2
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	0801dfac 	.word	0x0801dfac
 800a8c0:	0801e104 	.word	0x0801e104
 800a8c4:	0801dff0 	.word	0x0801dff0

0800a8c8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d106      	bne.n	800a8ee <sent_tcp+0x26>
 800a8e0:	4b20      	ldr	r3, [pc, #128]	@ (800a964 <sent_tcp+0x9c>)
 800a8e2:	f240 1293 	movw	r2, #403	@ 0x193
 800a8e6:	4920      	ldr	r1, [pc, #128]	@ (800a968 <sent_tcp+0xa0>)
 800a8e8:	4820      	ldr	r0, [pc, #128]	@ (800a96c <sent_tcp+0xa4>)
 800a8ea:	f00f fd79 	bl	801a3e0 <iprintf>

  if (conn) {
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d032      	beq.n	800a95a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	785b      	ldrb	r3, [r3, #1]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d104      	bne.n	800a906 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	6978      	ldr	r0, [r7, #20]
 800a900:	f000 ff48 	bl	800b794 <lwip_netconn_do_writemore>
 800a904:	e007      	b.n	800a916 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	785b      	ldrb	r3, [r3, #1]
 800a90a:	2b04      	cmp	r3, #4
 800a90c:	d103      	bne.n	800a916 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a90e:	2101      	movs	r1, #1
 800a910:	6978      	ldr	r0, [r7, #20]
 800a912:	f000 fb9d 	bl	800b050 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d01d      	beq.n	800a95a <sent_tcp+0x92>
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a926:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800a92a:	d316      	bcc.n	800a95a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a934:	2b04      	cmp	r3, #4
 800a936:	d810      	bhi.n	800a95a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	7f1b      	ldrb	r3, [r3, #28]
 800a93c:	f023 0310 	bic.w	r3, r3, #16
 800a940:	b2da      	uxtb	r2, r3
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d005      	beq.n	800a95a <sent_tcp+0x92>
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a952:	88fa      	ldrh	r2, [r7, #6]
 800a954:	2102      	movs	r1, #2
 800a956:	6978      	ldr	r0, [r7, #20]
 800a958:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3718      	adds	r7, #24
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	0801dfac 	.word	0x0801dfac
 800a968:	0801e104 	.word	0x0801e104
 800a96c:	0801dff0 	.word	0x0801dff0

0800a970 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b088      	sub	sp, #32
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	460b      	mov	r3, r1
 800a97a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d106      	bne.n	800a994 <err_tcp+0x24>
 800a986:	4b5f      	ldr	r3, [pc, #380]	@ (800ab04 <err_tcp+0x194>)
 800a988:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800a98c:	495e      	ldr	r1, [pc, #376]	@ (800ab08 <err_tcp+0x198>)
 800a98e:	485f      	ldr	r0, [pc, #380]	@ (800ab0c <err_tcp+0x19c>)
 800a990:	f00f fd26 	bl	801a3e0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a994:	f00e fb84 	bl	80190a0 <sys_arch_protect>
 800a998:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	2200      	movs	r2, #0
 800a99e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	78fa      	ldrb	r2, [r7, #3]
 800a9a4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	7f1b      	ldrb	r3, [r3, #28]
 800a9aa:	f043 0301 	orr.w	r3, r3, #1
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	785b      	ldrb	r3, [r3, #1]
 800a9b8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a9c0:	69b8      	ldr	r0, [r7, #24]
 800a9c2:	f00e fb7b 	bl	80190bc <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d005      	beq.n	800a9da <err_tcp+0x6a>
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	2104      	movs	r1, #4
 800a9d6:	69f8      	ldr	r0, [r7, #28]
 800a9d8:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d005      	beq.n	800a9ee <err_tcp+0x7e>
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	69f8      	ldr	r0, [r7, #28]
 800a9ec:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d005      	beq.n	800aa02 <err_tcp+0x92>
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	2102      	movs	r1, #2
 800a9fe:	69f8      	ldr	r0, [r7, #28]
 800aa00:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800aa02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7ff fd86 	bl	800a518 <lwip_netconn_err_to_msg>
 800aa0c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	3310      	adds	r3, #16
 800aa12:	4618      	mov	r0, r3
 800aa14:	f00e fa3a 	bl	8018e8c <sys_mbox_valid>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d005      	beq.n	800aa2a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	3310      	adds	r3, #16
 800aa22:	6939      	ldr	r1, [r7, #16]
 800aa24:	4618      	mov	r0, r3
 800aa26:	f00e f9cf 	bl	8018dc8 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	3314      	adds	r3, #20
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f00e fa2c 	bl	8018e8c <sys_mbox_valid>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d005      	beq.n	800aa46 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	3314      	adds	r3, #20
 800aa3e:	6939      	ldr	r1, [r7, #16]
 800aa40:	4618      	mov	r0, r3
 800aa42:	f00e f9c1 	bl	8018dc8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800aa46:	7dfb      	ldrb	r3, [r7, #23]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d005      	beq.n	800aa58 <err_tcp+0xe8>
 800aa4c:	7dfb      	ldrb	r3, [r7, #23]
 800aa4e:	2b04      	cmp	r3, #4
 800aa50:	d002      	beq.n	800aa58 <err_tcp+0xe8>
 800aa52:	7dfb      	ldrb	r3, [r7, #23]
 800aa54:	2b03      	cmp	r3, #3
 800aa56:	d143      	bne.n	800aae0 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800aa58:	69fb      	ldr	r3, [r7, #28]
 800aa5a:	7f1b      	ldrb	r3, [r3, #28]
 800aa5c:	f003 0304 	and.w	r3, r3, #4
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	bf14      	ite	ne
 800aa64:	2301      	movne	r3, #1
 800aa66:	2300      	moveq	r3, #0
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	7f1b      	ldrb	r3, [r3, #28]
 800aa70:	f023 0304 	bic.w	r3, r3, #4
 800aa74:	b2da      	uxtb	r2, r3
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d13b      	bne.n	800aaf8 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	6a1b      	ldr	r3, [r3, #32]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d106      	bne.n	800aa96 <err_tcp+0x126>
 800aa88:	4b1e      	ldr	r3, [pc, #120]	@ (800ab04 <err_tcp+0x194>)
 800aa8a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800aa8e:	4920      	ldr	r1, [pc, #128]	@ (800ab10 <err_tcp+0x1a0>)
 800aa90:	481e      	ldr	r0, [pc, #120]	@ (800ab0c <err_tcp+0x19c>)
 800aa92:	f00f fca5 	bl	801a3e0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800aa96:	7dfb      	ldrb	r3, [r7, #23]
 800aa98:	2b04      	cmp	r3, #4
 800aa9a:	d104      	bne.n	800aaa6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	6a1b      	ldr	r3, [r3, #32]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	711a      	strb	r2, [r3, #4]
 800aaa4:	e003      	b.n	800aaae <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	6a1b      	ldr	r3, [r3, #32]
 800aaaa:	78fa      	ldrb	r2, [r7, #3]
 800aaac:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800aaae:	69fb      	ldr	r3, [r7, #28]
 800aab0:	6a1b      	ldr	r3, [r3, #32]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	330c      	adds	r3, #12
 800aab6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800aab8:	68b8      	ldr	r0, [r7, #8]
 800aaba:	f00e fa75 	bl	8018fa8 <sys_sem_valid>
 800aabe:	4603      	mov	r3, r0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d106      	bne.n	800aad2 <err_tcp+0x162>
 800aac4:	4b0f      	ldr	r3, [pc, #60]	@ (800ab04 <err_tcp+0x194>)
 800aac6:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800aaca:	4912      	ldr	r1, [pc, #72]	@ (800ab14 <err_tcp+0x1a4>)
 800aacc:	480f      	ldr	r0, [pc, #60]	@ (800ab0c <err_tcp+0x19c>)
 800aace:	f00f fc87 	bl	801a3e0 <iprintf>
      conn->current_msg = NULL;
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	2200      	movs	r2, #0
 800aad6:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800aad8:	68b8      	ldr	r0, [r7, #8]
 800aada:	f00e fa4b 	bl	8018f74 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800aade:	e00b      	b.n	800aaf8 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	6a1b      	ldr	r3, [r3, #32]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d008      	beq.n	800aafa <err_tcp+0x18a>
 800aae8:	4b06      	ldr	r3, [pc, #24]	@ (800ab04 <err_tcp+0x194>)
 800aaea:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800aaee:	490a      	ldr	r1, [pc, #40]	@ (800ab18 <err_tcp+0x1a8>)
 800aaf0:	4806      	ldr	r0, [pc, #24]	@ (800ab0c <err_tcp+0x19c>)
 800aaf2:	f00f fc75 	bl	801a3e0 <iprintf>
  }
}
 800aaf6:	e000      	b.n	800aafa <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800aaf8:	bf00      	nop
}
 800aafa:	bf00      	nop
 800aafc:	3720      	adds	r7, #32
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	0801dfac 	.word	0x0801dfac
 800ab08:	0801e104 	.word	0x0801e104
 800ab0c:	0801dff0 	.word	0x0801dff0
 800ab10:	0801e114 	.word	0x0801e114
 800ab14:	0801e130 	.word	0x0801e130
 800ab18:	0801e14c 	.word	0x0801e14c

0800ab1c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800ab2a:	6879      	ldr	r1, [r7, #4]
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f006 faaf 	bl	8011090 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800ab32:	490a      	ldr	r1, [pc, #40]	@ (800ab5c <setup_tcp+0x40>)
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f006 fabd 	bl	80110b4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800ab3a:	4909      	ldr	r1, [pc, #36]	@ (800ab60 <setup_tcp+0x44>)
 800ab3c:	68f8      	ldr	r0, [r7, #12]
 800ab3e:	f006 fadb 	bl	80110f8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800ab42:	2202      	movs	r2, #2
 800ab44:	4907      	ldr	r1, [pc, #28]	@ (800ab64 <setup_tcp+0x48>)
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	f006 fb32 	bl	80111b0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800ab4c:	4906      	ldr	r1, [pc, #24]	@ (800ab68 <setup_tcp+0x4c>)
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f006 faf4 	bl	801113c <tcp_err>
}
 800ab54:	bf00      	nop
 800ab56:	3710      	adds	r7, #16
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	0800a6f5 	.word	0x0800a6f5
 800ab60:	0800a8c9 	.word	0x0800a8c9
 800ab64:	0800a801 	.word	0x0800a801
 800ab68:	0800a971 	.word	0x0800a971

0800ab6c <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800ab6c:	b590      	push	{r4, r7, lr}
 800ab6e:	b089      	sub	sp, #36	@ 0x24
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	4613      	mov	r3, r2
 800ab78:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d102      	bne.n	800ab8a <accept_function+0x1e>
    return ERR_VAL;
 800ab84:	f06f 0305 	mvn.w	r3, #5
 800ab88:	e0a1      	b.n	800acce <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	3314      	adds	r3, #20
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f00e f97c 	bl	8018e8c <sys_mbox_valid>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d102      	bne.n	800aba0 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800ab9a:	f06f 0305 	mvn.w	r3, #5
 800ab9e:	e096      	b.n	800acce <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d11b      	bne.n	800abde <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	f103 0414 	add.w	r4, r3, #20
 800abac:	f06f 000c 	mvn.w	r0, #12
 800abb0:	f7ff fcb2 	bl	800a518 <lwip_netconn_err_to_msg>
 800abb4:	4603      	mov	r3, r0
 800abb6:	4619      	mov	r1, r3
 800abb8:	4620      	mov	r0, r4
 800abba:	f00e f905 	bl	8018dc8 <sys_mbox_trypost>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d109      	bne.n	800abd8 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d005      	beq.n	800abd8 <accept_function+0x6c>
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abd0:	2200      	movs	r2, #0
 800abd2:	2100      	movs	r1, #0
 800abd4:	69f8      	ldr	r0, [r7, #28]
 800abd6:	4798      	blx	r3
    }
    return ERR_VAL;
 800abd8:	f06f 0305 	mvn.w	r3, #5
 800abdc:	e077      	b.n	800acce <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800abde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d006      	beq.n	800abf4 <accept_function+0x88>
 800abe6:	4b3c      	ldr	r3, [pc, #240]	@ (800acd8 <accept_function+0x16c>)
 800abe8:	f240 222a 	movw	r2, #554	@ 0x22a
 800abec:	493b      	ldr	r1, [pc, #236]	@ (800acdc <accept_function+0x170>)
 800abee:	483c      	ldr	r0, [pc, #240]	@ (800ace0 <accept_function+0x174>)
 800abf0:	f00f fbf6 	bl	801a3e0 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	781a      	ldrb	r2, [r3, #0]
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abfc:	4619      	mov	r1, r3
 800abfe:	4610      	mov	r0, r2
 800ac00:	f000 f8f0 	bl	800ade4 <netconn_alloc>
 800ac04:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d11b      	bne.n	800ac44 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	f103 0414 	add.w	r4, r3, #20
 800ac12:	f06f 000c 	mvn.w	r0, #12
 800ac16:	f7ff fc7f 	bl	800a518 <lwip_netconn_err_to_msg>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f00e f8d2 	bl	8018dc8 <sys_mbox_trypost>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d109      	bne.n	800ac3e <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d005      	beq.n	800ac3e <accept_function+0xd2>
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac36:	2200      	movs	r2, #0
 800ac38:	2100      	movs	r1, #0
 800ac3a:	69f8      	ldr	r0, [r7, #28]
 800ac3c:	4798      	blx	r3
    }
    return ERR_MEM;
 800ac3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac42:	e044      	b.n	800acce <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	68ba      	ldr	r2, [r7, #8]
 800ac48:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800ac4a:	69b8      	ldr	r0, [r7, #24]
 800ac4c:	f7ff ff66 	bl	800ab1c <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800ac50:	69fb      	ldr	r3, [r7, #28]
 800ac52:	3314      	adds	r3, #20
 800ac54:	69b9      	ldr	r1, [r7, #24]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f00e f8b6 	bl	8018dc8 <sys_mbox_trypost>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d02a      	beq.n	800acb8 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800ac68:	2100      	movs	r1, #0
 800ac6a:	6978      	ldr	r0, [r7, #20]
 800ac6c:	f006 fa10 	bl	8011090 <tcp_arg>
    tcp_recv(pcb, NULL);
 800ac70:	2100      	movs	r1, #0
 800ac72:	6978      	ldr	r0, [r7, #20]
 800ac74:	f006 fa1e 	bl	80110b4 <tcp_recv>
    tcp_sent(pcb, NULL);
 800ac78:	2100      	movs	r1, #0
 800ac7a:	6978      	ldr	r0, [r7, #20]
 800ac7c:	f006 fa3c 	bl	80110f8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800ac80:	2200      	movs	r2, #0
 800ac82:	2100      	movs	r1, #0
 800ac84:	6978      	ldr	r0, [r7, #20]
 800ac86:	f006 fa93 	bl	80111b0 <tcp_poll>
    tcp_err(pcb, NULL);
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	6978      	ldr	r0, [r7, #20]
 800ac8e:	f006 fa55 	bl	801113c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	2200      	movs	r2, #0
 800ac96:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	3310      	adds	r3, #16
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f00e f881 	bl	8018da4 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	3310      	adds	r3, #16
 800aca6:	4618      	mov	r0, r3
 800aca8:	f00e f901 	bl	8018eae <sys_mbox_set_invalid>
    netconn_free(newconn);
 800acac:	69b8      	ldr	r0, [r7, #24]
 800acae:	f000 f907 	bl	800aec0 <netconn_free>
    return ERR_MEM;
 800acb2:	f04f 33ff 	mov.w	r3, #4294967295
 800acb6:	e00a      	b.n	800acce <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d005      	beq.n	800accc <accept_function+0x160>
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acc4:	2200      	movs	r2, #0
 800acc6:	2100      	movs	r1, #0
 800acc8:	69f8      	ldr	r0, [r7, #28]
 800acca:	4798      	blx	r3
  }

  return ERR_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3724      	adds	r7, #36	@ 0x24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd90      	pop	{r4, r7, pc}
 800acd6:	bf00      	nop
 800acd8:	0801dfac 	.word	0x0801dfac
 800acdc:	0801e168 	.word	0x0801e168
 800ace0:	0801dff0 	.word	0x0801dff0

0800ace4 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800ace4:	b590      	push	{r4, r7, lr}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800acec:	2300      	movs	r3, #0
 800acee:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d006      	beq.n	800ad08 <pcb_new+0x24>
 800acfa:	4b2b      	ldr	r3, [pc, #172]	@ (800ada8 <pcb_new+0xc4>)
 800acfc:	f240 2265 	movw	r2, #613	@ 0x265
 800ad00:	492a      	ldr	r1, [pc, #168]	@ (800adac <pcb_new+0xc8>)
 800ad02:	482b      	ldr	r0, [pc, #172]	@ (800adb0 <pcb_new+0xcc>)
 800ad04:	f00f fb6c 	bl	801a3e0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ad12:	2b10      	cmp	r3, #16
 800ad14:	d022      	beq.n	800ad5c <pcb_new+0x78>
 800ad16:	2b20      	cmp	r3, #32
 800ad18:	d133      	bne.n	800ad82 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681c      	ldr	r4, [r3, #0]
 800ad1e:	7bfb      	ldrb	r3, [r7, #15]
 800ad20:	4618      	mov	r0, r3
 800ad22:	f00b fc92 	bl	801664a <udp_new_ip_type>
 800ad26:	4603      	mov	r3, r0
 800ad28:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d02a      	beq.n	800ad8a <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	2b22      	cmp	r3, #34	@ 0x22
 800ad3c:	d104      	bne.n	800ad48 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	6858      	ldr	r0, [r3, #4]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	461a      	mov	r2, r3
 800ad54:	4917      	ldr	r1, [pc, #92]	@ (800adb4 <pcb_new+0xd0>)
 800ad56:	f00b fbff 	bl	8016558 <udp_recv>
      }
      break;
 800ad5a:	e016      	b.n	800ad8a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681c      	ldr	r4, [r3, #0]
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f006 f986 	bl	8011074 <tcp_new_ip_type>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00b      	beq.n	800ad8e <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7ff fece 	bl	800ab1c <setup_tcp>
      }
      break;
 800ad80:	e005      	b.n	800ad8e <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	22fa      	movs	r2, #250	@ 0xfa
 800ad86:	711a      	strb	r2, [r3, #4]
      return;
 800ad88:	e00a      	b.n	800ada0 <pcb_new+0xbc>
      break;
 800ad8a:	bf00      	nop
 800ad8c:	e000      	b.n	800ad90 <pcb_new+0xac>
      break;
 800ad8e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d102      	bne.n	800ada0 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	22ff      	movs	r2, #255	@ 0xff
 800ad9e:	711a      	strb	r2, [r3, #4]
  }
}
 800ada0:	3714      	adds	r7, #20
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd90      	pop	{r4, r7, pc}
 800ada6:	bf00      	nop
 800ada8:	0801dfac 	.word	0x0801dfac
 800adac:	0801e190 	.word	0x0801e190
 800adb0:	0801dff0 	.word	0x0801dff0
 800adb4:	0800a5f9 	.word	0x0800a5f9

0800adb8 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2200      	movs	r2, #0
 800adc8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d102      	bne.n	800adda <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f7ff ff85 	bl	800ace4 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800adda:	bf00      	nop
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
	...

0800ade4 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	4603      	mov	r3, r0
 800adec:	6039      	str	r1, [r7, #0]
 800adee:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800adf0:	2300      	movs	r3, #0
 800adf2:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800adf4:	2007      	movs	r0, #7
 800adf6:	f003 fb1d 	bl	800e434 <memp_malloc>
 800adfa:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d101      	bne.n	800ae06 <netconn_alloc+0x22>
    return NULL;
 800ae02:	2300      	movs	r3, #0
 800ae04:	e052      	b.n	800aeac <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	79fa      	ldrb	r2, [r7, #7]
 800ae10:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2200      	movs	r2, #0
 800ae16:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800ae18:	79fb      	ldrb	r3, [r7, #7]
 800ae1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ae1e:	2b10      	cmp	r3, #16
 800ae20:	d004      	beq.n	800ae2c <netconn_alloc+0x48>
 800ae22:	2b20      	cmp	r3, #32
 800ae24:	d105      	bne.n	800ae32 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800ae26:	2306      	movs	r3, #6
 800ae28:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800ae2a:	e00a      	b.n	800ae42 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800ae2c:	2306      	movs	r3, #6
 800ae2e:	617b      	str	r3, [r7, #20]
      break;
 800ae30:	e007      	b.n	800ae42 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ae32:	4b20      	ldr	r3, [pc, #128]	@ (800aeb4 <netconn_alloc+0xd0>)
 800ae34:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800ae38:	491f      	ldr	r1, [pc, #124]	@ (800aeb8 <netconn_alloc+0xd4>)
 800ae3a:	4820      	ldr	r0, [pc, #128]	@ (800aebc <netconn_alloc+0xd8>)
 800ae3c:	f00f fad0 	bl	801a3e0 <iprintf>
      goto free_and_return;
 800ae40:	e02f      	b.n	800aea2 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	3310      	adds	r3, #16
 800ae46:	6979      	ldr	r1, [r7, #20]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f00d ff91 	bl	8018d70 <sys_mbox_new>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d125      	bne.n	800aea0 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	330c      	adds	r3, #12
 800ae58:	2100      	movs	r1, #0
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f00e f834 	bl	8018ec8 <sys_sem_new>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d005      	beq.n	800ae72 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	3310      	adds	r3, #16
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f00d ff9a 	bl	8018da4 <sys_mbox_free>
    goto free_and_return;
 800ae70:	e017      	b.n	800aea2 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	3314      	adds	r3, #20
 800ae76:	4618      	mov	r0, r3
 800ae78:	f00e f819 	bl	8018eae <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f04f 32ff 	mov.w	r2, #4294967295
 800ae88:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	683a      	ldr	r2, [r7, #0]
 800ae8e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2200      	movs	r2, #0
 800ae94:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	7cfa      	ldrb	r2, [r7, #19]
 800ae9a:	771a      	strb	r2, [r3, #28]
  return conn;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	e005      	b.n	800aeac <netconn_alloc+0xc8>
    goto free_and_return;
 800aea0:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800aea2:	68f9      	ldr	r1, [r7, #12]
 800aea4:	2007      	movs	r0, #7
 800aea6:	f003 fb3b 	bl	800e520 <memp_free>
  return NULL;
 800aeaa:	2300      	movs	r3, #0
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3718      	adds	r7, #24
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	0801dfac 	.word	0x0801dfac
 800aeb8:	0801e1b0 	.word	0x0801e1b0
 800aebc:	0801dff0 	.word	0x0801dff0

0800aec0 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d006      	beq.n	800aede <netconn_free+0x1e>
 800aed0:	4b1b      	ldr	r3, [pc, #108]	@ (800af40 <netconn_free+0x80>)
 800aed2:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800aed6:	491b      	ldr	r1, [pc, #108]	@ (800af44 <netconn_free+0x84>)
 800aed8:	481b      	ldr	r0, [pc, #108]	@ (800af48 <netconn_free+0x88>)
 800aeda:	f00f fa81 	bl	801a3e0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	3310      	adds	r3, #16
 800aee2:	4618      	mov	r0, r3
 800aee4:	f00d ffd2 	bl	8018e8c <sys_mbox_valid>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d006      	beq.n	800aefc <netconn_free+0x3c>
 800aeee:	4b14      	ldr	r3, [pc, #80]	@ (800af40 <netconn_free+0x80>)
 800aef0:	f240 3223 	movw	r2, #803	@ 0x323
 800aef4:	4915      	ldr	r1, [pc, #84]	@ (800af4c <netconn_free+0x8c>)
 800aef6:	4814      	ldr	r0, [pc, #80]	@ (800af48 <netconn_free+0x88>)
 800aef8:	f00f fa72 	bl	801a3e0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	3314      	adds	r3, #20
 800af00:	4618      	mov	r0, r3
 800af02:	f00d ffc3 	bl	8018e8c <sys_mbox_valid>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d006      	beq.n	800af1a <netconn_free+0x5a>
 800af0c:	4b0c      	ldr	r3, [pc, #48]	@ (800af40 <netconn_free+0x80>)
 800af0e:	f240 3226 	movw	r2, #806	@ 0x326
 800af12:	490f      	ldr	r1, [pc, #60]	@ (800af50 <netconn_free+0x90>)
 800af14:	480c      	ldr	r0, [pc, #48]	@ (800af48 <netconn_free+0x88>)
 800af16:	f00f fa63 	bl	801a3e0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	330c      	adds	r3, #12
 800af1e:	4618      	mov	r0, r3
 800af20:	f00e f835 	bl	8018f8e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	330c      	adds	r3, #12
 800af28:	4618      	mov	r0, r3
 800af2a:	f00e f84e 	bl	8018fca <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800af2e:	6879      	ldr	r1, [r7, #4]
 800af30:	2007      	movs	r0, #7
 800af32:	f003 faf5 	bl	800e520 <memp_free>
}
 800af36:	bf00      	nop
 800af38:	3708      	adds	r7, #8
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	0801dfac 	.word	0x0801dfac
 800af44:	0801e1d8 	.word	0x0801e1d8
 800af48:	0801dff0 	.word	0x0801dff0
 800af4c:	0801e208 	.word	0x0801e208
 800af50:	0801e244 	.word	0x0801e244

0800af54 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	3310      	adds	r3, #16
 800af60:	4618      	mov	r0, r3
 800af62:	f00d ff93 	bl	8018e8c <sys_mbox_valid>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d02f      	beq.n	800afcc <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800af6c:	e018      	b.n	800afa0 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800af76:	2b10      	cmp	r3, #16
 800af78:	d10e      	bne.n	800af98 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	f107 020f 	add.w	r2, r7, #15
 800af80:	4611      	mov	r1, r2
 800af82:	4618      	mov	r0, r3
 800af84:	f7ff fafe 	bl	800a584 <lwip_netconn_is_err_msg>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d108      	bne.n	800afa0 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	4618      	mov	r0, r3
 800af92:	f004 f9d3 	bl	800f33c <pbuf_free>
 800af96:	e003      	b.n	800afa0 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f000 ff82 	bl	800bea4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	3310      	adds	r3, #16
 800afa4:	f107 0210 	add.w	r2, r7, #16
 800afa8:	4611      	mov	r1, r2
 800afaa:	4618      	mov	r0, r3
 800afac:	f00d ff57 	bl	8018e5e <sys_arch_mbox_tryfetch>
 800afb0:	4603      	mov	r3, r0
 800afb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb6:	d1da      	bne.n	800af6e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	3310      	adds	r3, #16
 800afbc:	4618      	mov	r0, r3
 800afbe:	f00d fef1 	bl	8018da4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	3310      	adds	r3, #16
 800afc6:	4618      	mov	r0, r3
 800afc8:	f00d ff71 	bl	8018eae <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	3314      	adds	r3, #20
 800afd0:	4618      	mov	r0, r3
 800afd2:	f00d ff5b 	bl	8018e8c <sys_mbox_valid>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d034      	beq.n	800b046 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800afdc:	e01d      	b.n	800b01a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	f107 020e 	add.w	r2, r7, #14
 800afe4:	4611      	mov	r1, r2
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7ff facc 	bl	800a584 <lwip_netconn_is_err_msg>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d113      	bne.n	800b01a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800aff6:	6978      	ldr	r0, [r7, #20]
 800aff8:	f7ff ffac 	bl	800af54 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d007      	beq.n	800b014 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	4618      	mov	r0, r3
 800b00a:	f004 ff97 	bl	800ff3c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	2200      	movs	r2, #0
 800b012:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800b014:	6978      	ldr	r0, [r7, #20]
 800b016:	f7ff ff53 	bl	800aec0 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	3314      	adds	r3, #20
 800b01e:	f107 0210 	add.w	r2, r7, #16
 800b022:	4611      	mov	r1, r2
 800b024:	4618      	mov	r0, r3
 800b026:	f00d ff1a 	bl	8018e5e <sys_arch_mbox_tryfetch>
 800b02a:	4603      	mov	r3, r0
 800b02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b030:	d1d5      	bne.n	800afde <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	3314      	adds	r3, #20
 800b036:	4618      	mov	r0, r3
 800b038:	f00d feb4 	bl	8018da4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	3314      	adds	r3, #20
 800b040:	4618      	mov	r0, r3
 800b042:	f00d ff34 	bl	8018eae <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800b046:	bf00      	nop
 800b048:	3718      	adds	r7, #24
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
	...

0800b050 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b086      	sub	sp, #24
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	460b      	mov	r3, r1
 800b05a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800b05c:	2300      	movs	r3, #0
 800b05e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d106      	bne.n	800b074 <lwip_netconn_do_close_internal+0x24>
 800b066:	4b87      	ldr	r3, [pc, #540]	@ (800b284 <lwip_netconn_do_close_internal+0x234>)
 800b068:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800b06c:	4986      	ldr	r1, [pc, #536]	@ (800b288 <lwip_netconn_do_close_internal+0x238>)
 800b06e:	4887      	ldr	r0, [pc, #540]	@ (800b28c <lwip_netconn_do_close_internal+0x23c>)
 800b070:	f00f f9b6 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b07c:	2b10      	cmp	r3, #16
 800b07e:	d006      	beq.n	800b08e <lwip_netconn_do_close_internal+0x3e>
 800b080:	4b80      	ldr	r3, [pc, #512]	@ (800b284 <lwip_netconn_do_close_internal+0x234>)
 800b082:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800b086:	4982      	ldr	r1, [pc, #520]	@ (800b290 <lwip_netconn_do_close_internal+0x240>)
 800b088:	4880      	ldr	r0, [pc, #512]	@ (800b28c <lwip_netconn_do_close_internal+0x23c>)
 800b08a:	f00f f9a9 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	785b      	ldrb	r3, [r3, #1]
 800b092:	2b04      	cmp	r3, #4
 800b094:	d006      	beq.n	800b0a4 <lwip_netconn_do_close_internal+0x54>
 800b096:	4b7b      	ldr	r3, [pc, #492]	@ (800b284 <lwip_netconn_do_close_internal+0x234>)
 800b098:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800b09c:	497d      	ldr	r1, [pc, #500]	@ (800b294 <lwip_netconn_do_close_internal+0x244>)
 800b09e:	487b      	ldr	r0, [pc, #492]	@ (800b28c <lwip_netconn_do_close_internal+0x23c>)
 800b0a0:	f00f f99e 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d106      	bne.n	800b0ba <lwip_netconn_do_close_internal+0x6a>
 800b0ac:	4b75      	ldr	r3, [pc, #468]	@ (800b284 <lwip_netconn_do_close_internal+0x234>)
 800b0ae:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800b0b2:	4979      	ldr	r1, [pc, #484]	@ (800b298 <lwip_netconn_do_close_internal+0x248>)
 800b0b4:	4875      	ldr	r0, [pc, #468]	@ (800b28c <lwip_netconn_do_close_internal+0x23c>)
 800b0b6:	f00f f993 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a1b      	ldr	r3, [r3, #32]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d106      	bne.n	800b0d0 <lwip_netconn_do_close_internal+0x80>
 800b0c2:	4b70      	ldr	r3, [pc, #448]	@ (800b284 <lwip_netconn_do_close_internal+0x234>)
 800b0c4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800b0c8:	4974      	ldr	r1, [pc, #464]	@ (800b29c <lwip_netconn_do_close_internal+0x24c>)
 800b0ca:	4870      	ldr	r0, [pc, #448]	@ (800b28c <lwip_netconn_do_close_internal+0x23c>)
 800b0cc:	f00f f988 	bl	801a3e0 <iprintf>

  tpcb = conn->pcb.tcp;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a1b      	ldr	r3, [r3, #32]
 800b0da:	7a1b      	ldrb	r3, [r3, #8]
 800b0dc:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800b0de:	7bfb      	ldrb	r3, [r7, #15]
 800b0e0:	f003 0301 	and.w	r3, r3, #1
 800b0e4:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800b0e6:	7bfb      	ldrb	r3, [r7, #15]
 800b0e8:	f003 0302 	and.w	r3, r3, #2
 800b0ec:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800b0ee:	7bfb      	ldrb	r3, [r7, #15]
 800b0f0:	2b03      	cmp	r3, #3
 800b0f2:	d102      	bne.n	800b0fa <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	75bb      	strb	r3, [r7, #22]
 800b0f8:	e01f      	b.n	800b13a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800b0fa:	7bbb      	ldrb	r3, [r7, #14]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00e      	beq.n	800b11e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800b104:	2b05      	cmp	r3, #5
 800b106:	d007      	beq.n	800b118 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800b10c:	2b06      	cmp	r3, #6
 800b10e:	d003      	beq.n	800b118 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800b114:	2b08      	cmp	r3, #8
 800b116:	d102      	bne.n	800b11e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800b118:	2301      	movs	r3, #1
 800b11a:	75bb      	strb	r3, [r7, #22]
 800b11c:	e00d      	b.n	800b13a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b11e:	7b7b      	ldrb	r3, [r7, #13]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d008      	beq.n	800b136 <lwip_netconn_do_close_internal+0xe6>
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	8b5b      	ldrh	r3, [r3, #26]
 800b128:	f003 0310 	and.w	r3, r3, #16
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d002      	beq.n	800b136 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800b130:	2301      	movs	r3, #1
 800b132:	75bb      	strb	r3, [r7, #22]
 800b134:	e001      	b.n	800b13a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800b136:	2300      	movs	r3, #0
 800b138:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800b13a:	7dbb      	ldrb	r3, [r7, #22]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d003      	beq.n	800b148 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800b140:	2100      	movs	r1, #0
 800b142:	6938      	ldr	r0, [r7, #16]
 800b144:	f005 ffa4 	bl	8011090 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	7d1b      	ldrb	r3, [r3, #20]
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d104      	bne.n	800b15a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800b150:	2100      	movs	r1, #0
 800b152:	6938      	ldr	r0, [r7, #16]
 800b154:	f006 f814 	bl	8011180 <tcp_accept>
 800b158:	e01d      	b.n	800b196 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800b15a:	7bbb      	ldrb	r3, [r7, #14]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d007      	beq.n	800b170 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800b160:	2100      	movs	r1, #0
 800b162:	6938      	ldr	r0, [r7, #16]
 800b164:	f005 ffa6 	bl	80110b4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800b168:	2100      	movs	r1, #0
 800b16a:	6938      	ldr	r0, [r7, #16]
 800b16c:	f006 f808 	bl	8011180 <tcp_accept>
    }
    if (shut_tx) {
 800b170:	7b7b      	ldrb	r3, [r7, #13]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d003      	beq.n	800b17e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800b176:	2100      	movs	r1, #0
 800b178:	6938      	ldr	r0, [r7, #16]
 800b17a:	f005 ffbd 	bl	80110f8 <tcp_sent>
    }
    if (shut_close) {
 800b17e:	7dbb      	ldrb	r3, [r7, #22]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d008      	beq.n	800b196 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800b184:	2200      	movs	r2, #0
 800b186:	2100      	movs	r1, #0
 800b188:	6938      	ldr	r0, [r7, #16]
 800b18a:	f006 f811 	bl	80111b0 <tcp_poll>
      tcp_err(tpcb, NULL);
 800b18e:	2100      	movs	r1, #0
 800b190:	6938      	ldr	r0, [r7, #16]
 800b192:	f005 ffd3 	bl	801113c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800b196:	7dbb      	ldrb	r3, [r7, #22]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d005      	beq.n	800b1a8 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800b19c:	6938      	ldr	r0, [r7, #16]
 800b19e:	f004 fd87 	bl	800fcb0 <tcp_close>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	75fb      	strb	r3, [r7, #23]
 800b1a6:	e007      	b.n	800b1b8 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800b1a8:	7bbb      	ldrb	r3, [r7, #14]
 800b1aa:	7b7a      	ldrb	r2, [r7, #13]
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	6938      	ldr	r0, [r7, #16]
 800b1b0:	f004 fdaa 	bl	800fd08 <tcp_shutdown>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800b1b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d102      	bne.n	800b1c6 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	757b      	strb	r3, [r7, #21]
 800b1c4:	e016      	b.n	800b1f4 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800b1c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ce:	d10f      	bne.n	800b1f0 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6a1b      	ldr	r3, [r3, #32]
 800b1d4:	7a5b      	ldrb	r3, [r3, #9]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d10c      	bne.n	800b1f4 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800b1de:	7dbb      	ldrb	r3, [r7, #22]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d007      	beq.n	800b1f4 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800b1e4:	6938      	ldr	r0, [r7, #16]
 800b1e6:	f004 fea9 	bl	800ff3c <tcp_abort>
          err = ERR_OK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	75fb      	strb	r3, [r7, #23]
 800b1ee:	e001      	b.n	800b1f4 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800b1f4:	7d7b      	ldrb	r3, [r7, #21]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d052      	beq.n	800b2a0 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a1b      	ldr	r3, [r3, #32]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	330c      	adds	r3, #12
 800b202:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6a1b      	ldr	r3, [r3, #32]
 800b208:	7dfa      	ldrb	r2, [r7, #23]
 800b20a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800b218:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d129      	bne.n	800b274 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800b220:	7dbb      	ldrb	r3, [r7, #22]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d00c      	beq.n	800b240 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b230:	2b00      	cmp	r3, #0
 800b232:	d005      	beq.n	800b240 <lwip_netconn_do_close_internal+0x1f0>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b238:	2200      	movs	r2, #0
 800b23a:	2104      	movs	r1, #4
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	4798      	blx	r3
      }
      if (shut_rx) {
 800b240:	7bbb      	ldrb	r3, [r7, #14]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d009      	beq.n	800b25a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d005      	beq.n	800b25a <lwip_netconn_do_close_internal+0x20a>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b252:	2200      	movs	r2, #0
 800b254:	2100      	movs	r1, #0
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	4798      	blx	r3
      }
      if (shut_tx) {
 800b25a:	7b7b      	ldrb	r3, [r7, #13]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d009      	beq.n	800b274 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b264:	2b00      	cmp	r3, #0
 800b266:	d005      	beq.n	800b274 <lwip_netconn_do_close_internal+0x224>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b26c:	2200      	movs	r2, #0
 800b26e:	2102      	movs	r1, #2
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b274:	78fb      	ldrb	r3, [r7, #3]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d002      	beq.n	800b280 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800b27a:	68b8      	ldr	r0, [r7, #8]
 800b27c:	f00d fe7a 	bl	8018f74 <sys_sem_signal>
    }
    return ERR_OK;
 800b280:	2300      	movs	r3, #0
 800b282:	e03c      	b.n	800b2fe <lwip_netconn_do_close_internal+0x2ae>
 800b284:	0801dfac 	.word	0x0801dfac
 800b288:	0801e280 	.word	0x0801e280
 800b28c:	0801dff0 	.word	0x0801dff0
 800b290:	0801e290 	.word	0x0801e290
 800b294:	0801e2b0 	.word	0x0801e2b0
 800b298:	0801e2d4 	.word	0x0801e2d4
 800b29c:	0801e114 	.word	0x0801e114
  }
  if (!close_finished) {
 800b2a0:	7d7b      	ldrb	r3, [r7, #21]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d11e      	bne.n	800b2e4 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	7d1b      	ldrb	r3, [r3, #20]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d106      	bne.n	800b2bc <lwip_netconn_do_close_internal+0x26c>
 800b2ae:	4b16      	ldr	r3, [pc, #88]	@ (800b308 <lwip_netconn_do_close_internal+0x2b8>)
 800b2b0:	f240 4241 	movw	r2, #1089	@ 0x441
 800b2b4:	4915      	ldr	r1, [pc, #84]	@ (800b30c <lwip_netconn_do_close_internal+0x2bc>)
 800b2b6:	4816      	ldr	r0, [pc, #88]	@ (800b310 <lwip_netconn_do_close_internal+0x2c0>)
 800b2b8:	f00f f892 	bl	801a3e0 <iprintf>
    if (shut_tx) {
 800b2bc:	7b7b      	ldrb	r3, [r7, #13]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d003      	beq.n	800b2ca <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800b2c2:	4914      	ldr	r1, [pc, #80]	@ (800b314 <lwip_netconn_do_close_internal+0x2c4>)
 800b2c4:	6938      	ldr	r0, [r7, #16]
 800b2c6:	f005 ff17 	bl	80110f8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	4912      	ldr	r1, [pc, #72]	@ (800b318 <lwip_netconn_do_close_internal+0x2c8>)
 800b2ce:	6938      	ldr	r0, [r7, #16]
 800b2d0:	f005 ff6e 	bl	80111b0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800b2d4:	4911      	ldr	r1, [pc, #68]	@ (800b31c <lwip_netconn_do_close_internal+0x2cc>)
 800b2d6:	6938      	ldr	r0, [r7, #16]
 800b2d8:	f005 ff30 	bl	801113c <tcp_err>
    tcp_arg(tpcb, conn);
 800b2dc:	6879      	ldr	r1, [r7, #4]
 800b2de:	6938      	ldr	r0, [r7, #16]
 800b2e0:	f005 fed6 	bl	8011090 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800b2e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d106      	bne.n	800b2fa <lwip_netconn_do_close_internal+0x2aa>
 800b2ec:	4b06      	ldr	r3, [pc, #24]	@ (800b308 <lwip_netconn_do_close_internal+0x2b8>)
 800b2ee:	f240 424d 	movw	r2, #1101	@ 0x44d
 800b2f2:	490b      	ldr	r1, [pc, #44]	@ (800b320 <lwip_netconn_do_close_internal+0x2d0>)
 800b2f4:	4806      	ldr	r0, [pc, #24]	@ (800b310 <lwip_netconn_do_close_internal+0x2c0>)
 800b2f6:	f00f f873 	bl	801a3e0 <iprintf>
  return err;
 800b2fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3718      	adds	r7, #24
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	0801dfac 	.word	0x0801dfac
 800b30c:	0801e2e8 	.word	0x0801e2e8
 800b310:	0801dff0 	.word	0x0801dff0
 800b314:	0800a8c9 	.word	0x0800a8c9
 800b318:	0800a801 	.word	0x0800a801
 800b31c:	0800a971 	.word	0x0800a971
 800b320:	0801e30c 	.word	0x0801e30c

0800b324 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	785b      	ldrb	r3, [r3, #1]
 800b336:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b338:	7afb      	ldrb	r3, [r7, #11]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d00d      	beq.n	800b35a <lwip_netconn_do_delconn+0x36>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b348:	2b10      	cmp	r3, #16
 800b34a:	d006      	beq.n	800b35a <lwip_netconn_do_delconn+0x36>
 800b34c:	4b60      	ldr	r3, [pc, #384]	@ (800b4d0 <lwip_netconn_do_delconn+0x1ac>)
 800b34e:	f240 425e 	movw	r2, #1118	@ 0x45e
 800b352:	4960      	ldr	r1, [pc, #384]	@ (800b4d4 <lwip_netconn_do_delconn+0x1b0>)
 800b354:	4860      	ldr	r0, [pc, #384]	@ (800b4d8 <lwip_netconn_do_delconn+0x1b4>)
 800b356:	f00f f843 	bl	801a3e0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800b35a:	7afb      	ldrb	r3, [r7, #11]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d005      	beq.n	800b36c <lwip_netconn_do_delconn+0x48>
 800b360:	7afb      	ldrb	r3, [r7, #11]
 800b362:	2b02      	cmp	r3, #2
 800b364:	d002      	beq.n	800b36c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800b366:	7afb      	ldrb	r3, [r7, #11]
 800b368:	2b03      	cmp	r3, #3
 800b36a:	d109      	bne.n	800b380 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800b36c:	7afb      	ldrb	r3, [r7, #11]
 800b36e:	2b03      	cmp	r3, #3
 800b370:	d10a      	bne.n	800b388 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	7f1b      	ldrb	r3, [r3, #28]
 800b378:	f003 0304 	and.w	r3, r3, #4
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d103      	bne.n	800b388 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	22fb      	movs	r2, #251	@ 0xfb
 800b384:	711a      	strb	r2, [r3, #4]
 800b386:	e097      	b.n	800b4b8 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800b388:	7afb      	ldrb	r3, [r7, #11]
 800b38a:	2b03      	cmp	r3, #3
 800b38c:	d10d      	bne.n	800b3aa <lwip_netconn_do_delconn+0x86>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	7f1b      	ldrb	r3, [r3, #28]
 800b394:	f003 0304 	and.w	r3, r3, #4
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d106      	bne.n	800b3aa <lwip_netconn_do_delconn+0x86>
 800b39c:	4b4c      	ldr	r3, [pc, #304]	@ (800b4d0 <lwip_netconn_do_delconn+0x1ac>)
 800b39e:	f240 427a 	movw	r2, #1146	@ 0x47a
 800b3a2:	494e      	ldr	r1, [pc, #312]	@ (800b4dc <lwip_netconn_do_delconn+0x1b8>)
 800b3a4:	484c      	ldr	r0, [pc, #304]	@ (800b4d8 <lwip_netconn_do_delconn+0x1b4>)
 800b3a6:	f00f f81b 	bl	801a3e0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7ff fdcd 	bl	800af54 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d05f      	beq.n	800b484 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b3ce:	2b10      	cmp	r3, #16
 800b3d0:	d00d      	beq.n	800b3ee <lwip_netconn_do_delconn+0xca>
 800b3d2:	2b20      	cmp	r3, #32
 800b3d4:	d151      	bne.n	800b47a <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f00b f8d6 	bl	8016598 <udp_remove>
          break;
 800b3ec:	e046      	b.n	800b47c <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	6a1b      	ldr	r3, [r3, #32]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d006      	beq.n	800b406 <lwip_netconn_do_delconn+0xe2>
 800b3f8:	4b35      	ldr	r3, [pc, #212]	@ (800b4d0 <lwip_netconn_do_delconn+0x1ac>)
 800b3fa:	f240 4294 	movw	r2, #1172	@ 0x494
 800b3fe:	4938      	ldr	r1, [pc, #224]	@ (800b4e0 <lwip_netconn_do_delconn+0x1bc>)
 800b400:	4835      	ldr	r0, [pc, #212]	@ (800b4d8 <lwip_netconn_do_delconn+0x1b4>)
 800b402:	f00e ffed 	bl	801a3e0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2204      	movs	r2, #4
 800b40c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2203      	movs	r2, #3
 800b412:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2100      	movs	r1, #0
 800b422:	4618      	mov	r0, r3
 800b424:	f7ff fe14 	bl	800b050 <lwip_netconn_do_close_internal>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d04b      	beq.n	800b4c6 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	785b      	ldrb	r3, [r3, #1]
 800b434:	2b04      	cmp	r3, #4
 800b436:	d006      	beq.n	800b446 <lwip_netconn_do_delconn+0x122>
 800b438:	4b25      	ldr	r3, [pc, #148]	@ (800b4d0 <lwip_netconn_do_delconn+0x1ac>)
 800b43a:	f240 429a 	movw	r2, #1178	@ 0x49a
 800b43e:	4929      	ldr	r1, [pc, #164]	@ (800b4e4 <lwip_netconn_do_delconn+0x1c0>)
 800b440:	4825      	ldr	r0, [pc, #148]	@ (800b4d8 <lwip_netconn_do_delconn+0x1b4>)
 800b442:	f00e ffcd 	bl	801a3e0 <iprintf>
            UNLOCK_TCPIP_CORE();
 800b446:	4828      	ldr	r0, [pc, #160]	@ (800b4e8 <lwip_netconn_do_delconn+0x1c4>)
 800b448:	f00d fdfd 	bl	8019046 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	330c      	adds	r3, #12
 800b452:	2100      	movs	r1, #0
 800b454:	4618      	mov	r0, r3
 800b456:	f00d fd5c 	bl	8018f12 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800b45a:	4823      	ldr	r0, [pc, #140]	@ (800b4e8 <lwip_netconn_do_delconn+0x1c4>)
 800b45c:	f00d fde4 	bl	8019028 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	785b      	ldrb	r3, [r3, #1]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d02d      	beq.n	800b4c6 <lwip_netconn_do_delconn+0x1a2>
 800b46a:	4b19      	ldr	r3, [pc, #100]	@ (800b4d0 <lwip_netconn_do_delconn+0x1ac>)
 800b46c:	f240 429e 	movw	r2, #1182	@ 0x49e
 800b470:	491c      	ldr	r1, [pc, #112]	@ (800b4e4 <lwip_netconn_do_delconn+0x1c0>)
 800b472:	4819      	ldr	r0, [pc, #100]	@ (800b4d8 <lwip_netconn_do_delconn+0x1b4>)
 800b474:	f00e ffb4 	bl	801a3e0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800b478:	e025      	b.n	800b4c6 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800b47a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2200      	movs	r2, #0
 800b482:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d007      	beq.n	800b49e <lwip_netconn_do_delconn+0x17a>
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	6810      	ldr	r0, [r2, #0]
 800b498:	2200      	movs	r2, #0
 800b49a:	2100      	movs	r1, #0
 800b49c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d007      	beq.n	800b4b8 <lwip_netconn_do_delconn+0x194>
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	6810      	ldr	r0, [r2, #0]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	2102      	movs	r1, #2
 800b4b6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	330c      	adds	r3, #12
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f00d fd72 	bl	8018fa8 <sys_sem_valid>
 800b4c4:	e000      	b.n	800b4c8 <lwip_netconn_do_delconn+0x1a4>
          return;
 800b4c6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	0801dfac 	.word	0x0801dfac
 800b4d4:	0801e31c 	.word	0x0801e31c
 800b4d8:	0801dff0 	.word	0x0801dff0
 800b4dc:	0801e330 	.word	0x0801e330
 800b4e0:	0801e350 	.word	0x0801e350
 800b4e4:	0801e36c 	.word	0x0801e36c
 800b4e8:	20009988 	.word	0x20009988

0800b4ec <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d025      	beq.n	800b54e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b50c:	2b10      	cmp	r3, #16
 800b50e:	d00e      	beq.n	800b52e <lwip_netconn_do_bind+0x42>
 800b510:	2b20      	cmp	r3, #32
 800b512:	d119      	bne.n	800b548 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	6858      	ldr	r0, [r3, #4]
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	6899      	ldr	r1, [r3, #8]
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	899b      	ldrh	r3, [r3, #12]
 800b522:	461a      	mov	r2, r3
 800b524:	f00a ff76 	bl	8016414 <udp_bind>
 800b528:	4603      	mov	r3, r0
 800b52a:	73fb      	strb	r3, [r7, #15]
        break;
 800b52c:	e011      	b.n	800b552 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	6858      	ldr	r0, [r3, #4]
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	6899      	ldr	r1, [r3, #8]
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	899b      	ldrh	r3, [r3, #12]
 800b53c:	461a      	mov	r2, r3
 800b53e:	f004 fd09 	bl	800ff54 <tcp_bind>
 800b542:	4603      	mov	r3, r0
 800b544:	73fb      	strb	r3, [r7, #15]
        break;
 800b546:	e004      	b.n	800b552 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800b548:	23fa      	movs	r3, #250	@ 0xfa
 800b54a:	73fb      	strb	r3, [r7, #15]
        break;
 800b54c:	e001      	b.n	800b552 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800b54e:	23fa      	movs	r3, #250	@ 0xfa
 800b550:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	7bfa      	ldrb	r2, [r7, #15]
 800b556:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b558:	bf00      	nop
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b086      	sub	sp, #24
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d07f      	beq.n	800b676 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b580:	2b10      	cmp	r3, #16
 800b582:	d175      	bne.n	800b670 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	785b      	ldrb	r3, [r3, #1]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d165      	bne.n	800b65a <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	7d1b      	ldrb	r3, [r3, #20]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d002      	beq.n	800b5a0 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800b59a:	23fa      	movs	r3, #250	@ 0xfa
 800b59c:	72fb      	strb	r3, [r7, #11]
 800b59e:	e06c      	b.n	800b67a <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800b5a0:	23ff      	movs	r3, #255	@ 0xff
 800b5a2:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	f107 020b 	add.w	r2, r7, #11
 800b5ae:	7cf9      	ldrb	r1, [r7, #19]
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f004 fda1 	bl	80100f8 <tcp_listen_with_backlog_and_err>
 800b5b6:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d05d      	beq.n	800b67a <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	3310      	adds	r3, #16
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f00d fc61 	bl	8018e8c <sys_mbox_valid>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d00b      	beq.n	800b5e8 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	3310      	adds	r3, #16
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f00d fbe4 	bl	8018da4 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	3310      	adds	r3, #16
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f00d fc63 	bl	8018eae <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	3314      	adds	r3, #20
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f00d fc4a 	bl	8018e8c <sys_mbox_valid>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d108      	bne.n	800b610 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3314      	adds	r3, #20
 800b604:	2106      	movs	r1, #6
 800b606:	4618      	mov	r0, r3
 800b608:	f00d fbb2 	bl	8018d70 <sys_mbox_new>
 800b60c:	4603      	mov	r3, r0
 800b60e:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800b610:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d118      	bne.n	800b64a <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2202      	movs	r2, #2
 800b61e:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	685a      	ldr	r2, [r3, #4]
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4619      	mov	r1, r3
 800b634:	4610      	mov	r0, r2
 800b636:	f005 fd2b 	bl	8011090 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	4912      	ldr	r1, [pc, #72]	@ (800b68c <lwip_netconn_do_listen+0x12c>)
 800b642:	4618      	mov	r0, r3
 800b644:	f005 fd9c 	bl	8011180 <tcp_accept>
 800b648:	e017      	b.n	800b67a <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f004 fb30 	bl	800fcb0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2200      	movs	r2, #0
 800b656:	605a      	str	r2, [r3, #4]
 800b658:	e00f      	b.n	800b67a <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	785b      	ldrb	r3, [r3, #1]
 800b660:	2b02      	cmp	r3, #2
 800b662:	d102      	bne.n	800b66a <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800b664:	2300      	movs	r3, #0
 800b666:	72fb      	strb	r3, [r7, #11]
 800b668:	e007      	b.n	800b67a <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800b66a:	23f5      	movs	r3, #245	@ 0xf5
 800b66c:	72fb      	strb	r3, [r7, #11]
 800b66e:	e004      	b.n	800b67a <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800b670:	23f0      	movs	r3, #240	@ 0xf0
 800b672:	72fb      	strb	r3, [r7, #11]
 800b674:	e001      	b.n	800b67a <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800b676:	23f5      	movs	r3, #245	@ 0xf5
 800b678:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800b67a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b682:	bf00      	nop
 800b684:	3718      	adds	r7, #24
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	0800ab6d 	.word	0x0800ab6d

0800b690 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fe ff1d 	bl	800a4e0 <netconn_err>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b6aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d134      	bne.n	800b71c <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d02d      	beq.n	800b718 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b6c6:	2b20      	cmp	r3, #32
 800b6c8:	d123      	bne.n	800b712 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10c      	bne.n	800b6ee <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	685a      	ldr	r2, [r3, #4]
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	4610      	mov	r0, r2
 800b6e4:	f00a fcac 	bl	8016040 <udp_send>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800b6ec:	e016      	b.n	800b71c <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	6858      	ldr	r0, [r3, #4]
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	6819      	ldr	r1, [r3, #0]
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	f103 0208 	add.w	r2, r3, #8
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	899b      	ldrh	r3, [r3, #12]
 800b708:	f00a fcce 	bl	80160a8 <udp_sendto>
 800b70c:	4603      	mov	r3, r0
 800b70e:	73fb      	strb	r3, [r7, #15]
          break;
 800b710:	e004      	b.n	800b71c <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800b712:	23f5      	movs	r3, #245	@ 0xf5
 800b714:	73fb      	strb	r3, [r7, #15]
          break;
 800b716:	e001      	b.n	800b71c <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800b718:	23f5      	movs	r3, #245	@ 0xf5
 800b71a:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	7bfa      	ldrb	r2, [r7, #15]
 800b720:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b722:	bf00      	nop
 800b724:	3710      	adds	r7, #16
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}

0800b72a <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b086      	sub	sp, #24
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	2200      	movs	r2, #0
 800b73a:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d022      	beq.n	800b78c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b750:	2b10      	cmp	r3, #16
 800b752:	d11b      	bne.n	800b78c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b760:	d202      	bcs.n	800b768 <lwip_netconn_do_recv+0x3e>
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	b29b      	uxth	r3, r3
 800b766:	e001      	b.n	800b76c <lwip_netconn_do_recv+0x42>
 800b768:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b76c:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	89fa      	ldrh	r2, [r7, #14]
 800b776:	4611      	mov	r1, r2
 800b778:	4618      	mov	r0, r3
 800b77a:	f004 fdc1 	bl	8010300 <tcp_recved>
        remaining -= recved;
 800b77e:	89fb      	ldrh	r3, [r7, #14]
 800b780:	697a      	ldr	r2, [r7, #20]
 800b782:	1ad3      	subs	r3, r2, r3
 800b784:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1e6      	bne.n	800b75a <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b78c:	bf00      	nop
 800b78e:	3718      	adds	r7, #24
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b088      	sub	sp, #32
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	460b      	mov	r3, r1
 800b79e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d106      	bne.n	800b7b8 <lwip_netconn_do_writemore+0x24>
 800b7aa:	4b96      	ldr	r3, [pc, #600]	@ (800ba04 <lwip_netconn_do_writemore+0x270>)
 800b7ac:	f240 6273 	movw	r2, #1651	@ 0x673
 800b7b0:	4995      	ldr	r1, [pc, #596]	@ (800ba08 <lwip_netconn_do_writemore+0x274>)
 800b7b2:	4896      	ldr	r0, [pc, #600]	@ (800ba0c <lwip_netconn_do_writemore+0x278>)
 800b7b4:	f00e fe14 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	785b      	ldrb	r3, [r3, #1]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d006      	beq.n	800b7ce <lwip_netconn_do_writemore+0x3a>
 800b7c0:	4b90      	ldr	r3, [pc, #576]	@ (800ba04 <lwip_netconn_do_writemore+0x270>)
 800b7c2:	f240 6274 	movw	r2, #1652	@ 0x674
 800b7c6:	4992      	ldr	r1, [pc, #584]	@ (800ba10 <lwip_netconn_do_writemore+0x27c>)
 800b7c8:	4890      	ldr	r0, [pc, #576]	@ (800ba0c <lwip_netconn_do_writemore+0x278>)
 800b7ca:	f00e fe09 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6a1b      	ldr	r3, [r3, #32]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d106      	bne.n	800b7e4 <lwip_netconn_do_writemore+0x50>
 800b7d6:	4b8b      	ldr	r3, [pc, #556]	@ (800ba04 <lwip_netconn_do_writemore+0x270>)
 800b7d8:	f240 6275 	movw	r2, #1653	@ 0x675
 800b7dc:	498d      	ldr	r1, [pc, #564]	@ (800ba14 <lwip_netconn_do_writemore+0x280>)
 800b7de:	488b      	ldr	r0, [pc, #556]	@ (800ba0c <lwip_netconn_do_writemore+0x278>)
 800b7e0:	f00e fdfe 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d106      	bne.n	800b7fa <lwip_netconn_do_writemore+0x66>
 800b7ec:	4b85      	ldr	r3, [pc, #532]	@ (800ba04 <lwip_netconn_do_writemore+0x270>)
 800b7ee:	f240 6276 	movw	r2, #1654	@ 0x676
 800b7f2:	4989      	ldr	r1, [pc, #548]	@ (800ba18 <lwip_netconn_do_writemore+0x284>)
 800b7f4:	4885      	ldr	r0, [pc, #532]	@ (800ba0c <lwip_netconn_do_writemore+0x278>)
 800b7f6:	f00e fdf3 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a1b      	ldr	r3, [r3, #32]
 800b7fe:	699a      	ldr	r2, [r3, #24]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6a1b      	ldr	r3, [r3, #32]
 800b804:	695b      	ldr	r3, [r3, #20]
 800b806:	429a      	cmp	r2, r3
 800b808:	d306      	bcc.n	800b818 <lwip_netconn_do_writemore+0x84>
 800b80a:	4b7e      	ldr	r3, [pc, #504]	@ (800ba04 <lwip_netconn_do_writemore+0x270>)
 800b80c:	f240 6277 	movw	r2, #1655	@ 0x677
 800b810:	4982      	ldr	r1, [pc, #520]	@ (800ba1c <lwip_netconn_do_writemore+0x288>)
 800b812:	487e      	ldr	r0, [pc, #504]	@ (800ba0c <lwip_netconn_do_writemore+0x278>)
 800b814:	f00e fde4 	bl	801a3e0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6a1b      	ldr	r3, [r3, #32]
 800b81c:	899b      	ldrh	r3, [r3, #12]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d106      	bne.n	800b830 <lwip_netconn_do_writemore+0x9c>
 800b822:	4b78      	ldr	r3, [pc, #480]	@ (800ba04 <lwip_netconn_do_writemore+0x270>)
 800b824:	f240 6279 	movw	r2, #1657	@ 0x679
 800b828:	497d      	ldr	r1, [pc, #500]	@ (800ba20 <lwip_netconn_do_writemore+0x28c>)
 800b82a:	4878      	ldr	r0, [pc, #480]	@ (800ba0c <lwip_netconn_do_writemore+0x278>)
 800b82c:	f00e fdd8 	bl	801a3e0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6a1b      	ldr	r3, [r3, #32]
 800b834:	7f1b      	ldrb	r3, [r3, #28]
 800b836:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	7f1b      	ldrb	r3, [r3, #28]
 800b83c:	f003 0302 	and.w	r3, r3, #2
 800b840:	2b00      	cmp	r3, #0
 800b842:	d104      	bne.n	800b84e <lwip_netconn_do_writemore+0xba>
 800b844:	7ebb      	ldrb	r3, [r7, #26]
 800b846:	f003 0304 	and.w	r3, r3, #4
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d001      	beq.n	800b852 <lwip_netconn_do_writemore+0xbe>
 800b84e:	2301      	movs	r3, #1
 800b850:	e000      	b.n	800b854 <lwip_netconn_do_writemore+0xc0>
 800b852:	2300      	movs	r3, #0
 800b854:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6a1b      	ldr	r3, [r3, #32]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a1b      	ldr	r3, [r3, #32]
 800b862:	691b      	ldr	r3, [r3, #16]
 800b864:	4413      	add	r3, r2
 800b866:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6a1b      	ldr	r3, [r3, #32]
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	685a      	ldr	r2, [r3, #4]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6a1b      	ldr	r3, [r3, #32]
 800b874:	691b      	ldr	r3, [r3, #16]
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b880:	d307      	bcc.n	800b892 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800b882:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b886:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b888:	7ebb      	ldrb	r3, [r7, #26]
 800b88a:	f043 0302 	orr.w	r3, r3, #2
 800b88e:	76bb      	strb	r3, [r7, #26]
 800b890:	e001      	b.n	800b896 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b89e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b8a0:	89fa      	ldrh	r2, [r7, #14]
 800b8a2:	8bbb      	ldrh	r3, [r7, #28]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d216      	bcs.n	800b8d6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800b8a8:	89fb      	ldrh	r3, [r7, #14]
 800b8aa:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b8ac:	7e3b      	ldrb	r3, [r7, #24]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d00d      	beq.n	800b8ce <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800b8b2:	8bbb      	ldrh	r3, [r7, #28]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10e      	bne.n	800b8d6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6a1b      	ldr	r3, [r3, #32]
 800b8bc:	699b      	ldr	r3, [r3, #24]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d102      	bne.n	800b8c8 <lwip_netconn_do_writemore+0x134>
 800b8c2:	f06f 0306 	mvn.w	r3, #6
 800b8c6:	e000      	b.n	800b8ca <lwip_netconn_do_writemore+0x136>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b8cc:	e07d      	b.n	800b9ca <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b8ce:	7ebb      	ldrb	r3, [r7, #26]
 800b8d0:	f043 0302 	orr.w	r3, r3, #2
 800b8d4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6a1b      	ldr	r3, [r3, #32]
 800b8da:	691a      	ldr	r2, [r3, #16]
 800b8dc:	8bbb      	ldrh	r3, [r7, #28]
 800b8de:	441a      	add	r2, r3
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6a1b      	ldr	r3, [r3, #32]
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d906      	bls.n	800b8fa <lwip_netconn_do_writemore+0x166>
 800b8ec:	4b45      	ldr	r3, [pc, #276]	@ (800ba04 <lwip_netconn_do_writemore+0x270>)
 800b8ee:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800b8f2:	494c      	ldr	r1, [pc, #304]	@ (800ba24 <lwip_netconn_do_writemore+0x290>)
 800b8f4:	4845      	ldr	r0, [pc, #276]	@ (800ba0c <lwip_netconn_do_writemore+0x278>)
 800b8f6:	f00e fd73 	bl	801a3e0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b8fa:	8bbb      	ldrh	r3, [r7, #28]
 800b8fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b900:	4293      	cmp	r3, r2
 800b902:	d103      	bne.n	800b90c <lwip_netconn_do_writemore+0x178>
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b90a:	d209      	bcs.n	800b920 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b910:	8bba      	ldrh	r2, [r7, #28]
 800b912:	429a      	cmp	r2, r3
 800b914:	d10b      	bne.n	800b92e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a1b      	ldr	r3, [r3, #32]
 800b91a:	899b      	ldrh	r3, [r3, #12]
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d906      	bls.n	800b92e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b920:	2301      	movs	r3, #1
 800b922:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b924:	7ebb      	ldrb	r3, [r7, #26]
 800b926:	f043 0302 	orr.w	r3, r3, #2
 800b92a:	76bb      	strb	r3, [r7, #26]
 800b92c:	e001      	b.n	800b932 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800b92e:	2300      	movs	r3, #0
 800b930:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6858      	ldr	r0, [r3, #4]
 800b936:	7ebb      	ldrb	r3, [r7, #26]
 800b938:	8bba      	ldrh	r2, [r7, #28]
 800b93a:	6979      	ldr	r1, [r7, #20]
 800b93c:	f008 fae4 	bl	8013f08 <tcp_write>
 800b940:	4603      	mov	r3, r0
 800b942:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b944:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d12c      	bne.n	800b9a6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a1b      	ldr	r3, [r3, #32]
 800b950:	6999      	ldr	r1, [r3, #24]
 800b952:	8bba      	ldrh	r2, [r7, #28]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6a1b      	ldr	r3, [r3, #32]
 800b958:	440a      	add	r2, r1
 800b95a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6a1b      	ldr	r3, [r3, #32]
 800b960:	6919      	ldr	r1, [r3, #16]
 800b962:	8bba      	ldrh	r2, [r7, #28]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a1b      	ldr	r3, [r3, #32]
 800b968:	440a      	add	r2, r1
 800b96a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a1b      	ldr	r3, [r3, #32]
 800b970:	691a      	ldr	r2, [r3, #16]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6a1b      	ldr	r3, [r3, #32]
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d113      	bne.n	800b9a6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a1b      	ldr	r3, [r3, #32]
 800b982:	899a      	ldrh	r2, [r3, #12]
 800b984:	3a01      	subs	r2, #1
 800b986:	b292      	uxth	r2, r2
 800b988:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a1b      	ldr	r3, [r3, #32]
 800b98e:	899b      	ldrh	r3, [r3, #12]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d008      	beq.n	800b9a6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a1b      	ldr	r3, [r3, #32]
 800b998:	689a      	ldr	r2, [r3, #8]
 800b99a:	3208      	adds	r2, #8
 800b99c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6a1b      	ldr	r3, [r3, #32]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b9a6:	7e7b      	ldrb	r3, [r7, #25]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d004      	beq.n	800b9b6 <lwip_netconn_do_writemore+0x222>
 800b9ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f43f af50 	beq.w	800b856 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b9b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d004      	beq.n	800b9c8 <lwip_netconn_do_writemore+0x234>
 800b9be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9c6:	d146      	bne.n	800ba56 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800b9c8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b9ca:	7e3b      	ldrb	r3, [r7, #24]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d02b      	beq.n	800ba28 <lwip_netconn_do_writemore+0x294>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6a1b      	ldr	r3, [r3, #32]
 800b9d4:	699a      	ldr	r2, [r3, #24]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6a1b      	ldr	r3, [r3, #32]
 800b9da:	695b      	ldr	r3, [r3, #20]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d223      	bcs.n	800ba28 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d005      	beq.n	800b9f4 <lwip_netconn_do_writemore+0x260>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	2103      	movs	r1, #3
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	7f1b      	ldrb	r3, [r3, #28]
 800b9f8:	f043 0310 	orr.w	r3, r3, #16
 800b9fc:	b2da      	uxtb	r2, r3
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	771a      	strb	r2, [r3, #28]
 800ba02:	e028      	b.n	800ba56 <lwip_netconn_do_writemore+0x2c2>
 800ba04:	0801dfac 	.word	0x0801dfac
 800ba08:	0801e104 	.word	0x0801e104
 800ba0c:	0801dff0 	.word	0x0801dff0
 800ba10:	0801e40c 	.word	0x0801e40c
 800ba14:	0801e114 	.word	0x0801e114
 800ba18:	0801e42c 	.word	0x0801e42c
 800ba1c:	0801e444 	.word	0x0801e444
 800ba20:	0801e484 	.word	0x0801e484
 800ba24:	0801e4ac 	.word	0x0801e4ac
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ba30:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800ba34:	d305      	bcc.n	800ba42 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ba3e:	2b04      	cmp	r3, #4
 800ba40:	d909      	bls.n	800ba56 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d005      	beq.n	800ba56 <lwip_netconn_do_writemore+0x2c2>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba4e:	2200      	movs	r2, #0
 800ba50:	2103      	movs	r1, #3
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800ba56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d11d      	bne.n	800ba9a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6a1b      	ldr	r3, [r3, #32]
 800ba62:	699a      	ldr	r2, [r3, #24]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6a1b      	ldr	r3, [r3, #32]
 800ba68:	695b      	ldr	r3, [r3, #20]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d002      	beq.n	800ba74 <lwip_netconn_do_writemore+0x2e0>
 800ba6e:	7e3b      	ldrb	r3, [r7, #24]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d001      	beq.n	800ba78 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800ba74:	2301      	movs	r3, #1
 800ba76:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f009 f82d 	bl	8014adc <tcp_output>
 800ba82:	4603      	mov	r3, r0
 800ba84:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800ba86:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800ba8a:	f113 0f04 	cmn.w	r3, #4
 800ba8e:	d12c      	bne.n	800baea <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ba90:	7b3b      	ldrb	r3, [r7, #12]
 800ba92:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ba94:	2301      	movs	r3, #1
 800ba96:	76fb      	strb	r3, [r7, #27]
 800ba98:	e027      	b.n	800baea <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800ba9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ba9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa2:	d120      	bne.n	800bae6 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	4618      	mov	r0, r3
 800baaa:	f009 f817 	bl	8014adc <tcp_output>
 800baae:	4603      	mov	r3, r0
 800bab0:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800bab2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800bab6:	f113 0f04 	cmn.w	r3, #4
 800baba:	d104      	bne.n	800bac6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800babc:	7b7b      	ldrb	r3, [r7, #13]
 800babe:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bac0:	2301      	movs	r3, #1
 800bac2:	76fb      	strb	r3, [r7, #27]
 800bac4:	e011      	b.n	800baea <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800bac6:	7e3b      	ldrb	r3, [r7, #24]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d00e      	beq.n	800baea <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6a1b      	ldr	r3, [r3, #32]
 800bad0:	699b      	ldr	r3, [r3, #24]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d102      	bne.n	800badc <lwip_netconn_do_writemore+0x348>
 800bad6:	f06f 0306 	mvn.w	r3, #6
 800bada:	e000      	b.n	800bade <lwip_netconn_do_writemore+0x34a>
 800badc:	2300      	movs	r3, #0
 800bade:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bae0:	2301      	movs	r3, #1
 800bae2:	76fb      	strb	r3, [r7, #27]
 800bae4:	e001      	b.n	800baea <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800bae6:	2301      	movs	r3, #1
 800bae8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800baea:	7efb      	ldrb	r3, [r7, #27]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d015      	beq.n	800bb1c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6a1b      	ldr	r3, [r3, #32]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	330c      	adds	r3, #12
 800baf8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6a1b      	ldr	r3, [r3, #32]
 800bafe:	7ffa      	ldrb	r2, [r7, #31]
 800bb00:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800bb0e:	78fb      	ldrb	r3, [r7, #3]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d006      	beq.n	800bb22 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800bb14:	68b8      	ldr	r0, [r7, #8]
 800bb16:	f00d fa2d 	bl	8018f74 <sys_sem_signal>
 800bb1a:	e002      	b.n	800bb22 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800bb1c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb20:	e000      	b.n	800bb24 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800bb22:	2300      	movs	r3, #0
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3720      	adds	r7, #32
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7fe fccf 	bl	800a4e0 <netconn_err>
 800bb42:	4603      	mov	r3, r0
 800bb44:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800bb46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d166      	bne.n	800bc1c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bb58:	2b10      	cmp	r3, #16
 800bb5a:	d15d      	bne.n	800bc18 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	785b      	ldrb	r3, [r3, #1]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d002      	beq.n	800bb6c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800bb66:	23fb      	movs	r3, #251	@ 0xfb
 800bb68:	73fb      	strb	r3, [r7, #15]
 800bb6a:	e057      	b.n	800bc1c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d04d      	beq.n	800bc12 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	6a1b      	ldr	r3, [r3, #32]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d006      	beq.n	800bb96 <lwip_netconn_do_write+0x6a>
 800bb88:	4b28      	ldr	r3, [pc, #160]	@ (800bc2c <lwip_netconn_do_write+0x100>)
 800bb8a:	f240 7223 	movw	r2, #1827	@ 0x723
 800bb8e:	4928      	ldr	r1, [pc, #160]	@ (800bc30 <lwip_netconn_do_write+0x104>)
 800bb90:	4828      	ldr	r0, [pc, #160]	@ (800bc34 <lwip_netconn_do_write+0x108>)
 800bb92:	f00e fc25 	bl	801a3e0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	695b      	ldr	r3, [r3, #20]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d106      	bne.n	800bbac <lwip_netconn_do_write+0x80>
 800bb9e:	4b23      	ldr	r3, [pc, #140]	@ (800bc2c <lwip_netconn_do_write+0x100>)
 800bba0:	f240 7224 	movw	r2, #1828	@ 0x724
 800bba4:	4924      	ldr	r1, [pc, #144]	@ (800bc38 <lwip_netconn_do_write+0x10c>)
 800bba6:	4823      	ldr	r0, [pc, #140]	@ (800bc34 <lwip_netconn_do_write+0x108>)
 800bba8:	f00e fc1a 	bl	801a3e0 <iprintf>
        msg->conn->current_msg = msg;
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68ba      	ldr	r2, [r7, #8]
 800bbb2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2100      	movs	r1, #0
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7ff fdea 	bl	800b794 <lwip_netconn_do_writemore>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d02e      	beq.n	800bc24 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	785b      	ldrb	r3, [r3, #1]
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d006      	beq.n	800bbde <lwip_netconn_do_write+0xb2>
 800bbd0:	4b16      	ldr	r3, [pc, #88]	@ (800bc2c <lwip_netconn_do_write+0x100>)
 800bbd2:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800bbd6:	4919      	ldr	r1, [pc, #100]	@ (800bc3c <lwip_netconn_do_write+0x110>)
 800bbd8:	4816      	ldr	r0, [pc, #88]	@ (800bc34 <lwip_netconn_do_write+0x108>)
 800bbda:	f00e fc01 	bl	801a3e0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800bbde:	4818      	ldr	r0, [pc, #96]	@ (800bc40 <lwip_netconn_do_write+0x114>)
 800bbe0:	f00d fa31 	bl	8019046 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	330c      	adds	r3, #12
 800bbea:	2100      	movs	r1, #0
 800bbec:	4618      	mov	r0, r3
 800bbee:	f00d f990 	bl	8018f12 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800bbf2:	4813      	ldr	r0, [pc, #76]	@ (800bc40 <lwip_netconn_do_write+0x114>)
 800bbf4:	f00d fa18 	bl	8019028 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	785b      	ldrb	r3, [r3, #1]
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d110      	bne.n	800bc24 <lwip_netconn_do_write+0xf8>
 800bc02:	4b0a      	ldr	r3, [pc, #40]	@ (800bc2c <lwip_netconn_do_write+0x100>)
 800bc04:	f240 722c 	movw	r2, #1836	@ 0x72c
 800bc08:	490c      	ldr	r1, [pc, #48]	@ (800bc3c <lwip_netconn_do_write+0x110>)
 800bc0a:	480a      	ldr	r0, [pc, #40]	@ (800bc34 <lwip_netconn_do_write+0x108>)
 800bc0c:	f00e fbe8 	bl	801a3e0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800bc10:	e008      	b.n	800bc24 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800bc12:	23f5      	movs	r3, #245	@ 0xf5
 800bc14:	73fb      	strb	r3, [r7, #15]
 800bc16:	e001      	b.n	800bc1c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800bc18:	23fa      	movs	r3, #250	@ 0xfa
 800bc1a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	7bfa      	ldrb	r2, [r7, #15]
 800bc20:	711a      	strb	r2, [r3, #4]
 800bc22:	e000      	b.n	800bc26 <lwip_netconn_do_write+0xfa>
        return;
 800bc24:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800bc26:	3710      	adds	r7, #16
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	0801dfac 	.word	0x0801dfac
 800bc30:	0801e350 	.word	0x0801e350
 800bc34:	0801dff0 	.word	0x0801dff0
 800bc38:	0801e4d8 	.word	0x0801e4d8
 800bc3c:	0801e36c 	.word	0x0801e36c
 800bc40:	20009988 	.word	0x20009988

0800bc44 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d06b      	beq.n	800bd32 <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	7c1b      	ldrb	r3, [r3, #16]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d007      	beq.n	800bc72 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	685a      	ldr	r2, [r3, #4]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	6812      	ldr	r2, [r2, #0]
 800bc6e:	601a      	str	r2, [r3, #0]
 800bc70:	e006      	b.n	800bc80 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	685a      	ldr	r2, [r3, #4]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	6852      	ldr	r2, [r2, #4]
 800bc7e:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2200      	movs	r2, #0
 800bc84:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bc90:	2b10      	cmp	r3, #16
 800bc92:	d021      	beq.n	800bcd8 <lwip_netconn_do_getaddr+0x94>
 800bc94:	2b20      	cmp	r3, #32
 800bc96:	d144      	bne.n	800bd22 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	7c1b      	ldrb	r3, [r3, #16]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d007      	beq.n	800bcb0 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	685a      	ldr	r2, [r3, #4]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	8a52      	ldrh	r2, [r2, #18]
 800bcac:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800bcae:	e044      	b.n	800bd3a <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	7c1b      	ldrb	r3, [r3, #16]
 800bcb8:	f003 0304 	and.w	r3, r3, #4
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d103      	bne.n	800bcc8 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	22f5      	movs	r2, #245	@ 0xf5
 800bcc4:	711a      	strb	r2, [r3, #4]
        break;
 800bcc6:	e038      	b.n	800bd3a <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	685a      	ldr	r2, [r3, #4]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	68db      	ldr	r3, [r3, #12]
 800bcd2:	8a92      	ldrh	r2, [r2, #20]
 800bcd4:	801a      	strh	r2, [r3, #0]
        break;
 800bcd6:	e030      	b.n	800bd3a <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	7c1b      	ldrb	r3, [r3, #16]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d10f      	bne.n	800bd00 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d005      	beq.n	800bcf8 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	7d1b      	ldrb	r3, [r3, #20]
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d103      	bne.n	800bd00 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	22f5      	movs	r2, #245	@ 0xf5
 800bcfc:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800bcfe:	e01c      	b.n	800bd3a <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	7c1b      	ldrb	r3, [r3, #16]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d004      	beq.n	800bd12 <lwip_netconn_do_getaddr+0xce>
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	8adb      	ldrh	r3, [r3, #22]
 800bd10:	e003      	b.n	800bd1a <lwip_netconn_do_getaddr+0xd6>
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	8b1b      	ldrh	r3, [r3, #24]
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	68d2      	ldr	r2, [r2, #12]
 800bd1e:	8013      	strh	r3, [r2, #0]
        break;
 800bd20:	e00b      	b.n	800bd3a <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800bd22:	4b08      	ldr	r3, [pc, #32]	@ (800bd44 <lwip_netconn_do_getaddr+0x100>)
 800bd24:	f240 727d 	movw	r2, #1917	@ 0x77d
 800bd28:	4907      	ldr	r1, [pc, #28]	@ (800bd48 <lwip_netconn_do_getaddr+0x104>)
 800bd2a:	4808      	ldr	r0, [pc, #32]	@ (800bd4c <lwip_netconn_do_getaddr+0x108>)
 800bd2c:	f00e fb58 	bl	801a3e0 <iprintf>
        break;
 800bd30:	e003      	b.n	800bd3a <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	22f5      	movs	r2, #245	@ 0xf5
 800bd36:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bd38:	bf00      	nop
 800bd3a:	bf00      	nop
 800bd3c:	3710      	adds	r7, #16
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	0801dfac 	.word	0x0801dfac
 800bd48:	0801e4ec 	.word	0x0801e4ec
 800bd4c:	0801dff0 	.word	0x0801dff0

0800bd50 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	785b      	ldrb	r3, [r3, #1]
 800bd62:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d069      	beq.n	800be42 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800bd78:	2b10      	cmp	r3, #16
 800bd7a:	d162      	bne.n	800be42 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800bd80:	2b03      	cmp	r3, #3
 800bd82:	d002      	beq.n	800bd8a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800bd84:	7afb      	ldrb	r3, [r7, #11]
 800bd86:	2b02      	cmp	r3, #2
 800bd88:	d05b      	beq.n	800be42 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800bd8a:	7afb      	ldrb	r3, [r7, #11]
 800bd8c:	2b03      	cmp	r3, #3
 800bd8e:	d103      	bne.n	800bd98 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	22f5      	movs	r2, #245	@ 0xf5
 800bd94:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800bd96:	e059      	b.n	800be4c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800bd98:	7afb      	ldrb	r3, [r7, #11]
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d103      	bne.n	800bda6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	22fb      	movs	r2, #251	@ 0xfb
 800bda2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800bda4:	e052      	b.n	800be4c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	7a1b      	ldrb	r3, [r3, #8]
 800bdaa:	f003 0301 	and.w	r3, r3, #1
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d004      	beq.n	800bdbc <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7ff f8cc 	bl	800af54 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	6a1b      	ldr	r3, [r3, #32]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d006      	beq.n	800bdd4 <lwip_netconn_do_close+0x84>
 800bdc6:	4b23      	ldr	r3, [pc, #140]	@ (800be54 <lwip_netconn_do_close+0x104>)
 800bdc8:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800bdcc:	4922      	ldr	r1, [pc, #136]	@ (800be58 <lwip_netconn_do_close+0x108>)
 800bdce:	4823      	ldr	r0, [pc, #140]	@ (800be5c <lwip_netconn_do_close+0x10c>)
 800bdd0:	f00e fb06 	bl	801a3e0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	2204      	movs	r2, #4
 800bdda:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	68fa      	ldr	r2, [r7, #12]
 800bde2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2100      	movs	r1, #0
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7ff f930 	bl	800b050 <lwip_netconn_do_close_internal>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d029      	beq.n	800be4a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	785b      	ldrb	r3, [r3, #1]
 800bdfc:	2b04      	cmp	r3, #4
 800bdfe:	d006      	beq.n	800be0e <lwip_netconn_do_close+0xbe>
 800be00:	4b14      	ldr	r3, [pc, #80]	@ (800be54 <lwip_netconn_do_close+0x104>)
 800be02:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800be06:	4916      	ldr	r1, [pc, #88]	@ (800be60 <lwip_netconn_do_close+0x110>)
 800be08:	4814      	ldr	r0, [pc, #80]	@ (800be5c <lwip_netconn_do_close+0x10c>)
 800be0a:	f00e fae9 	bl	801a3e0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800be0e:	4815      	ldr	r0, [pc, #84]	@ (800be64 <lwip_netconn_do_close+0x114>)
 800be10:	f00d f919 	bl	8019046 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	330c      	adds	r3, #12
 800be1a:	2100      	movs	r1, #0
 800be1c:	4618      	mov	r0, r3
 800be1e:	f00d f878 	bl	8018f12 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800be22:	4810      	ldr	r0, [pc, #64]	@ (800be64 <lwip_netconn_do_close+0x114>)
 800be24:	f00d f900 	bl	8019028 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	785b      	ldrb	r3, [r3, #1]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d00b      	beq.n	800be4a <lwip_netconn_do_close+0xfa>
 800be32:	4b08      	ldr	r3, [pc, #32]	@ (800be54 <lwip_netconn_do_close+0x104>)
 800be34:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800be38:	4909      	ldr	r1, [pc, #36]	@ (800be60 <lwip_netconn_do_close+0x110>)
 800be3a:	4808      	ldr	r0, [pc, #32]	@ (800be5c <lwip_netconn_do_close+0x10c>)
 800be3c:	f00e fad0 	bl	801a3e0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800be40:	e003      	b.n	800be4a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	22f5      	movs	r2, #245	@ 0xf5
 800be46:	711a      	strb	r2, [r3, #4]
 800be48:	e000      	b.n	800be4c <lwip_netconn_do_close+0xfc>
      return;
 800be4a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	0801dfac 	.word	0x0801dfac
 800be58:	0801e350 	.word	0x0801e350
 800be5c:	0801dff0 	.word	0x0801dff0
 800be60:	0801e36c 	.word	0x0801e36c
 800be64:	20009988 	.word	0x20009988

0800be68 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	4603      	mov	r3, r0
 800be70:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800be72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be76:	2b00      	cmp	r3, #0
 800be78:	dc04      	bgt.n	800be84 <err_to_errno+0x1c>
 800be7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be7e:	f113 0f10 	cmn.w	r3, #16
 800be82:	da01      	bge.n	800be88 <err_to_errno+0x20>
    return EIO;
 800be84:	2305      	movs	r3, #5
 800be86:	e005      	b.n	800be94 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800be88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be8c:	425b      	negs	r3, r3
 800be8e:	4a04      	ldr	r2, [pc, #16]	@ (800bea0 <err_to_errno+0x38>)
 800be90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800be94:	4618      	mov	r0, r3
 800be96:	370c      	adds	r7, #12
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr
 800bea0:	080215bc 	.word	0x080215bc

0800bea4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d013      	beq.n	800beda <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00b      	beq.n	800bed2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4618      	mov	r0, r3
 800bec0:	f003 fa3c 	bl	800f33c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	605a      	str	r2, [r3, #4]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	685a      	ldr	r2, [r3, #4]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800bed2:	6879      	ldr	r1, [r7, #4]
 800bed4:	2006      	movs	r0, #6
 800bed6:	f002 fb23 	bl	800e520 <memp_free>
  }
}
 800beda:	bf00      	nop
 800bedc:	3708      	adds	r7, #8
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
	...

0800bee4 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d106      	bne.n	800bf00 <netbuf_free+0x1c>
 800bef2:	4b0d      	ldr	r3, [pc, #52]	@ (800bf28 <netbuf_free+0x44>)
 800bef4:	2281      	movs	r2, #129	@ 0x81
 800bef6:	490d      	ldr	r1, [pc, #52]	@ (800bf2c <netbuf_free+0x48>)
 800bef8:	480d      	ldr	r0, [pc, #52]	@ (800bf30 <netbuf_free+0x4c>)
 800befa:	f00e fa71 	bl	801a3e0 <iprintf>
 800befe:	e00f      	b.n	800bf20 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d004      	beq.n	800bf12 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f003 fa15 	bl	800f33c <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2200      	movs	r2, #0
 800bf16:	605a      	str	r2, [r3, #4]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	685a      	ldr	r2, [r3, #4]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800bf20:	3708      	adds	r7, #8
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	0801e504 	.word	0x0801e504
 800bf2c:	0801e5a0 	.word	0x0801e5a0
 800bf30:	0801e554 	.word	0x0801e554

0800bf34 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	4613      	mov	r3, r2
 800bf40:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d108      	bne.n	800bf5a <netbuf_ref+0x26>
 800bf48:	4b1c      	ldr	r3, [pc, #112]	@ (800bfbc <netbuf_ref+0x88>)
 800bf4a:	2299      	movs	r2, #153	@ 0x99
 800bf4c:	491c      	ldr	r1, [pc, #112]	@ (800bfc0 <netbuf_ref+0x8c>)
 800bf4e:	481d      	ldr	r0, [pc, #116]	@ (800bfc4 <netbuf_ref+0x90>)
 800bf50:	f00e fa46 	bl	801a3e0 <iprintf>
 800bf54:	f06f 030f 	mvn.w	r3, #15
 800bf58:	e02b      	b.n	800bfb2 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d004      	beq.n	800bf6c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4618      	mov	r0, r3
 800bf68:	f003 f9e8 	bl	800f33c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800bf6c:	2241      	movs	r2, #65	@ 0x41
 800bf6e:	2100      	movs	r1, #0
 800bf70:	2036      	movs	r0, #54	@ 0x36
 800bf72:	f002 fecd 	bl	800ed10 <pbuf_alloc>
 800bf76:	4602      	mov	r2, r0
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d105      	bne.n	800bf90 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2200      	movs	r2, #0
 800bf88:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800bf8a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf8e:	e010      	b.n	800bfb2 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	68ba      	ldr	r2, [r7, #8]
 800bf96:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	88fa      	ldrh	r2, [r7, #6]
 800bf9e:	811a      	strh	r2, [r3, #8]
 800bfa0:	68fa      	ldr	r2, [r7, #12]
 800bfa2:	6812      	ldr	r2, [r2, #0]
 800bfa4:	891b      	ldrh	r3, [r3, #8]
 800bfa6:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800bfb0:	2300      	movs	r3, #0
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	0801e504 	.word	0x0801e504
 800bfc0:	0801e5bc 	.word	0x0801e5bc
 800bfc4:	0801e554 	.word	0x0801e554

0800bfc8 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	db02      	blt.n	800bfe0 <tryget_socket_unconn_nouse+0x18>
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2b03      	cmp	r3, #3
 800bfde:	dd01      	ble.n	800bfe4 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	e003      	b.n	800bfec <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	011b      	lsls	r3, r3, #4
 800bfe8:	4a03      	ldr	r2, [pc, #12]	@ (800bff8 <tryget_socket_unconn_nouse+0x30>)
 800bfea:	4413      	add	r3, r2
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3714      	adds	r7, #20
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr
 800bff8:	20009938 	.word	0x20009938

0800bffc <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f7ff ffdf 	bl	800bfc8 <tryget_socket_unconn_nouse>
 800c00a:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800c00c:	68fb      	ldr	r3, [r7, #12]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3710      	adds	r7, #16
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800c016:	b580      	push	{r7, lr}
 800c018:	b084      	sub	sp, #16
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f7ff ffec 	bl	800bffc <tryget_socket_unconn>
 800c024:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d005      	beq.n	800c038 <tryget_socket+0x22>
    if (sock->conn) {
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d001      	beq.n	800c038 <tryget_socket+0x22>
      return sock;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	e000      	b.n	800c03a <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800c038:	2300      	movs	r3, #0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
	...

0800c044 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f7ff ffe2 	bl	800c016 <tryget_socket>
 800c052:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d104      	bne.n	800c064 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800c05a:	4b05      	ldr	r3, [pc, #20]	@ (800c070 <get_socket+0x2c>)
 800c05c:	2209      	movs	r2, #9
 800c05e:	601a      	str	r2, [r3, #0]
    return NULL;
 800c060:	2300      	movs	r3, #0
 800c062:	e000      	b.n	800c066 <get_socket+0x22>
  }
  return sock;
 800c064:	68fb      	ldr	r3, [r7, #12]
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	2000d394 	.word	0x2000d394

0800c074 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800c07e:	2300      	movs	r3, #0
 800c080:	60fb      	str	r3, [r7, #12]
 800c082:	e052      	b.n	800c12a <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800c084:	f00d f80c 	bl	80190a0 <sys_arch_protect>
 800c088:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800c08a:	4a2c      	ldr	r2, [pc, #176]	@ (800c13c <alloc_socket+0xc8>)
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	011b      	lsls	r3, r3, #4
 800c090:	4413      	add	r3, r2
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d142      	bne.n	800c11e <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800c098:	4a28      	ldr	r2, [pc, #160]	@ (800c13c <alloc_socket+0xc8>)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	011b      	lsls	r3, r3, #4
 800c09e:	4413      	add	r3, r2
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800c0a4:	68b8      	ldr	r0, [r7, #8]
 800c0a6:	f00d f809 	bl	80190bc <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800c0aa:	4a24      	ldr	r2, [pc, #144]	@ (800c13c <alloc_socket+0xc8>)
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	011b      	lsls	r3, r3, #4
 800c0b0:	4413      	add	r3, r2
 800c0b2:	3304      	adds	r3, #4
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800c0b8:	4a20      	ldr	r2, [pc, #128]	@ (800c13c <alloc_socket+0xc8>)
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	011b      	lsls	r3, r3, #4
 800c0be:	4413      	add	r3, r2
 800c0c0:	330e      	adds	r3, #14
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d006      	beq.n	800c0d6 <alloc_socket+0x62>
 800c0c8:	4b1d      	ldr	r3, [pc, #116]	@ (800c140 <alloc_socket+0xcc>)
 800c0ca:	f240 220e 	movw	r2, #526	@ 0x20e
 800c0ce:	491d      	ldr	r1, [pc, #116]	@ (800c144 <alloc_socket+0xd0>)
 800c0d0:	481d      	ldr	r0, [pc, #116]	@ (800c148 <alloc_socket+0xd4>)
 800c0d2:	f00e f985 	bl	801a3e0 <iprintf>
      sockets[i].rcvevent   = 0;
 800c0d6:	4a19      	ldr	r2, [pc, #100]	@ (800c13c <alloc_socket+0xc8>)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	011b      	lsls	r3, r3, #4
 800c0dc:	4413      	add	r3, r2
 800c0de:	3308      	adds	r3, #8
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c0ec:	2b10      	cmp	r3, #16
 800c0ee:	d102      	bne.n	800c0f6 <alloc_socket+0x82>
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d001      	beq.n	800c0fa <alloc_socket+0x86>
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e000      	b.n	800c0fc <alloc_socket+0x88>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	b299      	uxth	r1, r3
 800c0fe:	4a0f      	ldr	r2, [pc, #60]	@ (800c13c <alloc_socket+0xc8>)
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	011b      	lsls	r3, r3, #4
 800c104:	4413      	add	r3, r2
 800c106:	330a      	adds	r3, #10
 800c108:	460a      	mov	r2, r1
 800c10a:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800c10c:	4a0b      	ldr	r2, [pc, #44]	@ (800c13c <alloc_socket+0xc8>)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	011b      	lsls	r3, r3, #4
 800c112:	4413      	add	r3, r2
 800c114:	330c      	adds	r3, #12
 800c116:	2200      	movs	r2, #0
 800c118:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	e00a      	b.n	800c134 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800c11e:	68b8      	ldr	r0, [r7, #8]
 800c120:	f00c ffcc 	bl	80190bc <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	3301      	adds	r3, #1
 800c128:	60fb      	str	r3, [r7, #12]
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2b03      	cmp	r3, #3
 800c12e:	dda9      	ble.n	800c084 <alloc_socket+0x10>
  }
  return -1;
 800c130:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c134:	4618      	mov	r0, r3
 800c136:	3710      	adds	r7, #16
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	20009938 	.word	0x20009938
 800c140:	0801e69c 	.word	0x0801e69c
 800c144:	0801e6d0 	.word	0x0801e6d0
 800c148:	0801e6f0 	.word	0x0801e6f0

0800c14c <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b085      	sub	sp, #20
 800c150:	af00      	add	r7, sp, #0
 800c152:	60f8      	str	r0, [r7, #12]
 800c154:	60b9      	str	r1, [r7, #8]
 800c156:	607a      	str	r2, [r7, #4]
 800c158:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	68fa      	ldr	r2, [r7, #12]
 800c15e:	6852      	ldr	r2, [r2, #4]
 800c160:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2200      	movs	r2, #0
 800c166:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2200      	movs	r2, #0
 800c174:	601a      	str	r2, [r3, #0]
  return 1;
 800c176:	2301      	movs	r3, #1
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3714      	adds	r7, #20
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00d      	beq.n	800c1b4 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d005      	beq.n	800c1aa <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f003 f8ca 	bl	800f33c <pbuf_free>
 800c1a8:	e004      	b.n	800c1b4 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7ff fe78 	bl	800bea4 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d002      	beq.n	800c1c0 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800c1ba:	68b8      	ldr	r0, [r7, #8]
 800c1bc:	f7fd fd00 	bl	8009bc0 <netconn_delete>
  }
}
 800c1c0:	bf00      	nop
 800c1c2:	3710      	adds	r7, #16
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b086      	sub	sp, #24
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800c1d2:	f00c ff65 	bl	80190a0 <sys_arch_protect>
 800c1d6:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800c1d8:	f107 0308 	add.w	r3, r7, #8
 800c1dc:	f107 020c 	add.w	r2, r7, #12
 800c1e0:	6839      	ldr	r1, [r7, #0]
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f7ff ffb2 	bl	800c14c <free_socket_locked>
 800c1e8:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800c1ea:	6978      	ldr	r0, [r7, #20]
 800c1ec:	f00c ff66 	bl	80190bc <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d006      	beq.n	800c204 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f107 0208 	add.w	r2, r7, #8
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	6838      	ldr	r0, [r7, #0]
 800c200:	f7ff ffc0 	bl	800c184 <free_socket_free_elements>
  }
}
 800c204:	bf00      	nop
 800c206:	3718      	adds	r7, #24
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800c20c:	b590      	push	{r4, r7, lr}
 800c20e:	b099      	sub	sp, #100	@ 0x64
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800c218:	2300      	movs	r3, #0
 800c21a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	f7ff ff11 	bl	800c044 <get_socket>
 800c222:	65b8      	str	r0, [r7, #88]	@ 0x58
  if (!sock) {
 800c224:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c226:	2b00      	cmp	r3, #0
 800c228:	d102      	bne.n	800c230 <lwip_accept+0x24>
    return -1;
 800c22a:	f04f 33ff 	mov.w	r3, #4294967295
 800c22e:	e0f8      	b.n	800c422 <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 800c230:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800c238:	4611      	mov	r1, r2
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7fd fd92 	bl	8009d64 <netconn_accept>
 800c240:	4603      	mov	r3, r0
 800c242:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  if (err != ERR_OK) {
 800c246:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d02c      	beq.n	800c2a8 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800c24e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c258:	2b10      	cmp	r3, #16
 800c25a:	d008      	beq.n	800c26e <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 800c25c:	235f      	movs	r3, #95	@ 0x5f
 800c25e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c262:	2b00      	cmp	r3, #0
 800c264:	d01d      	beq.n	800c2a2 <lwip_accept+0x96>
 800c266:	4a71      	ldr	r2, [pc, #452]	@ (800c42c <lwip_accept+0x220>)
 800c268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c26a:	6013      	str	r3, [r2, #0]
 800c26c:	e019      	b.n	800c2a2 <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 800c26e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800c272:	f113 0f0f 	cmn.w	r3, #15
 800c276:	d108      	bne.n	800c28a <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 800c278:	2316      	movs	r3, #22
 800c27a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c27c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00f      	beq.n	800c2a2 <lwip_accept+0x96>
 800c282:	4a6a      	ldr	r2, [pc, #424]	@ (800c42c <lwip_accept+0x220>)
 800c284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c286:	6013      	str	r3, [r2, #0]
 800c288:	e00b      	b.n	800c2a2 <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800c28a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800c28e:	4618      	mov	r0, r3
 800c290:	f7ff fdea 	bl	800be68 <err_to_errno>
 800c294:	63b8      	str	r0, [r7, #56]	@ 0x38
 800c296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d002      	beq.n	800c2a2 <lwip_accept+0x96>
 800c29c:	4a63      	ldr	r2, [pc, #396]	@ (800c42c <lwip_accept+0x220>)
 800c29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2a0:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800c2a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2a6:	e0bc      	b.n	800c422 <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800c2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d106      	bne.n	800c2bc <lwip_accept+0xb0>
 800c2ae:	4b60      	ldr	r3, [pc, #384]	@ (800c430 <lwip_accept+0x224>)
 800c2b0:	f240 228b 	movw	r2, #651	@ 0x28b
 800c2b4:	495f      	ldr	r1, [pc, #380]	@ (800c434 <lwip_accept+0x228>)
 800c2b6:	4860      	ldr	r0, [pc, #384]	@ (800c438 <lwip_accept+0x22c>)
 800c2b8:	f00e f892 	bl	801a3e0 <iprintf>

  newsock = alloc_socket(newconn, 1);
 800c2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2be:	2101      	movs	r1, #1
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7ff fed7 	bl	800c074 <alloc_socket>
 800c2c6:	6538      	str	r0, [r7, #80]	@ 0x50
  if (newsock == -1) {
 800c2c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ce:	d10e      	bne.n	800c2ee <lwip_accept+0xe2>
    netconn_delete(newconn);
 800c2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7fd fc74 	bl	8009bc0 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 800c2d8:	2317      	movs	r3, #23
 800c2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c2dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d002      	beq.n	800c2e8 <lwip_accept+0xdc>
 800c2e2:	4a52      	ldr	r2, [pc, #328]	@ (800c42c <lwip_accept+0x220>)
 800c2e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2e6:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ec:	e099      	b.n	800c422 <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800c2ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	db02      	blt.n	800c2fa <lwip_accept+0xee>
 800c2f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2f6:	2b03      	cmp	r3, #3
 800c2f8:	dd06      	ble.n	800c308 <lwip_accept+0xfc>
 800c2fa:	4b4d      	ldr	r3, [pc, #308]	@ (800c430 <lwip_accept+0x224>)
 800c2fc:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800c300:	494e      	ldr	r1, [pc, #312]	@ (800c43c <lwip_accept+0x230>)
 800c302:	484d      	ldr	r0, [pc, #308]	@ (800c438 <lwip_accept+0x22c>)
 800c304:	f00e f86c 	bl	801a3e0 <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 800c308:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c30a:	011b      	lsls	r3, r3, #4
 800c30c:	4a4c      	ldr	r2, [pc, #304]	@ (800c440 <lwip_accept+0x234>)
 800c30e:	4413      	add	r3, r2
 800c310:	64fb      	str	r3, [r7, #76]	@ 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 800c312:	f00c fec5 	bl	80190a0 <sys_arch_protect>
 800c316:	64b8      	str	r0, [r7, #72]	@ 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 800c318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c31a:	699b      	ldr	r3, [r3, #24]
 800c31c:	b21b      	sxth	r3, r3
 800c31e:	43db      	mvns	r3, r3
 800c320:	b21b      	sxth	r3, r3
 800c322:	65fb      	str	r3, [r7, #92]	@ 0x5c
  newconn->socket = newsock;
 800c324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c326:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c328:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 800c32a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c32c:	f00c fec6 	bl	80190bc <sys_arch_unprotect>

  if (newconn->callback) {
 800c330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c334:	2b00      	cmp	r3, #0
 800c336:	d012      	beq.n	800c35e <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 800c338:	4842      	ldr	r0, [pc, #264]	@ (800c444 <lwip_accept+0x238>)
 800c33a:	f00c fe75 	bl	8019028 <sys_mutex_lock>
    while (recvevent > 0) {
 800c33e:	e008      	b.n	800c352 <lwip_accept+0x146>
      recvevent--;
 800c340:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c342:	3b01      	subs	r3, #1
 800c344:	65fb      	str	r3, [r7, #92]	@ 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800c346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c34a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c34c:	2200      	movs	r2, #0
 800c34e:	2100      	movs	r1, #0
 800c350:	4798      	blx	r3
    while (recvevent > 0) {
 800c352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c354:	2b00      	cmp	r3, #0
 800c356:	dcf3      	bgt.n	800c340 <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 800c358:	483a      	ldr	r0, [pc, #232]	@ (800c444 <lwip_accept+0x238>)
 800c35a:	f00c fe74 	bl	8019046 <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d055      	beq.n	800c410 <lwip_accept+0x204>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d052      	beq.n	800c410 <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 800c36a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c36c:	f107 0226 	add.w	r2, r7, #38	@ 0x26
 800c370:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800c374:	2300      	movs	r3, #0
 800c376:	f7fd fc3f 	bl	8009bf8 <netconn_getaddr>
 800c37a:	4603      	mov	r3, r0
 800c37c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (err != ERR_OK) {
 800c380:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800c384:	2b00      	cmp	r3, #0
 800c386:	d016      	beq.n	800c3b6 <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 800c388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7fd fc18 	bl	8009bc0 <netconn_delete>
      free_socket(nsock, 1);
 800c390:	2101      	movs	r1, #1
 800c392:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c394:	f7ff ff18 	bl	800c1c8 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800c398:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7ff fd63 	bl	800be68 <err_to_errno>
 800c3a2:	6478      	str	r0, [r7, #68]	@ 0x44
 800c3a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d002      	beq.n	800c3b0 <lwip_accept+0x1a4>
 800c3aa:	4a20      	ldr	r2, [pc, #128]	@ (800c42c <lwip_accept+0x220>)
 800c3ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3ae:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800c3b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3b4:	e035      	b.n	800c422 <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800c3b6:	f107 0314 	add.w	r3, r7, #20
 800c3ba:	2210      	movs	r2, #16
 800c3bc:	701a      	strb	r2, [r3, #0]
 800c3be:	f107 0314 	add.w	r3, r7, #20
 800c3c2:	2202      	movs	r2, #2
 800c3c4:	705a      	strb	r2, [r3, #1]
 800c3c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c3c8:	f107 0414 	add.w	r4, r7, #20
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f001 fb59 	bl	800da84 <lwip_htons>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	8063      	strh	r3, [r4, #2]
 800c3d6:	f107 0314 	add.w	r3, r7, #20
 800c3da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3dc:	605a      	str	r2, [r3, #4]
 800c3de:	f107 0314 	add.w	r3, r7, #20
 800c3e2:	3308      	adds	r3, #8
 800c3e4:	2208      	movs	r2, #8
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f00e f98b 	bl	801a704 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	7d3a      	ldrb	r2, [r7, #20]
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d903      	bls.n	800c400 <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 800c3f8:	7d3b      	ldrb	r3, [r7, #20]
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	f107 0314 	add.w	r3, r7, #20
 800c408:	4619      	mov	r1, r3
 800c40a:	68b8      	ldr	r0, [r7, #8]
 800c40c:	f00e fa71 	bl	801a8f2 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 800c410:	2300      	movs	r3, #0
 800c412:	643b      	str	r3, [r7, #64]	@ 0x40
 800c414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c416:	2b00      	cmp	r3, #0
 800c418:	d002      	beq.n	800c420 <lwip_accept+0x214>
 800c41a:	4a04      	ldr	r2, [pc, #16]	@ (800c42c <lwip_accept+0x220>)
 800c41c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c41e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 800c420:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800c422:	4618      	mov	r0, r3
 800c424:	3764      	adds	r7, #100	@ 0x64
 800c426:	46bd      	mov	sp, r7
 800c428:	bd90      	pop	{r4, r7, pc}
 800c42a:	bf00      	nop
 800c42c:	2000d394 	.word	0x2000d394
 800c430:	0801e69c 	.word	0x0801e69c
 800c434:	0801e718 	.word	0x0801e718
 800c438:	0801e6f0 	.word	0x0801e6f0
 800c43c:	0801e728 	.word	0x0801e728
 800c440:	20009938 	.word	0x20009938
 800c444:	20009988 	.word	0x20009988

0800c448 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b08a      	sub	sp, #40	@ 0x28
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	f7ff fdf5 	bl	800c044 <get_socket>
 800c45a:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!sock) {
 800c45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d102      	bne.n	800c468 <lwip_bind+0x20>
    return -1;
 800c462:	f04f 33ff 	mov.w	r3, #4294967295
 800c466:	e051      	b.n	800c50c <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b10      	cmp	r3, #16
 800c46c:	d108      	bne.n	800c480 <lwip_bind+0x38>
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	785b      	ldrb	r3, [r3, #1]
 800c472:	2b02      	cmp	r3, #2
 800c474:	d104      	bne.n	800c480 <lwip_bind+0x38>
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	f003 0303 	and.w	r3, r3, #3
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d014      	beq.n	800c4aa <lwip_bind+0x62>
 800c480:	4b24      	ldr	r3, [pc, #144]	@ (800c514 <lwip_bind+0xcc>)
 800c482:	f240 22e2 	movw	r2, #738	@ 0x2e2
 800c486:	4924      	ldr	r1, [pc, #144]	@ (800c518 <lwip_bind+0xd0>)
 800c488:	4824      	ldr	r0, [pc, #144]	@ (800c51c <lwip_bind+0xd4>)
 800c48a:	f00d ffa9 	bl	801a3e0 <iprintf>
 800c48e:	f06f 000f 	mvn.w	r0, #15
 800c492:	f7ff fce9 	bl	800be68 <err_to_errno>
 800c496:	6178      	str	r0, [r7, #20]
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d002      	beq.n	800c4a4 <lwip_bind+0x5c>
 800c49e:	4a20      	ldr	r2, [pc, #128]	@ (800c520 <lwip_bind+0xd8>)
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	6013      	str	r3, [r2, #0]
 800c4a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c4a8:	e030      	b.n	800c50c <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	613b      	str	r3, [r7, #16]
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	885b      	ldrh	r3, [r3, #2]
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f001 fae5 	bl	800da84 <lwip_htons>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	847b      	strh	r3, [r7, #34]	@ 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800c4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c4c4:	f107 0110 	add.w	r1, r7, #16
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7fd fbe7 	bl	8009c9c <netconn_bind>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

  if (err != ERR_OK) {
 800c4d4:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d00e      	beq.n	800c4fa <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800c4dc:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7ff fcc1 	bl	800be68 <err_to_errno>
 800c4e6:	61b8      	str	r0, [r7, #24]
 800c4e8:	69bb      	ldr	r3, [r7, #24]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d002      	beq.n	800c4f4 <lwip_bind+0xac>
 800c4ee:	4a0c      	ldr	r2, [pc, #48]	@ (800c520 <lwip_bind+0xd8>)
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c4f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c4f8:	e008      	b.n	800c50c <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	61fb      	str	r3, [r7, #28]
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d002      	beq.n	800c50a <lwip_bind+0xc2>
 800c504:	4a06      	ldr	r2, [pc, #24]	@ (800c520 <lwip_bind+0xd8>)
 800c506:	69fb      	ldr	r3, [r7, #28]
 800c508:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800c50a:	2300      	movs	r3, #0
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3728      	adds	r7, #40	@ 0x28
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	0801e69c 	.word	0x0801e69c
 800c518:	0801e740 	.word	0x0801e740
 800c51c:	0801e6f0 	.word	0x0801e6f0
 800c520:	2000d394 	.word	0x2000d394

0800c524 <lwip_close>:

int
lwip_close(int s)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800c52c:	2300      	movs	r3, #0
 800c52e:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f7ff fd87 	bl	800c044 <get_socket>
 800c536:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d102      	bne.n	800c544 <lwip_close+0x20>
    return -1;
 800c53e:	f04f 33ff 	mov.w	r3, #4294967295
 800c542:	e039      	b.n	800c5b8 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d00b      	beq.n	800c564 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c556:	2b10      	cmp	r3, #16
 800c558:	bf0c      	ite	eq
 800c55a:	2301      	moveq	r3, #1
 800c55c:	2300      	movne	r3, #0
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	617b      	str	r3, [r7, #20]
 800c562:	e00a      	b.n	800c57a <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d006      	beq.n	800c57a <lwip_close+0x56>
 800c56c:	4b14      	ldr	r3, [pc, #80]	@ (800c5c0 <lwip_close+0x9c>)
 800c56e:	f44f 7245 	mov.w	r2, #788	@ 0x314
 800c572:	4914      	ldr	r1, [pc, #80]	@ (800c5c4 <lwip_close+0xa0>)
 800c574:	4814      	ldr	r0, [pc, #80]	@ (800c5c8 <lwip_close+0xa4>)
 800c576:	f00d ff33 	bl	801a3e0 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4618      	mov	r0, r3
 800c580:	f7fd fafa 	bl	8009b78 <netconn_prepare_delete>
 800c584:	4603      	mov	r3, r0
 800c586:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d00e      	beq.n	800c5ae <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800c590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c594:	4618      	mov	r0, r3
 800c596:	f7ff fc67 	bl	800be68 <err_to_errno>
 800c59a:	60b8      	str	r0, [r7, #8]
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d002      	beq.n	800c5a8 <lwip_close+0x84>
 800c5a2:	4a0a      	ldr	r2, [pc, #40]	@ (800c5cc <lwip_close+0xa8>)
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c5a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ac:	e004      	b.n	800c5b8 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800c5ae:	6979      	ldr	r1, [r7, #20]
 800c5b0:	6938      	ldr	r0, [r7, #16]
 800c5b2:	f7ff fe09 	bl	800c1c8 <free_socket>
  set_errno(0);
  return 0;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3718      	adds	r7, #24
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	0801e69c 	.word	0x0801e69c
 800c5c4:	0801e75c 	.word	0x0801e75c
 800c5c8:	0801e6f0 	.word	0x0801e6f0
 800c5cc:	2000d394 	.word	0x2000d394

0800c5d0 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b088      	sub	sp, #32
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f7ff fd32 	bl	800c044 <get_socket>
 800c5e0:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d102      	bne.n	800c5ee <lwip_listen+0x1e>
    return -1;
 800c5e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ec:	e03e      	b.n	800c66c <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	2bfe      	cmp	r3, #254	@ 0xfe
 800c5f2:	dc03      	bgt.n	800c5fc <lwip_listen+0x2c>
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c5fa:	e000      	b.n	800c5fe <lwip_listen+0x2e>
 800c5fc:	23ff      	movs	r3, #255	@ 0xff
 800c5fe:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	683a      	ldr	r2, [r7, #0]
 800c606:	b2d2      	uxtb	r2, r2
 800c608:	4611      	mov	r1, r2
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7fd fb7e 	bl	8009d0c <netconn_listen_with_backlog>
 800c610:	4603      	mov	r3, r0
 800c612:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 800c614:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d01e      	beq.n	800c65a <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800c61c:	69fb      	ldr	r3, [r7, #28]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c626:	2b10      	cmp	r3, #16
 800c628:	d008      	beq.n	800c63c <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 800c62a:	235f      	movs	r3, #95	@ 0x5f
 800c62c:	60fb      	str	r3, [r7, #12]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d00f      	beq.n	800c654 <lwip_listen+0x84>
 800c634:	4a0f      	ldr	r2, [pc, #60]	@ (800c674 <lwip_listen+0xa4>)
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6013      	str	r3, [r2, #0]
 800c63a:	e00b      	b.n	800c654 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800c63c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c640:	4618      	mov	r0, r3
 800c642:	f7ff fc11 	bl	800be68 <err_to_errno>
 800c646:	6138      	str	r0, [r7, #16]
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d002      	beq.n	800c654 <lwip_listen+0x84>
 800c64e:	4a09      	ldr	r2, [pc, #36]	@ (800c674 <lwip_listen+0xa4>)
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800c654:	f04f 33ff 	mov.w	r3, #4294967295
 800c658:	e008      	b.n	800c66c <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 800c65a:	2300      	movs	r3, #0
 800c65c:	617b      	str	r3, [r7, #20]
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d002      	beq.n	800c66a <lwip_listen+0x9a>
 800c664:	4a03      	ldr	r2, [pc, #12]	@ (800c674 <lwip_listen+0xa4>)
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3720      	adds	r7, #32
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	2000d394 	.word	0x2000d394

0800c678 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b08c      	sub	sp, #48	@ 0x30
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	60f8      	str	r0, [r7, #12]
 800c680:	60b9      	str	r1, [r7, #8]
 800c682:	607a      	str	r2, [r7, #4]
 800c684:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800c686:	2308      	movs	r3, #8
 800c688:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  ssize_t recvd = 0;
 800c68c:	2300      	movs	r3, #0
 800c68e:	62bb      	str	r3, [r7, #40]	@ 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	db01      	blt.n	800c69a <lwip_recv_tcp+0x22>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	e001      	b.n	800c69e <lwip_recv_tcp+0x26>
 800c69a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c69e:	627b      	str	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d106      	bne.n	800c6b4 <lwip_recv_tcp+0x3c>
 800c6a6:	4b74      	ldr	r3, [pc, #464]	@ (800c878 <lwip_recv_tcp+0x200>)
 800c6a8:	f240 329e 	movw	r2, #926	@ 0x39e
 800c6ac:	4973      	ldr	r1, [pc, #460]	@ (800c87c <lwip_recv_tcp+0x204>)
 800c6ae:	4874      	ldr	r0, [pc, #464]	@ (800c880 <lwip_recv_tcp+0x208>)
 800c6b0:	f00d fe96 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c6be:	2b10      	cmp	r3, #16
 800c6c0:	d006      	beq.n	800c6d0 <lwip_recv_tcp+0x58>
 800c6c2:	4b6d      	ldr	r3, [pc, #436]	@ (800c878 <lwip_recv_tcp+0x200>)
 800c6c4:	f240 329f 	movw	r2, #927	@ 0x39f
 800c6c8:	496e      	ldr	r1, [pc, #440]	@ (800c884 <lwip_recv_tcp+0x20c>)
 800c6ca:	486d      	ldr	r0, [pc, #436]	@ (800c880 <lwip_recv_tcp+0x208>)
 800c6cc:	f00d fe88 	bl	801a3e0 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	f003 0308 	and.w	r3, r3, #8
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d005      	beq.n	800c6e6 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800c6da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6de:	f043 0304 	orr.w	r3, r3, #4
 800c6e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d003      	beq.n	800c6f6 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	617b      	str	r3, [r7, #20]
 800c6f4:	e036      	b.n	800c764 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c6fe:	f107 0114 	add.w	r1, r7, #20
 800c702:	4618      	mov	r0, r3
 800c704:	f7fd fd64 	bl	800a1d0 <netconn_recv_tcp_pbuf_flags>
 800c708:	4603      	mov	r3, r0
 800c70a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800c70e:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800c712:	2b00      	cmp	r3, #0
 800c714:	d019      	beq.n	800c74a <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800c716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c718:	2b00      	cmp	r3, #0
 800c71a:	f300 808d 	bgt.w	800c838 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800c71e:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800c722:	4618      	mov	r0, r3
 800c724:	f7ff fba0 	bl	800be68 <err_to_errno>
 800c728:	61f8      	str	r0, [r7, #28]
 800c72a:	69fb      	ldr	r3, [r7, #28]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d002      	beq.n	800c736 <lwip_recv_tcp+0xbe>
 800c730:	4a55      	ldr	r2, [pc, #340]	@ (800c888 <lwip_recv_tcp+0x210>)
 800c732:	69fb      	ldr	r3, [r7, #28]
 800c734:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800c736:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800c73a:	f113 0f0f 	cmn.w	r3, #15
 800c73e:	d101      	bne.n	800c744 <lwip_recv_tcp+0xcc>
          return 0;
 800c740:	2300      	movs	r3, #0
 800c742:	e094      	b.n	800c86e <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800c744:	f04f 33ff 	mov.w	r3, #4294967295
 800c748:	e091      	b.n	800c86e <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d106      	bne.n	800c75e <lwip_recv_tcp+0xe6>
 800c750:	4b49      	ldr	r3, [pc, #292]	@ (800c878 <lwip_recv_tcp+0x200>)
 800c752:	f240 32c5 	movw	r2, #965	@ 0x3c5
 800c756:	494d      	ldr	r1, [pc, #308]	@ (800c88c <lwip_recv_tcp+0x214>)
 800c758:	4849      	ldr	r0, [pc, #292]	@ (800c880 <lwip_recv_tcp+0x208>)
 800c75a:	f00d fe41 	bl	801a3e0 <iprintf>
      sock->lastdata.pbuf = p;
 800c75e:	697a      	ldr	r2, [r7, #20]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	891b      	ldrh	r3, [r3, #8]
 800c768:	461a      	mov	r2, r3
 800c76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c76c:	4293      	cmp	r3, r2
 800c76e:	dd03      	ble.n	800c778 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	891b      	ldrh	r3, [r3, #8]
 800c774:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c776:	e001      	b.n	800c77c <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800c778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77a:	847b      	strh	r3, [r7, #34]	@ 0x22
    }
    if (recvd + copylen < recvd) {
 800c77c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c780:	4413      	add	r3, r2
 800c782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c784:	429a      	cmp	r2, r3
 800c786:	dd03      	ble.n	800c790 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800c788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	43db      	mvns	r3, r3
 800c78e:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800c790:	6978      	ldr	r0, [r7, #20]
 800c792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c794:	68ba      	ldr	r2, [r7, #8]
 800c796:	18d1      	adds	r1, r2, r3
 800c798:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c79a:	2300      	movs	r3, #0
 800c79c:	f002 ffd4 	bl	800f748 <pbuf_copy_partial>

    recvd += copylen;
 800c7a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c7a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c7a4:	4413      	add	r3, r2
 800c7a6:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800c7a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c7aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	da06      	bge.n	800c7be <lwip_recv_tcp+0x146>
 800c7b0:	4b31      	ldr	r3, [pc, #196]	@ (800c878 <lwip_recv_tcp+0x200>)
 800c7b2:	f240 32dd 	movw	r2, #989	@ 0x3dd
 800c7b6:	4936      	ldr	r1, [pc, #216]	@ (800c890 <lwip_recv_tcp+0x218>)
 800c7b8:	4831      	ldr	r0, [pc, #196]	@ (800c880 <lwip_recv_tcp+0x208>)
 800c7ba:	f00d fe11 	bl	801a3e0 <iprintf>
    recv_left -= copylen;
 800c7be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c7c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7c2:	1ad3      	subs	r3, r2, r3
 800c7c4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	f003 0301 	and.w	r3, r3, #1
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d123      	bne.n	800c818 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	891b      	ldrh	r3, [r3, #8]
 800c7d4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d906      	bls.n	800c7e8 <lwip_recv_tcp+0x170>
 800c7da:	4b27      	ldr	r3, [pc, #156]	@ (800c878 <lwip_recv_tcp+0x200>)
 800c7dc:	f240 32e3 	movw	r2, #995	@ 0x3e3
 800c7e0:	492c      	ldr	r1, [pc, #176]	@ (800c894 <lwip_recv_tcp+0x21c>)
 800c7e2:	4827      	ldr	r0, [pc, #156]	@ (800c880 <lwip_recv_tcp+0x208>)
 800c7e4:	f00d fdfc 	bl	801a3e0 <iprintf>
      if (p->tot_len - copylen > 0) {
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	891b      	ldrh	r3, [r3, #8]
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c7f0:	1ad3      	subs	r3, r2, r3
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	dd09      	ble.n	800c80a <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c7fa:	4611      	mov	r1, r2
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f002 fd6a 	bl	800f2d6 <pbuf_free_header>
 800c802:	4602      	mov	r2, r0
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	605a      	str	r2, [r3, #4]
 800c808:	e006      	b.n	800c818 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2200      	movs	r2, #0
 800c80e:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	4618      	mov	r0, r3
 800c814:	f002 fd92 	bl	800f33c <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800c818:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c81c:	f043 0314 	orr.w	r3, r3, #20
 800c820:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800c824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c826:	2b00      	cmp	r3, #0
 800c828:	dd08      	ble.n	800c83c <lwip_recv_tcp+0x1c4>
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	f003 0301 	and.w	r3, r3, #1
 800c830:	2b00      	cmp	r3, #0
 800c832:	f43f af58 	beq.w	800c6e6 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800c836:	e001      	b.n	800c83c <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800c838:	bf00      	nop
 800c83a:	e000      	b.n	800c83e <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800c83c:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800c83e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c840:	2b00      	cmp	r3, #0
 800c842:	dd0b      	ble.n	800c85c <lwip_recv_tcp+0x1e4>
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	f003 0301 	and.w	r3, r3, #1
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d106      	bne.n	800c85c <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c854:	4611      	mov	r1, r2
 800c856:	4618      	mov	r0, r3
 800c858:	f7fd fc08 	bl	800a06c <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800c85c:	2300      	movs	r3, #0
 800c85e:	61bb      	str	r3, [r7, #24]
 800c860:	69bb      	ldr	r3, [r7, #24]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d002      	beq.n	800c86c <lwip_recv_tcp+0x1f4>
 800c866:	4a08      	ldr	r2, [pc, #32]	@ (800c888 <lwip_recv_tcp+0x210>)
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	6013      	str	r3, [r2, #0]
  return recvd;
 800c86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3730      	adds	r7, #48	@ 0x30
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	0801e69c 	.word	0x0801e69c
 800c87c:	0801e794 	.word	0x0801e794
 800c880:	0801e6f0 	.word	0x0801e6f0
 800c884:	0801e7a4 	.word	0x0801e7a4
 800c888:	2000d394 	.word	0x2000d394
 800c88c:	0801e7c8 	.word	0x0801e7c8
 800c890:	0801e7d4 	.word	0x0801e7d4
 800c894:	0801e7fc 	.word	0x0801e7fc

0800c898 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800c898:	b590      	push	{r4, r7, lr}
 800c89a:	b08b      	sub	sp, #44	@ 0x2c
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	60b9      	str	r1, [r7, #8]
 800c8a2:	603b      	str	r3, [r7, #0]
 800c8a4:	4613      	mov	r3, r2
 800c8a6:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	627b      	str	r3, [r7, #36]	@ 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d106      	bne.n	800c8c0 <lwip_sock_make_addr+0x28>
 800c8b2:	4b2b      	ldr	r3, [pc, #172]	@ (800c960 <lwip_sock_make_addr+0xc8>)
 800c8b4:	f240 4207 	movw	r2, #1031	@ 0x407
 800c8b8:	492a      	ldr	r1, [pc, #168]	@ (800c964 <lwip_sock_make_addr+0xcc>)
 800c8ba:	482b      	ldr	r0, [pc, #172]	@ (800c968 <lwip_sock_make_addr+0xd0>)
 800c8bc:	f00d fd90 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d106      	bne.n	800c8d4 <lwip_sock_make_addr+0x3c>
 800c8c6:	4b26      	ldr	r3, [pc, #152]	@ (800c960 <lwip_sock_make_addr+0xc8>)
 800c8c8:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 800c8cc:	4927      	ldr	r1, [pc, #156]	@ (800c96c <lwip_sock_make_addr+0xd4>)
 800c8ce:	4826      	ldr	r0, [pc, #152]	@ (800c968 <lwip_sock_make_addr+0xd0>)
 800c8d0:	f00d fd86 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800c8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d106      	bne.n	800c8e8 <lwip_sock_make_addr+0x50>
 800c8da:	4b21      	ldr	r3, [pc, #132]	@ (800c960 <lwip_sock_make_addr+0xc8>)
 800c8dc:	f240 4209 	movw	r2, #1033	@ 0x409
 800c8e0:	4923      	ldr	r1, [pc, #140]	@ (800c970 <lwip_sock_make_addr+0xd8>)
 800c8e2:	4821      	ldr	r0, [pc, #132]	@ (800c968 <lwip_sock_make_addr+0xd0>)
 800c8e4:	f00d fd7c 	bl	801a3e0 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800c8e8:	f107 0314 	add.w	r3, r7, #20
 800c8ec:	2210      	movs	r2, #16
 800c8ee:	701a      	strb	r2, [r3, #0]
 800c8f0:	f107 0314 	add.w	r3, r7, #20
 800c8f4:	2202      	movs	r2, #2
 800c8f6:	705a      	strb	r2, [r3, #1]
 800c8f8:	f107 0414 	add.w	r4, r7, #20
 800c8fc:	88fb      	ldrh	r3, [r7, #6]
 800c8fe:	4618      	mov	r0, r3
 800c900:	f001 f8c0 	bl	800da84 <lwip_htons>
 800c904:	4603      	mov	r3, r0
 800c906:	8063      	strh	r3, [r4, #2]
 800c908:	f107 0314 	add.w	r3, r7, #20
 800c90c:	68ba      	ldr	r2, [r7, #8]
 800c90e:	6812      	ldr	r2, [r2, #0]
 800c910:	605a      	str	r2, [r3, #4]
 800c912:	f107 0314 	add.w	r3, r7, #20
 800c916:	3308      	adds	r3, #8
 800c918:	2208      	movs	r2, #8
 800c91a:	2100      	movs	r1, #0
 800c91c:	4618      	mov	r0, r3
 800c91e:	f00d fef1 	bl	801a704 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800c922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	7d3a      	ldrb	r2, [r7, #20]
 800c928:	4293      	cmp	r3, r2
 800c92a:	d202      	bcs.n	800c932 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800c92c:	2301      	movs	r3, #1
 800c92e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c930:	e008      	b.n	800c944 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800c932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	7d3a      	ldrb	r2, [r7, #20]
 800c938:	4293      	cmp	r3, r2
 800c93a:	d903      	bls.n	800c944 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800c93c:	7d3b      	ldrb	r3, [r7, #20]
 800c93e:	461a      	mov	r2, r3
 800c940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c942:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800c944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	f107 0314 	add.w	r3, r7, #20
 800c94c:	4619      	mov	r1, r3
 800c94e:	6838      	ldr	r0, [r7, #0]
 800c950:	f00d ffcf 	bl	801a8f2 <memcpy>
  return truncated;
 800c954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c956:	4618      	mov	r0, r3
 800c958:	372c      	adds	r7, #44	@ 0x2c
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd90      	pop	{r4, r7, pc}
 800c95e:	bf00      	nop
 800c960:	0801e69c 	.word	0x0801e69c
 800c964:	0801e80c 	.word	0x0801e80c
 800c968:	0801e6f0 	.word	0x0801e6f0
 800c96c:	0801e820 	.word	0x0801e820
 800c970:	0801e830 	.word	0x0801e830

0800c974 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b088      	sub	sp, #32
 800c978:	af02      	add	r7, sp, #8
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	60b9      	str	r1, [r7, #8]
 800c97e:	607a      	str	r2, [r7, #4]
 800c980:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d101      	bne.n	800c98c <lwip_recv_tcp_from+0x18>
    return 0;
 800c988:	2300      	movs	r3, #0
 800c98a:	e021      	b.n	800c9d0 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d01d      	beq.n	800c9ce <lwip_recv_tcp_from+0x5a>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d01a      	beq.n	800c9ce <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	6818      	ldr	r0, [r3, #0]
 800c99c:	f107 0216 	add.w	r2, r7, #22
 800c9a0:	f107 0110 	add.w	r1, r7, #16
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	f7fd f927 	bl	8009bf8 <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d00e      	beq.n	800c9ce <lwip_recv_tcp_from+0x5a>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d00b      	beq.n	800c9ce <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6818      	ldr	r0, [r3, #0]
 800c9ba:	8afa      	ldrh	r2, [r7, #22]
 800c9bc:	f107 0110 	add.w	r1, r7, #16
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	9300      	str	r3, [sp, #0]
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	f7ff ff67 	bl	800c898 <lwip_sock_make_addr>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	e000      	b.n	800c9d0 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800c9ce:	2300      	movs	r3, #0
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3718      	adds	r7, #24
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800c9d8:	b590      	push	{r4, r7, lr}
 800c9da:	b08d      	sub	sp, #52	@ 0x34
 800c9dc:	af02      	add	r7, sp, #8
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	607a      	str	r2, [r7, #4]
 800c9e4:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	689b      	ldr	r3, [r3, #8]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d10d      	bne.n	800ca0a <lwip_recvfrom_udp_raw+0x32>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	dd09      	ble.n	800ca0a <lwip_recvfrom_udp_raw+0x32>
 800c9f6:	4b5e      	ldr	r3, [pc, #376]	@ (800cb70 <lwip_recvfrom_udp_raw+0x198>)
 800c9f8:	f240 4249 	movw	r2, #1097	@ 0x449
 800c9fc:	495d      	ldr	r1, [pc, #372]	@ (800cb74 <lwip_recvfrom_udp_raw+0x19c>)
 800c9fe:	485e      	ldr	r0, [pc, #376]	@ (800cb78 <lwip_recvfrom_udp_raw+0x1a0>)
 800ca00:	f00d fcee 	bl	801a3e0 <iprintf>
 800ca04:	f06f 030f 	mvn.w	r3, #15
 800ca08:	e0ad      	b.n	800cb66 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	f003 0308 	and.w	r3, r3, #8
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d003      	beq.n	800ca1c <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800ca14:	2304      	movs	r3, #4
 800ca16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ca1a:	e002      	b.n	800ca22 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d11e      	bne.n	800ca6c <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ca36:	f107 0110 	add.w	r1, r7, #16
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7fd fbf4 	bl	800a228 <netconn_recv_udp_raw_netbuf_flags>
 800ca40:	4603      	mov	r3, r0
 800ca42:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800ca44:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d002      	beq.n	800ca52 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800ca4c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ca50:	e089      	b.n	800cb66 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d106      	bne.n	800ca66 <lwip_recvfrom_udp_raw+0x8e>
 800ca58:	4b45      	ldr	r3, [pc, #276]	@ (800cb70 <lwip_recvfrom_udp_raw+0x198>)
 800ca5a:	f240 425e 	movw	r2, #1118	@ 0x45e
 800ca5e:	4947      	ldr	r1, [pc, #284]	@ (800cb7c <lwip_recvfrom_udp_raw+0x1a4>)
 800ca60:	4845      	ldr	r0, [pc, #276]	@ (800cb78 <lwip_recvfrom_udp_raw+0x1a0>)
 800ca62:	f00d fcbd 	bl	801a3e0 <iprintf>
    sock->lastdata.netbuf = buf;
 800ca66:	693a      	ldr	r2, [r7, #16]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	891b      	ldrh	r3, [r3, #8]
 800ca72:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800ca74:	2300      	movs	r3, #0
 800ca76:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800ca78:	2300      	movs	r3, #0
 800ca7a:	61fb      	str	r3, [r7, #28]
 800ca7c:	e029      	b.n	800cad2 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800ca7e:	8b3a      	ldrh	r2, [r7, #24]
 800ca80:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ca82:	1ad3      	subs	r3, r2, r3
 800ca84:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	689a      	ldr	r2, [r3, #8]
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	00db      	lsls	r3, r3, #3
 800ca8e:	4413      	add	r3, r2
 800ca90:	685a      	ldr	r2, [r3, #4]
 800ca92:	8afb      	ldrh	r3, [r7, #22]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d902      	bls.n	800ca9e <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800ca98:	8afb      	ldrh	r3, [r7, #22]
 800ca9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ca9c:	e006      	b.n	800caac <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	689a      	ldr	r2, [r3, #8]
 800caa2:	69fb      	ldr	r3, [r7, #28]
 800caa4:	00db      	lsls	r3, r3, #3
 800caa6:	4413      	add	r3, r2
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	6818      	ldr	r0, [r3, #0]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	689a      	ldr	r2, [r3, #8]
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	00db      	lsls	r3, r3, #3
 800cab8:	4413      	add	r3, r2
 800caba:	6819      	ldr	r1, [r3, #0]
 800cabc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cabe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cac0:	f002 fe42 	bl	800f748 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800cac4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800cac6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cac8:	4413      	add	r3, r2
 800caca:	847b      	strh	r3, [r7, #34]	@ 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800cacc:	69fb      	ldr	r3, [r7, #28]
 800cace:	3301      	adds	r3, #1
 800cad0:	61fb      	str	r3, [r7, #28]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	68db      	ldr	r3, [r3, #12]
 800cad6:	69fa      	ldr	r2, [r7, #28]
 800cad8:	429a      	cmp	r2, r3
 800cada:	da03      	bge.n	800cae4 <lwip_recvfrom_udp_raw+0x10c>
 800cadc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800cade:	8b3b      	ldrh	r3, [r7, #24]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d3cc      	bcc.n	800ca7e <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d01a      	beq.n	800cb22 <lwip_recvfrom_udp_raw+0x14a>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d016      	beq.n	800cb22 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d012      	beq.n	800cb22 <lwip_recvfrom_udp_raw+0x14a>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d00e      	beq.n	800cb22 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	6818      	ldr	r0, [r3, #0]
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	f103 0108 	add.w	r1, r3, #8
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	3304      	adds	r3, #4
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	4623      	mov	r3, r4
 800cb1e:	f7ff febb 	bl	800c898 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2200      	movs	r2, #0
 800cb26:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	691b      	ldr	r3, [r3, #16]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d007      	beq.n	800cb40 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800cb30:	2300      	movs	r3, #0
 800cb32:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800cb34:	7d7b      	ldrb	r3, [r7, #21]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d102      	bne.n	800cb40 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	f003 0301 	and.w	r3, r3, #1
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d106      	bne.n	800cb58 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7ff f9a6 	bl	800bea4 <netbuf_delete>
  }
  if (datagram_len) {
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d002      	beq.n	800cb64 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	8b3a      	ldrh	r2, [r7, #24]
 800cb62:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800cb64:	2300      	movs	r3, #0
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	372c      	adds	r7, #44	@ 0x2c
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd90      	pop	{r4, r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	0801e69c 	.word	0x0801e69c
 800cb74:	0801e840 	.word	0x0801e840
 800cb78:	0801e6f0 	.word	0x0801e6f0
 800cb7c:	0801e86c 	.word	0x0801e86c

0800cb80 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b096      	sub	sp, #88	@ 0x58
 800cb84:	af02      	add	r7, sp, #8
 800cb86:	60f8      	str	r0, [r7, #12]
 800cb88:	60b9      	str	r1, [r7, #8]
 800cb8a:	607a      	str	r2, [r7, #4]
 800cb8c:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800cb8e:	68f8      	ldr	r0, [r7, #12]
 800cb90:	f7ff fa58 	bl	800c044 <get_socket>
 800cb94:	64f8      	str	r0, [r7, #76]	@ 0x4c
  if (!sock) {
 800cb96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d102      	bne.n	800cba2 <lwip_recvfrom+0x22>
    return -1;
 800cb9c:	f04f 33ff 	mov.w	r3, #4294967295
 800cba0:	e078      	b.n	800cc94 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800cba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cbac:	2b10      	cmp	r3, #16
 800cbae:	d112      	bne.n	800cbd6 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	68b9      	ldr	r1, [r7, #8]
 800cbb6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800cbb8:	f7ff fd5e 	bl	800c678 <lwip_recv_tcp>
 800cbbc:	6478      	str	r0, [r7, #68]	@ 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800cbbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbc0:	9301      	str	r3, [sp, #4]
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	9300      	str	r3, [sp, #0]
 800cbc6:	4b35      	ldr	r3, [pc, #212]	@ (800cc9c <lwip_recvfrom+0x11c>)
 800cbc8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cbca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cbcc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800cbce:	f7ff fed1 	bl	800c974 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800cbd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbd4:	e05e      	b.n	800cc94 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	877b      	strh	r3, [r7, #58]	@ 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	633b      	str	r3, [r7, #48]	@ 0x30
    vec.iov_len = len;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	637b      	str	r3, [r7, #52]	@ 0x34
    msg.msg_control = NULL;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	627b      	str	r3, [r7, #36]	@ 0x24
    msg.msg_controllen = 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    msg.msg_flags = 0;
 800cbea:	2300      	movs	r3, #0
 800cbec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    msg.msg_iov = &vec;
 800cbee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800cbf2:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800cbf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cbfa:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800cbfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d002      	beq.n	800cc08 <lwip_recvfrom+0x88>
 800cc02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	e000      	b.n	800cc0a <lwip_recvfrom+0x8a>
 800cc08:	2300      	movs	r3, #0
 800cc0a:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800cc0c:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 800cc10:	f107 0214 	add.w	r2, r7, #20
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	9300      	str	r3, [sp, #0]
 800cc18:	460b      	mov	r3, r1
 800cc1a:	6839      	ldr	r1, [r7, #0]
 800cc1c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800cc1e:	f7ff fedb 	bl	800c9d8 <lwip_recvfrom_udp_raw>
 800cc22:	4603      	mov	r3, r0
 800cc24:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    if (err != ERR_OK) {
 800cc28:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d00e      	beq.n	800cc4e <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800cc30:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7ff f917 	bl	800be68 <err_to_errno>
 800cc3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800cc3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d002      	beq.n	800cc48 <lwip_recvfrom+0xc8>
 800cc42:	4a17      	ldr	r2, [pc, #92]	@ (800cca0 <lwip_recvfrom+0x120>)
 800cc44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc46:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800cc48:	f04f 33ff 	mov.w	r3, #4294967295
 800cc4c:	e022      	b.n	800cc94 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800cc4e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cc50:	461a      	mov	r2, r3
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	4293      	cmp	r3, r2
 800cc56:	bf28      	it	cs
 800cc58:	4613      	movcs	r3, r2
 800cc5a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d206      	bcs.n	800cc70 <lwip_recvfrom+0xf0>
 800cc62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cc64:	461a      	mov	r2, r3
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	bf28      	it	cs
 800cc6c:	4613      	movcs	r3, r2
 800cc6e:	e001      	b.n	800cc74 <lwip_recvfrom+0xf4>
 800cc70:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800cc74:	647b      	str	r3, [r7, #68]	@ 0x44
    if (fromlen) {
 800cc76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d002      	beq.n	800cc82 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800cc7c:	69ba      	ldr	r2, [r7, #24]
 800cc7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc80:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800cc82:	2300      	movs	r3, #0
 800cc84:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d002      	beq.n	800cc92 <lwip_recvfrom+0x112>
 800cc8c:	4a04      	ldr	r2, [pc, #16]	@ (800cca0 <lwip_recvfrom+0x120>)
 800cc8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc90:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800cc92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3750      	adds	r7, #80	@ 0x50
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	0801e878 	.word	0x0801e878
 800cca0:	2000d394 	.word	0x2000d394

0800cca4 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b086      	sub	sp, #24
 800cca8:	af02      	add	r7, sp, #8
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	607a      	str	r2, [r7, #4]
 800ccb0:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	9301      	str	r3, [sp, #4]
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	9300      	str	r3, [sp, #0]
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	68b9      	ldr	r1, [r7, #8]
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f7ff ff5d 	bl	800cb80 <lwip_recvfrom>
 800ccc6:	4603      	mov	r3, r0
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3710      	adds	r7, #16
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b08a      	sub	sp, #40	@ 0x28
 800ccd4:	af02      	add	r7, sp, #8
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	607a      	str	r2, [r7, #4]
 800ccdc:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800ccde:	68f8      	ldr	r0, [r7, #12]
 800cce0:	f7ff f9b0 	bl	800c044 <get_socket>
 800cce4:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d102      	bne.n	800ccf2 <lwip_send+0x22>
    return -1;
 800ccec:	f04f 33ff 	mov.w	r3, #4294967295
 800ccf0:	e046      	b.n	800cd80 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ccfc:	2b10      	cmp	r3, #16
 800ccfe:	d00b      	beq.n	800cd18 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800cd00:	2300      	movs	r3, #0
 800cd02:	9301      	str	r3, [sp, #4]
 800cd04:	2300      	movs	r3, #0
 800cd06:	9300      	str	r3, [sp, #0]
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	68b9      	ldr	r1, [r7, #8]
 800cd0e:	68f8      	ldr	r0, [r7, #12]
 800cd10:	f000 f83c 	bl	800cd8c <lwip_sendto>
 800cd14:	4603      	mov	r3, r0
 800cd16:	e033      	b.n	800cd80 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d001      	beq.n	800cd26 <lwip_send+0x56>
 800cd22:	2203      	movs	r2, #3
 800cd24:	e000      	b.n	800cd28 <lwip_send+0x58>
 800cd26:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	105b      	asrs	r3, r3, #1
 800cd2c:	b25b      	sxtb	r3, r3
 800cd2e:	f003 0304 	and.w	r3, r3, #4
 800cd32:	b25b      	sxtb	r3, r3
 800cd34:	4313      	orrs	r3, r2
 800cd36:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800cd38:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800cd3e:	69fb      	ldr	r3, [r7, #28]
 800cd40:	6818      	ldr	r0, [r3, #0]
 800cd42:	7efa      	ldrb	r2, [r7, #27]
 800cd44:	f107 0310 	add.w	r3, r7, #16
 800cd48:	9300      	str	r3, [sp, #0]
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	68b9      	ldr	r1, [r7, #8]
 800cd50:	f7fd fac4 	bl	800a2dc <netconn_write_partly>
 800cd54:	4603      	mov	r3, r0
 800cd56:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800cd58:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7ff f883 	bl	800be68 <err_to_errno>
 800cd62:	6178      	str	r0, [r7, #20]
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d002      	beq.n	800cd70 <lwip_send+0xa0>
 800cd6a:	4a07      	ldr	r2, [pc, #28]	@ (800cd88 <lwip_send+0xb8>)
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800cd70:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d101      	bne.n	800cd7c <lwip_send+0xac>
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	e001      	b.n	800cd80 <lwip_send+0xb0>
 800cd7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3720      	adds	r7, #32
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	2000d394 	.word	0x2000d394

0800cd8c <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b08e      	sub	sp, #56	@ 0x38
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	607a      	str	r2, [r7, #4]
 800cd98:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800cd9a:	68f8      	ldr	r0, [r7, #12]
 800cd9c:	f7ff f952 	bl	800c044 <get_socket>
 800cda0:	6338      	str	r0, [r7, #48]	@ 0x30
  if (!sock) {
 800cda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d102      	bne.n	800cdae <lwip_sendto+0x22>
    return -1;
 800cda8:	f04f 33ff 	mov.w	r3, #4294967295
 800cdac:	e093      	b.n	800ced6 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800cdae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cdb8:	2b10      	cmp	r3, #16
 800cdba:	d107      	bne.n	800cdcc <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	68b9      	ldr	r1, [r7, #8]
 800cdc2:	68f8      	ldr	r0, [r7, #12]
 800cdc4:	f7ff ff84 	bl	800ccd0 <lwip_send>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	e084      	b.n	800ced6 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cdd2:	d30a      	bcc.n	800cdea <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800cdd4:	235a      	movs	r3, #90	@ 0x5a
 800cdd6:	623b      	str	r3, [r7, #32]
 800cdd8:	6a3b      	ldr	r3, [r7, #32]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d002      	beq.n	800cde4 <lwip_sendto+0x58>
 800cdde:	4a40      	ldr	r2, [pc, #256]	@ (800cee0 <lwip_sendto+0x154>)
 800cde0:	6a3b      	ldr	r3, [r7, #32]
 800cde2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800cde4:	f04f 33ff 	mov.w	r3, #4294967295
 800cde8:	e075      	b.n	800ced6 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800cdee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d102      	bne.n	800cdfa <lwip_sendto+0x6e>
 800cdf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d023      	beq.n	800ce42 <lwip_sendto+0xb6>
 800cdfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdfc:	2b10      	cmp	r3, #16
 800cdfe:	d10b      	bne.n	800ce18 <lwip_sendto+0x8c>
 800ce00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d008      	beq.n	800ce18 <lwip_sendto+0x8c>
 800ce06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce08:	785b      	ldrb	r3, [r3, #1]
 800ce0a:	2b02      	cmp	r3, #2
 800ce0c:	d104      	bne.n	800ce18 <lwip_sendto+0x8c>
 800ce0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce10:	f003 0303 	and.w	r3, r3, #3
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d014      	beq.n	800ce42 <lwip_sendto+0xb6>
 800ce18:	4b32      	ldr	r3, [pc, #200]	@ (800cee4 <lwip_sendto+0x158>)
 800ce1a:	f240 6252 	movw	r2, #1618	@ 0x652
 800ce1e:	4932      	ldr	r1, [pc, #200]	@ (800cee8 <lwip_sendto+0x15c>)
 800ce20:	4832      	ldr	r0, [pc, #200]	@ (800ceec <lwip_sendto+0x160>)
 800ce22:	f00d fadd 	bl	801a3e0 <iprintf>
 800ce26:	f06f 000f 	mvn.w	r0, #15
 800ce2a:	f7ff f81d 	bl	800be68 <err_to_errno>
 800ce2e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ce30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d002      	beq.n	800ce3c <lwip_sendto+0xb0>
 800ce36:	4a2a      	ldr	r2, [pc, #168]	@ (800cee0 <lwip_sendto+0x154>)
 800ce38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce3a:	6013      	str	r3, [r2, #0]
 800ce3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce40:	e049      	b.n	800ced6 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800ce42:	2300      	movs	r3, #0
 800ce44:	617b      	str	r3, [r7, #20]
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800ce4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d00a      	beq.n	800ce66 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800ce50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	61bb      	str	r3, [r7, #24]
 800ce56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce58:	885b      	ldrh	r3, [r3, #2]
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f000 fe12 	bl	800da84 <lwip_htons>
 800ce60:	4603      	mov	r3, r0
 800ce62:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800ce64:	e003      	b.n	800ce6e <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800ce66:	2300      	movs	r3, #0
 800ce68:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800ce6e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ce70:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800ce72:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ce74:	f107 0310 	add.w	r3, r7, #16
 800ce78:	68b9      	ldr	r1, [r7, #8]
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7ff f85a 	bl	800bf34 <netbuf_ref>
 800ce80:	4603      	mov	r3, r0
 800ce82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800ce86:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d10a      	bne.n	800cea4 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800ce8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f107 0210 	add.w	r2, r7, #16
 800ce96:	4611      	mov	r1, r2
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7fd f9f1 	bl	800a280 <netconn_send>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800cea4:	f107 0310 	add.w	r3, r7, #16
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f7ff f81b 	bl	800bee4 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800ceae:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7fe ffd8 	bl	800be68 <err_to_errno>
 800ceb8:	6278      	str	r0, [r7, #36]	@ 0x24
 800ceba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d002      	beq.n	800cec6 <lwip_sendto+0x13a>
 800cec0:	4a07      	ldr	r2, [pc, #28]	@ (800cee0 <lwip_sendto+0x154>)
 800cec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800cec6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d101      	bne.n	800ced2 <lwip_sendto+0x146>
 800cece:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ced0:	e001      	b.n	800ced6 <lwip_sendto+0x14a>
 800ced2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3738      	adds	r7, #56	@ 0x38
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}
 800cede:	bf00      	nop
 800cee0:	2000d394 	.word	0x2000d394
 800cee4:	0801e69c 	.word	0x0801e69c
 800cee8:	0801e97c 	.word	0x0801e97c
 800ceec:	0801e6f0 	.word	0x0801e6f0

0800cef0 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b086      	sub	sp, #24
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	2b03      	cmp	r3, #3
 800cf00:	d009      	beq.n	800cf16 <lwip_socket+0x26>
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	2b03      	cmp	r3, #3
 800cf06:	dc23      	bgt.n	800cf50 <lwip_socket+0x60>
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d019      	beq.n	800cf42 <lwip_socket+0x52>
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	2b02      	cmp	r3, #2
 800cf12:	d009      	beq.n	800cf28 <lwip_socket+0x38>
 800cf14:	e01c      	b.n	800cf50 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	b2db      	uxtb	r3, r3
 800cf1a:	4a22      	ldr	r2, [pc, #136]	@ (800cfa4 <lwip_socket+0xb4>)
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	2040      	movs	r0, #64	@ 0x40
 800cf20:	f7fc fdb0 	bl	8009a84 <netconn_new_with_proto_and_callback>
 800cf24:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800cf26:	e019      	b.n	800cf5c <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2b88      	cmp	r3, #136	@ 0x88
 800cf2c:	d101      	bne.n	800cf32 <lwip_socket+0x42>
 800cf2e:	2321      	movs	r3, #33	@ 0x21
 800cf30:	e000      	b.n	800cf34 <lwip_socket+0x44>
 800cf32:	2320      	movs	r3, #32
 800cf34:	4a1b      	ldr	r2, [pc, #108]	@ (800cfa4 <lwip_socket+0xb4>)
 800cf36:	2100      	movs	r1, #0
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7fc fda3 	bl	8009a84 <netconn_new_with_proto_and_callback>
 800cf3e:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800cf40:	e00c      	b.n	800cf5c <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800cf42:	4a18      	ldr	r2, [pc, #96]	@ (800cfa4 <lwip_socket+0xb4>)
 800cf44:	2100      	movs	r1, #0
 800cf46:	2010      	movs	r0, #16
 800cf48:	f7fc fd9c 	bl	8009a84 <netconn_new_with_proto_and_callback>
 800cf4c:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800cf4e:	e005      	b.n	800cf5c <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800cf50:	4b15      	ldr	r3, [pc, #84]	@ (800cfa8 <lwip_socket+0xb8>)
 800cf52:	2216      	movs	r2, #22
 800cf54:	601a      	str	r2, [r3, #0]
      return -1;
 800cf56:	f04f 33ff 	mov.w	r3, #4294967295
 800cf5a:	e01e      	b.n	800cf9a <lwip_socket+0xaa>
  }

  if (!conn) {
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d105      	bne.n	800cf6e <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800cf62:	4b11      	ldr	r3, [pc, #68]	@ (800cfa8 <lwip_socket+0xb8>)
 800cf64:	2269      	movs	r2, #105	@ 0x69
 800cf66:	601a      	str	r2, [r3, #0]
    return -1;
 800cf68:	f04f 33ff 	mov.w	r3, #4294967295
 800cf6c:	e015      	b.n	800cf9a <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800cf6e:	2100      	movs	r1, #0
 800cf70:	6978      	ldr	r0, [r7, #20]
 800cf72:	f7ff f87f 	bl	800c074 <alloc_socket>
 800cf76:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf7e:	d108      	bne.n	800cf92 <lwip_socket+0xa2>
    netconn_delete(conn);
 800cf80:	6978      	ldr	r0, [r7, #20]
 800cf82:	f7fc fe1d 	bl	8009bc0 <netconn_delete>
    set_errno(ENFILE);
 800cf86:	4b08      	ldr	r3, [pc, #32]	@ (800cfa8 <lwip_socket+0xb8>)
 800cf88:	2217      	movs	r2, #23
 800cf8a:	601a      	str	r2, [r3, #0]
    return -1;
 800cf8c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf90:	e003      	b.n	800cf9a <lwip_socket+0xaa>
  }
  conn->socket = i;
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	693a      	ldr	r2, [r7, #16]
 800cf96:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800cf98:	693b      	ldr	r3, [r7, #16]
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3718      	adds	r7, #24
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}
 800cfa2:	bf00      	nop
 800cfa4:	0800d055 	.word	0x0800d055
 800cfa8:	2000d394 	.word	0x2000d394

0800cfac <lwip_write>:

ssize_t
lwip_write(int s, const void *data, size_t size)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	607a      	str	r2, [r7, #4]
  return lwip_send(s, data, size, 0);
 800cfb8:	2300      	movs	r3, #0
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	68b9      	ldr	r1, [r7, #8]
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	f7ff fe86 	bl	800ccd0 <lwip_send>
 800cfc4:	4603      	mov	r3, r0
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3710      	adds	r7, #16
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}

0800cfce <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800cfce:	b480      	push	{r7}
 800cfd0:	b087      	sub	sp, #28
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	60f8      	str	r0, [r7, #12]
 800cfd6:	60b9      	str	r1, [r7, #8]
 800cfd8:	607a      	str	r2, [r7, #4]
 800cfda:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800cfdc:	2300      	movs	r3, #0
 800cfde:	617b      	str	r3, [r7, #20]
 800cfe0:	e02c      	b.n	800d03c <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	695a      	ldr	r2, [r3, #20]
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	00db      	lsls	r3, r3, #3
 800cfea:	4413      	add	r3, r2
 800cfec:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	68ba      	ldr	r2, [r7, #8]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d11e      	bne.n	800d036 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d009      	beq.n	800d012 <lwip_poll_should_wake+0x44>
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d004:	b29b      	uxth	r3, r3
 800d006:	f003 0301 	and.w	r3, r3, #1
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d001      	beq.n	800d012 <lwip_poll_should_wake+0x44>
        return 1;
 800d00e:	2301      	movs	r3, #1
 800d010:	e01a      	b.n	800d048 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d009      	beq.n	800d02c <lwip_poll_should_wake+0x5e>
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d01e:	b29b      	uxth	r3, r3
 800d020:	f003 0302 	and.w	r3, r3, #2
 800d024:	2b00      	cmp	r3, #0
 800d026:	d001      	beq.n	800d02c <lwip_poll_should_wake+0x5e>
        return 1;
 800d028:	2301      	movs	r3, #1
 800d02a:	e00d      	b.n	800d048 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800d02c:	6a3b      	ldr	r3, [r7, #32]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d001      	beq.n	800d036 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800d032:	2301      	movs	r3, #1
 800d034:	e008      	b.n	800d048 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	3301      	adds	r3, #1
 800d03a:	617b      	str	r3, [r7, #20]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	699b      	ldr	r3, [r3, #24]
 800d040:	697a      	ldr	r2, [r7, #20]
 800d042:	429a      	cmp	r2, r3
 800d044:	d3cd      	bcc.n	800cfe2 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800d046:	2300      	movs	r3, #0
}
 800d048:	4618      	mov	r0, r3
 800d04a:	371c      	adds	r7, #28
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b08a      	sub	sp, #40	@ 0x28
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	460b      	mov	r3, r1
 800d05e:	70fb      	strb	r3, [r7, #3]
 800d060:	4613      	mov	r3, r2
 800d062:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	f000 80a4 	beq.w	800d1b4 <event_callback+0x160>
    s = conn->socket;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	699b      	ldr	r3, [r3, #24]
 800d070:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 800d072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d074:	2b00      	cmp	r3, #0
 800d076:	da18      	bge.n	800d0aa <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800d078:	f00c f812 	bl	80190a0 <sys_arch_protect>
 800d07c:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	699b      	ldr	r3, [r3, #24]
 800d082:	2b00      	cmp	r3, #0
 800d084:	da0b      	bge.n	800d09e <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800d086:	78fb      	ldrb	r3, [r7, #3]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d104      	bne.n	800d096 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	699b      	ldr	r3, [r3, #24]
 800d090:	1e5a      	subs	r2, r3, #1
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800d096:	69f8      	ldr	r0, [r7, #28]
 800d098:	f00c f810 	bl	80190bc <sys_arch_unprotect>
        return;
 800d09c:	e08d      	b.n	800d1ba <event_callback+0x166>
      }
      s = conn->socket;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	699b      	ldr	r3, [r3, #24]
 800d0a2:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 800d0a4:	69f8      	ldr	r0, [r7, #28]
 800d0a6:	f00c f809 	bl	80190bc <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800d0aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d0ac:	f7fe ffca 	bl	800c044 <get_socket>
 800d0b0:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d07f      	beq.n	800d1b8 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800d0bc:	f00b fff0 	bl	80190a0 <sys_arch_protect>
 800d0c0:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800d0c2:	78fb      	ldrb	r3, [r7, #3]
 800d0c4:	2b04      	cmp	r3, #4
 800d0c6:	d83e      	bhi.n	800d146 <event_callback+0xf2>
 800d0c8:	a201      	add	r2, pc, #4	@ (adr r2, 800d0d0 <event_callback+0x7c>)
 800d0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ce:	bf00      	nop
 800d0d0:	0800d0e5 	.word	0x0800d0e5
 800d0d4:	0800d107 	.word	0x0800d107
 800d0d8:	0800d11f 	.word	0x0800d11f
 800d0dc:	0800d133 	.word	0x0800d133
 800d0e0:	0800d13f 	.word	0x0800d13f
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800d0e4:	69bb      	ldr	r3, [r7, #24]
 800d0e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d0ea:	b29b      	uxth	r3, r3
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	b21a      	sxth	r2, r3
 800d0f2:	69bb      	ldr	r3, [r7, #24]
 800d0f4:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	dd2a      	ble.n	800d156 <event_callback+0x102>
        check_waiters = 0;
 800d100:	2300      	movs	r3, #0
 800d102:	623b      	str	r3, [r7, #32]
      }
      break;
 800d104:	e027      	b.n	800d156 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800d106:	69bb      	ldr	r3, [r7, #24]
 800d108:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	3b01      	subs	r3, #1
 800d110:	b29b      	uxth	r3, r3
 800d112:	b21a      	sxth	r2, r3
 800d114:	69bb      	ldr	r3, [r7, #24]
 800d116:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800d118:	2300      	movs	r3, #0
 800d11a:	623b      	str	r3, [r7, #32]
      break;
 800d11c:	e01c      	b.n	800d158 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	895b      	ldrh	r3, [r3, #10]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d001      	beq.n	800d12a <event_callback+0xd6>
        check_waiters = 0;
 800d126:	2300      	movs	r3, #0
 800d128:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	2201      	movs	r2, #1
 800d12e:	815a      	strh	r2, [r3, #10]
      break;
 800d130:	e012      	b.n	800d158 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800d132:	69bb      	ldr	r3, [r7, #24]
 800d134:	2200      	movs	r2, #0
 800d136:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800d138:	2300      	movs	r3, #0
 800d13a:	623b      	str	r3, [r7, #32]
      break;
 800d13c:	e00c      	b.n	800d158 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800d13e:	69bb      	ldr	r3, [r7, #24]
 800d140:	2201      	movs	r2, #1
 800d142:	819a      	strh	r2, [r3, #12]
      break;
 800d144:	e008      	b.n	800d158 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800d146:	4b1e      	ldr	r3, [pc, #120]	@ (800d1c0 <event_callback+0x16c>)
 800d148:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 800d14c:	491d      	ldr	r1, [pc, #116]	@ (800d1c4 <event_callback+0x170>)
 800d14e:	481e      	ldr	r0, [pc, #120]	@ (800d1c8 <event_callback+0x174>)
 800d150:	f00d f946 	bl	801a3e0 <iprintf>
      break;
 800d154:	e000      	b.n	800d158 <event_callback+0x104>
      break;
 800d156:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800d158:	69bb      	ldr	r3, [r7, #24]
 800d15a:	7b9b      	ldrb	r3, [r3, #14]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d025      	beq.n	800d1ac <event_callback+0x158>
 800d160:	6a3b      	ldr	r3, [r7, #32]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d022      	beq.n	800d1ac <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	bfcc      	ite	gt
 800d170:	2301      	movgt	r3, #1
 800d172:	2300      	movle	r3, #0
 800d174:	b2db      	uxtb	r3, r3
 800d176:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800d178:	69bb      	ldr	r3, [r7, #24]
 800d17a:	895b      	ldrh	r3, [r3, #10]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	bf14      	ite	ne
 800d180:	2301      	movne	r3, #1
 800d182:	2300      	moveq	r3, #0
 800d184:	b2db      	uxtb	r3, r3
 800d186:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	899b      	ldrh	r3, [r3, #12]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	bf14      	ite	ne
 800d190:	2301      	movne	r3, #1
 800d192:	2300      	moveq	r3, #0
 800d194:	b2db      	uxtb	r3, r3
 800d196:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800d198:	69f8      	ldr	r0, [r7, #28]
 800d19a:	f00b ff8f 	bl	80190bc <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	693a      	ldr	r2, [r7, #16]
 800d1a2:	6979      	ldr	r1, [r7, #20]
 800d1a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d1a6:	f000 f811 	bl	800d1cc <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800d1aa:	e006      	b.n	800d1ba <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800d1ac:	69f8      	ldr	r0, [r7, #28]
 800d1ae:	f00b ff85 	bl	80190bc <sys_arch_unprotect>
 800d1b2:	e002      	b.n	800d1ba <event_callback+0x166>
    return;
 800d1b4:	bf00      	nop
 800d1b6:	e000      	b.n	800d1ba <event_callback+0x166>
      return;
 800d1b8:	bf00      	nop
  }
  done_socket(sock);
}
 800d1ba:	3728      	adds	r7, #40	@ 0x28
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	0801e69c 	.word	0x0801e69c
 800d1c4:	0801ea18 	.word	0x0801ea18
 800d1c8:	0801e6f0 	.word	0x0801e6f0

0800d1cc <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b088      	sub	sp, #32
 800d1d0:	af02      	add	r7, sp, #8
 800d1d2:	60f8      	str	r0, [r7, #12]
 800d1d4:	60b9      	str	r1, [r7, #8]
 800d1d6:	607a      	str	r2, [r7, #4]
 800d1d8:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800d1da:	4b42      	ldr	r3, [pc, #264]	@ (800d2e4 <select_check_waiters+0x118>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	617b      	str	r3, [r7, #20]
 800d1e0:	e078      	b.n	800d2d4 <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	69db      	ldr	r3, [r3, #28]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d171      	bne.n	800d2ce <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	695b      	ldr	r3, [r3, #20]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d009      	beq.n	800d20a <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	68ba      	ldr	r2, [r7, #8]
 800d1fe:	68f9      	ldr	r1, [r7, #12]
 800d200:	6978      	ldr	r0, [r7, #20]
 800d202:	f7ff fee4 	bl	800cfce <lwip_poll_should_wake>
 800d206:	6138      	str	r0, [r7, #16]
 800d208:	e056      	b.n	800d2b8 <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d017      	beq.n	800d240 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	689b      	ldr	r3, [r3, #8]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d013      	beq.n	800d240 <select_check_waiters+0x74>
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	689a      	ldr	r2, [r3, #8]
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	da00      	bge.n	800d224 <select_check_waiters+0x58>
 800d222:	331f      	adds	r3, #31
 800d224:	115b      	asrs	r3, r3, #5
 800d226:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f003 031f 	and.w	r3, r3, #31
 800d230:	fa22 f303 	lsr.w	r3, r2, r3
 800d234:	f003 0301 	and.w	r3, r3, #1
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d001      	beq.n	800d240 <select_check_waiters+0x74>
            do_signal = 1;
 800d23c:	2301      	movs	r3, #1
 800d23e:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d01a      	beq.n	800d27c <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d117      	bne.n	800d27c <select_check_waiters+0xb0>
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d013      	beq.n	800d27c <select_check_waiters+0xb0>
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	68da      	ldr	r2, [r3, #12]
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	da00      	bge.n	800d260 <select_check_waiters+0x94>
 800d25e:	331f      	adds	r3, #31
 800d260:	115b      	asrs	r3, r3, #5
 800d262:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	f003 031f 	and.w	r3, r3, #31
 800d26c:	fa22 f303 	lsr.w	r3, r2, r3
 800d270:	f003 0301 	and.w	r3, r3, #1
 800d274:	2b00      	cmp	r3, #0
 800d276:	d001      	beq.n	800d27c <select_check_waiters+0xb0>
            do_signal = 1;
 800d278:	2301      	movs	r3, #1
 800d27a:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d01a      	beq.n	800d2b8 <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d117      	bne.n	800d2b8 <select_check_waiters+0xec>
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	691b      	ldr	r3, [r3, #16]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d013      	beq.n	800d2b8 <select_check_waiters+0xec>
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	691a      	ldr	r2, [r3, #16]
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2b00      	cmp	r3, #0
 800d298:	da00      	bge.n	800d29c <select_check_waiters+0xd0>
 800d29a:	331f      	adds	r3, #31
 800d29c:	115b      	asrs	r3, r3, #5
 800d29e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	f003 031f 	and.w	r3, r3, #31
 800d2a8:	fa22 f303 	lsr.w	r3, r2, r3
 800d2ac:	f003 0301 	and.w	r3, r3, #1
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d001      	beq.n	800d2b8 <select_check_waiters+0xec>
            do_signal = 1;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d007      	beq.n	800d2ce <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	2201      	movs	r2, #1
 800d2c2:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	3320      	adds	r3, #32
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f00b fe53 	bl	8018f74 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	617b      	str	r3, [r7, #20]
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d183      	bne.n	800d1e2 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800d2da:	bf00      	nop
 800d2dc:	bf00      	nop
 800d2de:	3718      	adds	r7, #24
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	20009978 	.word	0x20009978

0800d2e8 <lwip_sockopt_to_ipopt>:
}
#endif  /* LWIP_TCPIP_CORE_LOCKING */

static int
lwip_sockopt_to_ipopt(int optname)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  /* Map SO_* values to our internal SOF_* values
   * We should not rely on #defines in socket.h
   * being in sync with ip.h.
   */
  switch (optname) {
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2b20      	cmp	r3, #32
 800d2f4:	d009      	beq.n	800d30a <lwip_sockopt_to_ipopt+0x22>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2b20      	cmp	r3, #32
 800d2fa:	dc0c      	bgt.n	800d316 <lwip_sockopt_to_ipopt+0x2e>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2b04      	cmp	r3, #4
 800d300:	d007      	beq.n	800d312 <lwip_sockopt_to_ipopt+0x2a>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2b08      	cmp	r3, #8
 800d306:	d002      	beq.n	800d30e <lwip_sockopt_to_ipopt+0x26>
 800d308:	e005      	b.n	800d316 <lwip_sockopt_to_ipopt+0x2e>
  case SO_BROADCAST:
    return SOF_BROADCAST;
 800d30a:	2320      	movs	r3, #32
 800d30c:	e00b      	b.n	800d326 <lwip_sockopt_to_ipopt+0x3e>
  case SO_KEEPALIVE:
    return SOF_KEEPALIVE;
 800d30e:	2308      	movs	r3, #8
 800d310:	e009      	b.n	800d326 <lwip_sockopt_to_ipopt+0x3e>
  case SO_REUSEADDR:
    return SOF_REUSEADDR;
 800d312:	2304      	movs	r3, #4
 800d314:	e007      	b.n	800d326 <lwip_sockopt_to_ipopt+0x3e>
  default:
    LWIP_ASSERT("Unknown socket option", 0);
 800d316:	4b06      	ldr	r3, [pc, #24]	@ (800d330 <lwip_sockopt_to_ipopt+0x48>)
 800d318:	f640 3239 	movw	r2, #2873	@ 0xb39
 800d31c:	4905      	ldr	r1, [pc, #20]	@ (800d334 <lwip_sockopt_to_ipopt+0x4c>)
 800d31e:	4806      	ldr	r0, [pc, #24]	@ (800d338 <lwip_sockopt_to_ipopt+0x50>)
 800d320:	f00d f85e 	bl	801a3e0 <iprintf>
    return 0;
 800d324:	2300      	movs	r3, #0
  }
}
 800d326:	4618      	mov	r0, r3
 800d328:	3708      	adds	r7, #8
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	bf00      	nop
 800d330:	0801e69c 	.word	0x0801e69c
 800d334:	0801ea28 	.word	0x0801ea28
 800d338:	0801e6f0 	.word	0x0801e6f0

0800d33c <lwip_setsockopt>:
  return err;
}

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b08a      	sub	sp, #40	@ 0x28
 800d340:	af02      	add	r7, sp, #8
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	607a      	str	r2, [r7, #4]
 800d348:	603b      	str	r3, [r7, #0]
  int err = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = get_socket(s);
 800d34e:	68f8      	ldr	r0, [r7, #12]
 800d350:	f7fe fe78 	bl	800c044 <get_socket>
 800d354:	61b8      	str	r0, [r7, #24]
#if !LWIP_TCPIP_CORE_LOCKING
  err_t cberr;
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d102      	bne.n	800d362 <lwip_setsockopt+0x26>
    return -1;
 800d35c:	f04f 33ff 	mov.w	r3, #4294967295
 800d360:	e02b      	b.n	800d3ba <lwip_setsockopt+0x7e>
  }

  if (NULL == optval) {
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d10a      	bne.n	800d37e <lwip_setsockopt+0x42>
    sock_set_errno(sock, EFAULT);
 800d368:	230e      	movs	r3, #14
 800d36a:	613b      	str	r3, [r7, #16]
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d002      	beq.n	800d378 <lwip_setsockopt+0x3c>
 800d372:	4a14      	ldr	r2, [pc, #80]	@ (800d3c4 <lwip_setsockopt+0x88>)
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800d378:	f04f 33ff 	mov.w	r3, #4294967295
 800d37c:	e01d      	b.n	800d3ba <lwip_setsockopt+0x7e>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
 800d37e:	4812      	ldr	r0, [pc, #72]	@ (800d3c8 <lwip_setsockopt+0x8c>)
 800d380:	f00b fe52 	bl	8019028 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
 800d384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d386:	9300      	str	r3, [sp, #0]
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	68b9      	ldr	r1, [r7, #8]
 800d38e:	68f8      	ldr	r0, [r7, #12]
 800d390:	f000 f81c 	bl	800d3cc <lwip_setsockopt_impl>
 800d394:	61f8      	str	r0, [r7, #28]
  UNLOCK_TCPIP_CORE();
 800d396:	480c      	ldr	r0, [pc, #48]	@ (800d3c8 <lwip_setsockopt+0x8c>)
 800d398:	f00b fe55 	bl	8019046 <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	617b      	str	r3, [r7, #20]
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d002      	beq.n	800d3ac <lwip_setsockopt+0x70>
 800d3a6:	4a07      	ldr	r2, [pc, #28]	@ (800d3c4 <lwip_setsockopt+0x88>)
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return err ? -1 : 0;
 800d3ac:	69fb      	ldr	r3, [r7, #28]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d002      	beq.n	800d3b8 <lwip_setsockopt+0x7c>
 800d3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d3b6:	e000      	b.n	800d3ba <lwip_setsockopt+0x7e>
 800d3b8:	2300      	movs	r3, #0
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3720      	adds	r7, #32
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	2000d394 	.word	0x2000d394
 800d3c8:	20009988 	.word	0x20009988

0800d3cc <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static int
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b088      	sub	sp, #32
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	60f8      	str	r0, [r7, #12]
 800d3d4:	60b9      	str	r1, [r7, #8]
 800d3d6:	607a      	str	r2, [r7, #4]
 800d3d8:	603b      	str	r3, [r7, #0]
  int err = 0;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = tryget_socket(s);
 800d3de:	68f8      	ldr	r0, [r7, #12]
 800d3e0:	f7fe fe19 	bl	800c016 <tryget_socket>
 800d3e4:	6178      	str	r0, [r7, #20]
  if (!sock) {
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d101      	bne.n	800d3f0 <lwip_setsockopt_impl+0x24>
    return EBADF;
 800d3ec:	2309      	movs	r3, #9
 800d3ee:	e187      	b.n	800d700 <lwip_setsockopt_impl+0x334>
  if (LWIP_HOOK_SOCKETS_SETSOCKOPT(s, sock, level, optname, optval, optlen, &err)) {
    return err;
  }
#endif

  switch (level) {
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d015      	beq.n	800d426 <lwip_setsockopt_impl+0x5a>
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d400:	f280 817a 	bge.w	800d6f8 <lwip_setsockopt_impl+0x32c>
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	2bff      	cmp	r3, #255	@ 0xff
 800d408:	f000 8172 	beq.w	800d6f0 <lwip_setsockopt_impl+0x324>
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	2bff      	cmp	r3, #255	@ 0xff
 800d410:	f300 8172 	bgt.w	800d6f8 <lwip_setsockopt_impl+0x32c>
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	2b00      	cmp	r3, #0
 800d418:	f000 80e0 	beq.w	800d5dc <lwip_setsockopt_impl+0x210>
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	2b06      	cmp	r3, #6
 800d420:	f000 8116 	beq.w	800d650 <lwip_setsockopt_impl+0x284>
 800d424:	e168      	b.n	800d6f8 <lwip_setsockopt_impl+0x32c>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f241 020b 	movw	r2, #4107	@ 0x100b
 800d42c:	4293      	cmp	r3, r2
 800d42e:	f000 8091 	beq.w	800d554 <lwip_setsockopt_impl+0x188>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f241 020b 	movw	r2, #4107	@ 0x100b
 800d438:	4293      	cmp	r3, r2
 800d43a:	f300 80cb 	bgt.w	800d5d4 <lwip_setsockopt_impl+0x208>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f241 020a 	movw	r2, #4106	@ 0x100a
 800d444:	4293      	cmp	r3, r2
 800d446:	d050      	beq.n	800d4ea <lwip_setsockopt_impl+0x11e>
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f241 020a 	movw	r2, #4106	@ 0x100a
 800d44e:	4293      	cmp	r3, r2
 800d450:	f300 80c0 	bgt.w	800d5d4 <lwip_setsockopt_impl+0x208>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2b08      	cmp	r3, #8
 800d458:	d003      	beq.n	800d462 <lwip_setsockopt_impl+0x96>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2b20      	cmp	r3, #32
 800d45e:	f040 80b9 	bne.w	800d5d4 <lwip_setsockopt_impl+0x208>
        case SO_BROADCAST:
        case SO_KEEPALIVE:
#if SO_REUSE
        case SO_REUSEADDR:
#endif /* SO_REUSE */
          if ((optname == SO_BROADCAST) &&
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2b20      	cmp	r3, #32
 800d466:	d108      	bne.n	800d47a <lwip_setsockopt_impl+0xae>
              (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP)) {
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if ((optname == SO_BROADCAST) &&
 800d472:	2b20      	cmp	r3, #32
 800d474:	d001      	beq.n	800d47a <lwip_setsockopt_impl+0xae>
            done_socket(sock);
            return ENOPROTOOPT;
 800d476:	235c      	movs	r3, #92	@ 0x5c
 800d478:	e142      	b.n	800d700 <lwip_setsockopt_impl+0x334>
          }

          optname = lwip_sockopt_to_ipopt(optname);
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f7ff ff34 	bl	800d2e8 <lwip_sockopt_to_ipopt>
 800d480:	6078      	str	r0, [r7, #4]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800d482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d484:	2b03      	cmp	r3, #3
 800d486:	d801      	bhi.n	800d48c <lwip_setsockopt_impl+0xc0>
 800d488:	2316      	movs	r3, #22
 800d48a:	e139      	b.n	800d700 <lwip_setsockopt_impl+0x334>
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d004      	beq.n	800d49e <lwip_setsockopt_impl+0xd2>
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d101      	bne.n	800d4a2 <lwip_setsockopt_impl+0xd6>
 800d49e:	2316      	movs	r3, #22
 800d4a0:	e12e      	b.n	800d700 <lwip_setsockopt_impl+0x334>
          if (*(const int *)optval) {
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d00e      	beq.n	800d4c8 <lwip_setsockopt_impl+0xfc>
            ip_set_option(sock->conn->pcb.ip, optname);
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	7a5b      	ldrb	r3, [r3, #9]
 800d4b2:	b25a      	sxtb	r2, r3
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	b25b      	sxtb	r3, r3
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	b25a      	sxtb	r2, r3
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	b2d2      	uxtb	r2, r2
 800d4c4:	725a      	strb	r2, [r3, #9]
          } else {
            ip_reset_option(sock->conn->pcb.ip, optname);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                                      s, optname, (*(const int *)optval ? "on" : "off")));
          break;
 800d4c6:	e088      	b.n	800d5da <lwip_setsockopt_impl+0x20e>
            ip_reset_option(sock->conn->pcb.ip, optname);
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	685b      	ldr	r3, [r3, #4]
 800d4ce:	7a5b      	ldrb	r3, [r3, #9]
 800d4d0:	b25a      	sxtb	r2, r3
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	b25b      	sxtb	r3, r3
 800d4d6:	43db      	mvns	r3, r3
 800d4d8:	b25b      	sxtb	r3, r3
 800d4da:	4013      	ands	r3, r2
 800d4dc:	b25a      	sxtb	r2, r3
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	b2d2      	uxtb	r2, r2
 800d4e6:	725a      	strb	r2, [r3, #9]
          break;
 800d4e8:	e077      	b.n	800d5da <lwip_setsockopt_impl+0x20e>
        }
        break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
        case SO_NO_CHECK:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
 800d4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ec:	2b03      	cmp	r3, #3
 800d4ee:	d801      	bhi.n	800d4f4 <lwip_setsockopt_impl+0x128>
 800d4f0:	2316      	movs	r3, #22
 800d4f2:	e105      	b.n	800d700 <lwip_setsockopt_impl+0x334>
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d004      	beq.n	800d506 <lwip_setsockopt_impl+0x13a>
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d101      	bne.n	800d50a <lwip_setsockopt_impl+0x13e>
 800d506:	2316      	movs	r3, #22
 800d508:	e0fa      	b.n	800d700 <lwip_setsockopt_impl+0x334>
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d514:	2b20      	cmp	r3, #32
 800d516:	d001      	beq.n	800d51c <lwip_setsockopt_impl+0x150>
 800d518:	235c      	movs	r3, #92	@ 0x5c
 800d51a:	e0f1      	b.n	800d700 <lwip_setsockopt_impl+0x334>
            /* this flag is only available for UDP, not for UDP lite */
            done_socket(sock);
            return EAFNOSUPPORT;
          }
#endif /* LWIP_UDPLITE */
          if (*(const int *)optval) {
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d00b      	beq.n	800d53c <lwip_setsockopt_impl+0x170>
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	7c1a      	ldrb	r2, [r3, #16]
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	f042 0201 	orr.w	r2, r2, #1
 800d536:	b2d2      	uxtb	r2, r2
 800d538:	741a      	strb	r2, [r3, #16]
          } else {
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
          }
          break;
 800d53a:	e04e      	b.n	800d5da <lwip_setsockopt_impl+0x20e>
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	7c1a      	ldrb	r2, [r3, #16]
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	f022 0201 	bic.w	r2, r2, #1
 800d54e:	b2d2      	uxtb	r2, r2
 800d550:	741a      	strb	r2, [r3, #16]
          break;
 800d552:	e042      	b.n	800d5da <lwip_setsockopt_impl+0x20e>
#endif /* LWIP_UDP */
        case SO_BINDTODEVICE: {
          const struct ifreq *iface;
          struct netif *n = NULL;
 800d554:	2300      	movs	r3, #0
 800d556:	61bb      	str	r3, [r7, #24]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, struct ifreq);
 800d558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d55a:	2b05      	cmp	r3, #5
 800d55c:	d801      	bhi.n	800d562 <lwip_setsockopt_impl+0x196>
 800d55e:	2316      	movs	r3, #22
 800d560:	e0ce      	b.n	800d700 <lwip_setsockopt_impl+0x334>
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d101      	bne.n	800d56e <lwip_setsockopt_impl+0x1a2>
 800d56a:	2316      	movs	r3, #22
 800d56c:	e0c8      	b.n	800d700 <lwip_setsockopt_impl+0x334>

          iface = (const struct ifreq *)optval;
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	613b      	str	r3, [r7, #16]
          if (iface->ifr_name[0] != 0) {
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d009      	beq.n	800d58e <lwip_setsockopt_impl+0x1c2>
            n = netif_find(iface->ifr_name);
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	4618      	mov	r0, r3
 800d57e:	f001 fb0b 	bl	800eb98 <netif_find>
 800d582:	61b8      	str	r0, [r7, #24]
            if (n == NULL) {
 800d584:	69bb      	ldr	r3, [r7, #24]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d101      	bne.n	800d58e <lwip_setsockopt_impl+0x1c2>
              done_socket(sock);
              return ENODEV;
 800d58a:	2313      	movs	r3, #19
 800d58c:	e0b8      	b.n	800d700 <lwip_setsockopt_impl+0x334>
            }
          }

          switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d598:	2b10      	cmp	r3, #16
 800d59a:	d002      	beq.n	800d5a2 <lwip_setsockopt_impl+0x1d6>
 800d59c:	2b20      	cmp	r3, #32
 800d59e:	d008      	beq.n	800d5b2 <lwip_setsockopt_impl+0x1e6>
 800d5a0:	e00f      	b.n	800d5c2 <lwip_setsockopt_impl+0x1f6>
#if LWIP_TCP
            case NETCONN_TCP:
              tcp_bind_netif(sock->conn->pcb.tcp, n);
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	69b9      	ldr	r1, [r7, #24]
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f002 fd6a 	bl	8010084 <tcp_bind_netif>
              break;
 800d5b0:	e00f      	b.n	800d5d2 <lwip_setsockopt_impl+0x206>
#endif
#if LWIP_UDP
            case NETCONN_UDP:
              udp_bind_netif(sock->conn->pcb.udp, n);
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	685b      	ldr	r3, [r3, #4]
 800d5b8:	69b9      	ldr	r1, [r7, #24]
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f008 ffb2 	bl	8016524 <udp_bind_netif>
              break;
 800d5c0:	e007      	b.n	800d5d2 <lwip_setsockopt_impl+0x206>
            case NETCONN_RAW:
              raw_bind_netif(sock->conn->pcb.raw, n);
              break;
#endif
            default:
              LWIP_ASSERT("Unhandled netconn type in SO_BINDTODEVICE", 0);
 800d5c2:	4b51      	ldr	r3, [pc, #324]	@ (800d708 <lwip_setsockopt_impl+0x33c>)
 800d5c4:	f640 527d 	movw	r2, #3453	@ 0xd7d
 800d5c8:	4950      	ldr	r1, [pc, #320]	@ (800d70c <lwip_setsockopt_impl+0x340>)
 800d5ca:	4851      	ldr	r0, [pc, #324]	@ (800d710 <lwip_setsockopt_impl+0x344>)
 800d5cc:	f00c ff08 	bl	801a3e0 <iprintf>
              break;
 800d5d0:	bf00      	nop
          }
        }
        break;
 800d5d2:	e002      	b.n	800d5da <lwip_setsockopt_impl+0x20e>
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800d5d4:	235c      	movs	r3, #92	@ 0x5c
 800d5d6:	61fb      	str	r3, [r7, #28]
          break;
 800d5d8:	bf00      	nop
      }  /* switch (optname) */
      break;
 800d5da:	e090      	b.n	800d6fe <lwip_setsockopt_impl+0x332>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d01a      	beq.n	800d618 <lwip_setsockopt_impl+0x24c>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2b02      	cmp	r3, #2
 800d5e6:	d12f      	bne.n	800d648 <lwip_setsockopt_impl+0x27c>

    /* Level: IPPROTO_IP */
    case IPPROTO_IP:
      switch (optname) {
        case IP_TTL:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800d5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ea:	2b03      	cmp	r3, #3
 800d5ec:	d801      	bhi.n	800d5f2 <lwip_setsockopt_impl+0x226>
 800d5ee:	2316      	movs	r3, #22
 800d5f0:	e086      	b.n	800d700 <lwip_setsockopt_impl+0x334>
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d004      	beq.n	800d604 <lwip_setsockopt_impl+0x238>
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d101      	bne.n	800d608 <lwip_setsockopt_impl+0x23c>
 800d604:	2316      	movs	r3, #22
 800d606:	e07b      	b.n	800d700 <lwip_setsockopt_impl+0x334>
          sock->conn->pcb.ip->ttl = (u8_t)(*(const int *)optval);
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	b2d2      	uxtb	r2, r2
 800d614:	72da      	strb	r2, [r3, #11]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                                      s, sock->conn->pcb.ip->ttl));
          break;
 800d616:	e01a      	b.n	800d64e <lwip_setsockopt_impl+0x282>
        case IP_TOS:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800d618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d61a:	2b03      	cmp	r3, #3
 800d61c:	d801      	bhi.n	800d622 <lwip_setsockopt_impl+0x256>
 800d61e:	2316      	movs	r3, #22
 800d620:	e06e      	b.n	800d700 <lwip_setsockopt_impl+0x334>
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d004      	beq.n	800d634 <lwip_setsockopt_impl+0x268>
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d101      	bne.n	800d638 <lwip_setsockopt_impl+0x26c>
 800d634:	2316      	movs	r3, #22
 800d636:	e063      	b.n	800d700 <lwip_setsockopt_impl+0x334>
          sock->conn->pcb.ip->tos = (u8_t)(*(const int *)optval);
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	681a      	ldr	r2, [r3, #0]
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	b2d2      	uxtb	r2, r2
 800d644:	729a      	strb	r2, [r3, #10]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                                      s, sock->conn->pcb.ip->tos));
          break;
 800d646:	e002      	b.n	800d64e <lwip_setsockopt_impl+0x282>
        break;
#endif /* LWIP_IGMP */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800d648:	235c      	movs	r3, #92	@ 0x5c
 800d64a:	61fb      	str	r3, [r7, #28]
          break;
 800d64c:	bf00      	nop
      }  /* switch (optname) */
      break;
 800d64e:	e056      	b.n	800d6fe <lwip_setsockopt_impl+0x332>

#if LWIP_TCP
    /* Level: IPPROTO_TCP */
    case IPPROTO_TCP:
      /* Special case: all IPPROTO_TCP option take an int */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
 800d650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d652:	2b03      	cmp	r3, #3
 800d654:	d801      	bhi.n	800d65a <lwip_setsockopt_impl+0x28e>
 800d656:	2316      	movs	r3, #22
 800d658:	e052      	b.n	800d700 <lwip_setsockopt_impl+0x334>
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d004      	beq.n	800d66c <lwip_setsockopt_impl+0x2a0>
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d101      	bne.n	800d670 <lwip_setsockopt_impl+0x2a4>
 800d66c:	2316      	movs	r3, #22
 800d66e:	e047      	b.n	800d700 <lwip_setsockopt_impl+0x334>
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d67a:	2b10      	cmp	r3, #16
 800d67c:	d001      	beq.n	800d682 <lwip_setsockopt_impl+0x2b6>
 800d67e:	235c      	movs	r3, #92	@ 0x5c
 800d680:	e03e      	b.n	800d700 <lwip_setsockopt_impl+0x334>
      if (sock->conn->pcb.tcp->state == LISTEN) {
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	7d1b      	ldrb	r3, [r3, #20]
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d101      	bne.n	800d692 <lwip_setsockopt_impl+0x2c6>
        done_socket(sock);
        return EINVAL;
 800d68e:	2316      	movs	r3, #22
 800d690:	e036      	b.n	800d700 <lwip_setsockopt_impl+0x334>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2b01      	cmp	r3, #1
 800d696:	d003      	beq.n	800d6a0 <lwip_setsockopt_impl+0x2d4>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2b02      	cmp	r3, #2
 800d69c:	d01c      	beq.n	800d6d8 <lwip_setsockopt_impl+0x30c>
 800d69e:	e023      	b.n	800d6e8 <lwip_setsockopt_impl+0x31c>
      }
      switch (optname) {
        case TCP_NODELAY:
          if (*(const int *)optval) {
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d00b      	beq.n	800d6c0 <lwip_setsockopt_impl+0x2f4>
            tcp_nagle_disable(sock->conn->pcb.tcp);
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	8b5a      	ldrh	r2, [r3, #26]
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d6ba:	b292      	uxth	r2, r2
 800d6bc:	835a      	strh	r2, [r3, #26]
          } else {
            tcp_nagle_enable(sock->conn->pcb.tcp);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                                      s, (*(const int *)optval) ? "on" : "off") );
          break;
 800d6be:	e016      	b.n	800d6ee <lwip_setsockopt_impl+0x322>
            tcp_nagle_enable(sock->conn->pcb.tcp);
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	8b5a      	ldrh	r2, [r3, #26]
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d6d2:	b292      	uxth	r2, r2
 800d6d4:	835a      	strh	r2, [r3, #26]
          break;
 800d6d6:	e00a      	b.n	800d6ee <lwip_setsockopt_impl+0x322>
        case TCP_KEEPALIVE:
          sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int *)optval);
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                                      s, sock->conn->pcb.tcp->keep_idle));
          break;
 800d6e6:	e002      	b.n	800d6ee <lwip_setsockopt_impl+0x322>
          break;
#endif /* LWIP_TCP_KEEPALIVE */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800d6e8:	235c      	movs	r3, #92	@ 0x5c
 800d6ea:	61fb      	str	r3, [r7, #28]
          break;
 800d6ec:	bf00      	nop
      }  /* switch (optname) */
      break;
 800d6ee:	e006      	b.n	800d6fe <lwip_setsockopt_impl+0x332>
          break;
#endif /* LWIP_IPV6 && LWIP_RAW */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800d6f0:	235c      	movs	r3, #92	@ 0x5c
 800d6f2:	61fb      	str	r3, [r7, #28]
          break;
 800d6f4:	bf00      	nop
      }  /* switch (optname) */
      break;
 800d6f6:	e002      	b.n	800d6fe <lwip_setsockopt_impl+0x332>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                  s, level, optname));
      err = ENOPROTOOPT;
 800d6f8:	235c      	movs	r3, #92	@ 0x5c
 800d6fa:	61fb      	str	r3, [r7, #28]
      break;
 800d6fc:	bf00      	nop
  }  /* switch (level) */

  done_socket(sock);
  return err;
 800d6fe:	69fb      	ldr	r3, [r7, #28]
}
 800d700:	4618      	mov	r0, r3
 800d702:	3720      	adds	r7, #32
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}
 800d708:	0801e69c 	.word	0x0801e69c
 800d70c:	0801ea40 	.word	0x0801ea40
 800d710:	0801e6f0 	.word	0x0801e6f0

0800d714 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d71e:	f008 fa95 	bl	8015c4c <sys_timeouts_sleeptime>
 800d722:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d72a:	d10b      	bne.n	800d744 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d72c:	4813      	ldr	r0, [pc, #76]	@ (800d77c <tcpip_timeouts_mbox_fetch+0x68>)
 800d72e:	f00b fc8a 	bl	8019046 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d732:	2200      	movs	r2, #0
 800d734:	6839      	ldr	r1, [r7, #0]
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f00b fb60 	bl	8018dfc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d73c:	480f      	ldr	r0, [pc, #60]	@ (800d77c <tcpip_timeouts_mbox_fetch+0x68>)
 800d73e:	f00b fc73 	bl	8019028 <sys_mutex_lock>
    return;
 800d742:	e018      	b.n	800d776 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d102      	bne.n	800d750 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d74a:	f008 fa45 	bl	8015bd8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d74e:	e7e6      	b.n	800d71e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d750:	480a      	ldr	r0, [pc, #40]	@ (800d77c <tcpip_timeouts_mbox_fetch+0x68>)
 800d752:	f00b fc78 	bl	8019046 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d756:	68fa      	ldr	r2, [r7, #12]
 800d758:	6839      	ldr	r1, [r7, #0]
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f00b fb4e 	bl	8018dfc <sys_arch_mbox_fetch>
 800d760:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d762:	4806      	ldr	r0, [pc, #24]	@ (800d77c <tcpip_timeouts_mbox_fetch+0x68>)
 800d764:	f00b fc60 	bl	8019028 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d76e:	d102      	bne.n	800d776 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d770:	f008 fa32 	bl	8015bd8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d774:	e7d3      	b.n	800d71e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d776:	3710      	adds	r7, #16
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	20009988 	.word	0x20009988

0800d780 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b084      	sub	sp, #16
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d788:	4810      	ldr	r0, [pc, #64]	@ (800d7cc <tcpip_thread+0x4c>)
 800d78a:	f00b fc4d 	bl	8019028 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d78e:	4b10      	ldr	r3, [pc, #64]	@ (800d7d0 <tcpip_thread+0x50>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d005      	beq.n	800d7a2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d796:	4b0e      	ldr	r3, [pc, #56]	@ (800d7d0 <tcpip_thread+0x50>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	4a0e      	ldr	r2, [pc, #56]	@ (800d7d4 <tcpip_thread+0x54>)
 800d79c:	6812      	ldr	r2, [r2, #0]
 800d79e:	4610      	mov	r0, r2
 800d7a0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d7a2:	f107 030c 	add.w	r3, r7, #12
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	480b      	ldr	r0, [pc, #44]	@ (800d7d8 <tcpip_thread+0x58>)
 800d7aa:	f7ff ffb3 	bl	800d714 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d106      	bne.n	800d7c2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d7b4:	4b09      	ldr	r3, [pc, #36]	@ (800d7dc <tcpip_thread+0x5c>)
 800d7b6:	2291      	movs	r2, #145	@ 0x91
 800d7b8:	4909      	ldr	r1, [pc, #36]	@ (800d7e0 <tcpip_thread+0x60>)
 800d7ba:	480a      	ldr	r0, [pc, #40]	@ (800d7e4 <tcpip_thread+0x64>)
 800d7bc:	f00c fe10 	bl	801a3e0 <iprintf>
      continue;
 800d7c0:	e003      	b.n	800d7ca <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f000 f80f 	bl	800d7e8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d7ca:	e7ea      	b.n	800d7a2 <tcpip_thread+0x22>
 800d7cc:	20009988 	.word	0x20009988
 800d7d0:	2000997c 	.word	0x2000997c
 800d7d4:	20009980 	.word	0x20009980
 800d7d8:	20009984 	.word	0x20009984
 800d7dc:	0801ea6c 	.word	0x0801ea6c
 800d7e0:	0801ea9c 	.word	0x0801ea9c
 800d7e4:	0801eabc 	.word	0x0801eabc

0800d7e8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	2b02      	cmp	r3, #2
 800d7f6:	d026      	beq.n	800d846 <tcpip_thread_handle_msg+0x5e>
 800d7f8:	2b02      	cmp	r3, #2
 800d7fa:	dc2b      	bgt.n	800d854 <tcpip_thread_handle_msg+0x6c>
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d002      	beq.n	800d806 <tcpip_thread_handle_msg+0x1e>
 800d800:	2b01      	cmp	r3, #1
 800d802:	d015      	beq.n	800d830 <tcpip_thread_handle_msg+0x48>
 800d804:	e026      	b.n	800d854 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	68db      	ldr	r3, [r3, #12]
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	6850      	ldr	r0, [r2, #4]
 800d80e:	687a      	ldr	r2, [r7, #4]
 800d810:	6892      	ldr	r2, [r2, #8]
 800d812:	4611      	mov	r1, r2
 800d814:	4798      	blx	r3
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d004      	beq.n	800d826 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	4618      	mov	r0, r3
 800d822:	f001 fd8b 	bl	800f33c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d826:	6879      	ldr	r1, [r7, #4]
 800d828:	2009      	movs	r0, #9
 800d82a:	f000 fe79 	bl	800e520 <memp_free>
      break;
 800d82e:	e018      	b.n	800d862 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	687a      	ldr	r2, [r7, #4]
 800d836:	6892      	ldr	r2, [r2, #8]
 800d838:	4610      	mov	r0, r2
 800d83a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d83c:	6879      	ldr	r1, [r7, #4]
 800d83e:	2008      	movs	r0, #8
 800d840:	f000 fe6e 	bl	800e520 <memp_free>
      break;
 800d844:	e00d      	b.n	800d862 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	687a      	ldr	r2, [r7, #4]
 800d84c:	6892      	ldr	r2, [r2, #8]
 800d84e:	4610      	mov	r0, r2
 800d850:	4798      	blx	r3
      break;
 800d852:	e006      	b.n	800d862 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d854:	4b05      	ldr	r3, [pc, #20]	@ (800d86c <tcpip_thread_handle_msg+0x84>)
 800d856:	22cf      	movs	r2, #207	@ 0xcf
 800d858:	4905      	ldr	r1, [pc, #20]	@ (800d870 <tcpip_thread_handle_msg+0x88>)
 800d85a:	4806      	ldr	r0, [pc, #24]	@ (800d874 <tcpip_thread_handle_msg+0x8c>)
 800d85c:	f00c fdc0 	bl	801a3e0 <iprintf>
      break;
 800d860:	bf00      	nop
  }
}
 800d862:	bf00      	nop
 800d864:	3708      	adds	r7, #8
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	0801ea6c 	.word	0x0801ea6c
 800d870:	0801ea9c 	.word	0x0801ea9c
 800d874:	0801eabc 	.word	0x0801eabc

0800d878 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b086      	sub	sp, #24
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	60f8      	str	r0, [r7, #12]
 800d880:	60b9      	str	r1, [r7, #8]
 800d882:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d884:	481a      	ldr	r0, [pc, #104]	@ (800d8f0 <tcpip_inpkt+0x78>)
 800d886:	f00b fb01 	bl	8018e8c <sys_mbox_valid>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d105      	bne.n	800d89c <tcpip_inpkt+0x24>
 800d890:	4b18      	ldr	r3, [pc, #96]	@ (800d8f4 <tcpip_inpkt+0x7c>)
 800d892:	22fc      	movs	r2, #252	@ 0xfc
 800d894:	4918      	ldr	r1, [pc, #96]	@ (800d8f8 <tcpip_inpkt+0x80>)
 800d896:	4819      	ldr	r0, [pc, #100]	@ (800d8fc <tcpip_inpkt+0x84>)
 800d898:	f00c fda2 	bl	801a3e0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d89c:	2009      	movs	r0, #9
 800d89e:	f000 fdc9 	bl	800e434 <memp_malloc>
 800d8a2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d102      	bne.n	800d8b0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d8aa:	f04f 33ff 	mov.w	r3, #4294967295
 800d8ae:	e01a      	b.n	800d8e6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	68fa      	ldr	r2, [r7, #12]
 800d8ba:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	68ba      	ldr	r2, [r7, #8]
 800d8c0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	687a      	ldr	r2, [r7, #4]
 800d8c6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d8c8:	6979      	ldr	r1, [r7, #20]
 800d8ca:	4809      	ldr	r0, [pc, #36]	@ (800d8f0 <tcpip_inpkt+0x78>)
 800d8cc:	f00b fa7c 	bl	8018dc8 <sys_mbox_trypost>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d006      	beq.n	800d8e4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d8d6:	6979      	ldr	r1, [r7, #20]
 800d8d8:	2009      	movs	r0, #9
 800d8da:	f000 fe21 	bl	800e520 <memp_free>
    return ERR_MEM;
 800d8de:	f04f 33ff 	mov.w	r3, #4294967295
 800d8e2:	e000      	b.n	800d8e6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d8e4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3718      	adds	r7, #24
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	20009984 	.word	0x20009984
 800d8f4:	0801ea6c 	.word	0x0801ea6c
 800d8f8:	0801eae4 	.word	0x0801eae4
 800d8fc:	0801eabc 	.word	0x0801eabc

0800d900 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d910:	f003 0318 	and.w	r3, r3, #24
 800d914:	2b00      	cmp	r3, #0
 800d916:	d006      	beq.n	800d926 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d918:	4a08      	ldr	r2, [pc, #32]	@ (800d93c <tcpip_input+0x3c>)
 800d91a:	6839      	ldr	r1, [r7, #0]
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f7ff ffab 	bl	800d878 <tcpip_inpkt>
 800d922:	4603      	mov	r3, r0
 800d924:	e005      	b.n	800d932 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d926:	4a06      	ldr	r2, [pc, #24]	@ (800d940 <tcpip_input+0x40>)
 800d928:	6839      	ldr	r1, [r7, #0]
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f7ff ffa4 	bl	800d878 <tcpip_inpkt>
 800d930:	4603      	mov	r3, r0
}
 800d932:	4618      	mov	r0, r3
 800d934:	3708      	adds	r7, #8
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	08018bc5 	.word	0x08018bc5
 800d940:	080179ad 	.word	0x080179ad

0800d944 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d94e:	4819      	ldr	r0, [pc, #100]	@ (800d9b4 <tcpip_try_callback+0x70>)
 800d950:	f00b fa9c 	bl	8018e8c <sys_mbox_valid>
 800d954:	4603      	mov	r3, r0
 800d956:	2b00      	cmp	r3, #0
 800d958:	d106      	bne.n	800d968 <tcpip_try_callback+0x24>
 800d95a:	4b17      	ldr	r3, [pc, #92]	@ (800d9b8 <tcpip_try_callback+0x74>)
 800d95c:	f240 125d 	movw	r2, #349	@ 0x15d
 800d960:	4916      	ldr	r1, [pc, #88]	@ (800d9bc <tcpip_try_callback+0x78>)
 800d962:	4817      	ldr	r0, [pc, #92]	@ (800d9c0 <tcpip_try_callback+0x7c>)
 800d964:	f00c fd3c 	bl	801a3e0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d968:	2008      	movs	r0, #8
 800d96a:	f000 fd63 	bl	800e434 <memp_malloc>
 800d96e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d102      	bne.n	800d97c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d976:	f04f 33ff 	mov.w	r3, #4294967295
 800d97a:	e017      	b.n	800d9ac <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2201      	movs	r2, #1
 800d980:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	687a      	ldr	r2, [r7, #4]
 800d986:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	683a      	ldr	r2, [r7, #0]
 800d98c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d98e:	68f9      	ldr	r1, [r7, #12]
 800d990:	4808      	ldr	r0, [pc, #32]	@ (800d9b4 <tcpip_try_callback+0x70>)
 800d992:	f00b fa19 	bl	8018dc8 <sys_mbox_trypost>
 800d996:	4603      	mov	r3, r0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d006      	beq.n	800d9aa <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d99c:	68f9      	ldr	r1, [r7, #12]
 800d99e:	2008      	movs	r0, #8
 800d9a0:	f000 fdbe 	bl	800e520 <memp_free>
    return ERR_MEM;
 800d9a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d9a8:	e000      	b.n	800d9ac <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d9aa:	2300      	movs	r3, #0
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3710      	adds	r7, #16
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	20009984 	.word	0x20009984
 800d9b8:	0801ea6c 	.word	0x0801ea6c
 800d9bc:	0801eae4 	.word	0x0801eae4
 800d9c0:	0801eabc 	.word	0x0801eabc

0800d9c4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b084      	sub	sp, #16
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800d9d0:	4806      	ldr	r0, [pc, #24]	@ (800d9ec <tcpip_send_msg_wait_sem+0x28>)
 800d9d2:	f00b fb29 	bl	8019028 <sys_mutex_lock>
  fn(apimsg);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	68b8      	ldr	r0, [r7, #8]
 800d9da:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800d9dc:	4803      	ldr	r0, [pc, #12]	@ (800d9ec <tcpip_send_msg_wait_sem+0x28>)
 800d9de:	f00b fb32 	bl	8019046 <sys_mutex_unlock>
  return ERR_OK;
 800d9e2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3710      	adds	r7, #16
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	20009988 	.word	0x20009988

0800d9f0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b084      	sub	sp, #16
 800d9f4:	af02      	add	r7, sp, #8
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d9fa:	f000 f871 	bl	800dae0 <lwip_init>

  tcpip_init_done = initfunc;
 800d9fe:	4a17      	ldr	r2, [pc, #92]	@ (800da5c <tcpip_init+0x6c>)
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800da04:	4a16      	ldr	r2, [pc, #88]	@ (800da60 <tcpip_init+0x70>)
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800da0a:	2106      	movs	r1, #6
 800da0c:	4815      	ldr	r0, [pc, #84]	@ (800da64 <tcpip_init+0x74>)
 800da0e:	f00b f9af 	bl	8018d70 <sys_mbox_new>
 800da12:	4603      	mov	r3, r0
 800da14:	2b00      	cmp	r3, #0
 800da16:	d006      	beq.n	800da26 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800da18:	4b13      	ldr	r3, [pc, #76]	@ (800da68 <tcpip_init+0x78>)
 800da1a:	f240 2261 	movw	r2, #609	@ 0x261
 800da1e:	4913      	ldr	r1, [pc, #76]	@ (800da6c <tcpip_init+0x7c>)
 800da20:	4813      	ldr	r0, [pc, #76]	@ (800da70 <tcpip_init+0x80>)
 800da22:	f00c fcdd 	bl	801a3e0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800da26:	4813      	ldr	r0, [pc, #76]	@ (800da74 <tcpip_init+0x84>)
 800da28:	f00b fae8 	bl	8018ffc <sys_mutex_new>
 800da2c:	4603      	mov	r3, r0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d006      	beq.n	800da40 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800da32:	4b0d      	ldr	r3, [pc, #52]	@ (800da68 <tcpip_init+0x78>)
 800da34:	f240 2265 	movw	r2, #613	@ 0x265
 800da38:	490f      	ldr	r1, [pc, #60]	@ (800da78 <tcpip_init+0x88>)
 800da3a:	480d      	ldr	r0, [pc, #52]	@ (800da70 <tcpip_init+0x80>)
 800da3c:	f00c fcd0 	bl	801a3e0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800da40:	2318      	movs	r3, #24
 800da42:	9300      	str	r3, [sp, #0]
 800da44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da48:	2200      	movs	r2, #0
 800da4a:	490c      	ldr	r1, [pc, #48]	@ (800da7c <tcpip_init+0x8c>)
 800da4c:	480c      	ldr	r0, [pc, #48]	@ (800da80 <tcpip_init+0x90>)
 800da4e:	f00b fb07 	bl	8019060 <sys_thread_new>
}
 800da52:	bf00      	nop
 800da54:	3708      	adds	r7, #8
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	2000997c 	.word	0x2000997c
 800da60:	20009980 	.word	0x20009980
 800da64:	20009984 	.word	0x20009984
 800da68:	0801ea6c 	.word	0x0801ea6c
 800da6c:	0801eaf4 	.word	0x0801eaf4
 800da70:	0801eabc 	.word	0x0801eabc
 800da74:	20009988 	.word	0x20009988
 800da78:	0801eb18 	.word	0x0801eb18
 800da7c:	0800d781 	.word	0x0800d781
 800da80:	0801eb3c 	.word	0x0801eb3c

0800da84 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800da84:	b480      	push	{r7}
 800da86:	b083      	sub	sp, #12
 800da88:	af00      	add	r7, sp, #0
 800da8a:	4603      	mov	r3, r0
 800da8c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800da8e:	88fb      	ldrh	r3, [r7, #6]
 800da90:	021b      	lsls	r3, r3, #8
 800da92:	b21a      	sxth	r2, r3
 800da94:	88fb      	ldrh	r3, [r7, #6]
 800da96:	0a1b      	lsrs	r3, r3, #8
 800da98:	b29b      	uxth	r3, r3
 800da9a:	b21b      	sxth	r3, r3
 800da9c:	4313      	orrs	r3, r2
 800da9e:	b21b      	sxth	r3, r3
 800daa0:	b29b      	uxth	r3, r3
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	370c      	adds	r7, #12
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr

0800daae <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800daae:	b480      	push	{r7}
 800dab0:	b083      	sub	sp, #12
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	061a      	lsls	r2, r3, #24
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	021b      	lsls	r3, r3, #8
 800dabe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dac2:	431a      	orrs	r2, r3
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	0a1b      	lsrs	r3, r3, #8
 800dac8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dacc:	431a      	orrs	r2, r3
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	0e1b      	lsrs	r3, r3, #24
 800dad2:	4313      	orrs	r3, r2
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	370c      	adds	r7, #12
 800dad8:	46bd      	mov	sp, r7
 800dada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dade:	4770      	bx	lr

0800dae0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800dae6:	2300      	movs	r3, #0
 800dae8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800daea:	f00b fa7b 	bl	8018fe4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800daee:	f000 f8d5 	bl	800dc9c <mem_init>
  memp_init();
 800daf2:	f000 fc31 	bl	800e358 <memp_init>
  pbuf_init();
  netif_init();
 800daf6:	f000 fd3d 	bl	800e574 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800dafa:	f008 f8df 	bl	8015cbc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800dafe:	f001 fec7 	bl	800f890 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800db02:	f008 f821 	bl	8015b48 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800db06:	bf00      	nop
 800db08:	3708      	adds	r7, #8
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
	...

0800db10 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
 800db16:	4603      	mov	r3, r0
 800db18:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800db1a:	4b05      	ldr	r3, [pc, #20]	@ (800db30 <ptr_to_mem+0x20>)
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	88fb      	ldrh	r3, [r7, #6]
 800db20:	4413      	add	r3, r2
}
 800db22:	4618      	mov	r0, r3
 800db24:	370c      	adds	r7, #12
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop
 800db30:	20009ff8 	.word	0x20009ff8

0800db34 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800db34:	b480      	push	{r7}
 800db36:	b083      	sub	sp, #12
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800db3c:	4b05      	ldr	r3, [pc, #20]	@ (800db54 <mem_to_ptr+0x20>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	687a      	ldr	r2, [r7, #4]
 800db42:	1ad3      	subs	r3, r2, r3
 800db44:	b29b      	uxth	r3, r3
}
 800db46:	4618      	mov	r0, r3
 800db48:	370c      	adds	r7, #12
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr
 800db52:	bf00      	nop
 800db54:	20009ff8 	.word	0x20009ff8

0800db58 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800db58:	b590      	push	{r4, r7, lr}
 800db5a:	b085      	sub	sp, #20
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800db60:	4b45      	ldr	r3, [pc, #276]	@ (800dc78 <plug_holes+0x120>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	687a      	ldr	r2, [r7, #4]
 800db66:	429a      	cmp	r2, r3
 800db68:	d206      	bcs.n	800db78 <plug_holes+0x20>
 800db6a:	4b44      	ldr	r3, [pc, #272]	@ (800dc7c <plug_holes+0x124>)
 800db6c:	f240 12df 	movw	r2, #479	@ 0x1df
 800db70:	4943      	ldr	r1, [pc, #268]	@ (800dc80 <plug_holes+0x128>)
 800db72:	4844      	ldr	r0, [pc, #272]	@ (800dc84 <plug_holes+0x12c>)
 800db74:	f00c fc34 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800db78:	4b43      	ldr	r3, [pc, #268]	@ (800dc88 <plug_holes+0x130>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	687a      	ldr	r2, [r7, #4]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d306      	bcc.n	800db90 <plug_holes+0x38>
 800db82:	4b3e      	ldr	r3, [pc, #248]	@ (800dc7c <plug_holes+0x124>)
 800db84:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800db88:	4940      	ldr	r1, [pc, #256]	@ (800dc8c <plug_holes+0x134>)
 800db8a:	483e      	ldr	r0, [pc, #248]	@ (800dc84 <plug_holes+0x12c>)
 800db8c:	f00c fc28 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	791b      	ldrb	r3, [r3, #4]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d006      	beq.n	800dba6 <plug_holes+0x4e>
 800db98:	4b38      	ldr	r3, [pc, #224]	@ (800dc7c <plug_holes+0x124>)
 800db9a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800db9e:	493c      	ldr	r1, [pc, #240]	@ (800dc90 <plug_holes+0x138>)
 800dba0:	4838      	ldr	r0, [pc, #224]	@ (800dc84 <plug_holes+0x12c>)
 800dba2:	f00c fc1d 	bl	801a3e0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	881b      	ldrh	r3, [r3, #0]
 800dbaa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800dbae:	d906      	bls.n	800dbbe <plug_holes+0x66>
 800dbb0:	4b32      	ldr	r3, [pc, #200]	@ (800dc7c <plug_holes+0x124>)
 800dbb2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800dbb6:	4937      	ldr	r1, [pc, #220]	@ (800dc94 <plug_holes+0x13c>)
 800dbb8:	4832      	ldr	r0, [pc, #200]	@ (800dc84 <plug_holes+0x12c>)
 800dbba:	f00c fc11 	bl	801a3e0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	881b      	ldrh	r3, [r3, #0]
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7ff ffa4 	bl	800db10 <ptr_to_mem>
 800dbc8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d024      	beq.n	800dc1c <plug_holes+0xc4>
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	791b      	ldrb	r3, [r3, #4]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d120      	bne.n	800dc1c <plug_holes+0xc4>
 800dbda:	4b2b      	ldr	r3, [pc, #172]	@ (800dc88 <plug_holes+0x130>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	68fa      	ldr	r2, [r7, #12]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d01b      	beq.n	800dc1c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800dbe4:	4b2c      	ldr	r3, [pc, #176]	@ (800dc98 <plug_holes+0x140>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	68fa      	ldr	r2, [r7, #12]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d102      	bne.n	800dbf4 <plug_holes+0x9c>
      lfree = mem;
 800dbee:	4a2a      	ldr	r2, [pc, #168]	@ (800dc98 <plug_holes+0x140>)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	881a      	ldrh	r2, [r3, #0]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	881b      	ldrh	r3, [r3, #0]
 800dc00:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800dc04:	d00a      	beq.n	800dc1c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	881b      	ldrh	r3, [r3, #0]
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7ff ff80 	bl	800db10 <ptr_to_mem>
 800dc10:	4604      	mov	r4, r0
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f7ff ff8e 	bl	800db34 <mem_to_ptr>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	885b      	ldrh	r3, [r3, #2]
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7ff ff75 	bl	800db10 <ptr_to_mem>
 800dc26:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800dc28:	68ba      	ldr	r2, [r7, #8]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d01f      	beq.n	800dc70 <plug_holes+0x118>
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	791b      	ldrb	r3, [r3, #4]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d11b      	bne.n	800dc70 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800dc38:	4b17      	ldr	r3, [pc, #92]	@ (800dc98 <plug_holes+0x140>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d102      	bne.n	800dc48 <plug_holes+0xf0>
      lfree = pmem;
 800dc42:	4a15      	ldr	r2, [pc, #84]	@ (800dc98 <plug_holes+0x140>)
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	881a      	ldrh	r2, [r3, #0]
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	881b      	ldrh	r3, [r3, #0]
 800dc54:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800dc58:	d00a      	beq.n	800dc70 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	881b      	ldrh	r3, [r3, #0]
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7ff ff56 	bl	800db10 <ptr_to_mem>
 800dc64:	4604      	mov	r4, r0
 800dc66:	68b8      	ldr	r0, [r7, #8]
 800dc68:	f7ff ff64 	bl	800db34 <mem_to_ptr>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800dc70:	bf00      	nop
 800dc72:	3714      	adds	r7, #20
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd90      	pop	{r4, r7, pc}
 800dc78:	20009ff8 	.word	0x20009ff8
 800dc7c:	0801eb4c 	.word	0x0801eb4c
 800dc80:	0801eb7c 	.word	0x0801eb7c
 800dc84:	0801eb94 	.word	0x0801eb94
 800dc88:	20009ffc 	.word	0x20009ffc
 800dc8c:	0801ebbc 	.word	0x0801ebbc
 800dc90:	0801ebd8 	.word	0x0801ebd8
 800dc94:	0801ebf4 	.word	0x0801ebf4
 800dc98:	2000a004 	.word	0x2000a004

0800dc9c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b082      	sub	sp, #8
 800dca0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800dca2:	4b1f      	ldr	r3, [pc, #124]	@ (800dd20 <mem_init+0x84>)
 800dca4:	3303      	adds	r3, #3
 800dca6:	f023 0303 	bic.w	r3, r3, #3
 800dcaa:	461a      	mov	r2, r3
 800dcac:	4b1d      	ldr	r3, [pc, #116]	@ (800dd24 <mem_init+0x88>)
 800dcae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800dcb0:	4b1c      	ldr	r3, [pc, #112]	@ (800dd24 <mem_init+0x88>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800dcbc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800dcca:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800dcce:	f7ff ff1f 	bl	800db10 <ptr_to_mem>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	4a14      	ldr	r2, [pc, #80]	@ (800dd28 <mem_init+0x8c>)
 800dcd6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800dcd8:	4b13      	ldr	r3, [pc, #76]	@ (800dd28 <mem_init+0x8c>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2201      	movs	r2, #1
 800dcde:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800dce0:	4b11      	ldr	r3, [pc, #68]	@ (800dd28 <mem_init+0x8c>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800dce8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800dcea:	4b0f      	ldr	r3, [pc, #60]	@ (800dd28 <mem_init+0x8c>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800dcf2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800dcf4:	4b0b      	ldr	r3, [pc, #44]	@ (800dd24 <mem_init+0x88>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	4a0c      	ldr	r2, [pc, #48]	@ (800dd2c <mem_init+0x90>)
 800dcfa:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800dcfc:	480c      	ldr	r0, [pc, #48]	@ (800dd30 <mem_init+0x94>)
 800dcfe:	f00b f97d 	bl	8018ffc <sys_mutex_new>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d006      	beq.n	800dd16 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800dd08:	4b0a      	ldr	r3, [pc, #40]	@ (800dd34 <mem_init+0x98>)
 800dd0a:	f240 221f 	movw	r2, #543	@ 0x21f
 800dd0e:	490a      	ldr	r1, [pc, #40]	@ (800dd38 <mem_init+0x9c>)
 800dd10:	480a      	ldr	r0, [pc, #40]	@ (800dd3c <mem_init+0xa0>)
 800dd12:	f00c fb65 	bl	801a3e0 <iprintf>
  }
}
 800dd16:	bf00      	nop
 800dd18:	3708      	adds	r7, #8
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	200099a4 	.word	0x200099a4
 800dd24:	20009ff8 	.word	0x20009ff8
 800dd28:	20009ffc 	.word	0x20009ffc
 800dd2c:	2000a004 	.word	0x2000a004
 800dd30:	2000a000 	.word	0x2000a000
 800dd34:	0801eb4c 	.word	0x0801eb4c
 800dd38:	0801ec20 	.word	0x0801ec20
 800dd3c:	0801eb94 	.word	0x0801eb94

0800dd40 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b086      	sub	sp, #24
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f7ff fef3 	bl	800db34 <mem_to_ptr>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	881b      	ldrh	r3, [r3, #0]
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7ff feda 	bl	800db10 <ptr_to_mem>
 800dd5c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	885b      	ldrh	r3, [r3, #2]
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7ff fed4 	bl	800db10 <ptr_to_mem>
 800dd68:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	881b      	ldrh	r3, [r3, #0]
 800dd6e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800dd72:	d818      	bhi.n	800dda6 <mem_link_valid+0x66>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	885b      	ldrh	r3, [r3, #2]
 800dd78:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800dd7c:	d813      	bhi.n	800dda6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800dd82:	8afa      	ldrh	r2, [r7, #22]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d004      	beq.n	800dd92 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	881b      	ldrh	r3, [r3, #0]
 800dd8c:	8afa      	ldrh	r2, [r7, #22]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d109      	bne.n	800dda6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800dd92:	4b08      	ldr	r3, [pc, #32]	@ (800ddb4 <mem_link_valid+0x74>)
 800dd94:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dd96:	693a      	ldr	r2, [r7, #16]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d006      	beq.n	800ddaa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	885b      	ldrh	r3, [r3, #2]
 800dda0:	8afa      	ldrh	r2, [r7, #22]
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d001      	beq.n	800ddaa <mem_link_valid+0x6a>
    return 0;
 800dda6:	2300      	movs	r3, #0
 800dda8:	e000      	b.n	800ddac <mem_link_valid+0x6c>
  }
  return 1;
 800ddaa:	2301      	movs	r3, #1
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3718      	adds	r7, #24
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	20009ffc 	.word	0x20009ffc

0800ddb8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b088      	sub	sp, #32
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d070      	beq.n	800dea8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f003 0303 	and.w	r3, r3, #3
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d00d      	beq.n	800ddec <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ddd0:	4b37      	ldr	r3, [pc, #220]	@ (800deb0 <mem_free+0xf8>)
 800ddd2:	f240 2273 	movw	r2, #627	@ 0x273
 800ddd6:	4937      	ldr	r1, [pc, #220]	@ (800deb4 <mem_free+0xfc>)
 800ddd8:	4837      	ldr	r0, [pc, #220]	@ (800deb8 <mem_free+0x100>)
 800ddda:	f00c fb01 	bl	801a3e0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ddde:	f00b f95f 	bl	80190a0 <sys_arch_protect>
 800dde2:	60f8      	str	r0, [r7, #12]
 800dde4:	68f8      	ldr	r0, [r7, #12]
 800dde6:	f00b f969 	bl	80190bc <sys_arch_unprotect>
    return;
 800ddea:	e05e      	b.n	800deaa <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	3b08      	subs	r3, #8
 800ddf0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ddf2:	4b32      	ldr	r3, [pc, #200]	@ (800debc <mem_free+0x104>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	69fa      	ldr	r2, [r7, #28]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d306      	bcc.n	800de0a <mem_free+0x52>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f103 020c 	add.w	r2, r3, #12
 800de02:	4b2f      	ldr	r3, [pc, #188]	@ (800dec0 <mem_free+0x108>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	429a      	cmp	r2, r3
 800de08:	d90d      	bls.n	800de26 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800de0a:	4b29      	ldr	r3, [pc, #164]	@ (800deb0 <mem_free+0xf8>)
 800de0c:	f240 227f 	movw	r2, #639	@ 0x27f
 800de10:	492c      	ldr	r1, [pc, #176]	@ (800dec4 <mem_free+0x10c>)
 800de12:	4829      	ldr	r0, [pc, #164]	@ (800deb8 <mem_free+0x100>)
 800de14:	f00c fae4 	bl	801a3e0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800de18:	f00b f942 	bl	80190a0 <sys_arch_protect>
 800de1c:	6138      	str	r0, [r7, #16]
 800de1e:	6938      	ldr	r0, [r7, #16]
 800de20:	f00b f94c 	bl	80190bc <sys_arch_unprotect>
    return;
 800de24:	e041      	b.n	800deaa <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800de26:	4828      	ldr	r0, [pc, #160]	@ (800dec8 <mem_free+0x110>)
 800de28:	f00b f8fe 	bl	8019028 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800de2c:	69fb      	ldr	r3, [r7, #28]
 800de2e:	791b      	ldrb	r3, [r3, #4]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d110      	bne.n	800de56 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800de34:	4b1e      	ldr	r3, [pc, #120]	@ (800deb0 <mem_free+0xf8>)
 800de36:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800de3a:	4924      	ldr	r1, [pc, #144]	@ (800decc <mem_free+0x114>)
 800de3c:	481e      	ldr	r0, [pc, #120]	@ (800deb8 <mem_free+0x100>)
 800de3e:	f00c facf 	bl	801a3e0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800de42:	4821      	ldr	r0, [pc, #132]	@ (800dec8 <mem_free+0x110>)
 800de44:	f00b f8ff 	bl	8019046 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800de48:	f00b f92a 	bl	80190a0 <sys_arch_protect>
 800de4c:	6178      	str	r0, [r7, #20]
 800de4e:	6978      	ldr	r0, [r7, #20]
 800de50:	f00b f934 	bl	80190bc <sys_arch_unprotect>
    return;
 800de54:	e029      	b.n	800deaa <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800de56:	69f8      	ldr	r0, [r7, #28]
 800de58:	f7ff ff72 	bl	800dd40 <mem_link_valid>
 800de5c:	4603      	mov	r3, r0
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d110      	bne.n	800de84 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800de62:	4b13      	ldr	r3, [pc, #76]	@ (800deb0 <mem_free+0xf8>)
 800de64:	f240 2295 	movw	r2, #661	@ 0x295
 800de68:	4919      	ldr	r1, [pc, #100]	@ (800ded0 <mem_free+0x118>)
 800de6a:	4813      	ldr	r0, [pc, #76]	@ (800deb8 <mem_free+0x100>)
 800de6c:	f00c fab8 	bl	801a3e0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800de70:	4815      	ldr	r0, [pc, #84]	@ (800dec8 <mem_free+0x110>)
 800de72:	f00b f8e8 	bl	8019046 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800de76:	f00b f913 	bl	80190a0 <sys_arch_protect>
 800de7a:	61b8      	str	r0, [r7, #24]
 800de7c:	69b8      	ldr	r0, [r7, #24]
 800de7e:	f00b f91d 	bl	80190bc <sys_arch_unprotect>
    return;
 800de82:	e012      	b.n	800deaa <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800de84:	69fb      	ldr	r3, [r7, #28]
 800de86:	2200      	movs	r2, #0
 800de88:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800de8a:	4b12      	ldr	r3, [pc, #72]	@ (800ded4 <mem_free+0x11c>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	69fa      	ldr	r2, [r7, #28]
 800de90:	429a      	cmp	r2, r3
 800de92:	d202      	bcs.n	800de9a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800de94:	4a0f      	ldr	r2, [pc, #60]	@ (800ded4 <mem_free+0x11c>)
 800de96:	69fb      	ldr	r3, [r7, #28]
 800de98:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800de9a:	69f8      	ldr	r0, [r7, #28]
 800de9c:	f7ff fe5c 	bl	800db58 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800dea0:	4809      	ldr	r0, [pc, #36]	@ (800dec8 <mem_free+0x110>)
 800dea2:	f00b f8d0 	bl	8019046 <sys_mutex_unlock>
 800dea6:	e000      	b.n	800deaa <mem_free+0xf2>
    return;
 800dea8:	bf00      	nop
}
 800deaa:	3720      	adds	r7, #32
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	0801eb4c 	.word	0x0801eb4c
 800deb4:	0801ec3c 	.word	0x0801ec3c
 800deb8:	0801eb94 	.word	0x0801eb94
 800debc:	20009ff8 	.word	0x20009ff8
 800dec0:	20009ffc 	.word	0x20009ffc
 800dec4:	0801ec60 	.word	0x0801ec60
 800dec8:	2000a000 	.word	0x2000a000
 800decc:	0801ec7c 	.word	0x0801ec7c
 800ded0:	0801eca4 	.word	0x0801eca4
 800ded4:	2000a004 	.word	0x2000a004

0800ded8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b088      	sub	sp, #32
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	460b      	mov	r3, r1
 800dee2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800dee4:	887b      	ldrh	r3, [r7, #2]
 800dee6:	3303      	adds	r3, #3
 800dee8:	b29b      	uxth	r3, r3
 800deea:	f023 0303 	bic.w	r3, r3, #3
 800deee:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800def0:	8bfb      	ldrh	r3, [r7, #30]
 800def2:	2b0b      	cmp	r3, #11
 800def4:	d801      	bhi.n	800defa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800def6:	230c      	movs	r3, #12
 800def8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800defa:	8bfb      	ldrh	r3, [r7, #30]
 800defc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800df00:	d803      	bhi.n	800df0a <mem_trim+0x32>
 800df02:	8bfa      	ldrh	r2, [r7, #30]
 800df04:	887b      	ldrh	r3, [r7, #2]
 800df06:	429a      	cmp	r2, r3
 800df08:	d201      	bcs.n	800df0e <mem_trim+0x36>
    return NULL;
 800df0a:	2300      	movs	r3, #0
 800df0c:	e0d8      	b.n	800e0c0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800df0e:	4b6e      	ldr	r3, [pc, #440]	@ (800e0c8 <mem_trim+0x1f0>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	429a      	cmp	r2, r3
 800df16:	d304      	bcc.n	800df22 <mem_trim+0x4a>
 800df18:	4b6c      	ldr	r3, [pc, #432]	@ (800e0cc <mem_trim+0x1f4>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	687a      	ldr	r2, [r7, #4]
 800df1e:	429a      	cmp	r2, r3
 800df20:	d306      	bcc.n	800df30 <mem_trim+0x58>
 800df22:	4b6b      	ldr	r3, [pc, #428]	@ (800e0d0 <mem_trim+0x1f8>)
 800df24:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800df28:	496a      	ldr	r1, [pc, #424]	@ (800e0d4 <mem_trim+0x1fc>)
 800df2a:	486b      	ldr	r0, [pc, #428]	@ (800e0d8 <mem_trim+0x200>)
 800df2c:	f00c fa58 	bl	801a3e0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800df30:	4b65      	ldr	r3, [pc, #404]	@ (800e0c8 <mem_trim+0x1f0>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	687a      	ldr	r2, [r7, #4]
 800df36:	429a      	cmp	r2, r3
 800df38:	d304      	bcc.n	800df44 <mem_trim+0x6c>
 800df3a:	4b64      	ldr	r3, [pc, #400]	@ (800e0cc <mem_trim+0x1f4>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	687a      	ldr	r2, [r7, #4]
 800df40:	429a      	cmp	r2, r3
 800df42:	d307      	bcc.n	800df54 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800df44:	f00b f8ac 	bl	80190a0 <sys_arch_protect>
 800df48:	60b8      	str	r0, [r7, #8]
 800df4a:	68b8      	ldr	r0, [r7, #8]
 800df4c:	f00b f8b6 	bl	80190bc <sys_arch_unprotect>
    return rmem;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	e0b5      	b.n	800e0c0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	3b08      	subs	r3, #8
 800df58:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800df5a:	69b8      	ldr	r0, [r7, #24]
 800df5c:	f7ff fdea 	bl	800db34 <mem_to_ptr>
 800df60:	4603      	mov	r3, r0
 800df62:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800df64:	69bb      	ldr	r3, [r7, #24]
 800df66:	881a      	ldrh	r2, [r3, #0]
 800df68:	8afb      	ldrh	r3, [r7, #22]
 800df6a:	1ad3      	subs	r3, r2, r3
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	3b08      	subs	r3, #8
 800df70:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800df72:	8bfa      	ldrh	r2, [r7, #30]
 800df74:	8abb      	ldrh	r3, [r7, #20]
 800df76:	429a      	cmp	r2, r3
 800df78:	d906      	bls.n	800df88 <mem_trim+0xb0>
 800df7a:	4b55      	ldr	r3, [pc, #340]	@ (800e0d0 <mem_trim+0x1f8>)
 800df7c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800df80:	4956      	ldr	r1, [pc, #344]	@ (800e0dc <mem_trim+0x204>)
 800df82:	4855      	ldr	r0, [pc, #340]	@ (800e0d8 <mem_trim+0x200>)
 800df84:	f00c fa2c 	bl	801a3e0 <iprintf>
  if (newsize > size) {
 800df88:	8bfa      	ldrh	r2, [r7, #30]
 800df8a:	8abb      	ldrh	r3, [r7, #20]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d901      	bls.n	800df94 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800df90:	2300      	movs	r3, #0
 800df92:	e095      	b.n	800e0c0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800df94:	8bfa      	ldrh	r2, [r7, #30]
 800df96:	8abb      	ldrh	r3, [r7, #20]
 800df98:	429a      	cmp	r2, r3
 800df9a:	d101      	bne.n	800dfa0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	e08f      	b.n	800e0c0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800dfa0:	484f      	ldr	r0, [pc, #316]	@ (800e0e0 <mem_trim+0x208>)
 800dfa2:	f00b f841 	bl	8019028 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800dfa6:	69bb      	ldr	r3, [r7, #24]
 800dfa8:	881b      	ldrh	r3, [r3, #0]
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7ff fdb0 	bl	800db10 <ptr_to_mem>
 800dfb0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	791b      	ldrb	r3, [r3, #4]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d13f      	bne.n	800e03a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800dfba:	69bb      	ldr	r3, [r7, #24]
 800dfbc:	881b      	ldrh	r3, [r3, #0]
 800dfbe:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800dfc2:	d106      	bne.n	800dfd2 <mem_trim+0xfa>
 800dfc4:	4b42      	ldr	r3, [pc, #264]	@ (800e0d0 <mem_trim+0x1f8>)
 800dfc6:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800dfca:	4946      	ldr	r1, [pc, #280]	@ (800e0e4 <mem_trim+0x20c>)
 800dfcc:	4842      	ldr	r0, [pc, #264]	@ (800e0d8 <mem_trim+0x200>)
 800dfce:	f00c fa07 	bl	801a3e0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	881b      	ldrh	r3, [r3, #0]
 800dfd6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800dfd8:	8afa      	ldrh	r2, [r7, #22]
 800dfda:	8bfb      	ldrh	r3, [r7, #30]
 800dfdc:	4413      	add	r3, r2
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	3308      	adds	r3, #8
 800dfe2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800dfe4:	4b40      	ldr	r3, [pc, #256]	@ (800e0e8 <mem_trim+0x210>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	693a      	ldr	r2, [r7, #16]
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d106      	bne.n	800dffc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800dfee:	89fb      	ldrh	r3, [r7, #14]
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7ff fd8d 	bl	800db10 <ptr_to_mem>
 800dff6:	4603      	mov	r3, r0
 800dff8:	4a3b      	ldr	r2, [pc, #236]	@ (800e0e8 <mem_trim+0x210>)
 800dffa:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800dffc:	89fb      	ldrh	r3, [r7, #14]
 800dffe:	4618      	mov	r0, r3
 800e000:	f7ff fd86 	bl	800db10 <ptr_to_mem>
 800e004:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	2200      	movs	r2, #0
 800e00a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	89ba      	ldrh	r2, [r7, #12]
 800e010:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e012:	693b      	ldr	r3, [r7, #16]
 800e014:	8afa      	ldrh	r2, [r7, #22]
 800e016:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e018:	69bb      	ldr	r3, [r7, #24]
 800e01a:	89fa      	ldrh	r2, [r7, #14]
 800e01c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	881b      	ldrh	r3, [r3, #0]
 800e022:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800e026:	d047      	beq.n	800e0b8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	881b      	ldrh	r3, [r3, #0]
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7ff fd6f 	bl	800db10 <ptr_to_mem>
 800e032:	4602      	mov	r2, r0
 800e034:	89fb      	ldrh	r3, [r7, #14]
 800e036:	8053      	strh	r3, [r2, #2]
 800e038:	e03e      	b.n	800e0b8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e03a:	8bfb      	ldrh	r3, [r7, #30]
 800e03c:	f103 0214 	add.w	r2, r3, #20
 800e040:	8abb      	ldrh	r3, [r7, #20]
 800e042:	429a      	cmp	r2, r3
 800e044:	d838      	bhi.n	800e0b8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e046:	8afa      	ldrh	r2, [r7, #22]
 800e048:	8bfb      	ldrh	r3, [r7, #30]
 800e04a:	4413      	add	r3, r2
 800e04c:	b29b      	uxth	r3, r3
 800e04e:	3308      	adds	r3, #8
 800e050:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e052:	69bb      	ldr	r3, [r7, #24]
 800e054:	881b      	ldrh	r3, [r3, #0]
 800e056:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800e05a:	d106      	bne.n	800e06a <mem_trim+0x192>
 800e05c:	4b1c      	ldr	r3, [pc, #112]	@ (800e0d0 <mem_trim+0x1f8>)
 800e05e:	f240 3216 	movw	r2, #790	@ 0x316
 800e062:	4920      	ldr	r1, [pc, #128]	@ (800e0e4 <mem_trim+0x20c>)
 800e064:	481c      	ldr	r0, [pc, #112]	@ (800e0d8 <mem_trim+0x200>)
 800e066:	f00c f9bb 	bl	801a3e0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e06a:	89fb      	ldrh	r3, [r7, #14]
 800e06c:	4618      	mov	r0, r3
 800e06e:	f7ff fd4f 	bl	800db10 <ptr_to_mem>
 800e072:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e074:	4b1c      	ldr	r3, [pc, #112]	@ (800e0e8 <mem_trim+0x210>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	693a      	ldr	r2, [r7, #16]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d202      	bcs.n	800e084 <mem_trim+0x1ac>
      lfree = mem2;
 800e07e:	4a1a      	ldr	r2, [pc, #104]	@ (800e0e8 <mem_trim+0x210>)
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	2200      	movs	r2, #0
 800e088:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e08a:	69bb      	ldr	r3, [r7, #24]
 800e08c:	881a      	ldrh	r2, [r3, #0]
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	8afa      	ldrh	r2, [r7, #22]
 800e096:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	89fa      	ldrh	r2, [r7, #14]
 800e09c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	881b      	ldrh	r3, [r3, #0]
 800e0a2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800e0a6:	d007      	beq.n	800e0b8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	881b      	ldrh	r3, [r3, #0]
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7ff fd2f 	bl	800db10 <ptr_to_mem>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	89fb      	ldrh	r3, [r7, #14]
 800e0b6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e0b8:	4809      	ldr	r0, [pc, #36]	@ (800e0e0 <mem_trim+0x208>)
 800e0ba:	f00a ffc4 	bl	8019046 <sys_mutex_unlock>
  return rmem;
 800e0be:	687b      	ldr	r3, [r7, #4]
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3720      	adds	r7, #32
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}
 800e0c8:	20009ff8 	.word	0x20009ff8
 800e0cc:	20009ffc 	.word	0x20009ffc
 800e0d0:	0801eb4c 	.word	0x0801eb4c
 800e0d4:	0801ecd8 	.word	0x0801ecd8
 800e0d8:	0801eb94 	.word	0x0801eb94
 800e0dc:	0801ecf0 	.word	0x0801ecf0
 800e0e0:	2000a000 	.word	0x2000a000
 800e0e4:	0801ed10 	.word	0x0801ed10
 800e0e8:	2000a004 	.word	0x2000a004

0800e0ec <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b088      	sub	sp, #32
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e0f6:	88fb      	ldrh	r3, [r7, #6]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d101      	bne.n	800e100 <mem_malloc+0x14>
    return NULL;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	e0e2      	b.n	800e2c6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e100:	88fb      	ldrh	r3, [r7, #6]
 800e102:	3303      	adds	r3, #3
 800e104:	b29b      	uxth	r3, r3
 800e106:	f023 0303 	bic.w	r3, r3, #3
 800e10a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e10c:	8bbb      	ldrh	r3, [r7, #28]
 800e10e:	2b0b      	cmp	r3, #11
 800e110:	d801      	bhi.n	800e116 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e112:	230c      	movs	r3, #12
 800e114:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e116:	8bbb      	ldrh	r3, [r7, #28]
 800e118:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800e11c:	d803      	bhi.n	800e126 <mem_malloc+0x3a>
 800e11e:	8bba      	ldrh	r2, [r7, #28]
 800e120:	88fb      	ldrh	r3, [r7, #6]
 800e122:	429a      	cmp	r2, r3
 800e124:	d201      	bcs.n	800e12a <mem_malloc+0x3e>
    return NULL;
 800e126:	2300      	movs	r3, #0
 800e128:	e0cd      	b.n	800e2c6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e12a:	4869      	ldr	r0, [pc, #420]	@ (800e2d0 <mem_malloc+0x1e4>)
 800e12c:	f00a ff7c 	bl	8019028 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e130:	4b68      	ldr	r3, [pc, #416]	@ (800e2d4 <mem_malloc+0x1e8>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	4618      	mov	r0, r3
 800e136:	f7ff fcfd 	bl	800db34 <mem_to_ptr>
 800e13a:	4603      	mov	r3, r0
 800e13c:	83fb      	strh	r3, [r7, #30]
 800e13e:	e0b7      	b.n	800e2b0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e140:	8bfb      	ldrh	r3, [r7, #30]
 800e142:	4618      	mov	r0, r3
 800e144:	f7ff fce4 	bl	800db10 <ptr_to_mem>
 800e148:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	791b      	ldrb	r3, [r3, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	f040 80a7 	bne.w	800e2a2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	881b      	ldrh	r3, [r3, #0]
 800e158:	461a      	mov	r2, r3
 800e15a:	8bfb      	ldrh	r3, [r7, #30]
 800e15c:	1ad3      	subs	r3, r2, r3
 800e15e:	f1a3 0208 	sub.w	r2, r3, #8
 800e162:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e164:	429a      	cmp	r2, r3
 800e166:	f0c0 809c 	bcc.w	800e2a2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	881b      	ldrh	r3, [r3, #0]
 800e16e:	461a      	mov	r2, r3
 800e170:	8bfb      	ldrh	r3, [r7, #30]
 800e172:	1ad3      	subs	r3, r2, r3
 800e174:	f1a3 0208 	sub.w	r2, r3, #8
 800e178:	8bbb      	ldrh	r3, [r7, #28]
 800e17a:	3314      	adds	r3, #20
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d333      	bcc.n	800e1e8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e180:	8bfa      	ldrh	r2, [r7, #30]
 800e182:	8bbb      	ldrh	r3, [r7, #28]
 800e184:	4413      	add	r3, r2
 800e186:	b29b      	uxth	r3, r3
 800e188:	3308      	adds	r3, #8
 800e18a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e18c:	8a7b      	ldrh	r3, [r7, #18]
 800e18e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800e192:	d106      	bne.n	800e1a2 <mem_malloc+0xb6>
 800e194:	4b50      	ldr	r3, [pc, #320]	@ (800e2d8 <mem_malloc+0x1ec>)
 800e196:	f240 3287 	movw	r2, #903	@ 0x387
 800e19a:	4950      	ldr	r1, [pc, #320]	@ (800e2dc <mem_malloc+0x1f0>)
 800e19c:	4850      	ldr	r0, [pc, #320]	@ (800e2e0 <mem_malloc+0x1f4>)
 800e19e:	f00c f91f 	bl	801a3e0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e1a2:	8a7b      	ldrh	r3, [r7, #18]
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f7ff fcb3 	bl	800db10 <ptr_to_mem>
 800e1aa:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	881a      	ldrh	r2, [r3, #0]
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	8bfa      	ldrh	r2, [r7, #30]
 800e1be:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	8a7a      	ldrh	r2, [r7, #18]
 800e1c4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	881b      	ldrh	r3, [r3, #0]
 800e1d0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800e1d4:	d00b      	beq.n	800e1ee <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	881b      	ldrh	r3, [r3, #0]
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7ff fc98 	bl	800db10 <ptr_to_mem>
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	8a7b      	ldrh	r3, [r7, #18]
 800e1e4:	8053      	strh	r3, [r2, #2]
 800e1e6:	e002      	b.n	800e1ee <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e1ee:	4b39      	ldr	r3, [pc, #228]	@ (800e2d4 <mem_malloc+0x1e8>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	697a      	ldr	r2, [r7, #20]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d127      	bne.n	800e248 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e1f8:	4b36      	ldr	r3, [pc, #216]	@ (800e2d4 <mem_malloc+0x1e8>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e1fe:	e005      	b.n	800e20c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e200:	69bb      	ldr	r3, [r7, #24]
 800e202:	881b      	ldrh	r3, [r3, #0]
 800e204:	4618      	mov	r0, r3
 800e206:	f7ff fc83 	bl	800db10 <ptr_to_mem>
 800e20a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e20c:	69bb      	ldr	r3, [r7, #24]
 800e20e:	791b      	ldrb	r3, [r3, #4]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d004      	beq.n	800e21e <mem_malloc+0x132>
 800e214:	4b33      	ldr	r3, [pc, #204]	@ (800e2e4 <mem_malloc+0x1f8>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	69ba      	ldr	r2, [r7, #24]
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d1f0      	bne.n	800e200 <mem_malloc+0x114>
          }
          lfree = cur;
 800e21e:	4a2d      	ldr	r2, [pc, #180]	@ (800e2d4 <mem_malloc+0x1e8>)
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e224:	4b2b      	ldr	r3, [pc, #172]	@ (800e2d4 <mem_malloc+0x1e8>)
 800e226:	681a      	ldr	r2, [r3, #0]
 800e228:	4b2e      	ldr	r3, [pc, #184]	@ (800e2e4 <mem_malloc+0x1f8>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d00b      	beq.n	800e248 <mem_malloc+0x15c>
 800e230:	4b28      	ldr	r3, [pc, #160]	@ (800e2d4 <mem_malloc+0x1e8>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	791b      	ldrb	r3, [r3, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d006      	beq.n	800e248 <mem_malloc+0x15c>
 800e23a:	4b27      	ldr	r3, [pc, #156]	@ (800e2d8 <mem_malloc+0x1ec>)
 800e23c:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800e240:	4929      	ldr	r1, [pc, #164]	@ (800e2e8 <mem_malloc+0x1fc>)
 800e242:	4827      	ldr	r0, [pc, #156]	@ (800e2e0 <mem_malloc+0x1f4>)
 800e244:	f00c f8cc 	bl	801a3e0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e248:	4821      	ldr	r0, [pc, #132]	@ (800e2d0 <mem_malloc+0x1e4>)
 800e24a:	f00a fefc 	bl	8019046 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e24e:	8bba      	ldrh	r2, [r7, #28]
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	4413      	add	r3, r2
 800e254:	3308      	adds	r3, #8
 800e256:	4a23      	ldr	r2, [pc, #140]	@ (800e2e4 <mem_malloc+0x1f8>)
 800e258:	6812      	ldr	r2, [r2, #0]
 800e25a:	4293      	cmp	r3, r2
 800e25c:	d906      	bls.n	800e26c <mem_malloc+0x180>
 800e25e:	4b1e      	ldr	r3, [pc, #120]	@ (800e2d8 <mem_malloc+0x1ec>)
 800e260:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800e264:	4921      	ldr	r1, [pc, #132]	@ (800e2ec <mem_malloc+0x200>)
 800e266:	481e      	ldr	r0, [pc, #120]	@ (800e2e0 <mem_malloc+0x1f4>)
 800e268:	f00c f8ba 	bl	801a3e0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	f003 0303 	and.w	r3, r3, #3
 800e272:	2b00      	cmp	r3, #0
 800e274:	d006      	beq.n	800e284 <mem_malloc+0x198>
 800e276:	4b18      	ldr	r3, [pc, #96]	@ (800e2d8 <mem_malloc+0x1ec>)
 800e278:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800e27c:	491c      	ldr	r1, [pc, #112]	@ (800e2f0 <mem_malloc+0x204>)
 800e27e:	4818      	ldr	r0, [pc, #96]	@ (800e2e0 <mem_malloc+0x1f4>)
 800e280:	f00c f8ae 	bl	801a3e0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	f003 0303 	and.w	r3, r3, #3
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d006      	beq.n	800e29c <mem_malloc+0x1b0>
 800e28e:	4b12      	ldr	r3, [pc, #72]	@ (800e2d8 <mem_malloc+0x1ec>)
 800e290:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800e294:	4917      	ldr	r1, [pc, #92]	@ (800e2f4 <mem_malloc+0x208>)
 800e296:	4812      	ldr	r0, [pc, #72]	@ (800e2e0 <mem_malloc+0x1f4>)
 800e298:	f00c f8a2 	bl	801a3e0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	3308      	adds	r3, #8
 800e2a0:	e011      	b.n	800e2c6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e2a2:	8bfb      	ldrh	r3, [r7, #30]
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7ff fc33 	bl	800db10 <ptr_to_mem>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	881b      	ldrh	r3, [r3, #0]
 800e2ae:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e2b0:	8bfa      	ldrh	r2, [r7, #30]
 800e2b2:	8bbb      	ldrh	r3, [r7, #28]
 800e2b4:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	f4ff af41 	bcc.w	800e140 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e2be:	4804      	ldr	r0, [pc, #16]	@ (800e2d0 <mem_malloc+0x1e4>)
 800e2c0:	f00a fec1 	bl	8019046 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e2c4:	2300      	movs	r3, #0
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3720      	adds	r7, #32
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	2000a000 	.word	0x2000a000
 800e2d4:	2000a004 	.word	0x2000a004
 800e2d8:	0801eb4c 	.word	0x0801eb4c
 800e2dc:	0801ed10 	.word	0x0801ed10
 800e2e0:	0801eb94 	.word	0x0801eb94
 800e2e4:	20009ffc 	.word	0x20009ffc
 800e2e8:	0801ed24 	.word	0x0801ed24
 800e2ec:	0801ed40 	.word	0x0801ed40
 800e2f0:	0801ed70 	.word	0x0801ed70
 800e2f4:	0801eda0 	.word	0x0801eda0

0800e2f8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b085      	sub	sp, #20
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	2200      	movs	r2, #0
 800e306:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	685b      	ldr	r3, [r3, #4]
 800e30c:	3303      	adds	r3, #3
 800e30e:	f023 0303 	bic.w	r3, r3, #3
 800e312:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e314:	2300      	movs	r3, #0
 800e316:	60fb      	str	r3, [r7, #12]
 800e318:	e011      	b.n	800e33e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	689b      	ldr	r3, [r3, #8]
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	689b      	ldr	r3, [r3, #8]
 800e328:	68ba      	ldr	r2, [r7, #8]
 800e32a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	881b      	ldrh	r3, [r3, #0]
 800e330:	461a      	mov	r2, r3
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	4413      	add	r3, r2
 800e336:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	3301      	adds	r3, #1
 800e33c:	60fb      	str	r3, [r7, #12]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	885b      	ldrh	r3, [r3, #2]
 800e342:	461a      	mov	r2, r3
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	4293      	cmp	r3, r2
 800e348:	dbe7      	blt.n	800e31a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e34a:	bf00      	nop
 800e34c:	bf00      	nop
 800e34e:	3714      	adds	r7, #20
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e35e:	2300      	movs	r3, #0
 800e360:	80fb      	strh	r3, [r7, #6]
 800e362:	e009      	b.n	800e378 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e364:	88fb      	ldrh	r3, [r7, #6]
 800e366:	4a08      	ldr	r2, [pc, #32]	@ (800e388 <memp_init+0x30>)
 800e368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7ff ffc3 	bl	800e2f8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e372:	88fb      	ldrh	r3, [r7, #6]
 800e374:	3301      	adds	r3, #1
 800e376:	80fb      	strh	r3, [r7, #6]
 800e378:	88fb      	ldrh	r3, [r7, #6]
 800e37a:	2b0c      	cmp	r3, #12
 800e37c:	d9f2      	bls.n	800e364 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e37e:	bf00      	nop
 800e380:	bf00      	nop
 800e382:	3708      	adds	r7, #8
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}
 800e388:	0802169c 	.word	0x0802169c

0800e38c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e394:	f00a fe84 	bl	80190a0 <sys_arch_protect>
 800e398:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	689b      	ldr	r3, [r3, #8]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d015      	beq.n	800e3d4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	689b      	ldr	r3, [r3, #8]
 800e3ac:	68ba      	ldr	r2, [r7, #8]
 800e3ae:	6812      	ldr	r2, [r2, #0]
 800e3b0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	f003 0303 	and.w	r3, r3, #3
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d006      	beq.n	800e3ca <do_memp_malloc_pool+0x3e>
 800e3bc:	4b09      	ldr	r3, [pc, #36]	@ (800e3e4 <do_memp_malloc_pool+0x58>)
 800e3be:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800e3c2:	4909      	ldr	r1, [pc, #36]	@ (800e3e8 <do_memp_malloc_pool+0x5c>)
 800e3c4:	4809      	ldr	r0, [pc, #36]	@ (800e3ec <do_memp_malloc_pool+0x60>)
 800e3c6:	f00c f80b 	bl	801a3e0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e3ca:	68f8      	ldr	r0, [r7, #12]
 800e3cc:	f00a fe76 	bl	80190bc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	e003      	b.n	800e3dc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e3d4:	68f8      	ldr	r0, [r7, #12]
 800e3d6:	f00a fe71 	bl	80190bc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e3da:	2300      	movs	r3, #0
}
 800e3dc:	4618      	mov	r0, r3
 800e3de:	3710      	adds	r7, #16
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}
 800e3e4:	0801edc4 	.word	0x0801edc4
 800e3e8:	0801edf4 	.word	0x0801edf4
 800e3ec:	0801ee18 	.word	0x0801ee18

0800e3f0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b082      	sub	sp, #8
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d106      	bne.n	800e40c <memp_malloc_pool+0x1c>
 800e3fe:	4b0a      	ldr	r3, [pc, #40]	@ (800e428 <memp_malloc_pool+0x38>)
 800e400:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800e404:	4909      	ldr	r1, [pc, #36]	@ (800e42c <memp_malloc_pool+0x3c>)
 800e406:	480a      	ldr	r0, [pc, #40]	@ (800e430 <memp_malloc_pool+0x40>)
 800e408:	f00b ffea 	bl	801a3e0 <iprintf>
  if (desc == NULL) {
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d101      	bne.n	800e416 <memp_malloc_pool+0x26>
    return NULL;
 800e412:	2300      	movs	r3, #0
 800e414:	e003      	b.n	800e41e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f7ff ffb8 	bl	800e38c <do_memp_malloc_pool>
 800e41c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800e41e:	4618      	mov	r0, r3
 800e420:	3708      	adds	r7, #8
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}
 800e426:	bf00      	nop
 800e428:	0801edc4 	.word	0x0801edc4
 800e42c:	0801ee40 	.word	0x0801ee40
 800e430:	0801ee18 	.word	0x0801ee18

0800e434 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
 800e43a:	4603      	mov	r3, r0
 800e43c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e43e:	79fb      	ldrb	r3, [r7, #7]
 800e440:	2b0c      	cmp	r3, #12
 800e442:	d908      	bls.n	800e456 <memp_malloc+0x22>
 800e444:	4b0a      	ldr	r3, [pc, #40]	@ (800e470 <memp_malloc+0x3c>)
 800e446:	f240 1257 	movw	r2, #343	@ 0x157
 800e44a:	490a      	ldr	r1, [pc, #40]	@ (800e474 <memp_malloc+0x40>)
 800e44c:	480a      	ldr	r0, [pc, #40]	@ (800e478 <memp_malloc+0x44>)
 800e44e:	f00b ffc7 	bl	801a3e0 <iprintf>
 800e452:	2300      	movs	r3, #0
 800e454:	e008      	b.n	800e468 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e456:	79fb      	ldrb	r3, [r7, #7]
 800e458:	4a08      	ldr	r2, [pc, #32]	@ (800e47c <memp_malloc+0x48>)
 800e45a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e45e:	4618      	mov	r0, r3
 800e460:	f7ff ff94 	bl	800e38c <do_memp_malloc_pool>
 800e464:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e466:	68fb      	ldr	r3, [r7, #12]
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3710      	adds	r7, #16
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}
 800e470:	0801edc4 	.word	0x0801edc4
 800e474:	0801ee54 	.word	0x0801ee54
 800e478:	0801ee18 	.word	0x0801ee18
 800e47c:	0802169c 	.word	0x0802169c

0800e480 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	f003 0303 	and.w	r3, r3, #3
 800e490:	2b00      	cmp	r3, #0
 800e492:	d006      	beq.n	800e4a2 <do_memp_free_pool+0x22>
 800e494:	4b0d      	ldr	r3, [pc, #52]	@ (800e4cc <do_memp_free_pool+0x4c>)
 800e496:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800e49a:	490d      	ldr	r1, [pc, #52]	@ (800e4d0 <do_memp_free_pool+0x50>)
 800e49c:	480d      	ldr	r0, [pc, #52]	@ (800e4d4 <do_memp_free_pool+0x54>)
 800e49e:	f00b ff9f 	bl	801a3e0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e4a6:	f00a fdfb 	bl	80190a0 <sys_arch_protect>
 800e4aa:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	689b      	ldr	r3, [r3, #8]
 800e4b0:	681a      	ldr	r2, [r3, #0]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	689b      	ldr	r3, [r3, #8]
 800e4ba:	68fa      	ldr	r2, [r7, #12]
 800e4bc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e4be:	68b8      	ldr	r0, [r7, #8]
 800e4c0:	f00a fdfc 	bl	80190bc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e4c4:	bf00      	nop
 800e4c6:	3710      	adds	r7, #16
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	0801edc4 	.word	0x0801edc4
 800e4d0:	0801ee74 	.word	0x0801ee74
 800e4d4:	0801ee18 	.word	0x0801ee18

0800e4d8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d106      	bne.n	800e4f6 <memp_free_pool+0x1e>
 800e4e8:	4b0a      	ldr	r3, [pc, #40]	@ (800e514 <memp_free_pool+0x3c>)
 800e4ea:	f240 1295 	movw	r2, #405	@ 0x195
 800e4ee:	490a      	ldr	r1, [pc, #40]	@ (800e518 <memp_free_pool+0x40>)
 800e4f0:	480a      	ldr	r0, [pc, #40]	@ (800e51c <memp_free_pool+0x44>)
 800e4f2:	f00b ff75 	bl	801a3e0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d007      	beq.n	800e50c <memp_free_pool+0x34>
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d004      	beq.n	800e50c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800e502:	6839      	ldr	r1, [r7, #0]
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f7ff ffbb 	bl	800e480 <do_memp_free_pool>
 800e50a:	e000      	b.n	800e50e <memp_free_pool+0x36>
    return;
 800e50c:	bf00      	nop
}
 800e50e:	3708      	adds	r7, #8
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	0801edc4 	.word	0x0801edc4
 800e518:	0801ee40 	.word	0x0801ee40
 800e51c:	0801ee18 	.word	0x0801ee18

0800e520 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
 800e526:	4603      	mov	r3, r0
 800e528:	6039      	str	r1, [r7, #0]
 800e52a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e52c:	79fb      	ldrb	r3, [r7, #7]
 800e52e:	2b0c      	cmp	r3, #12
 800e530:	d907      	bls.n	800e542 <memp_free+0x22>
 800e532:	4b0c      	ldr	r3, [pc, #48]	@ (800e564 <memp_free+0x44>)
 800e534:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800e538:	490b      	ldr	r1, [pc, #44]	@ (800e568 <memp_free+0x48>)
 800e53a:	480c      	ldr	r0, [pc, #48]	@ (800e56c <memp_free+0x4c>)
 800e53c:	f00b ff50 	bl	801a3e0 <iprintf>
 800e540:	e00c      	b.n	800e55c <memp_free+0x3c>

  if (mem == NULL) {
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d008      	beq.n	800e55a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e548:	79fb      	ldrb	r3, [r7, #7]
 800e54a:	4a09      	ldr	r2, [pc, #36]	@ (800e570 <memp_free+0x50>)
 800e54c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e550:	6839      	ldr	r1, [r7, #0]
 800e552:	4618      	mov	r0, r3
 800e554:	f7ff ff94 	bl	800e480 <do_memp_free_pool>
 800e558:	e000      	b.n	800e55c <memp_free+0x3c>
    return;
 800e55a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e55c:	3708      	adds	r7, #8
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	0801edc4 	.word	0x0801edc4
 800e568:	0801ee94 	.word	0x0801ee94
 800e56c:	0801ee18 	.word	0x0801ee18
 800e570:	0802169c 	.word	0x0802169c

0800e574 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e574:	b480      	push	{r7}
 800e576:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e578:	bf00      	nop
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr
	...

0800e584 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b086      	sub	sp, #24
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	60b9      	str	r1, [r7, #8]
 800e58e:	607a      	str	r2, [r7, #4]
 800e590:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d108      	bne.n	800e5aa <netif_add+0x26>
 800e598:	4b57      	ldr	r3, [pc, #348]	@ (800e6f8 <netif_add+0x174>)
 800e59a:	f240 1227 	movw	r2, #295	@ 0x127
 800e59e:	4957      	ldr	r1, [pc, #348]	@ (800e6fc <netif_add+0x178>)
 800e5a0:	4857      	ldr	r0, [pc, #348]	@ (800e700 <netif_add+0x17c>)
 800e5a2:	f00b ff1d 	bl	801a3e0 <iprintf>
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	e0a2      	b.n	800e6f0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d108      	bne.n	800e5c2 <netif_add+0x3e>
 800e5b0:	4b51      	ldr	r3, [pc, #324]	@ (800e6f8 <netif_add+0x174>)
 800e5b2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800e5b6:	4953      	ldr	r1, [pc, #332]	@ (800e704 <netif_add+0x180>)
 800e5b8:	4851      	ldr	r0, [pc, #324]	@ (800e700 <netif_add+0x17c>)
 800e5ba:	f00b ff11 	bl	801a3e0 <iprintf>
 800e5be:	2300      	movs	r3, #0
 800e5c0:	e096      	b.n	800e6f0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d101      	bne.n	800e5cc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e5c8:	4b4f      	ldr	r3, [pc, #316]	@ (800e708 <netif_add+0x184>)
 800e5ca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d101      	bne.n	800e5d6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e5d2:	4b4d      	ldr	r3, [pc, #308]	@ (800e708 <netif_add+0x184>)
 800e5d4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d101      	bne.n	800e5e0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e5dc:	4b4a      	ldr	r3, [pc, #296]	@ (800e708 <netif_add+0x184>)
 800e5de:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	4a45      	ldr	r2, [pc, #276]	@ (800e70c <netif_add+0x188>)
 800e5f6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	2200      	movs	r2, #0
 800e602:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	2200      	movs	r2, #0
 800e60a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	6a3a      	ldr	r2, [r7, #32]
 800e610:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e612:	4b3f      	ldr	r3, [pc, #252]	@ (800e710 <netif_add+0x18c>)
 800e614:	781a      	ldrb	r2, [r3, #0]
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e620:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	687a      	ldr	r2, [r7, #4]
 800e626:	68b9      	ldr	r1, [r7, #8]
 800e628:	68f8      	ldr	r0, [r7, #12]
 800e62a:	f000 f913 	bl	800e854 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e630:	68f8      	ldr	r0, [r7, #12]
 800e632:	4798      	blx	r3
 800e634:	4603      	mov	r3, r0
 800e636:	2b00      	cmp	r3, #0
 800e638:	d001      	beq.n	800e63e <netif_add+0xba>
    return NULL;
 800e63a:	2300      	movs	r3, #0
 800e63c:	e058      	b.n	800e6f0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e644:	2bff      	cmp	r3, #255	@ 0xff
 800e646:	d103      	bne.n	800e650 <netif_add+0xcc>
        netif->num = 0;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2200      	movs	r2, #0
 800e64c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800e650:	2300      	movs	r3, #0
 800e652:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e654:	4b2f      	ldr	r3, [pc, #188]	@ (800e714 <netif_add+0x190>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	617b      	str	r3, [r7, #20]
 800e65a:	e02b      	b.n	800e6b4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e65c:	697a      	ldr	r2, [r7, #20]
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	429a      	cmp	r2, r3
 800e662:	d106      	bne.n	800e672 <netif_add+0xee>
 800e664:	4b24      	ldr	r3, [pc, #144]	@ (800e6f8 <netif_add+0x174>)
 800e666:	f240 128b 	movw	r2, #395	@ 0x18b
 800e66a:	492b      	ldr	r1, [pc, #172]	@ (800e718 <netif_add+0x194>)
 800e66c:	4824      	ldr	r0, [pc, #144]	@ (800e700 <netif_add+0x17c>)
 800e66e:	f00b feb7 	bl	801a3e0 <iprintf>
        num_netifs++;
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	3301      	adds	r3, #1
 800e676:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	2bff      	cmp	r3, #255	@ 0xff
 800e67c:	dd06      	ble.n	800e68c <netif_add+0x108>
 800e67e:	4b1e      	ldr	r3, [pc, #120]	@ (800e6f8 <netif_add+0x174>)
 800e680:	f240 128d 	movw	r2, #397	@ 0x18d
 800e684:	4925      	ldr	r1, [pc, #148]	@ (800e71c <netif_add+0x198>)
 800e686:	481e      	ldr	r0, [pc, #120]	@ (800e700 <netif_add+0x17c>)
 800e688:	f00b feaa 	bl	801a3e0 <iprintf>
        if (netif2->num == netif->num) {
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e698:	429a      	cmp	r2, r3
 800e69a:	d108      	bne.n	800e6ae <netif_add+0x12a>
          netif->num++;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	b2da      	uxtb	r2, r3
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800e6ac:	e005      	b.n	800e6ba <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	617b      	str	r3, [r7, #20]
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d1d0      	bne.n	800e65c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d1be      	bne.n	800e63e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e6c6:	2bfe      	cmp	r3, #254	@ 0xfe
 800e6c8:	d103      	bne.n	800e6d2 <netif_add+0x14e>
    netif_num = 0;
 800e6ca:	4b11      	ldr	r3, [pc, #68]	@ (800e710 <netif_add+0x18c>)
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	701a      	strb	r2, [r3, #0]
 800e6d0:	e006      	b.n	800e6e0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e6d8:	3301      	adds	r3, #1
 800e6da:	b2da      	uxtb	r2, r3
 800e6dc:	4b0c      	ldr	r3, [pc, #48]	@ (800e710 <netif_add+0x18c>)
 800e6de:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e6e0:	4b0c      	ldr	r3, [pc, #48]	@ (800e714 <netif_add+0x190>)
 800e6e2:	681a      	ldr	r2, [r3, #0]
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e6e8:	4a0a      	ldr	r2, [pc, #40]	@ (800e714 <netif_add+0x190>)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3718      	adds	r7, #24
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}
 800e6f8:	0801eeb0 	.word	0x0801eeb0
 800e6fc:	0801ef44 	.word	0x0801ef44
 800e700:	0801ef00 	.word	0x0801ef00
 800e704:	0801ef60 	.word	0x0801ef60
 800e708:	08021710 	.word	0x08021710
 800e70c:	0800eb2f 	.word	0x0800eb2f
 800e710:	2000d0dc 	.word	0x2000d0dc
 800e714:	2000d0d4 	.word	0x2000d0d4
 800e718:	0801ef84 	.word	0x0801ef84
 800e71c:	0801ef98 	.word	0x0801ef98

0800e720 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b082      	sub	sp, #8
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e72a:	6839      	ldr	r1, [r7, #0]
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f002 fee5 	bl	80114fc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e732:	6839      	ldr	r1, [r7, #0]
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f007 ff95 	bl	8016664 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e73a:	bf00      	nop
 800e73c:	3708      	adds	r7, #8
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
	...

0800e744 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b086      	sub	sp, #24
 800e748:	af00      	add	r7, sp, #0
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	60b9      	str	r1, [r7, #8]
 800e74e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d106      	bne.n	800e764 <netif_do_set_ipaddr+0x20>
 800e756:	4b1d      	ldr	r3, [pc, #116]	@ (800e7cc <netif_do_set_ipaddr+0x88>)
 800e758:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800e75c:	491c      	ldr	r1, [pc, #112]	@ (800e7d0 <netif_do_set_ipaddr+0x8c>)
 800e75e:	481d      	ldr	r0, [pc, #116]	@ (800e7d4 <netif_do_set_ipaddr+0x90>)
 800e760:	f00b fe3e 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d106      	bne.n	800e778 <netif_do_set_ipaddr+0x34>
 800e76a:	4b18      	ldr	r3, [pc, #96]	@ (800e7cc <netif_do_set_ipaddr+0x88>)
 800e76c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800e770:	4917      	ldr	r1, [pc, #92]	@ (800e7d0 <netif_do_set_ipaddr+0x8c>)
 800e772:	4818      	ldr	r0, [pc, #96]	@ (800e7d4 <netif_do_set_ipaddr+0x90>)
 800e774:	f00b fe34 	bl	801a3e0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	3304      	adds	r3, #4
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	429a      	cmp	r2, r3
 800e784:	d01c      	beq.n	800e7c0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	3304      	adds	r3, #4
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e796:	f107 0314 	add.w	r3, r7, #20
 800e79a:	4619      	mov	r1, r3
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f7ff ffbf 	bl	800e720 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d002      	beq.n	800e7ae <netif_do_set_ipaddr+0x6a>
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	e000      	b.n	800e7b0 <netif_do_set_ipaddr+0x6c>
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	68fa      	ldr	r2, [r7, #12]
 800e7b2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e7b4:	2101      	movs	r1, #1
 800e7b6:	68f8      	ldr	r0, [r7, #12]
 800e7b8:	f000 f8d2 	bl	800e960 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e7bc:	2301      	movs	r3, #1
 800e7be:	e000      	b.n	800e7c2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e7c0:	2300      	movs	r3, #0
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3718      	adds	r7, #24
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	bf00      	nop
 800e7cc:	0801eeb0 	.word	0x0801eeb0
 800e7d0:	0801efc8 	.word	0x0801efc8
 800e7d4:	0801ef00 	.word	0x0801ef00

0800e7d8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b085      	sub	sp, #20
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	60b9      	str	r1, [r7, #8]
 800e7e2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	681a      	ldr	r2, [r3, #0]
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	3308      	adds	r3, #8
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d00a      	beq.n	800e808 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d002      	beq.n	800e7fe <netif_do_set_netmask+0x26>
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	e000      	b.n	800e800 <netif_do_set_netmask+0x28>
 800e7fe:	2300      	movs	r3, #0
 800e800:	68fa      	ldr	r2, [r7, #12]
 800e802:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e804:	2301      	movs	r3, #1
 800e806:	e000      	b.n	800e80a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e808:	2300      	movs	r3, #0
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3714      	adds	r7, #20
 800e80e:	46bd      	mov	sp, r7
 800e810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e814:	4770      	bx	lr

0800e816 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e816:	b480      	push	{r7}
 800e818:	b085      	sub	sp, #20
 800e81a:	af00      	add	r7, sp, #0
 800e81c:	60f8      	str	r0, [r7, #12]
 800e81e:	60b9      	str	r1, [r7, #8]
 800e820:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	681a      	ldr	r2, [r3, #0]
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	330c      	adds	r3, #12
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d00a      	beq.n	800e846 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d002      	beq.n	800e83c <netif_do_set_gw+0x26>
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	e000      	b.n	800e83e <netif_do_set_gw+0x28>
 800e83c:	2300      	movs	r3, #0
 800e83e:	68fa      	ldr	r2, [r7, #12]
 800e840:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e842:	2301      	movs	r3, #1
 800e844:	e000      	b.n	800e848 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e846:	2300      	movs	r3, #0
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3714      	adds	r7, #20
 800e84c:	46bd      	mov	sp, r7
 800e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e852:	4770      	bx	lr

0800e854 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b088      	sub	sp, #32
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	607a      	str	r2, [r7, #4]
 800e860:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e862:	2300      	movs	r3, #0
 800e864:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e866:	2300      	movs	r3, #0
 800e868:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d101      	bne.n	800e874 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e870:	4b1c      	ldr	r3, [pc, #112]	@ (800e8e4 <netif_set_addr+0x90>)
 800e872:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d101      	bne.n	800e87e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e87a:	4b1a      	ldr	r3, [pc, #104]	@ (800e8e4 <netif_set_addr+0x90>)
 800e87c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d101      	bne.n	800e888 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e884:	4b17      	ldr	r3, [pc, #92]	@ (800e8e4 <netif_set_addr+0x90>)
 800e886:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d003      	beq.n	800e896 <netif_set_addr+0x42>
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d101      	bne.n	800e89a <netif_set_addr+0x46>
 800e896:	2301      	movs	r3, #1
 800e898:	e000      	b.n	800e89c <netif_set_addr+0x48>
 800e89a:	2300      	movs	r3, #0
 800e89c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d006      	beq.n	800e8b2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e8a4:	f107 0310 	add.w	r3, r7, #16
 800e8a8:	461a      	mov	r2, r3
 800e8aa:	68b9      	ldr	r1, [r7, #8]
 800e8ac:	68f8      	ldr	r0, [r7, #12]
 800e8ae:	f7ff ff49 	bl	800e744 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e8b2:	69fa      	ldr	r2, [r7, #28]
 800e8b4:	6879      	ldr	r1, [r7, #4]
 800e8b6:	68f8      	ldr	r0, [r7, #12]
 800e8b8:	f7ff ff8e 	bl	800e7d8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e8bc:	69ba      	ldr	r2, [r7, #24]
 800e8be:	6839      	ldr	r1, [r7, #0]
 800e8c0:	68f8      	ldr	r0, [r7, #12]
 800e8c2:	f7ff ffa8 	bl	800e816 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d106      	bne.n	800e8da <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e8cc:	f107 0310 	add.w	r3, r7, #16
 800e8d0:	461a      	mov	r2, r3
 800e8d2:	68b9      	ldr	r1, [r7, #8]
 800e8d4:	68f8      	ldr	r0, [r7, #12]
 800e8d6:	f7ff ff35 	bl	800e744 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e8da:	bf00      	nop
 800e8dc:	3720      	adds	r7, #32
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	08021710 	.word	0x08021710

0800e8e8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e8f0:	4a04      	ldr	r2, [pc, #16]	@ (800e904 <netif_set_default+0x1c>)
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e8f6:	bf00      	nop
 800e8f8:	370c      	adds	r7, #12
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop
 800e904:	2000d0d8 	.word	0x2000d0d8

0800e908 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d107      	bne.n	800e926 <netif_set_up+0x1e>
 800e916:	4b0f      	ldr	r3, [pc, #60]	@ (800e954 <netif_set_up+0x4c>)
 800e918:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800e91c:	490e      	ldr	r1, [pc, #56]	@ (800e958 <netif_set_up+0x50>)
 800e91e:	480f      	ldr	r0, [pc, #60]	@ (800e95c <netif_set_up+0x54>)
 800e920:	f00b fd5e 	bl	801a3e0 <iprintf>
 800e924:	e013      	b.n	800e94e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e92c:	f003 0301 	and.w	r3, r3, #1
 800e930:	2b00      	cmp	r3, #0
 800e932:	d10c      	bne.n	800e94e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e93a:	f043 0301 	orr.w	r3, r3, #1
 800e93e:	b2da      	uxtb	r2, r3
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e946:	2103      	movs	r1, #3
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f000 f809 	bl	800e960 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e94e:	3708      	adds	r7, #8
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}
 800e954:	0801eeb0 	.word	0x0801eeb0
 800e958:	0801f038 	.word	0x0801f038
 800e95c:	0801ef00 	.word	0x0801ef00

0800e960 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	460b      	mov	r3, r1
 800e96a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d106      	bne.n	800e980 <netif_issue_reports+0x20>
 800e972:	4b18      	ldr	r3, [pc, #96]	@ (800e9d4 <netif_issue_reports+0x74>)
 800e974:	f240 326d 	movw	r2, #877	@ 0x36d
 800e978:	4917      	ldr	r1, [pc, #92]	@ (800e9d8 <netif_issue_reports+0x78>)
 800e97a:	4818      	ldr	r0, [pc, #96]	@ (800e9dc <netif_issue_reports+0x7c>)
 800e97c:	f00b fd30 	bl	801a3e0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e986:	f003 0304 	and.w	r3, r3, #4
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d01e      	beq.n	800e9cc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e994:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d017      	beq.n	800e9cc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e99c:	78fb      	ldrb	r3, [r7, #3]
 800e99e:	f003 0301 	and.w	r3, r3, #1
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d013      	beq.n	800e9ce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	3304      	adds	r3, #4
 800e9aa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d00e      	beq.n	800e9ce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e9b6:	f003 0308 	and.w	r3, r3, #8
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d007      	beq.n	800e9ce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	3304      	adds	r3, #4
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f008 fdb7 	bl	8017538 <etharp_request>
 800e9ca:	e000      	b.n	800e9ce <netif_issue_reports+0x6e>
    return;
 800e9cc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e9ce:	3708      	adds	r7, #8
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	0801eeb0 	.word	0x0801eeb0
 800e9d8:	0801f054 	.word	0x0801f054
 800e9dc:	0801ef00 	.word	0x0801ef00

0800e9e0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d107      	bne.n	800e9fe <netif_set_down+0x1e>
 800e9ee:	4b12      	ldr	r3, [pc, #72]	@ (800ea38 <netif_set_down+0x58>)
 800e9f0:	f240 329b 	movw	r2, #923	@ 0x39b
 800e9f4:	4911      	ldr	r1, [pc, #68]	@ (800ea3c <netif_set_down+0x5c>)
 800e9f6:	4812      	ldr	r0, [pc, #72]	@ (800ea40 <netif_set_down+0x60>)
 800e9f8:	f00b fcf2 	bl	801a3e0 <iprintf>
 800e9fc:	e019      	b.n	800ea32 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea04:	f003 0301 	and.w	r3, r3, #1
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d012      	beq.n	800ea32 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea12:	f023 0301 	bic.w	r3, r3, #1
 800ea16:	b2da      	uxtb	r2, r3
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea24:	f003 0308 	and.w	r3, r3, #8
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d002      	beq.n	800ea32 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f008 f941 	bl	8016cb4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ea32:	3708      	adds	r7, #8
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}
 800ea38:	0801eeb0 	.word	0x0801eeb0
 800ea3c:	0801f078 	.word	0x0801f078
 800ea40:	0801ef00 	.word	0x0801ef00

0800ea44 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d107      	bne.n	800ea62 <netif_set_link_up+0x1e>
 800ea52:	4b13      	ldr	r3, [pc, #76]	@ (800eaa0 <netif_set_link_up+0x5c>)
 800ea54:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800ea58:	4912      	ldr	r1, [pc, #72]	@ (800eaa4 <netif_set_link_up+0x60>)
 800ea5a:	4813      	ldr	r0, [pc, #76]	@ (800eaa8 <netif_set_link_up+0x64>)
 800ea5c:	f00b fcc0 	bl	801a3e0 <iprintf>
 800ea60:	e01b      	b.n	800ea9a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea68:	f003 0304 	and.w	r3, r3, #4
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d114      	bne.n	800ea9a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ea76:	f043 0304 	orr.w	r3, r3, #4
 800ea7a:	b2da      	uxtb	r2, r3
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ea82:	2103      	movs	r1, #3
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f7ff ff6b 	bl	800e960 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	69db      	ldr	r3, [r3, #28]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d003      	beq.n	800ea9a <netif_set_link_up+0x56>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	69db      	ldr	r3, [r3, #28]
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ea9a:	3708      	adds	r7, #8
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	0801eeb0 	.word	0x0801eeb0
 800eaa4:	0801f098 	.word	0x0801f098
 800eaa8:	0801ef00 	.word	0x0801ef00

0800eaac <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d107      	bne.n	800eaca <netif_set_link_down+0x1e>
 800eaba:	4b11      	ldr	r3, [pc, #68]	@ (800eb00 <netif_set_link_down+0x54>)
 800eabc:	f240 4206 	movw	r2, #1030	@ 0x406
 800eac0:	4910      	ldr	r1, [pc, #64]	@ (800eb04 <netif_set_link_down+0x58>)
 800eac2:	4811      	ldr	r0, [pc, #68]	@ (800eb08 <netif_set_link_down+0x5c>)
 800eac4:	f00b fc8c 	bl	801a3e0 <iprintf>
 800eac8:	e017      	b.n	800eafa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ead0:	f003 0304 	and.w	r3, r3, #4
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d010      	beq.n	800eafa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eade:	f023 0304 	bic.w	r3, r3, #4
 800eae2:	b2da      	uxtb	r2, r3
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	69db      	ldr	r3, [r3, #28]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d003      	beq.n	800eafa <netif_set_link_down+0x4e>
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	69db      	ldr	r3, [r3, #28]
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}
 800eb00:	0801eeb0 	.word	0x0801eeb0
 800eb04:	0801f0bc 	.word	0x0801f0bc
 800eb08:	0801ef00 	.word	0x0801ef00

0800eb0c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d002      	beq.n	800eb22 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	683a      	ldr	r2, [r7, #0]
 800eb20:	61da      	str	r2, [r3, #28]
  }
}
 800eb22:	bf00      	nop
 800eb24:	370c      	adds	r7, #12
 800eb26:	46bd      	mov	sp, r7
 800eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2c:	4770      	bx	lr

0800eb2e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800eb2e:	b480      	push	{r7}
 800eb30:	b085      	sub	sp, #20
 800eb32:	af00      	add	r7, sp, #0
 800eb34:	60f8      	str	r0, [r7, #12]
 800eb36:	60b9      	str	r1, [r7, #8]
 800eb38:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800eb3a:	f06f 030b 	mvn.w	r3, #11
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3714      	adds	r7, #20
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr
	...

0800eb4c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b085      	sub	sp, #20
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	4603      	mov	r3, r0
 800eb54:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800eb56:	79fb      	ldrb	r3, [r7, #7]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d013      	beq.n	800eb84 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800eb5c:	4b0d      	ldr	r3, [pc, #52]	@ (800eb94 <netif_get_by_index+0x48>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	60fb      	str	r3, [r7, #12]
 800eb62:	e00c      	b.n	800eb7e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eb6a:	3301      	adds	r3, #1
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	79fa      	ldrb	r2, [r7, #7]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d101      	bne.n	800eb78 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	e006      	b.n	800eb86 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	60fb      	str	r3, [r7, #12]
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d1ef      	bne.n	800eb64 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800eb84:	2300      	movs	r3, #0
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3714      	adds	r7, #20
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb90:	4770      	bx	lr
 800eb92:	bf00      	nop
 800eb94:	2000d0d4 	.word	0x2000d0d4

0800eb98 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b084      	sub	sp, #16
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
  struct netif *netif;
  u8_t num;

  LWIP_ASSERT_CORE_LOCKED();

  if (name == NULL) {
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d101      	bne.n	800ebaa <netif_find+0x12>
    return NULL;
 800eba6:	2300      	movs	r3, #0
 800eba8:	e028      	b.n	800ebfc <netif_find+0x64>
  }

  num = (u8_t)atoi(&name[2]);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	3302      	adds	r3, #2
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f00a fb62 	bl	8019278 <atoi>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	72fb      	strb	r3, [r7, #11]

  NETIF_FOREACH(netif) {
 800ebb8:	4b12      	ldr	r3, [pc, #72]	@ (800ec04 <netif_find+0x6c>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	60fb      	str	r3, [r7, #12]
 800ebbe:	e019      	b.n	800ebf4 <netif_find+0x5c>
    if (num == netif->num &&
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ebc6:	7afa      	ldrb	r2, [r7, #11]
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d110      	bne.n	800ebee <netif_find+0x56>
        name[0] == netif->name[0] &&
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	781a      	ldrb	r2, [r3, #0]
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
    if (num == netif->num &&
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d109      	bne.n	800ebee <netif_find+0x56>
        name[1] == netif->name[1]) {
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	3301      	adds	r3, #1
 800ebde:	781a      	ldrb	r2, [r3, #0]
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
        name[0] == netif->name[0] &&
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d101      	bne.n	800ebee <netif_find+0x56>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	e006      	b.n	800ebfc <netif_find+0x64>
  NETIF_FOREACH(netif) {
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	60fb      	str	r3, [r7, #12]
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d1e2      	bne.n	800ebc0 <netif_find+0x28>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
 800ebfa:	2300      	movs	r3, #0
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3710      	adds	r7, #16
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}
 800ec04:	2000d0d4 	.word	0x2000d0d4

0800ec08 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b082      	sub	sp, #8
 800ec0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ec0e:	f00a fa47 	bl	80190a0 <sys_arch_protect>
 800ec12:	6038      	str	r0, [r7, #0]
 800ec14:	4b0d      	ldr	r3, [pc, #52]	@ (800ec4c <pbuf_free_ooseq+0x44>)
 800ec16:	2200      	movs	r2, #0
 800ec18:	701a      	strb	r2, [r3, #0]
 800ec1a:	6838      	ldr	r0, [r7, #0]
 800ec1c:	f00a fa4e 	bl	80190bc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ec20:	4b0b      	ldr	r3, [pc, #44]	@ (800ec50 <pbuf_free_ooseq+0x48>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	607b      	str	r3, [r7, #4]
 800ec26:	e00a      	b.n	800ec3e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d003      	beq.n	800ec38 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f002 fca1 	bl	8011578 <tcp_free_ooseq>
      return;
 800ec36:	e005      	b.n	800ec44 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	68db      	ldr	r3, [r3, #12]
 800ec3c:	607b      	str	r3, [r7, #4]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d1f1      	bne.n	800ec28 <pbuf_free_ooseq+0x20>
    }
  }
}
 800ec44:	3708      	adds	r7, #8
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	2000d0dd 	.word	0x2000d0dd
 800ec50:	2000d0ec 	.word	0x2000d0ec

0800ec54 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ec5c:	f7ff ffd4 	bl	800ec08 <pbuf_free_ooseq>
}
 800ec60:	bf00      	nop
 800ec62:	3708      	adds	r7, #8
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ec6e:	f00a fa17 	bl	80190a0 <sys_arch_protect>
 800ec72:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ec74:	4b0f      	ldr	r3, [pc, #60]	@ (800ecb4 <pbuf_pool_is_empty+0x4c>)
 800ec76:	781b      	ldrb	r3, [r3, #0]
 800ec78:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ec7a:	4b0e      	ldr	r3, [pc, #56]	@ (800ecb4 <pbuf_pool_is_empty+0x4c>)
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f00a fa1b 	bl	80190bc <sys_arch_unprotect>

  if (!queued) {
 800ec86:	78fb      	ldrb	r3, [r7, #3]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d10f      	bne.n	800ecac <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ec8c:	2100      	movs	r1, #0
 800ec8e:	480a      	ldr	r0, [pc, #40]	@ (800ecb8 <pbuf_pool_is_empty+0x50>)
 800ec90:	f7fe fe58 	bl	800d944 <tcpip_try_callback>
 800ec94:	4603      	mov	r3, r0
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d008      	beq.n	800ecac <pbuf_pool_is_empty+0x44>
 800ec9a:	f00a fa01 	bl	80190a0 <sys_arch_protect>
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	4b04      	ldr	r3, [pc, #16]	@ (800ecb4 <pbuf_pool_is_empty+0x4c>)
 800eca2:	2200      	movs	r2, #0
 800eca4:	701a      	strb	r2, [r3, #0]
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f00a fa08 	bl	80190bc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ecac:	bf00      	nop
 800ecae:	3708      	adds	r7, #8
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	2000d0dd 	.word	0x2000d0dd
 800ecb8:	0800ec55 	.word	0x0800ec55

0800ecbc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b085      	sub	sp, #20
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	60b9      	str	r1, [r7, #8]
 800ecc6:	4611      	mov	r1, r2
 800ecc8:	461a      	mov	r2, r3
 800ecca:	460b      	mov	r3, r1
 800eccc:	80fb      	strh	r3, [r7, #6]
 800ecce:	4613      	mov	r3, r2
 800ecd0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	68ba      	ldr	r2, [r7, #8]
 800ecdc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	88fa      	ldrh	r2, [r7, #6]
 800ece2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	88ba      	ldrh	r2, [r7, #4]
 800ece8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ecea:	8b3b      	ldrh	r3, [r7, #24]
 800ecec:	b2da      	uxtb	r2, r3
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	7f3a      	ldrb	r2, [r7, #28]
 800ecf6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	2201      	movs	r2, #1
 800ecfc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	2200      	movs	r2, #0
 800ed02:	73da      	strb	r2, [r3, #15]
}
 800ed04:	bf00      	nop
 800ed06:	3714      	adds	r7, #20
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0e:	4770      	bx	lr

0800ed10 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b08c      	sub	sp, #48	@ 0x30
 800ed14:	af02      	add	r7, sp, #8
 800ed16:	4603      	mov	r3, r0
 800ed18:	71fb      	strb	r3, [r7, #7]
 800ed1a:	460b      	mov	r3, r1
 800ed1c:	80bb      	strh	r3, [r7, #4]
 800ed1e:	4613      	mov	r3, r2
 800ed20:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ed22:	79fb      	ldrb	r3, [r7, #7]
 800ed24:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ed26:	887b      	ldrh	r3, [r7, #2]
 800ed28:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800ed2c:	d07f      	beq.n	800ee2e <pbuf_alloc+0x11e>
 800ed2e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800ed32:	f300 80c8 	bgt.w	800eec6 <pbuf_alloc+0x1b6>
 800ed36:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ed3a:	d010      	beq.n	800ed5e <pbuf_alloc+0x4e>
 800ed3c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ed40:	f300 80c1 	bgt.w	800eec6 <pbuf_alloc+0x1b6>
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d002      	beq.n	800ed4e <pbuf_alloc+0x3e>
 800ed48:	2b41      	cmp	r3, #65	@ 0x41
 800ed4a:	f040 80bc 	bne.w	800eec6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ed4e:	887a      	ldrh	r2, [r7, #2]
 800ed50:	88bb      	ldrh	r3, [r7, #4]
 800ed52:	4619      	mov	r1, r3
 800ed54:	2000      	movs	r0, #0
 800ed56:	f000 f8d1 	bl	800eefc <pbuf_alloc_reference>
 800ed5a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800ed5c:	e0bd      	b.n	800eeda <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800ed62:	2300      	movs	r3, #0
 800ed64:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ed66:	88bb      	ldrh	r3, [r7, #4]
 800ed68:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ed6a:	200c      	movs	r0, #12
 800ed6c:	f7ff fb62 	bl	800e434 <memp_malloc>
 800ed70:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d109      	bne.n	800ed8c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ed78:	f7ff ff76 	bl	800ec68 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ed7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d002      	beq.n	800ed88 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ed82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ed84:	f000 fada 	bl	800f33c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	e0a7      	b.n	800eedc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ed8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ed8e:	3303      	adds	r3, #3
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	f023 0303 	bic.w	r3, r3, #3
 800ed96:	b29b      	uxth	r3, r3
 800ed98:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800ed9c:	b29b      	uxth	r3, r3
 800ed9e:	8b7a      	ldrh	r2, [r7, #26]
 800eda0:	4293      	cmp	r3, r2
 800eda2:	bf28      	it	cs
 800eda4:	4613      	movcs	r3, r2
 800eda6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800eda8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800edaa:	3310      	adds	r3, #16
 800edac:	693a      	ldr	r2, [r7, #16]
 800edae:	4413      	add	r3, r2
 800edb0:	3303      	adds	r3, #3
 800edb2:	f023 0303 	bic.w	r3, r3, #3
 800edb6:	4618      	mov	r0, r3
 800edb8:	89f9      	ldrh	r1, [r7, #14]
 800edba:	8b7a      	ldrh	r2, [r7, #26]
 800edbc:	2300      	movs	r3, #0
 800edbe:	9301      	str	r3, [sp, #4]
 800edc0:	887b      	ldrh	r3, [r7, #2]
 800edc2:	9300      	str	r3, [sp, #0]
 800edc4:	460b      	mov	r3, r1
 800edc6:	4601      	mov	r1, r0
 800edc8:	6938      	ldr	r0, [r7, #16]
 800edca:	f7ff ff77 	bl	800ecbc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	685b      	ldr	r3, [r3, #4]
 800edd2:	f003 0303 	and.w	r3, r3, #3
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d006      	beq.n	800ede8 <pbuf_alloc+0xd8>
 800edda:	4b42      	ldr	r3, [pc, #264]	@ (800eee4 <pbuf_alloc+0x1d4>)
 800eddc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ede0:	4941      	ldr	r1, [pc, #260]	@ (800eee8 <pbuf_alloc+0x1d8>)
 800ede2:	4842      	ldr	r0, [pc, #264]	@ (800eeec <pbuf_alloc+0x1dc>)
 800ede4:	f00b fafc 	bl	801a3e0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ede8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800edea:	3303      	adds	r3, #3
 800edec:	f023 0303 	bic.w	r3, r3, #3
 800edf0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800edf4:	d106      	bne.n	800ee04 <pbuf_alloc+0xf4>
 800edf6:	4b3b      	ldr	r3, [pc, #236]	@ (800eee4 <pbuf_alloc+0x1d4>)
 800edf8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800edfc:	493c      	ldr	r1, [pc, #240]	@ (800eef0 <pbuf_alloc+0x1e0>)
 800edfe:	483b      	ldr	r0, [pc, #236]	@ (800eeec <pbuf_alloc+0x1dc>)
 800ee00:	f00b faee 	bl	801a3e0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ee04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d102      	bne.n	800ee10 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ee0e:	e002      	b.n	800ee16 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ee10:	69fb      	ldr	r3, [r7, #28]
 800ee12:	693a      	ldr	r2, [r7, #16]
 800ee14:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ee1a:	8b7a      	ldrh	r2, [r7, #26]
 800ee1c:	89fb      	ldrh	r3, [r7, #14]
 800ee1e:	1ad3      	subs	r3, r2, r3
 800ee20:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ee22:	2300      	movs	r3, #0
 800ee24:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800ee26:	8b7b      	ldrh	r3, [r7, #26]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d19e      	bne.n	800ed6a <pbuf_alloc+0x5a>
      break;
 800ee2c:	e055      	b.n	800eeda <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ee2e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ee30:	3303      	adds	r3, #3
 800ee32:	b29b      	uxth	r3, r3
 800ee34:	f023 0303 	bic.w	r3, r3, #3
 800ee38:	b29a      	uxth	r2, r3
 800ee3a:	88bb      	ldrh	r3, [r7, #4]
 800ee3c:	3303      	adds	r3, #3
 800ee3e:	b29b      	uxth	r3, r3
 800ee40:	f023 0303 	bic.w	r3, r3, #3
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	4413      	add	r3, r2
 800ee48:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ee4a:	8b3b      	ldrh	r3, [r7, #24]
 800ee4c:	3310      	adds	r3, #16
 800ee4e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ee50:	8b3a      	ldrh	r2, [r7, #24]
 800ee52:	88bb      	ldrh	r3, [r7, #4]
 800ee54:	3303      	adds	r3, #3
 800ee56:	f023 0303 	bic.w	r3, r3, #3
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d306      	bcc.n	800ee6c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ee5e:	8afa      	ldrh	r2, [r7, #22]
 800ee60:	88bb      	ldrh	r3, [r7, #4]
 800ee62:	3303      	adds	r3, #3
 800ee64:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d201      	bcs.n	800ee70 <pbuf_alloc+0x160>
        return NULL;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	e035      	b.n	800eedc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ee70:	8afb      	ldrh	r3, [r7, #22]
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7ff f93a 	bl	800e0ec <mem_malloc>
 800ee78:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800ee7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d101      	bne.n	800ee84 <pbuf_alloc+0x174>
        return NULL;
 800ee80:	2300      	movs	r3, #0
 800ee82:	e02b      	b.n	800eedc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ee84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ee86:	3310      	adds	r3, #16
 800ee88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee8a:	4413      	add	r3, r2
 800ee8c:	3303      	adds	r3, #3
 800ee8e:	f023 0303 	bic.w	r3, r3, #3
 800ee92:	4618      	mov	r0, r3
 800ee94:	88b9      	ldrh	r1, [r7, #4]
 800ee96:	88ba      	ldrh	r2, [r7, #4]
 800ee98:	2300      	movs	r3, #0
 800ee9a:	9301      	str	r3, [sp, #4]
 800ee9c:	887b      	ldrh	r3, [r7, #2]
 800ee9e:	9300      	str	r3, [sp, #0]
 800eea0:	460b      	mov	r3, r1
 800eea2:	4601      	mov	r1, r0
 800eea4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eea6:	f7ff ff09 	bl	800ecbc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800eeaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeac:	685b      	ldr	r3, [r3, #4]
 800eeae:	f003 0303 	and.w	r3, r3, #3
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d010      	beq.n	800eed8 <pbuf_alloc+0x1c8>
 800eeb6:	4b0b      	ldr	r3, [pc, #44]	@ (800eee4 <pbuf_alloc+0x1d4>)
 800eeb8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800eebc:	490d      	ldr	r1, [pc, #52]	@ (800eef4 <pbuf_alloc+0x1e4>)
 800eebe:	480b      	ldr	r0, [pc, #44]	@ (800eeec <pbuf_alloc+0x1dc>)
 800eec0:	f00b fa8e 	bl	801a3e0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800eec4:	e008      	b.n	800eed8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800eec6:	4b07      	ldr	r3, [pc, #28]	@ (800eee4 <pbuf_alloc+0x1d4>)
 800eec8:	f240 1227 	movw	r2, #295	@ 0x127
 800eecc:	490a      	ldr	r1, [pc, #40]	@ (800eef8 <pbuf_alloc+0x1e8>)
 800eece:	4807      	ldr	r0, [pc, #28]	@ (800eeec <pbuf_alloc+0x1dc>)
 800eed0:	f00b fa86 	bl	801a3e0 <iprintf>
      return NULL;
 800eed4:	2300      	movs	r3, #0
 800eed6:	e001      	b.n	800eedc <pbuf_alloc+0x1cc>
      break;
 800eed8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800eeda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eedc:	4618      	mov	r0, r3
 800eede:	3728      	adds	r7, #40	@ 0x28
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}
 800eee4:	0801f0e0 	.word	0x0801f0e0
 800eee8:	0801f110 	.word	0x0801f110
 800eeec:	0801f140 	.word	0x0801f140
 800eef0:	0801f168 	.word	0x0801f168
 800eef4:	0801f19c 	.word	0x0801f19c
 800eef8:	0801f1c8 	.word	0x0801f1c8

0800eefc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b086      	sub	sp, #24
 800ef00:	af02      	add	r7, sp, #8
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	460b      	mov	r3, r1
 800ef06:	807b      	strh	r3, [r7, #2]
 800ef08:	4613      	mov	r3, r2
 800ef0a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ef0c:	883b      	ldrh	r3, [r7, #0]
 800ef0e:	2b41      	cmp	r3, #65	@ 0x41
 800ef10:	d009      	beq.n	800ef26 <pbuf_alloc_reference+0x2a>
 800ef12:	883b      	ldrh	r3, [r7, #0]
 800ef14:	2b01      	cmp	r3, #1
 800ef16:	d006      	beq.n	800ef26 <pbuf_alloc_reference+0x2a>
 800ef18:	4b0f      	ldr	r3, [pc, #60]	@ (800ef58 <pbuf_alloc_reference+0x5c>)
 800ef1a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800ef1e:	490f      	ldr	r1, [pc, #60]	@ (800ef5c <pbuf_alloc_reference+0x60>)
 800ef20:	480f      	ldr	r0, [pc, #60]	@ (800ef60 <pbuf_alloc_reference+0x64>)
 800ef22:	f00b fa5d 	bl	801a3e0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ef26:	200b      	movs	r0, #11
 800ef28:	f7ff fa84 	bl	800e434 <memp_malloc>
 800ef2c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d101      	bne.n	800ef38 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ef34:	2300      	movs	r3, #0
 800ef36:	e00b      	b.n	800ef50 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ef38:	8879      	ldrh	r1, [r7, #2]
 800ef3a:	887a      	ldrh	r2, [r7, #2]
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	9301      	str	r3, [sp, #4]
 800ef40:	883b      	ldrh	r3, [r7, #0]
 800ef42:	9300      	str	r3, [sp, #0]
 800ef44:	460b      	mov	r3, r1
 800ef46:	6879      	ldr	r1, [r7, #4]
 800ef48:	68f8      	ldr	r0, [r7, #12]
 800ef4a:	f7ff feb7 	bl	800ecbc <pbuf_init_alloced_pbuf>
  return p;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3710      	adds	r7, #16
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}
 800ef58:	0801f0e0 	.word	0x0801f0e0
 800ef5c:	0801f1e4 	.word	0x0801f1e4
 800ef60:	0801f140 	.word	0x0801f140

0800ef64 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b088      	sub	sp, #32
 800ef68:	af02      	add	r7, sp, #8
 800ef6a:	607b      	str	r3, [r7, #4]
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	73fb      	strb	r3, [r7, #15]
 800ef70:	460b      	mov	r3, r1
 800ef72:	81bb      	strh	r3, [r7, #12]
 800ef74:	4613      	mov	r3, r2
 800ef76:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ef78:	7bfb      	ldrb	r3, [r7, #15]
 800ef7a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ef7c:	8a7b      	ldrh	r3, [r7, #18]
 800ef7e:	3303      	adds	r3, #3
 800ef80:	f023 0203 	bic.w	r2, r3, #3
 800ef84:	89bb      	ldrh	r3, [r7, #12]
 800ef86:	441a      	add	r2, r3
 800ef88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d901      	bls.n	800ef92 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	e018      	b.n	800efc4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ef92:	6a3b      	ldr	r3, [r7, #32]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d007      	beq.n	800efa8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ef98:	8a7b      	ldrh	r3, [r7, #18]
 800ef9a:	3303      	adds	r3, #3
 800ef9c:	f023 0303 	bic.w	r3, r3, #3
 800efa0:	6a3a      	ldr	r2, [r7, #32]
 800efa2:	4413      	add	r3, r2
 800efa4:	617b      	str	r3, [r7, #20]
 800efa6:	e001      	b.n	800efac <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800efa8:	2300      	movs	r3, #0
 800efaa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	89b9      	ldrh	r1, [r7, #12]
 800efb0:	89ba      	ldrh	r2, [r7, #12]
 800efb2:	2302      	movs	r3, #2
 800efb4:	9301      	str	r3, [sp, #4]
 800efb6:	897b      	ldrh	r3, [r7, #10]
 800efb8:	9300      	str	r3, [sp, #0]
 800efba:	460b      	mov	r3, r1
 800efbc:	6979      	ldr	r1, [r7, #20]
 800efbe:	f7ff fe7d 	bl	800ecbc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800efc2:	687b      	ldr	r3, [r7, #4]
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3718      	adds	r7, #24
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}

0800efcc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	460b      	mov	r3, r1
 800efd6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d106      	bne.n	800efec <pbuf_realloc+0x20>
 800efde:	4b3a      	ldr	r3, [pc, #232]	@ (800f0c8 <pbuf_realloc+0xfc>)
 800efe0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800efe4:	4939      	ldr	r1, [pc, #228]	@ (800f0cc <pbuf_realloc+0x100>)
 800efe6:	483a      	ldr	r0, [pc, #232]	@ (800f0d0 <pbuf_realloc+0x104>)
 800efe8:	f00b f9fa 	bl	801a3e0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	891b      	ldrh	r3, [r3, #8]
 800eff0:	887a      	ldrh	r2, [r7, #2]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d263      	bcs.n	800f0be <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	891a      	ldrh	r2, [r3, #8]
 800effa:	887b      	ldrh	r3, [r7, #2]
 800effc:	1ad3      	subs	r3, r2, r3
 800effe:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f000:	887b      	ldrh	r3, [r7, #2]
 800f002:	817b      	strh	r3, [r7, #10]
  q = p;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f008:	e018      	b.n	800f03c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	895b      	ldrh	r3, [r3, #10]
 800f00e:	897a      	ldrh	r2, [r7, #10]
 800f010:	1ad3      	subs	r3, r2, r3
 800f012:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	891a      	ldrh	r2, [r3, #8]
 800f018:	893b      	ldrh	r3, [r7, #8]
 800f01a:	1ad3      	subs	r3, r2, r3
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d106      	bne.n	800f03c <pbuf_realloc+0x70>
 800f02e:	4b26      	ldr	r3, [pc, #152]	@ (800f0c8 <pbuf_realloc+0xfc>)
 800f030:	f240 12af 	movw	r2, #431	@ 0x1af
 800f034:	4927      	ldr	r1, [pc, #156]	@ (800f0d4 <pbuf_realloc+0x108>)
 800f036:	4826      	ldr	r0, [pc, #152]	@ (800f0d0 <pbuf_realloc+0x104>)
 800f038:	f00b f9d2 	bl	801a3e0 <iprintf>
  while (rem_len > q->len) {
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	895b      	ldrh	r3, [r3, #10]
 800f040:	897a      	ldrh	r2, [r7, #10]
 800f042:	429a      	cmp	r2, r3
 800f044:	d8e1      	bhi.n	800f00a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	7b1b      	ldrb	r3, [r3, #12]
 800f04a:	f003 030f 	and.w	r3, r3, #15
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d121      	bne.n	800f096 <pbuf_realloc+0xca>
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	895b      	ldrh	r3, [r3, #10]
 800f056:	897a      	ldrh	r2, [r7, #10]
 800f058:	429a      	cmp	r2, r3
 800f05a:	d01c      	beq.n	800f096 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	7b5b      	ldrb	r3, [r3, #13]
 800f060:	f003 0302 	and.w	r3, r3, #2
 800f064:	2b00      	cmp	r3, #0
 800f066:	d116      	bne.n	800f096 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	685a      	ldr	r2, [r3, #4]
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	1ad3      	subs	r3, r2, r3
 800f070:	b29a      	uxth	r2, r3
 800f072:	897b      	ldrh	r3, [r7, #10]
 800f074:	4413      	add	r3, r2
 800f076:	b29b      	uxth	r3, r3
 800f078:	4619      	mov	r1, r3
 800f07a:	68f8      	ldr	r0, [r7, #12]
 800f07c:	f7fe ff2c 	bl	800ded8 <mem_trim>
 800f080:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d106      	bne.n	800f096 <pbuf_realloc+0xca>
 800f088:	4b0f      	ldr	r3, [pc, #60]	@ (800f0c8 <pbuf_realloc+0xfc>)
 800f08a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800f08e:	4912      	ldr	r1, [pc, #72]	@ (800f0d8 <pbuf_realloc+0x10c>)
 800f090:	480f      	ldr	r0, [pc, #60]	@ (800f0d0 <pbuf_realloc+0x104>)
 800f092:	f00b f9a5 	bl	801a3e0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	897a      	ldrh	r2, [r7, #10]
 800f09a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	895a      	ldrh	r2, [r3, #10]
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d004      	beq.n	800f0b6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f000 f943 	bl	800f33c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	601a      	str	r2, [r3, #0]
 800f0bc:	e000      	b.n	800f0c0 <pbuf_realloc+0xf4>
    return;
 800f0be:	bf00      	nop

}
 800f0c0:	3710      	adds	r7, #16
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}
 800f0c6:	bf00      	nop
 800f0c8:	0801f0e0 	.word	0x0801f0e0
 800f0cc:	0801f1f8 	.word	0x0801f1f8
 800f0d0:	0801f140 	.word	0x0801f140
 800f0d4:	0801f210 	.word	0x0801f210
 800f0d8:	0801f228 	.word	0x0801f228

0800f0dc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b086      	sub	sp, #24
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	60f8      	str	r0, [r7, #12]
 800f0e4:	60b9      	str	r1, [r7, #8]
 800f0e6:	4613      	mov	r3, r2
 800f0e8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d106      	bne.n	800f0fe <pbuf_add_header_impl+0x22>
 800f0f0:	4b2b      	ldr	r3, [pc, #172]	@ (800f1a0 <pbuf_add_header_impl+0xc4>)
 800f0f2:	f240 12df 	movw	r2, #479	@ 0x1df
 800f0f6:	492b      	ldr	r1, [pc, #172]	@ (800f1a4 <pbuf_add_header_impl+0xc8>)
 800f0f8:	482b      	ldr	r0, [pc, #172]	@ (800f1a8 <pbuf_add_header_impl+0xcc>)
 800f0fa:	f00b f971 	bl	801a3e0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d003      	beq.n	800f10c <pbuf_add_header_impl+0x30>
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f10a:	d301      	bcc.n	800f110 <pbuf_add_header_impl+0x34>
    return 1;
 800f10c:	2301      	movs	r3, #1
 800f10e:	e043      	b.n	800f198 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d101      	bne.n	800f11a <pbuf_add_header_impl+0x3e>
    return 0;
 800f116:	2300      	movs	r3, #0
 800f118:	e03e      	b.n	800f198 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	891a      	ldrh	r2, [r3, #8]
 800f122:	8a7b      	ldrh	r3, [r7, #18]
 800f124:	4413      	add	r3, r2
 800f126:	b29b      	uxth	r3, r3
 800f128:	8a7a      	ldrh	r2, [r7, #18]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d901      	bls.n	800f132 <pbuf_add_header_impl+0x56>
    return 1;
 800f12e:	2301      	movs	r3, #1
 800f130:	e032      	b.n	800f198 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	7b1b      	ldrb	r3, [r3, #12]
 800f136:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f138:	8a3b      	ldrh	r3, [r7, #16]
 800f13a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d00c      	beq.n	800f15c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	685a      	ldr	r2, [r3, #4]
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	425b      	negs	r3, r3
 800f14a:	4413      	add	r3, r2
 800f14c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	3310      	adds	r3, #16
 800f152:	697a      	ldr	r2, [r7, #20]
 800f154:	429a      	cmp	r2, r3
 800f156:	d20d      	bcs.n	800f174 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f158:	2301      	movs	r3, #1
 800f15a:	e01d      	b.n	800f198 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f15c:	79fb      	ldrb	r3, [r7, #7]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d006      	beq.n	800f170 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	685a      	ldr	r2, [r3, #4]
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	425b      	negs	r3, r3
 800f16a:	4413      	add	r3, r2
 800f16c:	617b      	str	r3, [r7, #20]
 800f16e:	e001      	b.n	800f174 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f170:	2301      	movs	r3, #1
 800f172:	e011      	b.n	800f198 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	697a      	ldr	r2, [r7, #20]
 800f178:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	895a      	ldrh	r2, [r3, #10]
 800f17e:	8a7b      	ldrh	r3, [r7, #18]
 800f180:	4413      	add	r3, r2
 800f182:	b29a      	uxth	r2, r3
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	891a      	ldrh	r2, [r3, #8]
 800f18c:	8a7b      	ldrh	r3, [r7, #18]
 800f18e:	4413      	add	r3, r2
 800f190:	b29a      	uxth	r2, r3
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	811a      	strh	r2, [r3, #8]


  return 0;
 800f196:	2300      	movs	r3, #0
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3718      	adds	r7, #24
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}
 800f1a0:	0801f0e0 	.word	0x0801f0e0
 800f1a4:	0801f244 	.word	0x0801f244
 800f1a8:	0801f140 	.word	0x0801f140

0800f1ac <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
 800f1b4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	6839      	ldr	r1, [r7, #0]
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f7ff ff8e 	bl	800f0dc <pbuf_add_header_impl>
 800f1c0:	4603      	mov	r3, r0
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3708      	adds	r7, #8
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
	...

0800f1cc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b084      	sub	sp, #16
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d106      	bne.n	800f1ea <pbuf_remove_header+0x1e>
 800f1dc:	4b20      	ldr	r3, [pc, #128]	@ (800f260 <pbuf_remove_header+0x94>)
 800f1de:	f240 224b 	movw	r2, #587	@ 0x24b
 800f1e2:	4920      	ldr	r1, [pc, #128]	@ (800f264 <pbuf_remove_header+0x98>)
 800f1e4:	4820      	ldr	r0, [pc, #128]	@ (800f268 <pbuf_remove_header+0x9c>)
 800f1e6:	f00b f8fb 	bl	801a3e0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d003      	beq.n	800f1f8 <pbuf_remove_header+0x2c>
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f1f6:	d301      	bcc.n	800f1fc <pbuf_remove_header+0x30>
    return 1;
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	e02c      	b.n	800f256 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d101      	bne.n	800f206 <pbuf_remove_header+0x3a>
    return 0;
 800f202:	2300      	movs	r3, #0
 800f204:	e027      	b.n	800f256 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	895b      	ldrh	r3, [r3, #10]
 800f20e:	89fa      	ldrh	r2, [r7, #14]
 800f210:	429a      	cmp	r2, r3
 800f212:	d908      	bls.n	800f226 <pbuf_remove_header+0x5a>
 800f214:	4b12      	ldr	r3, [pc, #72]	@ (800f260 <pbuf_remove_header+0x94>)
 800f216:	f240 2255 	movw	r2, #597	@ 0x255
 800f21a:	4914      	ldr	r1, [pc, #80]	@ (800f26c <pbuf_remove_header+0xa0>)
 800f21c:	4812      	ldr	r0, [pc, #72]	@ (800f268 <pbuf_remove_header+0x9c>)
 800f21e:	f00b f8df 	bl	801a3e0 <iprintf>
 800f222:	2301      	movs	r3, #1
 800f224:	e017      	b.n	800f256 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	685a      	ldr	r2, [r3, #4]
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	441a      	add	r2, r3
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	895a      	ldrh	r2, [r3, #10]
 800f23c:	89fb      	ldrh	r3, [r7, #14]
 800f23e:	1ad3      	subs	r3, r2, r3
 800f240:	b29a      	uxth	r2, r3
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	891a      	ldrh	r2, [r3, #8]
 800f24a:	89fb      	ldrh	r3, [r7, #14]
 800f24c:	1ad3      	subs	r3, r2, r3
 800f24e:	b29a      	uxth	r2, r3
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f254:	2300      	movs	r3, #0
}
 800f256:	4618      	mov	r0, r3
 800f258:	3710      	adds	r7, #16
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	0801f0e0 	.word	0x0801f0e0
 800f264:	0801f244 	.word	0x0801f244
 800f268:	0801f140 	.word	0x0801f140
 800f26c:	0801f250 	.word	0x0801f250

0800f270 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	460b      	mov	r3, r1
 800f27a:	807b      	strh	r3, [r7, #2]
 800f27c:	4613      	mov	r3, r2
 800f27e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f280:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f284:	2b00      	cmp	r3, #0
 800f286:	da08      	bge.n	800f29a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f288:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f28c:	425b      	negs	r3, r3
 800f28e:	4619      	mov	r1, r3
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f7ff ff9b 	bl	800f1cc <pbuf_remove_header>
 800f296:	4603      	mov	r3, r0
 800f298:	e007      	b.n	800f2aa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f29a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f29e:	787a      	ldrb	r2, [r7, #1]
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f7ff ff1a 	bl	800f0dc <pbuf_add_header_impl>
 800f2a8:	4603      	mov	r3, r0
  }
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3708      	adds	r7, #8
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}

0800f2b2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f2b2:	b580      	push	{r7, lr}
 800f2b4:	b082      	sub	sp, #8
 800f2b6:	af00      	add	r7, sp, #0
 800f2b8:	6078      	str	r0, [r7, #4]
 800f2ba:	460b      	mov	r3, r1
 800f2bc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f2be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f7ff ffd2 	bl	800f270 <pbuf_header_impl>
 800f2cc:	4603      	mov	r3, r0
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3708      	adds	r7, #8
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800f2d6:	b580      	push	{r7, lr}
 800f2d8:	b086      	sub	sp, #24
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	6078      	str	r0, [r7, #4]
 800f2de:	460b      	mov	r3, r1
 800f2e0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800f2e6:	887b      	ldrh	r3, [r7, #2]
 800f2e8:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800f2ea:	e01c      	b.n	800f326 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	895b      	ldrh	r3, [r3, #10]
 800f2f0:	8a7a      	ldrh	r2, [r7, #18]
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d310      	bcc.n	800f318 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	895b      	ldrh	r3, [r3, #10]
 800f2fe:	8a7a      	ldrh	r2, [r7, #18]
 800f300:	1ad3      	subs	r3, r2, r3
 800f302:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	2200      	movs	r2, #0
 800f30e:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800f310:	68f8      	ldr	r0, [r7, #12]
 800f312:	f000 f813 	bl	800f33c <pbuf_free>
 800f316:	e006      	b.n	800f326 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800f318:	8a7b      	ldrh	r3, [r7, #18]
 800f31a:	4619      	mov	r1, r3
 800f31c:	6978      	ldr	r0, [r7, #20]
 800f31e:	f7ff ff55 	bl	800f1cc <pbuf_remove_header>
      free_left = 0;
 800f322:	2300      	movs	r3, #0
 800f324:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800f326:	8a7b      	ldrh	r3, [r7, #18]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d002      	beq.n	800f332 <pbuf_free_header+0x5c>
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d1dc      	bne.n	800f2ec <pbuf_free_header+0x16>
    }
  }
  return p;
 800f332:	697b      	ldr	r3, [r7, #20]
}
 800f334:	4618      	mov	r0, r3
 800f336:	3718      	adds	r7, #24
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}

0800f33c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b088      	sub	sp, #32
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d10b      	bne.n	800f362 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d106      	bne.n	800f35e <pbuf_free+0x22>
 800f350:	4b3b      	ldr	r3, [pc, #236]	@ (800f440 <pbuf_free+0x104>)
 800f352:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800f356:	493b      	ldr	r1, [pc, #236]	@ (800f444 <pbuf_free+0x108>)
 800f358:	483b      	ldr	r0, [pc, #236]	@ (800f448 <pbuf_free+0x10c>)
 800f35a:	f00b f841 	bl	801a3e0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f35e:	2300      	movs	r3, #0
 800f360:	e069      	b.n	800f436 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f362:	2300      	movs	r3, #0
 800f364:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f366:	e062      	b.n	800f42e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f368:	f009 fe9a 	bl	80190a0 <sys_arch_protect>
 800f36c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	7b9b      	ldrb	r3, [r3, #14]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d106      	bne.n	800f384 <pbuf_free+0x48>
 800f376:	4b32      	ldr	r3, [pc, #200]	@ (800f440 <pbuf_free+0x104>)
 800f378:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800f37c:	4933      	ldr	r1, [pc, #204]	@ (800f44c <pbuf_free+0x110>)
 800f37e:	4832      	ldr	r0, [pc, #200]	@ (800f448 <pbuf_free+0x10c>)
 800f380:	f00b f82e 	bl	801a3e0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	7b9b      	ldrb	r3, [r3, #14]
 800f388:	3b01      	subs	r3, #1
 800f38a:	b2da      	uxtb	r2, r3
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	739a      	strb	r2, [r3, #14]
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	7b9b      	ldrb	r3, [r3, #14]
 800f394:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f396:	69b8      	ldr	r0, [r7, #24]
 800f398:	f009 fe90 	bl	80190bc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f39c:	7dfb      	ldrb	r3, [r7, #23]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d143      	bne.n	800f42a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	7b1b      	ldrb	r3, [r3, #12]
 800f3ac:	f003 030f 	and.w	r3, r3, #15
 800f3b0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	7b5b      	ldrb	r3, [r3, #13]
 800f3b6:	f003 0302 	and.w	r3, r3, #2
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d011      	beq.n	800f3e2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	691b      	ldr	r3, [r3, #16]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d106      	bne.n	800f3d8 <pbuf_free+0x9c>
 800f3ca:	4b1d      	ldr	r3, [pc, #116]	@ (800f440 <pbuf_free+0x104>)
 800f3cc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f3d0:	491f      	ldr	r1, [pc, #124]	@ (800f450 <pbuf_free+0x114>)
 800f3d2:	481d      	ldr	r0, [pc, #116]	@ (800f448 <pbuf_free+0x10c>)
 800f3d4:	f00b f804 	bl	801a3e0 <iprintf>
        pc->custom_free_function(p);
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	691b      	ldr	r3, [r3, #16]
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	4798      	blx	r3
 800f3e0:	e01d      	b.n	800f41e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f3e2:	7bfb      	ldrb	r3, [r7, #15]
 800f3e4:	2b02      	cmp	r3, #2
 800f3e6:	d104      	bne.n	800f3f2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f3e8:	6879      	ldr	r1, [r7, #4]
 800f3ea:	200c      	movs	r0, #12
 800f3ec:	f7ff f898 	bl	800e520 <memp_free>
 800f3f0:	e015      	b.n	800f41e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f3f2:	7bfb      	ldrb	r3, [r7, #15]
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	d104      	bne.n	800f402 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f3f8:	6879      	ldr	r1, [r7, #4]
 800f3fa:	200b      	movs	r0, #11
 800f3fc:	f7ff f890 	bl	800e520 <memp_free>
 800f400:	e00d      	b.n	800f41e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f402:	7bfb      	ldrb	r3, [r7, #15]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d103      	bne.n	800f410 <pbuf_free+0xd4>
          mem_free(p);
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f7fe fcd5 	bl	800ddb8 <mem_free>
 800f40e:	e006      	b.n	800f41e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f410:	4b0b      	ldr	r3, [pc, #44]	@ (800f440 <pbuf_free+0x104>)
 800f412:	f240 320f 	movw	r2, #783	@ 0x30f
 800f416:	490f      	ldr	r1, [pc, #60]	@ (800f454 <pbuf_free+0x118>)
 800f418:	480b      	ldr	r0, [pc, #44]	@ (800f448 <pbuf_free+0x10c>)
 800f41a:	f00a ffe1 	bl	801a3e0 <iprintf>
        }
      }
      count++;
 800f41e:	7ffb      	ldrb	r3, [r7, #31]
 800f420:	3301      	adds	r3, #1
 800f422:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f424:	693b      	ldr	r3, [r7, #16]
 800f426:	607b      	str	r3, [r7, #4]
 800f428:	e001      	b.n	800f42e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f42a:	2300      	movs	r3, #0
 800f42c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d199      	bne.n	800f368 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f434:	7ffb      	ldrb	r3, [r7, #31]
}
 800f436:	4618      	mov	r0, r3
 800f438:	3720      	adds	r7, #32
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	bf00      	nop
 800f440:	0801f0e0 	.word	0x0801f0e0
 800f444:	0801f244 	.word	0x0801f244
 800f448:	0801f140 	.word	0x0801f140
 800f44c:	0801f270 	.word	0x0801f270
 800f450:	0801f288 	.word	0x0801f288
 800f454:	0801f2ac 	.word	0x0801f2ac

0800f458 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f458:	b480      	push	{r7}
 800f45a:	b085      	sub	sp, #20
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f460:	2300      	movs	r3, #0
 800f462:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f464:	e005      	b.n	800f472 <pbuf_clen+0x1a>
    ++len;
 800f466:	89fb      	ldrh	r3, [r7, #14]
 800f468:	3301      	adds	r3, #1
 800f46a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d1f6      	bne.n	800f466 <pbuf_clen+0xe>
  }
  return len;
 800f478:	89fb      	ldrh	r3, [r7, #14]
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3714      	adds	r7, #20
 800f47e:	46bd      	mov	sp, r7
 800f480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f484:	4770      	bx	lr
	...

0800f488 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b084      	sub	sp, #16
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d016      	beq.n	800f4c4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f496:	f009 fe03 	bl	80190a0 <sys_arch_protect>
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	7b9b      	ldrb	r3, [r3, #14]
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	b2da      	uxtb	r2, r3
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	739a      	strb	r2, [r3, #14]
 800f4a8:	68f8      	ldr	r0, [r7, #12]
 800f4aa:	f009 fe07 	bl	80190bc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	7b9b      	ldrb	r3, [r3, #14]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d106      	bne.n	800f4c4 <pbuf_ref+0x3c>
 800f4b6:	4b05      	ldr	r3, [pc, #20]	@ (800f4cc <pbuf_ref+0x44>)
 800f4b8:	f240 3242 	movw	r2, #834	@ 0x342
 800f4bc:	4904      	ldr	r1, [pc, #16]	@ (800f4d0 <pbuf_ref+0x48>)
 800f4be:	4805      	ldr	r0, [pc, #20]	@ (800f4d4 <pbuf_ref+0x4c>)
 800f4c0:	f00a ff8e 	bl	801a3e0 <iprintf>
  }
}
 800f4c4:	bf00      	nop
 800f4c6:	3710      	adds	r7, #16
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	0801f0e0 	.word	0x0801f0e0
 800f4d0:	0801f2c0 	.word	0x0801f2c0
 800f4d4:	0801f140 	.word	0x0801f140

0800f4d8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d002      	beq.n	800f4ee <pbuf_cat+0x16>
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d107      	bne.n	800f4fe <pbuf_cat+0x26>
 800f4ee:	4b20      	ldr	r3, [pc, #128]	@ (800f570 <pbuf_cat+0x98>)
 800f4f0:	f240 3259 	movw	r2, #857	@ 0x359
 800f4f4:	491f      	ldr	r1, [pc, #124]	@ (800f574 <pbuf_cat+0x9c>)
 800f4f6:	4820      	ldr	r0, [pc, #128]	@ (800f578 <pbuf_cat+0xa0>)
 800f4f8:	f00a ff72 	bl	801a3e0 <iprintf>
 800f4fc:	e034      	b.n	800f568 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	60fb      	str	r3, [r7, #12]
 800f502:	e00a      	b.n	800f51a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	891a      	ldrh	r2, [r3, #8]
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	891b      	ldrh	r3, [r3, #8]
 800f50c:	4413      	add	r3, r2
 800f50e:	b29a      	uxth	r2, r3
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	60fb      	str	r3, [r7, #12]
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d1f0      	bne.n	800f504 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	891a      	ldrh	r2, [r3, #8]
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	895b      	ldrh	r3, [r3, #10]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d006      	beq.n	800f53c <pbuf_cat+0x64>
 800f52e:	4b10      	ldr	r3, [pc, #64]	@ (800f570 <pbuf_cat+0x98>)
 800f530:	f240 3262 	movw	r2, #866	@ 0x362
 800f534:	4911      	ldr	r1, [pc, #68]	@ (800f57c <pbuf_cat+0xa4>)
 800f536:	4810      	ldr	r0, [pc, #64]	@ (800f578 <pbuf_cat+0xa0>)
 800f538:	f00a ff52 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d006      	beq.n	800f552 <pbuf_cat+0x7a>
 800f544:	4b0a      	ldr	r3, [pc, #40]	@ (800f570 <pbuf_cat+0x98>)
 800f546:	f240 3263 	movw	r2, #867	@ 0x363
 800f54a:	490d      	ldr	r1, [pc, #52]	@ (800f580 <pbuf_cat+0xa8>)
 800f54c:	480a      	ldr	r0, [pc, #40]	@ (800f578 <pbuf_cat+0xa0>)
 800f54e:	f00a ff47 	bl	801a3e0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	891a      	ldrh	r2, [r3, #8]
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	891b      	ldrh	r3, [r3, #8]
 800f55a:	4413      	add	r3, r2
 800f55c:	b29a      	uxth	r2, r3
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	683a      	ldr	r2, [r7, #0]
 800f566:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f568:	3710      	adds	r7, #16
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
 800f56e:	bf00      	nop
 800f570:	0801f0e0 	.word	0x0801f0e0
 800f574:	0801f2d4 	.word	0x0801f2d4
 800f578:	0801f140 	.word	0x0801f140
 800f57c:	0801f30c 	.word	0x0801f30c
 800f580:	0801f33c 	.word	0x0801f33c

0800f584 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f58e:	6839      	ldr	r1, [r7, #0]
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f7ff ffa1 	bl	800f4d8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f596:	6838      	ldr	r0, [r7, #0]
 800f598:	f7ff ff76 	bl	800f488 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f59c:	bf00      	nop
 800f59e:	3708      	adds	r7, #8
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}

0800f5a4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b086      	sub	sp, #24
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	617b      	str	r3, [r7, #20]
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d008      	beq.n	800f5ce <pbuf_copy+0x2a>
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d005      	beq.n	800f5ce <pbuf_copy+0x2a>
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	891a      	ldrh	r2, [r3, #8]
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	891b      	ldrh	r3, [r3, #8]
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d209      	bcs.n	800f5e2 <pbuf_copy+0x3e>
 800f5ce:	4b57      	ldr	r3, [pc, #348]	@ (800f72c <pbuf_copy+0x188>)
 800f5d0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800f5d4:	4956      	ldr	r1, [pc, #344]	@ (800f730 <pbuf_copy+0x18c>)
 800f5d6:	4857      	ldr	r0, [pc, #348]	@ (800f734 <pbuf_copy+0x190>)
 800f5d8:	f00a ff02 	bl	801a3e0 <iprintf>
 800f5dc:	f06f 030f 	mvn.w	r3, #15
 800f5e0:	e09f      	b.n	800f722 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	895b      	ldrh	r3, [r3, #10]
 800f5e6:	461a      	mov	r2, r3
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	1ad2      	subs	r2, r2, r3
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	895b      	ldrh	r3, [r3, #10]
 800f5f0:	4619      	mov	r1, r3
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	1acb      	subs	r3, r1, r3
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d306      	bcc.n	800f608 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	895b      	ldrh	r3, [r3, #10]
 800f5fe:	461a      	mov	r2, r3
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	1ad3      	subs	r3, r2, r3
 800f604:	60fb      	str	r3, [r7, #12]
 800f606:	e005      	b.n	800f614 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	895b      	ldrh	r3, [r3, #10]
 800f60c:	461a      	mov	r2, r3
 800f60e:	697b      	ldr	r3, [r7, #20]
 800f610:	1ad3      	subs	r3, r2, r3
 800f612:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	685a      	ldr	r2, [r3, #4]
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	18d0      	adds	r0, r2, r3
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	685a      	ldr	r2, [r3, #4]
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	4413      	add	r3, r2
 800f624:	68fa      	ldr	r2, [r7, #12]
 800f626:	4619      	mov	r1, r3
 800f628:	f00b f963 	bl	801a8f2 <memcpy>
    offset_to += len;
 800f62c:	697a      	ldr	r2, [r7, #20]
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	4413      	add	r3, r2
 800f632:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f634:	693a      	ldr	r2, [r7, #16]
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	4413      	add	r3, r2
 800f63a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	895b      	ldrh	r3, [r3, #10]
 800f640:	461a      	mov	r2, r3
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	4293      	cmp	r3, r2
 800f646:	d906      	bls.n	800f656 <pbuf_copy+0xb2>
 800f648:	4b38      	ldr	r3, [pc, #224]	@ (800f72c <pbuf_copy+0x188>)
 800f64a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800f64e:	493a      	ldr	r1, [pc, #232]	@ (800f738 <pbuf_copy+0x194>)
 800f650:	4838      	ldr	r0, [pc, #224]	@ (800f734 <pbuf_copy+0x190>)
 800f652:	f00a fec5 	bl	801a3e0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	895b      	ldrh	r3, [r3, #10]
 800f65a:	461a      	mov	r2, r3
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	4293      	cmp	r3, r2
 800f660:	d906      	bls.n	800f670 <pbuf_copy+0xcc>
 800f662:	4b32      	ldr	r3, [pc, #200]	@ (800f72c <pbuf_copy+0x188>)
 800f664:	f240 32da 	movw	r2, #986	@ 0x3da
 800f668:	4934      	ldr	r1, [pc, #208]	@ (800f73c <pbuf_copy+0x198>)
 800f66a:	4832      	ldr	r0, [pc, #200]	@ (800f734 <pbuf_copy+0x190>)
 800f66c:	f00a feb8 	bl	801a3e0 <iprintf>
    if (offset_from >= p_from->len) {
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	895b      	ldrh	r3, [r3, #10]
 800f674:	461a      	mov	r2, r3
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	4293      	cmp	r3, r2
 800f67a:	d304      	bcc.n	800f686 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f67c:	2300      	movs	r3, #0
 800f67e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	895b      	ldrh	r3, [r3, #10]
 800f68a:	461a      	mov	r2, r3
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	4293      	cmp	r3, r2
 800f690:	d114      	bne.n	800f6bc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f692:	2300      	movs	r3, #0
 800f694:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d10c      	bne.n	800f6bc <pbuf_copy+0x118>
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d009      	beq.n	800f6bc <pbuf_copy+0x118>
 800f6a8:	4b20      	ldr	r3, [pc, #128]	@ (800f72c <pbuf_copy+0x188>)
 800f6aa:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800f6ae:	4924      	ldr	r1, [pc, #144]	@ (800f740 <pbuf_copy+0x19c>)
 800f6b0:	4820      	ldr	r0, [pc, #128]	@ (800f734 <pbuf_copy+0x190>)
 800f6b2:	f00a fe95 	bl	801a3e0 <iprintf>
 800f6b6:	f06f 030f 	mvn.w	r3, #15
 800f6ba:	e032      	b.n	800f722 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d013      	beq.n	800f6ea <pbuf_copy+0x146>
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	895a      	ldrh	r2, [r3, #10]
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	891b      	ldrh	r3, [r3, #8]
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d10d      	bne.n	800f6ea <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d009      	beq.n	800f6ea <pbuf_copy+0x146>
 800f6d6:	4b15      	ldr	r3, [pc, #84]	@ (800f72c <pbuf_copy+0x188>)
 800f6d8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800f6dc:	4919      	ldr	r1, [pc, #100]	@ (800f744 <pbuf_copy+0x1a0>)
 800f6de:	4815      	ldr	r0, [pc, #84]	@ (800f734 <pbuf_copy+0x190>)
 800f6e0:	f00a fe7e 	bl	801a3e0 <iprintf>
 800f6e4:	f06f 0305 	mvn.w	r3, #5
 800f6e8:	e01b      	b.n	800f722 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d013      	beq.n	800f718 <pbuf_copy+0x174>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	895a      	ldrh	r2, [r3, #10]
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	891b      	ldrh	r3, [r3, #8]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d10d      	bne.n	800f718 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d009      	beq.n	800f718 <pbuf_copy+0x174>
 800f704:	4b09      	ldr	r3, [pc, #36]	@ (800f72c <pbuf_copy+0x188>)
 800f706:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800f70a:	490e      	ldr	r1, [pc, #56]	@ (800f744 <pbuf_copy+0x1a0>)
 800f70c:	4809      	ldr	r0, [pc, #36]	@ (800f734 <pbuf_copy+0x190>)
 800f70e:	f00a fe67 	bl	801a3e0 <iprintf>
 800f712:	f06f 0305 	mvn.w	r3, #5
 800f716:	e004      	b.n	800f722 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	f47f af61 	bne.w	800f5e2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f720:	2300      	movs	r3, #0
}
 800f722:	4618      	mov	r0, r3
 800f724:	3718      	adds	r7, #24
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}
 800f72a:	bf00      	nop
 800f72c:	0801f0e0 	.word	0x0801f0e0
 800f730:	0801f388 	.word	0x0801f388
 800f734:	0801f140 	.word	0x0801f140
 800f738:	0801f3b8 	.word	0x0801f3b8
 800f73c:	0801f3d0 	.word	0x0801f3d0
 800f740:	0801f3ec 	.word	0x0801f3ec
 800f744:	0801f3fc 	.word	0x0801f3fc

0800f748 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b088      	sub	sp, #32
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	60f8      	str	r0, [r7, #12]
 800f750:	60b9      	str	r1, [r7, #8]
 800f752:	4611      	mov	r1, r2
 800f754:	461a      	mov	r2, r3
 800f756:	460b      	mov	r3, r1
 800f758:	80fb      	strh	r3, [r7, #6]
 800f75a:	4613      	mov	r3, r2
 800f75c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f75e:	2300      	movs	r3, #0
 800f760:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f762:	2300      	movs	r3, #0
 800f764:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d108      	bne.n	800f77e <pbuf_copy_partial+0x36>
 800f76c:	4b2b      	ldr	r3, [pc, #172]	@ (800f81c <pbuf_copy_partial+0xd4>)
 800f76e:	f240 420a 	movw	r2, #1034	@ 0x40a
 800f772:	492b      	ldr	r1, [pc, #172]	@ (800f820 <pbuf_copy_partial+0xd8>)
 800f774:	482b      	ldr	r0, [pc, #172]	@ (800f824 <pbuf_copy_partial+0xdc>)
 800f776:	f00a fe33 	bl	801a3e0 <iprintf>
 800f77a:	2300      	movs	r3, #0
 800f77c:	e04a      	b.n	800f814 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d108      	bne.n	800f796 <pbuf_copy_partial+0x4e>
 800f784:	4b25      	ldr	r3, [pc, #148]	@ (800f81c <pbuf_copy_partial+0xd4>)
 800f786:	f240 420b 	movw	r2, #1035	@ 0x40b
 800f78a:	4927      	ldr	r1, [pc, #156]	@ (800f828 <pbuf_copy_partial+0xe0>)
 800f78c:	4825      	ldr	r0, [pc, #148]	@ (800f824 <pbuf_copy_partial+0xdc>)
 800f78e:	f00a fe27 	bl	801a3e0 <iprintf>
 800f792:	2300      	movs	r3, #0
 800f794:	e03e      	b.n	800f814 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	61fb      	str	r3, [r7, #28]
 800f79a:	e034      	b.n	800f806 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f79c:	88bb      	ldrh	r3, [r7, #4]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d00a      	beq.n	800f7b8 <pbuf_copy_partial+0x70>
 800f7a2:	69fb      	ldr	r3, [r7, #28]
 800f7a4:	895b      	ldrh	r3, [r3, #10]
 800f7a6:	88ba      	ldrh	r2, [r7, #4]
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	d305      	bcc.n	800f7b8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f7ac:	69fb      	ldr	r3, [r7, #28]
 800f7ae:	895b      	ldrh	r3, [r3, #10]
 800f7b0:	88ba      	ldrh	r2, [r7, #4]
 800f7b2:	1ad3      	subs	r3, r2, r3
 800f7b4:	80bb      	strh	r3, [r7, #4]
 800f7b6:	e023      	b.n	800f800 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f7b8:	69fb      	ldr	r3, [r7, #28]
 800f7ba:	895a      	ldrh	r2, [r3, #10]
 800f7bc:	88bb      	ldrh	r3, [r7, #4]
 800f7be:	1ad3      	subs	r3, r2, r3
 800f7c0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f7c2:	8b3a      	ldrh	r2, [r7, #24]
 800f7c4:	88fb      	ldrh	r3, [r7, #6]
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d901      	bls.n	800f7ce <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f7ca:	88fb      	ldrh	r3, [r7, #6]
 800f7cc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f7ce:	8b7b      	ldrh	r3, [r7, #26]
 800f7d0:	68ba      	ldr	r2, [r7, #8]
 800f7d2:	18d0      	adds	r0, r2, r3
 800f7d4:	69fb      	ldr	r3, [r7, #28]
 800f7d6:	685a      	ldr	r2, [r3, #4]
 800f7d8:	88bb      	ldrh	r3, [r7, #4]
 800f7da:	4413      	add	r3, r2
 800f7dc:	8b3a      	ldrh	r2, [r7, #24]
 800f7de:	4619      	mov	r1, r3
 800f7e0:	f00b f887 	bl	801a8f2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f7e4:	8afa      	ldrh	r2, [r7, #22]
 800f7e6:	8b3b      	ldrh	r3, [r7, #24]
 800f7e8:	4413      	add	r3, r2
 800f7ea:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f7ec:	8b7a      	ldrh	r2, [r7, #26]
 800f7ee:	8b3b      	ldrh	r3, [r7, #24]
 800f7f0:	4413      	add	r3, r2
 800f7f2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f7f4:	88fa      	ldrh	r2, [r7, #6]
 800f7f6:	8b3b      	ldrh	r3, [r7, #24]
 800f7f8:	1ad3      	subs	r3, r2, r3
 800f7fa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	61fb      	str	r3, [r7, #28]
 800f806:	88fb      	ldrh	r3, [r7, #6]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d002      	beq.n	800f812 <pbuf_copy_partial+0xca>
 800f80c:	69fb      	ldr	r3, [r7, #28]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d1c4      	bne.n	800f79c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f812:	8afb      	ldrh	r3, [r7, #22]
}
 800f814:	4618      	mov	r0, r3
 800f816:	3720      	adds	r7, #32
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}
 800f81c:	0801f0e0 	.word	0x0801f0e0
 800f820:	0801f428 	.word	0x0801f428
 800f824:	0801f140 	.word	0x0801f140
 800f828:	0801f448 	.word	0x0801f448

0800f82c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b084      	sub	sp, #16
 800f830:	af00      	add	r7, sp, #0
 800f832:	4603      	mov	r3, r0
 800f834:	603a      	str	r2, [r7, #0]
 800f836:	71fb      	strb	r3, [r7, #7]
 800f838:	460b      	mov	r3, r1
 800f83a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	8919      	ldrh	r1, [r3, #8]
 800f840:	88ba      	ldrh	r2, [r7, #4]
 800f842:	79fb      	ldrb	r3, [r7, #7]
 800f844:	4618      	mov	r0, r3
 800f846:	f7ff fa63 	bl	800ed10 <pbuf_alloc>
 800f84a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d101      	bne.n	800f856 <pbuf_clone+0x2a>
    return NULL;
 800f852:	2300      	movs	r3, #0
 800f854:	e011      	b.n	800f87a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f856:	6839      	ldr	r1, [r7, #0]
 800f858:	68f8      	ldr	r0, [r7, #12]
 800f85a:	f7ff fea3 	bl	800f5a4 <pbuf_copy>
 800f85e:	4603      	mov	r3, r0
 800f860:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f862:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d006      	beq.n	800f878 <pbuf_clone+0x4c>
 800f86a:	4b06      	ldr	r3, [pc, #24]	@ (800f884 <pbuf_clone+0x58>)
 800f86c:	f240 5224 	movw	r2, #1316	@ 0x524
 800f870:	4905      	ldr	r1, [pc, #20]	@ (800f888 <pbuf_clone+0x5c>)
 800f872:	4806      	ldr	r0, [pc, #24]	@ (800f88c <pbuf_clone+0x60>)
 800f874:	f00a fdb4 	bl	801a3e0 <iprintf>
  return q;
 800f878:	68fb      	ldr	r3, [r7, #12]
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3710      	adds	r7, #16
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	0801f0e0 	.word	0x0801f0e0
 800f888:	0801f554 	.word	0x0801f554
 800f88c:	0801f140 	.word	0x0801f140

0800f890 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f894:	f009 fdb2 	bl	80193fc <rand>
 800f898:	4603      	mov	r3, r0
 800f89a:	b29b      	uxth	r3, r3
 800f89c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800f8a6:	b29a      	uxth	r2, r3
 800f8a8:	4b01      	ldr	r3, [pc, #4]	@ (800f8b0 <tcp_init+0x20>)
 800f8aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f8ac:	bf00      	nop
 800f8ae:	bd80      	pop	{r7, pc}
 800f8b0:	20000024 	.word	0x20000024

0800f8b4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b082      	sub	sp, #8
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	7d1b      	ldrb	r3, [r3, #20]
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	d105      	bne.n	800f8d0 <tcp_free+0x1c>
 800f8c4:	4b06      	ldr	r3, [pc, #24]	@ (800f8e0 <tcp_free+0x2c>)
 800f8c6:	22d4      	movs	r2, #212	@ 0xd4
 800f8c8:	4906      	ldr	r1, [pc, #24]	@ (800f8e4 <tcp_free+0x30>)
 800f8ca:	4807      	ldr	r0, [pc, #28]	@ (800f8e8 <tcp_free+0x34>)
 800f8cc:	f00a fd88 	bl	801a3e0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f8d0:	6879      	ldr	r1, [r7, #4]
 800f8d2:	2001      	movs	r0, #1
 800f8d4:	f7fe fe24 	bl	800e520 <memp_free>
}
 800f8d8:	bf00      	nop
 800f8da:	3708      	adds	r7, #8
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	0801f5e0 	.word	0x0801f5e0
 800f8e4:	0801f610 	.word	0x0801f610
 800f8e8:	0801f624 	.word	0x0801f624

0800f8ec <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b082      	sub	sp, #8
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	7d1b      	ldrb	r3, [r3, #20]
 800f8f8:	2b01      	cmp	r3, #1
 800f8fa:	d105      	bne.n	800f908 <tcp_free_listen+0x1c>
 800f8fc:	4b06      	ldr	r3, [pc, #24]	@ (800f918 <tcp_free_listen+0x2c>)
 800f8fe:	22df      	movs	r2, #223	@ 0xdf
 800f900:	4906      	ldr	r1, [pc, #24]	@ (800f91c <tcp_free_listen+0x30>)
 800f902:	4807      	ldr	r0, [pc, #28]	@ (800f920 <tcp_free_listen+0x34>)
 800f904:	f00a fd6c 	bl	801a3e0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f908:	6879      	ldr	r1, [r7, #4]
 800f90a:	2002      	movs	r0, #2
 800f90c:	f7fe fe08 	bl	800e520 <memp_free>
}
 800f910:	bf00      	nop
 800f912:	3708      	adds	r7, #8
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}
 800f918:	0801f5e0 	.word	0x0801f5e0
 800f91c:	0801f64c 	.word	0x0801f64c
 800f920:	0801f624 	.word	0x0801f624

0800f924 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f928:	f001 f8c2 	bl	8010ab0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f92c:	4b07      	ldr	r3, [pc, #28]	@ (800f94c <tcp_tmr+0x28>)
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	3301      	adds	r3, #1
 800f932:	b2da      	uxtb	r2, r3
 800f934:	4b05      	ldr	r3, [pc, #20]	@ (800f94c <tcp_tmr+0x28>)
 800f936:	701a      	strb	r2, [r3, #0]
 800f938:	4b04      	ldr	r3, [pc, #16]	@ (800f94c <tcp_tmr+0x28>)
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	f003 0301 	and.w	r3, r3, #1
 800f940:	2b00      	cmp	r3, #0
 800f942:	d001      	beq.n	800f948 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f944:	f000 fd72 	bl	801042c <tcp_slowtmr>
  }
}
 800f948:	bf00      	nop
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	2000d0f5 	.word	0x2000d0f5

0800f950 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d105      	bne.n	800f96c <tcp_remove_listener+0x1c>
 800f960:	4b0d      	ldr	r3, [pc, #52]	@ (800f998 <tcp_remove_listener+0x48>)
 800f962:	22ff      	movs	r2, #255	@ 0xff
 800f964:	490d      	ldr	r1, [pc, #52]	@ (800f99c <tcp_remove_listener+0x4c>)
 800f966:	480e      	ldr	r0, [pc, #56]	@ (800f9a0 <tcp_remove_listener+0x50>)
 800f968:	f00a fd3a 	bl	801a3e0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	60fb      	str	r3, [r7, #12]
 800f970:	e00a      	b.n	800f988 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f976:	683a      	ldr	r2, [r7, #0]
 800f978:	429a      	cmp	r2, r3
 800f97a:	d102      	bne.n	800f982 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	2200      	movs	r2, #0
 800f980:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	68db      	ldr	r3, [r3, #12]
 800f986:	60fb      	str	r3, [r7, #12]
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d1f1      	bne.n	800f972 <tcp_remove_listener+0x22>
    }
  }
}
 800f98e:	bf00      	nop
 800f990:	bf00      	nop
 800f992:	3710      	adds	r7, #16
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}
 800f998:	0801f5e0 	.word	0x0801f5e0
 800f99c:	0801f668 	.word	0x0801f668
 800f9a0:	0801f624 	.word	0x0801f624

0800f9a4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d106      	bne.n	800f9c0 <tcp_listen_closed+0x1c>
 800f9b2:	4b14      	ldr	r3, [pc, #80]	@ (800fa04 <tcp_listen_closed+0x60>)
 800f9b4:	f240 1211 	movw	r2, #273	@ 0x111
 800f9b8:	4913      	ldr	r1, [pc, #76]	@ (800fa08 <tcp_listen_closed+0x64>)
 800f9ba:	4814      	ldr	r0, [pc, #80]	@ (800fa0c <tcp_listen_closed+0x68>)
 800f9bc:	f00a fd10 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	7d1b      	ldrb	r3, [r3, #20]
 800f9c4:	2b01      	cmp	r3, #1
 800f9c6:	d006      	beq.n	800f9d6 <tcp_listen_closed+0x32>
 800f9c8:	4b0e      	ldr	r3, [pc, #56]	@ (800fa04 <tcp_listen_closed+0x60>)
 800f9ca:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800f9ce:	4910      	ldr	r1, [pc, #64]	@ (800fa10 <tcp_listen_closed+0x6c>)
 800f9d0:	480e      	ldr	r0, [pc, #56]	@ (800fa0c <tcp_listen_closed+0x68>)
 800f9d2:	f00a fd05 	bl	801a3e0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	60fb      	str	r3, [r7, #12]
 800f9da:	e00b      	b.n	800f9f4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f9dc:	4a0d      	ldr	r2, [pc, #52]	@ (800fa14 <tcp_listen_closed+0x70>)
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	6879      	ldr	r1, [r7, #4]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f7ff ffb1 	bl	800f950 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	3301      	adds	r3, #1
 800f9f2:	60fb      	str	r3, [r7, #12]
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	2b03      	cmp	r3, #3
 800f9f8:	d9f0      	bls.n	800f9dc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f9fa:	bf00      	nop
 800f9fc:	bf00      	nop
 800f9fe:	3710      	adds	r7, #16
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}
 800fa04:	0801f5e0 	.word	0x0801f5e0
 800fa08:	0801f690 	.word	0x0801f690
 800fa0c:	0801f624 	.word	0x0801f624
 800fa10:	0801f69c 	.word	0x0801f69c
 800fa14:	080216e8 	.word	0x080216e8

0800fa18 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800fa18:	b5b0      	push	{r4, r5, r7, lr}
 800fa1a:	b088      	sub	sp, #32
 800fa1c:	af04      	add	r7, sp, #16
 800fa1e:	6078      	str	r0, [r7, #4]
 800fa20:	460b      	mov	r3, r1
 800fa22:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d106      	bne.n	800fa38 <tcp_close_shutdown+0x20>
 800fa2a:	4b63      	ldr	r3, [pc, #396]	@ (800fbb8 <tcp_close_shutdown+0x1a0>)
 800fa2c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800fa30:	4962      	ldr	r1, [pc, #392]	@ (800fbbc <tcp_close_shutdown+0x1a4>)
 800fa32:	4863      	ldr	r0, [pc, #396]	@ (800fbc0 <tcp_close_shutdown+0x1a8>)
 800fa34:	f00a fcd4 	bl	801a3e0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800fa38:	78fb      	ldrb	r3, [r7, #3]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d066      	beq.n	800fb0c <tcp_close_shutdown+0xf4>
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	7d1b      	ldrb	r3, [r3, #20]
 800fa42:	2b04      	cmp	r3, #4
 800fa44:	d003      	beq.n	800fa4e <tcp_close_shutdown+0x36>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	7d1b      	ldrb	r3, [r3, #20]
 800fa4a:	2b07      	cmp	r3, #7
 800fa4c:	d15e      	bne.n	800fb0c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d104      	bne.n	800fa60 <tcp_close_shutdown+0x48>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa5a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800fa5e:	d055      	beq.n	800fb0c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	8b5b      	ldrh	r3, [r3, #26]
 800fa64:	f003 0310 	and.w	r3, r3, #16
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d106      	bne.n	800fa7a <tcp_close_shutdown+0x62>
 800fa6c:	4b52      	ldr	r3, [pc, #328]	@ (800fbb8 <tcp_close_shutdown+0x1a0>)
 800fa6e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800fa72:	4954      	ldr	r1, [pc, #336]	@ (800fbc4 <tcp_close_shutdown+0x1ac>)
 800fa74:	4852      	ldr	r0, [pc, #328]	@ (800fbc0 <tcp_close_shutdown+0x1a8>)
 800fa76:	f00a fcb3 	bl	801a3e0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800fa82:	687d      	ldr	r5, [r7, #4]
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	3304      	adds	r3, #4
 800fa88:	687a      	ldr	r2, [r7, #4]
 800fa8a:	8ad2      	ldrh	r2, [r2, #22]
 800fa8c:	6879      	ldr	r1, [r7, #4]
 800fa8e:	8b09      	ldrh	r1, [r1, #24]
 800fa90:	9102      	str	r1, [sp, #8]
 800fa92:	9201      	str	r2, [sp, #4]
 800fa94:	9300      	str	r3, [sp, #0]
 800fa96:	462b      	mov	r3, r5
 800fa98:	4622      	mov	r2, r4
 800fa9a:	4601      	mov	r1, r0
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f005 fdd1 	bl	8015644 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f001 fbb4 	bl	8011210 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800faa8:	4b47      	ldr	r3, [pc, #284]	@ (800fbc8 <tcp_close_shutdown+0x1b0>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	687a      	ldr	r2, [r7, #4]
 800faae:	429a      	cmp	r2, r3
 800fab0:	d105      	bne.n	800fabe <tcp_close_shutdown+0xa6>
 800fab2:	4b45      	ldr	r3, [pc, #276]	@ (800fbc8 <tcp_close_shutdown+0x1b0>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	68db      	ldr	r3, [r3, #12]
 800fab8:	4a43      	ldr	r2, [pc, #268]	@ (800fbc8 <tcp_close_shutdown+0x1b0>)
 800faba:	6013      	str	r3, [r2, #0]
 800fabc:	e013      	b.n	800fae6 <tcp_close_shutdown+0xce>
 800fabe:	4b42      	ldr	r3, [pc, #264]	@ (800fbc8 <tcp_close_shutdown+0x1b0>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	60fb      	str	r3, [r7, #12]
 800fac4:	e00c      	b.n	800fae0 <tcp_close_shutdown+0xc8>
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	68db      	ldr	r3, [r3, #12]
 800faca:	687a      	ldr	r2, [r7, #4]
 800facc:	429a      	cmp	r2, r3
 800face:	d104      	bne.n	800fada <tcp_close_shutdown+0xc2>
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	68da      	ldr	r2, [r3, #12]
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	60da      	str	r2, [r3, #12]
 800fad8:	e005      	b.n	800fae6 <tcp_close_shutdown+0xce>
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	68db      	ldr	r3, [r3, #12]
 800fade:	60fb      	str	r3, [r7, #12]
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d1ef      	bne.n	800fac6 <tcp_close_shutdown+0xae>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2200      	movs	r2, #0
 800faea:	60da      	str	r2, [r3, #12]
 800faec:	4b37      	ldr	r3, [pc, #220]	@ (800fbcc <tcp_close_shutdown+0x1b4>)
 800faee:	2201      	movs	r2, #1
 800faf0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800faf2:	4b37      	ldr	r3, [pc, #220]	@ (800fbd0 <tcp_close_shutdown+0x1b8>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	687a      	ldr	r2, [r7, #4]
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d102      	bne.n	800fb02 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800fafc:	f004 f848 	bl	8013b90 <tcp_trigger_input_pcb_close>
 800fb00:	e002      	b.n	800fb08 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f7ff fed6 	bl	800f8b4 <tcp_free>
      }
      return ERR_OK;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	e050      	b.n	800fbae <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	7d1b      	ldrb	r3, [r3, #20]
 800fb10:	2b02      	cmp	r3, #2
 800fb12:	d03b      	beq.n	800fb8c <tcp_close_shutdown+0x174>
 800fb14:	2b02      	cmp	r3, #2
 800fb16:	dc44      	bgt.n	800fba2 <tcp_close_shutdown+0x18a>
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d002      	beq.n	800fb22 <tcp_close_shutdown+0x10a>
 800fb1c:	2b01      	cmp	r3, #1
 800fb1e:	d02a      	beq.n	800fb76 <tcp_close_shutdown+0x15e>
 800fb20:	e03f      	b.n	800fba2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	8adb      	ldrh	r3, [r3, #22]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d021      	beq.n	800fb6e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fb2a:	4b2a      	ldr	r3, [pc, #168]	@ (800fbd4 <tcp_close_shutdown+0x1bc>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	687a      	ldr	r2, [r7, #4]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d105      	bne.n	800fb40 <tcp_close_shutdown+0x128>
 800fb34:	4b27      	ldr	r3, [pc, #156]	@ (800fbd4 <tcp_close_shutdown+0x1bc>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	68db      	ldr	r3, [r3, #12]
 800fb3a:	4a26      	ldr	r2, [pc, #152]	@ (800fbd4 <tcp_close_shutdown+0x1bc>)
 800fb3c:	6013      	str	r3, [r2, #0]
 800fb3e:	e013      	b.n	800fb68 <tcp_close_shutdown+0x150>
 800fb40:	4b24      	ldr	r3, [pc, #144]	@ (800fbd4 <tcp_close_shutdown+0x1bc>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	60bb      	str	r3, [r7, #8]
 800fb46:	e00c      	b.n	800fb62 <tcp_close_shutdown+0x14a>
 800fb48:	68bb      	ldr	r3, [r7, #8]
 800fb4a:	68db      	ldr	r3, [r3, #12]
 800fb4c:	687a      	ldr	r2, [r7, #4]
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d104      	bne.n	800fb5c <tcp_close_shutdown+0x144>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	68da      	ldr	r2, [r3, #12]
 800fb56:	68bb      	ldr	r3, [r7, #8]
 800fb58:	60da      	str	r2, [r3, #12]
 800fb5a:	e005      	b.n	800fb68 <tcp_close_shutdown+0x150>
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	68db      	ldr	r3, [r3, #12]
 800fb60:	60bb      	str	r3, [r7, #8]
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d1ef      	bne.n	800fb48 <tcp_close_shutdown+0x130>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f7ff fea0 	bl	800f8b4 <tcp_free>
      break;
 800fb74:	e01a      	b.n	800fbac <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f7ff ff14 	bl	800f9a4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800fb7c:	6879      	ldr	r1, [r7, #4]
 800fb7e:	4816      	ldr	r0, [pc, #88]	@ (800fbd8 <tcp_close_shutdown+0x1c0>)
 800fb80:	f001 fb96 	bl	80112b0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f7ff feb1 	bl	800f8ec <tcp_free_listen>
      break;
 800fb8a:	e00f      	b.n	800fbac <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fb8c:	6879      	ldr	r1, [r7, #4]
 800fb8e:	480e      	ldr	r0, [pc, #56]	@ (800fbc8 <tcp_close_shutdown+0x1b0>)
 800fb90:	f001 fb8e 	bl	80112b0 <tcp_pcb_remove>
 800fb94:	4b0d      	ldr	r3, [pc, #52]	@ (800fbcc <tcp_close_shutdown+0x1b4>)
 800fb96:	2201      	movs	r2, #1
 800fb98:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f7ff fe8a 	bl	800f8b4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800fba0:	e004      	b.n	800fbac <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f000 f81a 	bl	800fbdc <tcp_close_shutdown_fin>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	e000      	b.n	800fbae <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800fbac:	2300      	movs	r3, #0
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3710      	adds	r7, #16
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bdb0      	pop	{r4, r5, r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	0801f5e0 	.word	0x0801f5e0
 800fbbc:	0801f6b4 	.word	0x0801f6b4
 800fbc0:	0801f624 	.word	0x0801f624
 800fbc4:	0801f6d4 	.word	0x0801f6d4
 800fbc8:	2000d0ec 	.word	0x2000d0ec
 800fbcc:	2000d0f4 	.word	0x2000d0f4
 800fbd0:	2000d12c 	.word	0x2000d12c
 800fbd4:	2000d0e4 	.word	0x2000d0e4
 800fbd8:	2000d0e8 	.word	0x2000d0e8

0800fbdc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b084      	sub	sp, #16
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d106      	bne.n	800fbf8 <tcp_close_shutdown_fin+0x1c>
 800fbea:	4b2e      	ldr	r3, [pc, #184]	@ (800fca4 <tcp_close_shutdown_fin+0xc8>)
 800fbec:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800fbf0:	492d      	ldr	r1, [pc, #180]	@ (800fca8 <tcp_close_shutdown_fin+0xcc>)
 800fbf2:	482e      	ldr	r0, [pc, #184]	@ (800fcac <tcp_close_shutdown_fin+0xd0>)
 800fbf4:	f00a fbf4 	bl	801a3e0 <iprintf>

  switch (pcb->state) {
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	7d1b      	ldrb	r3, [r3, #20]
 800fbfc:	2b07      	cmp	r3, #7
 800fbfe:	d020      	beq.n	800fc42 <tcp_close_shutdown_fin+0x66>
 800fc00:	2b07      	cmp	r3, #7
 800fc02:	dc2b      	bgt.n	800fc5c <tcp_close_shutdown_fin+0x80>
 800fc04:	2b03      	cmp	r3, #3
 800fc06:	d002      	beq.n	800fc0e <tcp_close_shutdown_fin+0x32>
 800fc08:	2b04      	cmp	r3, #4
 800fc0a:	d00d      	beq.n	800fc28 <tcp_close_shutdown_fin+0x4c>
 800fc0c:	e026      	b.n	800fc5c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f004 fe26 	bl	8014860 <tcp_send_fin>
 800fc14:	4603      	mov	r3, r0
 800fc16:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fc18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d11f      	bne.n	800fc60 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2205      	movs	r2, #5
 800fc24:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fc26:	e01b      	b.n	800fc60 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f004 fe19 	bl	8014860 <tcp_send_fin>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fc32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d114      	bne.n	800fc64 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2205      	movs	r2, #5
 800fc3e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fc40:	e010      	b.n	800fc64 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	f004 fe0c 	bl	8014860 <tcp_send_fin>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fc4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d109      	bne.n	800fc68 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2209      	movs	r2, #9
 800fc58:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fc5a:	e005      	b.n	800fc68 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	e01c      	b.n	800fc9a <tcp_close_shutdown_fin+0xbe>
      break;
 800fc60:	bf00      	nop
 800fc62:	e002      	b.n	800fc6a <tcp_close_shutdown_fin+0x8e>
      break;
 800fc64:	bf00      	nop
 800fc66:	e000      	b.n	800fc6a <tcp_close_shutdown_fin+0x8e>
      break;
 800fc68:	bf00      	nop
  }

  if (err == ERR_OK) {
 800fc6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d103      	bne.n	800fc7a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f004 ff32 	bl	8014adc <tcp_output>
 800fc78:	e00d      	b.n	800fc96 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800fc7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc82:	d108      	bne.n	800fc96 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	8b5b      	ldrh	r3, [r3, #26]
 800fc88:	f043 0308 	orr.w	r3, r3, #8
 800fc8c:	b29a      	uxth	r2, r3
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800fc92:	2300      	movs	r3, #0
 800fc94:	e001      	b.n	800fc9a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800fc96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3710      	adds	r7, #16
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
 800fca2:	bf00      	nop
 800fca4:	0801f5e0 	.word	0x0801f5e0
 800fca8:	0801f690 	.word	0x0801f690
 800fcac:	0801f624 	.word	0x0801f624

0800fcb0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b082      	sub	sp, #8
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d109      	bne.n	800fcd2 <tcp_close+0x22>
 800fcbe:	4b0f      	ldr	r3, [pc, #60]	@ (800fcfc <tcp_close+0x4c>)
 800fcc0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800fcc4:	490e      	ldr	r1, [pc, #56]	@ (800fd00 <tcp_close+0x50>)
 800fcc6:	480f      	ldr	r0, [pc, #60]	@ (800fd04 <tcp_close+0x54>)
 800fcc8:	f00a fb8a 	bl	801a3e0 <iprintf>
 800fccc:	f06f 030f 	mvn.w	r3, #15
 800fcd0:	e00f      	b.n	800fcf2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	7d1b      	ldrb	r3, [r3, #20]
 800fcd6:	2b01      	cmp	r3, #1
 800fcd8:	d006      	beq.n	800fce8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	8b5b      	ldrh	r3, [r3, #26]
 800fcde:	f043 0310 	orr.w	r3, r3, #16
 800fce2:	b29a      	uxth	r2, r3
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800fce8:	2101      	movs	r1, #1
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f7ff fe94 	bl	800fa18 <tcp_close_shutdown>
 800fcf0:	4603      	mov	r3, r0
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3708      	adds	r7, #8
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}
 800fcfa:	bf00      	nop
 800fcfc:	0801f5e0 	.word	0x0801f5e0
 800fd00:	0801f6f0 	.word	0x0801f6f0
 800fd04:	0801f624 	.word	0x0801f624

0800fd08 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b084      	sub	sp, #16
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	60f8      	str	r0, [r7, #12]
 800fd10:	60b9      	str	r1, [r7, #8]
 800fd12:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d109      	bne.n	800fd2e <tcp_shutdown+0x26>
 800fd1a:	4b26      	ldr	r3, [pc, #152]	@ (800fdb4 <tcp_shutdown+0xac>)
 800fd1c:	f240 2207 	movw	r2, #519	@ 0x207
 800fd20:	4925      	ldr	r1, [pc, #148]	@ (800fdb8 <tcp_shutdown+0xb0>)
 800fd22:	4826      	ldr	r0, [pc, #152]	@ (800fdbc <tcp_shutdown+0xb4>)
 800fd24:	f00a fb5c 	bl	801a3e0 <iprintf>
 800fd28:	f06f 030f 	mvn.w	r3, #15
 800fd2c:	e03d      	b.n	800fdaa <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	7d1b      	ldrb	r3, [r3, #20]
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	d102      	bne.n	800fd3c <tcp_shutdown+0x34>
    return ERR_CONN;
 800fd36:	f06f 030a 	mvn.w	r3, #10
 800fd3a:	e036      	b.n	800fdaa <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d01b      	beq.n	800fd7a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	8b5b      	ldrh	r3, [r3, #26]
 800fd46:	f043 0310 	orr.w	r3, r3, #16
 800fd4a:	b29a      	uxth	r2, r3
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d005      	beq.n	800fd62 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800fd56:	2101      	movs	r1, #1
 800fd58:	68f8      	ldr	r0, [r7, #12]
 800fd5a:	f7ff fe5d 	bl	800fa18 <tcp_close_shutdown>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	e023      	b.n	800fdaa <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d007      	beq.n	800fd7a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7ff fae4 	bl	800f33c <pbuf_free>
      pcb->refused_data = NULL;
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	2200      	movs	r2, #0
 800fd78:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d013      	beq.n	800fda8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	7d1b      	ldrb	r3, [r3, #20]
 800fd84:	2b04      	cmp	r3, #4
 800fd86:	dc02      	bgt.n	800fd8e <tcp_shutdown+0x86>
 800fd88:	2b03      	cmp	r3, #3
 800fd8a:	da02      	bge.n	800fd92 <tcp_shutdown+0x8a>
 800fd8c:	e009      	b.n	800fda2 <tcp_shutdown+0x9a>
 800fd8e:	2b07      	cmp	r3, #7
 800fd90:	d107      	bne.n	800fda2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	b2db      	uxtb	r3, r3
 800fd96:	4619      	mov	r1, r3
 800fd98:	68f8      	ldr	r0, [r7, #12]
 800fd9a:	f7ff fe3d 	bl	800fa18 <tcp_close_shutdown>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	e003      	b.n	800fdaa <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800fda2:	f06f 030a 	mvn.w	r3, #10
 800fda6:	e000      	b.n	800fdaa <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800fda8:	2300      	movs	r3, #0
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3710      	adds	r7, #16
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}
 800fdb2:	bf00      	nop
 800fdb4:	0801f5e0 	.word	0x0801f5e0
 800fdb8:	0801f708 	.word	0x0801f708
 800fdbc:	0801f624 	.word	0x0801f624

0800fdc0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b08e      	sub	sp, #56	@ 0x38
 800fdc4:	af04      	add	r7, sp, #16
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d107      	bne.n	800fde0 <tcp_abandon+0x20>
 800fdd0:	4b52      	ldr	r3, [pc, #328]	@ (800ff1c <tcp_abandon+0x15c>)
 800fdd2:	f240 223d 	movw	r2, #573	@ 0x23d
 800fdd6:	4952      	ldr	r1, [pc, #328]	@ (800ff20 <tcp_abandon+0x160>)
 800fdd8:	4852      	ldr	r0, [pc, #328]	@ (800ff24 <tcp_abandon+0x164>)
 800fdda:	f00a fb01 	bl	801a3e0 <iprintf>
 800fdde:	e099      	b.n	800ff14 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	7d1b      	ldrb	r3, [r3, #20]
 800fde4:	2b01      	cmp	r3, #1
 800fde6:	d106      	bne.n	800fdf6 <tcp_abandon+0x36>
 800fde8:	4b4c      	ldr	r3, [pc, #304]	@ (800ff1c <tcp_abandon+0x15c>)
 800fdea:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800fdee:	494e      	ldr	r1, [pc, #312]	@ (800ff28 <tcp_abandon+0x168>)
 800fdf0:	484c      	ldr	r0, [pc, #304]	@ (800ff24 <tcp_abandon+0x164>)
 800fdf2:	f00a faf5 	bl	801a3e0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	7d1b      	ldrb	r3, [r3, #20]
 800fdfa:	2b0a      	cmp	r3, #10
 800fdfc:	d107      	bne.n	800fe0e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800fdfe:	6879      	ldr	r1, [r7, #4]
 800fe00:	484a      	ldr	r0, [pc, #296]	@ (800ff2c <tcp_abandon+0x16c>)
 800fe02:	f001 fa55 	bl	80112b0 <tcp_pcb_remove>
    tcp_free(pcb);
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f7ff fd54 	bl	800f8b4 <tcp_free>
 800fe0c:	e082      	b.n	800ff14 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800fe12:	2300      	movs	r3, #0
 800fe14:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe1a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe20:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe28:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	691b      	ldr	r3, [r3, #16]
 800fe2e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	7d1b      	ldrb	r3, [r3, #20]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d126      	bne.n	800fe86 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	8adb      	ldrh	r3, [r3, #22]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d02e      	beq.n	800fe9e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fe40:	4b3b      	ldr	r3, [pc, #236]	@ (800ff30 <tcp_abandon+0x170>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	687a      	ldr	r2, [r7, #4]
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d105      	bne.n	800fe56 <tcp_abandon+0x96>
 800fe4a:	4b39      	ldr	r3, [pc, #228]	@ (800ff30 <tcp_abandon+0x170>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	68db      	ldr	r3, [r3, #12]
 800fe50:	4a37      	ldr	r2, [pc, #220]	@ (800ff30 <tcp_abandon+0x170>)
 800fe52:	6013      	str	r3, [r2, #0]
 800fe54:	e013      	b.n	800fe7e <tcp_abandon+0xbe>
 800fe56:	4b36      	ldr	r3, [pc, #216]	@ (800ff30 <tcp_abandon+0x170>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	61fb      	str	r3, [r7, #28]
 800fe5c:	e00c      	b.n	800fe78 <tcp_abandon+0xb8>
 800fe5e:	69fb      	ldr	r3, [r7, #28]
 800fe60:	68db      	ldr	r3, [r3, #12]
 800fe62:	687a      	ldr	r2, [r7, #4]
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d104      	bne.n	800fe72 <tcp_abandon+0xb2>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	68da      	ldr	r2, [r3, #12]
 800fe6c:	69fb      	ldr	r3, [r7, #28]
 800fe6e:	60da      	str	r2, [r3, #12]
 800fe70:	e005      	b.n	800fe7e <tcp_abandon+0xbe>
 800fe72:	69fb      	ldr	r3, [r7, #28]
 800fe74:	68db      	ldr	r3, [r3, #12]
 800fe76:	61fb      	str	r3, [r7, #28]
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d1ef      	bne.n	800fe5e <tcp_abandon+0x9e>
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2200      	movs	r2, #0
 800fe82:	60da      	str	r2, [r3, #12]
 800fe84:	e00b      	b.n	800fe9e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	8adb      	ldrh	r3, [r3, #22]
 800fe8e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fe90:	6879      	ldr	r1, [r7, #4]
 800fe92:	4828      	ldr	r0, [pc, #160]	@ (800ff34 <tcp_abandon+0x174>)
 800fe94:	f001 fa0c 	bl	80112b0 <tcp_pcb_remove>
 800fe98:	4b27      	ldr	r3, [pc, #156]	@ (800ff38 <tcp_abandon+0x178>)
 800fe9a:	2201      	movs	r2, #1
 800fe9c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d004      	beq.n	800feb0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800feaa:	4618      	mov	r0, r3
 800feac:	f000 fee0 	bl	8010c70 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d004      	beq.n	800fec2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800febc:	4618      	mov	r0, r3
 800febe:	f000 fed7 	bl	8010c70 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d004      	beq.n	800fed4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fece:	4618      	mov	r0, r3
 800fed0:	f000 fece 	bl	8010c70 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800fed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d00e      	beq.n	800fef8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800feda:	6879      	ldr	r1, [r7, #4]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	3304      	adds	r3, #4
 800fee0:	687a      	ldr	r2, [r7, #4]
 800fee2:	8b12      	ldrh	r2, [r2, #24]
 800fee4:	9202      	str	r2, [sp, #8]
 800fee6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800fee8:	9201      	str	r2, [sp, #4]
 800feea:	9300      	str	r3, [sp, #0]
 800feec:	460b      	mov	r3, r1
 800feee:	697a      	ldr	r2, [r7, #20]
 800fef0:	69b9      	ldr	r1, [r7, #24]
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	f005 fba6 	bl	8015644 <tcp_rst>
    }
    last_state = pcb->state;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	7d1b      	ldrb	r3, [r3, #20]
 800fefc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f7ff fcd8 	bl	800f8b4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ff04:	693b      	ldr	r3, [r7, #16]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d004      	beq.n	800ff14 <tcp_abandon+0x154>
 800ff0a:	693b      	ldr	r3, [r7, #16]
 800ff0c:	f06f 010c 	mvn.w	r1, #12
 800ff10:	68f8      	ldr	r0, [r7, #12]
 800ff12:	4798      	blx	r3
  }
}
 800ff14:	3728      	adds	r7, #40	@ 0x28
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}
 800ff1a:	bf00      	nop
 800ff1c:	0801f5e0 	.word	0x0801f5e0
 800ff20:	0801f724 	.word	0x0801f724
 800ff24:	0801f624 	.word	0x0801f624
 800ff28:	0801f740 	.word	0x0801f740
 800ff2c:	2000d0f0 	.word	0x2000d0f0
 800ff30:	2000d0e4 	.word	0x2000d0e4
 800ff34:	2000d0ec 	.word	0x2000d0ec
 800ff38:	2000d0f4 	.word	0x2000d0f4

0800ff3c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ff44:	2101      	movs	r1, #1
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f7ff ff3a 	bl	800fdc0 <tcp_abandon>
}
 800ff4c:	bf00      	nop
 800ff4e:	3708      	adds	r7, #8
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}

0800ff54 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b088      	sub	sp, #32
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	60f8      	str	r0, [r7, #12]
 800ff5c:	60b9      	str	r1, [r7, #8]
 800ff5e:	4613      	mov	r3, r2
 800ff60:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800ff62:	2304      	movs	r3, #4
 800ff64:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d101      	bne.n	800ff70 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800ff6c:	4b3e      	ldr	r3, [pc, #248]	@ (8010068 <tcp_bind+0x114>)
 800ff6e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d109      	bne.n	800ff8a <tcp_bind+0x36>
 800ff76:	4b3d      	ldr	r3, [pc, #244]	@ (801006c <tcp_bind+0x118>)
 800ff78:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800ff7c:	493c      	ldr	r1, [pc, #240]	@ (8010070 <tcp_bind+0x11c>)
 800ff7e:	483d      	ldr	r0, [pc, #244]	@ (8010074 <tcp_bind+0x120>)
 800ff80:	f00a fa2e 	bl	801a3e0 <iprintf>
 800ff84:	f06f 030f 	mvn.w	r3, #15
 800ff88:	e06a      	b.n	8010060 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	7d1b      	ldrb	r3, [r3, #20]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d009      	beq.n	800ffa6 <tcp_bind+0x52>
 800ff92:	4b36      	ldr	r3, [pc, #216]	@ (801006c <tcp_bind+0x118>)
 800ff94:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800ff98:	4937      	ldr	r1, [pc, #220]	@ (8010078 <tcp_bind+0x124>)
 800ff9a:	4836      	ldr	r0, [pc, #216]	@ (8010074 <tcp_bind+0x120>)
 800ff9c:	f00a fa20 	bl	801a3e0 <iprintf>
 800ffa0:	f06f 0305 	mvn.w	r3, #5
 800ffa4:	e05c      	b.n	8010060 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800ffa6:	88fb      	ldrh	r3, [r7, #6]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d109      	bne.n	800ffc0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800ffac:	f000 f9f8 	bl	80103a0 <tcp_new_port>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ffb4:	88fb      	ldrh	r3, [r7, #6]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d135      	bne.n	8010026 <tcp_bind+0xd2>
      return ERR_BUF;
 800ffba:	f06f 0301 	mvn.w	r3, #1
 800ffbe:	e04f      	b.n	8010060 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	61fb      	str	r3, [r7, #28]
 800ffc4:	e02b      	b.n	801001e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ffc6:	4a2d      	ldr	r2, [pc, #180]	@ (801007c <tcp_bind+0x128>)
 800ffc8:	69fb      	ldr	r3, [r7, #28]
 800ffca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	61bb      	str	r3, [r7, #24]
 800ffd2:	e01e      	b.n	8010012 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800ffd4:	69bb      	ldr	r3, [r7, #24]
 800ffd6:	8adb      	ldrh	r3, [r3, #22]
 800ffd8:	88fa      	ldrh	r2, [r7, #6]
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d116      	bne.n	801000c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ffde:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d010      	beq.n	8010006 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ffe4:	69bb      	ldr	r3, [r7, #24]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d00c      	beq.n	8010006 <tcp_bind+0xb2>
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d009      	beq.n	8010006 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d005      	beq.n	8010006 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800fffa:	69bb      	ldr	r3, [r7, #24]
 800fffc:	681a      	ldr	r2, [r3, #0]
 800fffe:	68bb      	ldr	r3, [r7, #8]
 8010000:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010002:	429a      	cmp	r2, r3
 8010004:	d102      	bne.n	801000c <tcp_bind+0xb8>
              return ERR_USE;
 8010006:	f06f 0307 	mvn.w	r3, #7
 801000a:	e029      	b.n	8010060 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801000c:	69bb      	ldr	r3, [r7, #24]
 801000e:	68db      	ldr	r3, [r3, #12]
 8010010:	61bb      	str	r3, [r7, #24]
 8010012:	69bb      	ldr	r3, [r7, #24]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d1dd      	bne.n	800ffd4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8010018:	69fb      	ldr	r3, [r7, #28]
 801001a:	3301      	adds	r3, #1
 801001c:	61fb      	str	r3, [r7, #28]
 801001e:	69fa      	ldr	r2, [r7, #28]
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	429a      	cmp	r2, r3
 8010024:	dbcf      	blt.n	800ffc6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d00c      	beq.n	8010046 <tcp_bind+0xf2>
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d008      	beq.n	8010046 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d002      	beq.n	8010040 <tcp_bind+0xec>
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	e000      	b.n	8010042 <tcp_bind+0xee>
 8010040:	2300      	movs	r3, #0
 8010042:	68fa      	ldr	r2, [r7, #12]
 8010044:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	88fa      	ldrh	r2, [r7, #6]
 801004a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801004c:	4b0c      	ldr	r3, [pc, #48]	@ (8010080 <tcp_bind+0x12c>)
 801004e:	681a      	ldr	r2, [r3, #0]
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	60da      	str	r2, [r3, #12]
 8010054:	4a0a      	ldr	r2, [pc, #40]	@ (8010080 <tcp_bind+0x12c>)
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	6013      	str	r3, [r2, #0]
 801005a:	f005 fcb5 	bl	80159c8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801005e:	2300      	movs	r3, #0
}
 8010060:	4618      	mov	r0, r3
 8010062:	3720      	adds	r7, #32
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}
 8010068:	08021710 	.word	0x08021710
 801006c:	0801f5e0 	.word	0x0801f5e0
 8010070:	0801f774 	.word	0x0801f774
 8010074:	0801f624 	.word	0x0801f624
 8010078:	0801f78c 	.word	0x0801f78c
 801007c:	080216e8 	.word	0x080216e8
 8010080:	2000d0e4 	.word	0x2000d0e4

08010084 <tcp_bind_netif>:
 * @param pcb the tcp_pcb to bind.
 * @param netif the netif to bind to. Can be NULL.
 */
void
tcp_bind_netif(struct tcp_pcb *pcb, const struct netif *netif)
{
 8010084:	b480      	push	{r7}
 8010086:	b083      	sub	sp, #12
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (netif != NULL) {
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d007      	beq.n	80100a4 <tcp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801009a:	3301      	adds	r3, #1
 801009c:	b2da      	uxtb	r2, r3
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 80100a2:	e002      	b.n	80100aa <tcp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2200      	movs	r2, #0
 80100a8:	721a      	strb	r2, [r3, #8]
}
 80100aa:	bf00      	nop
 80100ac:	370c      	adds	r7, #12
 80100ae:	46bd      	mov	sp, r7
 80100b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b4:	4770      	bx	lr
	...

080100b8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b084      	sub	sp, #16
 80100bc:	af00      	add	r7, sp, #0
 80100be:	60f8      	str	r0, [r7, #12]
 80100c0:	60b9      	str	r1, [r7, #8]
 80100c2:	4613      	mov	r3, r2
 80100c4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d106      	bne.n	80100da <tcp_accept_null+0x22>
 80100cc:	4b07      	ldr	r3, [pc, #28]	@ (80100ec <tcp_accept_null+0x34>)
 80100ce:	f240 320f 	movw	r2, #783	@ 0x30f
 80100d2:	4907      	ldr	r1, [pc, #28]	@ (80100f0 <tcp_accept_null+0x38>)
 80100d4:	4807      	ldr	r0, [pc, #28]	@ (80100f4 <tcp_accept_null+0x3c>)
 80100d6:	f00a f983 	bl	801a3e0 <iprintf>

  tcp_abort(pcb);
 80100da:	68b8      	ldr	r0, [r7, #8]
 80100dc:	f7ff ff2e 	bl	800ff3c <tcp_abort>

  return ERR_ABRT;
 80100e0:	f06f 030c 	mvn.w	r3, #12
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3710      	adds	r7, #16
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}
 80100ec:	0801f5e0 	.word	0x0801f5e0
 80100f0:	0801f7b4 	.word	0x0801f7b4
 80100f4:	0801f624 	.word	0x0801f624

080100f8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b088      	sub	sp, #32
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	60f8      	str	r0, [r7, #12]
 8010100:	460b      	mov	r3, r1
 8010102:	607a      	str	r2, [r7, #4]
 8010104:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8010106:	2300      	movs	r3, #0
 8010108:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d109      	bne.n	8010124 <tcp_listen_with_backlog_and_err+0x2c>
 8010110:	4b47      	ldr	r3, [pc, #284]	@ (8010230 <tcp_listen_with_backlog_and_err+0x138>)
 8010112:	f240 3259 	movw	r2, #857	@ 0x359
 8010116:	4947      	ldr	r1, [pc, #284]	@ (8010234 <tcp_listen_with_backlog_and_err+0x13c>)
 8010118:	4847      	ldr	r0, [pc, #284]	@ (8010238 <tcp_listen_with_backlog_and_err+0x140>)
 801011a:	f00a f961 	bl	801a3e0 <iprintf>
 801011e:	23f0      	movs	r3, #240	@ 0xf0
 8010120:	76fb      	strb	r3, [r7, #27]
 8010122:	e079      	b.n	8010218 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	7d1b      	ldrb	r3, [r3, #20]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d009      	beq.n	8010140 <tcp_listen_with_backlog_and_err+0x48>
 801012c:	4b40      	ldr	r3, [pc, #256]	@ (8010230 <tcp_listen_with_backlog_and_err+0x138>)
 801012e:	f240 325a 	movw	r2, #858	@ 0x35a
 8010132:	4942      	ldr	r1, [pc, #264]	@ (801023c <tcp_listen_with_backlog_and_err+0x144>)
 8010134:	4840      	ldr	r0, [pc, #256]	@ (8010238 <tcp_listen_with_backlog_and_err+0x140>)
 8010136:	f00a f953 	bl	801a3e0 <iprintf>
 801013a:	23f1      	movs	r3, #241	@ 0xf1
 801013c:	76fb      	strb	r3, [r7, #27]
 801013e:	e06b      	b.n	8010218 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	7d1b      	ldrb	r3, [r3, #20]
 8010144:	2b01      	cmp	r3, #1
 8010146:	d104      	bne.n	8010152 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801014c:	23f7      	movs	r3, #247	@ 0xf7
 801014e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010150:	e062      	b.n	8010218 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8010152:	2002      	movs	r0, #2
 8010154:	f7fe f96e 	bl	800e434 <memp_malloc>
 8010158:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801015a:	69fb      	ldr	r3, [r7, #28]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d102      	bne.n	8010166 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8010160:	23ff      	movs	r3, #255	@ 0xff
 8010162:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010164:	e058      	b.n	8010218 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	691a      	ldr	r2, [r3, #16]
 801016a:	69fb      	ldr	r3, [r7, #28]
 801016c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	8ada      	ldrh	r2, [r3, #22]
 8010172:	69fb      	ldr	r3, [r7, #28]
 8010174:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8010176:	69fb      	ldr	r3, [r7, #28]
 8010178:	2201      	movs	r2, #1
 801017a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	7d5a      	ldrb	r2, [r3, #21]
 8010180:	69fb      	ldr	r3, [r7, #28]
 8010182:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	7a5a      	ldrb	r2, [r3, #9]
 8010188:	69fb      	ldr	r3, [r7, #28]
 801018a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801018c:	69fb      	ldr	r3, [r7, #28]
 801018e:	2200      	movs	r2, #0
 8010190:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	7ada      	ldrb	r2, [r3, #11]
 8010196:	69fb      	ldr	r3, [r7, #28]
 8010198:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	7a9a      	ldrb	r2, [r3, #10]
 801019e:	69fb      	ldr	r3, [r7, #28]
 80101a0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	681a      	ldr	r2, [r3, #0]
 80101a6:	69fb      	ldr	r3, [r7, #28]
 80101a8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	8adb      	ldrh	r3, [r3, #22]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d021      	beq.n	80101f6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80101b2:	4b23      	ldr	r3, [pc, #140]	@ (8010240 <tcp_listen_with_backlog_and_err+0x148>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	68fa      	ldr	r2, [r7, #12]
 80101b8:	429a      	cmp	r2, r3
 80101ba:	d105      	bne.n	80101c8 <tcp_listen_with_backlog_and_err+0xd0>
 80101bc:	4b20      	ldr	r3, [pc, #128]	@ (8010240 <tcp_listen_with_backlog_and_err+0x148>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	68db      	ldr	r3, [r3, #12]
 80101c2:	4a1f      	ldr	r2, [pc, #124]	@ (8010240 <tcp_listen_with_backlog_and_err+0x148>)
 80101c4:	6013      	str	r3, [r2, #0]
 80101c6:	e013      	b.n	80101f0 <tcp_listen_with_backlog_and_err+0xf8>
 80101c8:	4b1d      	ldr	r3, [pc, #116]	@ (8010240 <tcp_listen_with_backlog_and_err+0x148>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	617b      	str	r3, [r7, #20]
 80101ce:	e00c      	b.n	80101ea <tcp_listen_with_backlog_and_err+0xf2>
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	68db      	ldr	r3, [r3, #12]
 80101d4:	68fa      	ldr	r2, [r7, #12]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d104      	bne.n	80101e4 <tcp_listen_with_backlog_and_err+0xec>
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	68da      	ldr	r2, [r3, #12]
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	60da      	str	r2, [r3, #12]
 80101e2:	e005      	b.n	80101f0 <tcp_listen_with_backlog_and_err+0xf8>
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	68db      	ldr	r3, [r3, #12]
 80101e8:	617b      	str	r3, [r7, #20]
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d1ef      	bne.n	80101d0 <tcp_listen_with_backlog_and_err+0xd8>
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	2200      	movs	r2, #0
 80101f4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80101f6:	68f8      	ldr	r0, [r7, #12]
 80101f8:	f7ff fb5c 	bl	800f8b4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80101fc:	69fb      	ldr	r3, [r7, #28]
 80101fe:	4a11      	ldr	r2, [pc, #68]	@ (8010244 <tcp_listen_with_backlog_and_err+0x14c>)
 8010200:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8010202:	4b11      	ldr	r3, [pc, #68]	@ (8010248 <tcp_listen_with_backlog_and_err+0x150>)
 8010204:	681a      	ldr	r2, [r3, #0]
 8010206:	69fb      	ldr	r3, [r7, #28]
 8010208:	60da      	str	r2, [r3, #12]
 801020a:	4a0f      	ldr	r2, [pc, #60]	@ (8010248 <tcp_listen_with_backlog_and_err+0x150>)
 801020c:	69fb      	ldr	r3, [r7, #28]
 801020e:	6013      	str	r3, [r2, #0]
 8010210:	f005 fbda 	bl	80159c8 <tcp_timer_needed>
  res = ERR_OK;
 8010214:	2300      	movs	r3, #0
 8010216:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d002      	beq.n	8010224 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	7efa      	ldrb	r2, [r7, #27]
 8010222:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8010224:	69fb      	ldr	r3, [r7, #28]
}
 8010226:	4618      	mov	r0, r3
 8010228:	3720      	adds	r7, #32
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	0801f5e0 	.word	0x0801f5e0
 8010234:	0801f7d4 	.word	0x0801f7d4
 8010238:	0801f624 	.word	0x0801f624
 801023c:	0801f804 	.word	0x0801f804
 8010240:	2000d0e4 	.word	0x2000d0e4
 8010244:	080100b9 	.word	0x080100b9
 8010248:	2000d0e8 	.word	0x2000d0e8

0801024c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d106      	bne.n	8010268 <tcp_update_rcv_ann_wnd+0x1c>
 801025a:	4b25      	ldr	r3, [pc, #148]	@ (80102f0 <tcp_update_rcv_ann_wnd+0xa4>)
 801025c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8010260:	4924      	ldr	r1, [pc, #144]	@ (80102f4 <tcp_update_rcv_ann_wnd+0xa8>)
 8010262:	4825      	ldr	r0, [pc, #148]	@ (80102f8 <tcp_update_rcv_ann_wnd+0xac>)
 8010264:	f00a f8bc 	bl	801a3e0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801026c:	687a      	ldr	r2, [r7, #4]
 801026e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8010270:	4413      	add	r3, r2
 8010272:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010278:	687a      	ldr	r2, [r7, #4]
 801027a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 801027c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8010280:	bf28      	it	cs
 8010282:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8010286:	b292      	uxth	r2, r2
 8010288:	4413      	add	r3, r2
 801028a:	68fa      	ldr	r2, [r7, #12]
 801028c:	1ad3      	subs	r3, r2, r3
 801028e:	2b00      	cmp	r3, #0
 8010290:	db08      	blt.n	80102a4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801029e:	68fa      	ldr	r2, [r7, #12]
 80102a0:	1ad3      	subs	r3, r2, r3
 80102a2:	e020      	b.n	80102e6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102ac:	1ad3      	subs	r3, r2, r3
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	dd03      	ble.n	80102ba <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2200      	movs	r2, #0
 80102b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80102b8:	e014      	b.n	80102e4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102c2:	1ad3      	subs	r3, r2, r3
 80102c4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80102cc:	d306      	bcc.n	80102dc <tcp_update_rcv_ann_wnd+0x90>
 80102ce:	4b08      	ldr	r3, [pc, #32]	@ (80102f0 <tcp_update_rcv_ann_wnd+0xa4>)
 80102d0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80102d4:	4909      	ldr	r1, [pc, #36]	@ (80102fc <tcp_update_rcv_ann_wnd+0xb0>)
 80102d6:	4808      	ldr	r0, [pc, #32]	@ (80102f8 <tcp_update_rcv_ann_wnd+0xac>)
 80102d8:	f00a f882 	bl	801a3e0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	b29a      	uxth	r2, r3
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80102e4:	2300      	movs	r3, #0
  }
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3710      	adds	r7, #16
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}
 80102ee:	bf00      	nop
 80102f0:	0801f5e0 	.word	0x0801f5e0
 80102f4:	0801f83c 	.word	0x0801f83c
 80102f8:	0801f624 	.word	0x0801f624
 80102fc:	0801f860 	.word	0x0801f860

08010300 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b084      	sub	sp, #16
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	460b      	mov	r3, r1
 801030a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d107      	bne.n	8010322 <tcp_recved+0x22>
 8010312:	4b1f      	ldr	r3, [pc, #124]	@ (8010390 <tcp_recved+0x90>)
 8010314:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8010318:	491e      	ldr	r1, [pc, #120]	@ (8010394 <tcp_recved+0x94>)
 801031a:	481f      	ldr	r0, [pc, #124]	@ (8010398 <tcp_recved+0x98>)
 801031c:	f00a f860 	bl	801a3e0 <iprintf>
 8010320:	e032      	b.n	8010388 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	7d1b      	ldrb	r3, [r3, #20]
 8010326:	2b01      	cmp	r3, #1
 8010328:	d106      	bne.n	8010338 <tcp_recved+0x38>
 801032a:	4b19      	ldr	r3, [pc, #100]	@ (8010390 <tcp_recved+0x90>)
 801032c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8010330:	491a      	ldr	r1, [pc, #104]	@ (801039c <tcp_recved+0x9c>)
 8010332:	4819      	ldr	r0, [pc, #100]	@ (8010398 <tcp_recved+0x98>)
 8010334:	f00a f854 	bl	801a3e0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801033c:	887b      	ldrh	r3, [r7, #2]
 801033e:	4413      	add	r3, r2
 8010340:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010342:	89fb      	ldrh	r3, [r7, #14]
 8010344:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010348:	d804      	bhi.n	8010354 <tcp_recved+0x54>
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801034e:	89fa      	ldrh	r2, [r7, #14]
 8010350:	429a      	cmp	r2, r3
 8010352:	d204      	bcs.n	801035e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801035a:	851a      	strh	r2, [r3, #40]	@ 0x28
 801035c:	e002      	b.n	8010364 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	89fa      	ldrh	r2, [r7, #14]
 8010362:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f7ff ff71 	bl	801024c <tcp_update_rcv_ann_wnd>
 801036a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8010372:	d309      	bcc.n	8010388 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	8b5b      	ldrh	r3, [r3, #26]
 8010378:	f043 0302 	orr.w	r3, r3, #2
 801037c:	b29a      	uxth	r2, r3
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f004 fbaa 	bl	8014adc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010388:	3710      	adds	r7, #16
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}
 801038e:	bf00      	nop
 8010390:	0801f5e0 	.word	0x0801f5e0
 8010394:	0801f87c 	.word	0x0801f87c
 8010398:	0801f624 	.word	0x0801f624
 801039c:	0801f894 	.word	0x0801f894

080103a0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b083      	sub	sp, #12
 80103a4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80103a6:	2300      	movs	r3, #0
 80103a8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80103aa:	4b1e      	ldr	r3, [pc, #120]	@ (8010424 <tcp_new_port+0x84>)
 80103ac:	881b      	ldrh	r3, [r3, #0]
 80103ae:	3301      	adds	r3, #1
 80103b0:	b29a      	uxth	r2, r3
 80103b2:	4b1c      	ldr	r3, [pc, #112]	@ (8010424 <tcp_new_port+0x84>)
 80103b4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80103b6:	4b1b      	ldr	r3, [pc, #108]	@ (8010424 <tcp_new_port+0x84>)
 80103b8:	881b      	ldrh	r3, [r3, #0]
 80103ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80103be:	4293      	cmp	r3, r2
 80103c0:	d103      	bne.n	80103ca <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80103c2:	4b18      	ldr	r3, [pc, #96]	@ (8010424 <tcp_new_port+0x84>)
 80103c4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80103c8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80103ca:	2300      	movs	r3, #0
 80103cc:	71fb      	strb	r3, [r7, #7]
 80103ce:	e01e      	b.n	801040e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80103d0:	79fb      	ldrb	r3, [r7, #7]
 80103d2:	4a15      	ldr	r2, [pc, #84]	@ (8010428 <tcp_new_port+0x88>)
 80103d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	603b      	str	r3, [r7, #0]
 80103dc:	e011      	b.n	8010402 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	8ada      	ldrh	r2, [r3, #22]
 80103e2:	4b10      	ldr	r3, [pc, #64]	@ (8010424 <tcp_new_port+0x84>)
 80103e4:	881b      	ldrh	r3, [r3, #0]
 80103e6:	429a      	cmp	r2, r3
 80103e8:	d108      	bne.n	80103fc <tcp_new_port+0x5c>
        n++;
 80103ea:	88bb      	ldrh	r3, [r7, #4]
 80103ec:	3301      	adds	r3, #1
 80103ee:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80103f0:	88bb      	ldrh	r3, [r7, #4]
 80103f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80103f6:	d3d8      	bcc.n	80103aa <tcp_new_port+0xa>
          return 0;
 80103f8:	2300      	movs	r3, #0
 80103fa:	e00d      	b.n	8010418 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	68db      	ldr	r3, [r3, #12]
 8010400:	603b      	str	r3, [r7, #0]
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d1ea      	bne.n	80103de <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010408:	79fb      	ldrb	r3, [r7, #7]
 801040a:	3301      	adds	r3, #1
 801040c:	71fb      	strb	r3, [r7, #7]
 801040e:	79fb      	ldrb	r3, [r7, #7]
 8010410:	2b03      	cmp	r3, #3
 8010412:	d9dd      	bls.n	80103d0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8010414:	4b03      	ldr	r3, [pc, #12]	@ (8010424 <tcp_new_port+0x84>)
 8010416:	881b      	ldrh	r3, [r3, #0]
}
 8010418:	4618      	mov	r0, r3
 801041a:	370c      	adds	r7, #12
 801041c:	46bd      	mov	sp, r7
 801041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010422:	4770      	bx	lr
 8010424:	20000024 	.word	0x20000024
 8010428:	080216e8 	.word	0x080216e8

0801042c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801042c:	b5b0      	push	{r4, r5, r7, lr}
 801042e:	b090      	sub	sp, #64	@ 0x40
 8010430:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010432:	2300      	movs	r3, #0
 8010434:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8010438:	4b95      	ldr	r3, [pc, #596]	@ (8010690 <tcp_slowtmr+0x264>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	3301      	adds	r3, #1
 801043e:	4a94      	ldr	r2, [pc, #592]	@ (8010690 <tcp_slowtmr+0x264>)
 8010440:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010442:	4b94      	ldr	r3, [pc, #592]	@ (8010694 <tcp_slowtmr+0x268>)
 8010444:	781b      	ldrb	r3, [r3, #0]
 8010446:	3301      	adds	r3, #1
 8010448:	b2da      	uxtb	r2, r3
 801044a:	4b92      	ldr	r3, [pc, #584]	@ (8010694 <tcp_slowtmr+0x268>)
 801044c:	701a      	strb	r2, [r3, #0]
 801044e:	e000      	b.n	8010452 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8010450:	bf00      	nop
  prev = NULL;
 8010452:	2300      	movs	r3, #0
 8010454:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8010456:	4b90      	ldr	r3, [pc, #576]	@ (8010698 <tcp_slowtmr+0x26c>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801045c:	e29f      	b.n	801099e <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801045e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010460:	7d1b      	ldrb	r3, [r3, #20]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d106      	bne.n	8010474 <tcp_slowtmr+0x48>
 8010466:	4b8d      	ldr	r3, [pc, #564]	@ (801069c <tcp_slowtmr+0x270>)
 8010468:	f240 42be 	movw	r2, #1214	@ 0x4be
 801046c:	498c      	ldr	r1, [pc, #560]	@ (80106a0 <tcp_slowtmr+0x274>)
 801046e:	488d      	ldr	r0, [pc, #564]	@ (80106a4 <tcp_slowtmr+0x278>)
 8010470:	f009 ffb6 	bl	801a3e0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010476:	7d1b      	ldrb	r3, [r3, #20]
 8010478:	2b01      	cmp	r3, #1
 801047a:	d106      	bne.n	801048a <tcp_slowtmr+0x5e>
 801047c:	4b87      	ldr	r3, [pc, #540]	@ (801069c <tcp_slowtmr+0x270>)
 801047e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8010482:	4989      	ldr	r1, [pc, #548]	@ (80106a8 <tcp_slowtmr+0x27c>)
 8010484:	4887      	ldr	r0, [pc, #540]	@ (80106a4 <tcp_slowtmr+0x278>)
 8010486:	f009 ffab 	bl	801a3e0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801048a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801048c:	7d1b      	ldrb	r3, [r3, #20]
 801048e:	2b0a      	cmp	r3, #10
 8010490:	d106      	bne.n	80104a0 <tcp_slowtmr+0x74>
 8010492:	4b82      	ldr	r3, [pc, #520]	@ (801069c <tcp_slowtmr+0x270>)
 8010494:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8010498:	4984      	ldr	r1, [pc, #528]	@ (80106ac <tcp_slowtmr+0x280>)
 801049a:	4882      	ldr	r0, [pc, #520]	@ (80106a4 <tcp_slowtmr+0x278>)
 801049c:	f009 ffa0 	bl	801a3e0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80104a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104a2:	7f9a      	ldrb	r2, [r3, #30]
 80104a4:	4b7b      	ldr	r3, [pc, #492]	@ (8010694 <tcp_slowtmr+0x268>)
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d105      	bne.n	80104b8 <tcp_slowtmr+0x8c>
      prev = pcb;
 80104ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80104b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104b2:	68db      	ldr	r3, [r3, #12]
 80104b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80104b6:	e272      	b.n	801099e <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 80104b8:	4b76      	ldr	r3, [pc, #472]	@ (8010694 <tcp_slowtmr+0x268>)
 80104ba:	781a      	ldrb	r2, [r3, #0]
 80104bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104be:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80104c0:	2300      	movs	r3, #0
 80104c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80104c6:	2300      	movs	r3, #0
 80104c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80104cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104ce:	7d1b      	ldrb	r3, [r3, #20]
 80104d0:	2b02      	cmp	r3, #2
 80104d2:	d10a      	bne.n	80104ea <tcp_slowtmr+0xbe>
 80104d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80104da:	2b05      	cmp	r3, #5
 80104dc:	d905      	bls.n	80104ea <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80104de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80104e2:	3301      	adds	r3, #1
 80104e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80104e8:	e11e      	b.n	8010728 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80104ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80104f0:	2b0b      	cmp	r3, #11
 80104f2:	d905      	bls.n	8010500 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80104f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80104f8:	3301      	adds	r3, #1
 80104fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80104fe:	e113      	b.n	8010728 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8010500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010502:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010506:	2b00      	cmp	r3, #0
 8010508:	d075      	beq.n	80105f6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801050a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801050c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801050e:	2b00      	cmp	r3, #0
 8010510:	d006      	beq.n	8010520 <tcp_slowtmr+0xf4>
 8010512:	4b62      	ldr	r3, [pc, #392]	@ (801069c <tcp_slowtmr+0x270>)
 8010514:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8010518:	4965      	ldr	r1, [pc, #404]	@ (80106b0 <tcp_slowtmr+0x284>)
 801051a:	4862      	ldr	r0, [pc, #392]	@ (80106a4 <tcp_slowtmr+0x278>)
 801051c:	f009 ff60 	bl	801a3e0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010524:	2b00      	cmp	r3, #0
 8010526:	d106      	bne.n	8010536 <tcp_slowtmr+0x10a>
 8010528:	4b5c      	ldr	r3, [pc, #368]	@ (801069c <tcp_slowtmr+0x270>)
 801052a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 801052e:	4961      	ldr	r1, [pc, #388]	@ (80106b4 <tcp_slowtmr+0x288>)
 8010530:	485c      	ldr	r0, [pc, #368]	@ (80106a4 <tcp_slowtmr+0x278>)
 8010532:	f009 ff55 	bl	801a3e0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8010536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010538:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801053c:	2b0b      	cmp	r3, #11
 801053e:	d905      	bls.n	801054c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8010540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010544:	3301      	adds	r3, #1
 8010546:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801054a:	e0ed      	b.n	8010728 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801054c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801054e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010552:	3b01      	subs	r3, #1
 8010554:	4a58      	ldr	r2, [pc, #352]	@ (80106b8 <tcp_slowtmr+0x28c>)
 8010556:	5cd3      	ldrb	r3, [r2, r3]
 8010558:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801055a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801055c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8010560:	7c7a      	ldrb	r2, [r7, #17]
 8010562:	429a      	cmp	r2, r3
 8010564:	d907      	bls.n	8010576 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8010566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010568:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801056c:	3301      	adds	r3, #1
 801056e:	b2da      	uxtb	r2, r3
 8010570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010572:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8010576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010578:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801057c:	7c7a      	ldrb	r2, [r7, #17]
 801057e:	429a      	cmp	r2, r3
 8010580:	f200 80d2 	bhi.w	8010728 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8010584:	2301      	movs	r3, #1
 8010586:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8010588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801058a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801058e:	2b00      	cmp	r3, #0
 8010590:	d108      	bne.n	80105a4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010592:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010594:	f005 f94a 	bl	801582c <tcp_zero_window_probe>
 8010598:	4603      	mov	r3, r0
 801059a:	2b00      	cmp	r3, #0
 801059c:	d014      	beq.n	80105c8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801059e:	2300      	movs	r3, #0
 80105a0:	623b      	str	r3, [r7, #32]
 80105a2:	e011      	b.n	80105c8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80105a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80105aa:	4619      	mov	r1, r3
 80105ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80105ae:	f004 f80f 	bl	80145d0 <tcp_split_unsent_seg>
 80105b2:	4603      	mov	r3, r0
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d107      	bne.n	80105c8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80105b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80105ba:	f004 fa8f 	bl	8014adc <tcp_output>
 80105be:	4603      	mov	r3, r0
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d101      	bne.n	80105c8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80105c4:	2300      	movs	r3, #0
 80105c6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80105c8:	6a3b      	ldr	r3, [r7, #32]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	f000 80ac 	beq.w	8010728 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80105d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105d2:	2200      	movs	r2, #0
 80105d4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80105d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105da:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80105de:	2b06      	cmp	r3, #6
 80105e0:	f200 80a2 	bhi.w	8010728 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80105e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105e6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80105ea:	3301      	adds	r3, #1
 80105ec:	b2da      	uxtb	r2, r3
 80105ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105f0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80105f4:	e098      	b.n	8010728 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80105f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	db0f      	blt.n	8010620 <tcp_slowtmr+0x1f4>
 8010600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010602:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010606:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801060a:	4293      	cmp	r3, r2
 801060c:	d008      	beq.n	8010620 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 801060e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010610:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010614:	b29b      	uxth	r3, r3
 8010616:	3301      	adds	r3, #1
 8010618:	b29b      	uxth	r3, r3
 801061a:	b21a      	sxth	r2, r3
 801061c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801061e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8010620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010622:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8010626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010628:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801062c:	429a      	cmp	r2, r3
 801062e:	db7b      	blt.n	8010728 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010630:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010632:	f004 fd47 	bl	80150c4 <tcp_rexmit_rto_prepare>
 8010636:	4603      	mov	r3, r0
 8010638:	2b00      	cmp	r3, #0
 801063a:	d007      	beq.n	801064c <tcp_slowtmr+0x220>
 801063c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801063e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010640:	2b00      	cmp	r3, #0
 8010642:	d171      	bne.n	8010728 <tcp_slowtmr+0x2fc>
 8010644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010648:	2b00      	cmp	r3, #0
 801064a:	d06d      	beq.n	8010728 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 801064c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801064e:	7d1b      	ldrb	r3, [r3, #20]
 8010650:	2b02      	cmp	r3, #2
 8010652:	d03a      	beq.n	80106ca <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010656:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801065a:	2b0c      	cmp	r3, #12
 801065c:	bf28      	it	cs
 801065e:	230c      	movcs	r3, #12
 8010660:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010664:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010668:	10db      	asrs	r3, r3, #3
 801066a:	b21b      	sxth	r3, r3
 801066c:	461a      	mov	r2, r3
 801066e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010670:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010674:	4413      	add	r3, r2
 8010676:	7efa      	ldrb	r2, [r7, #27]
 8010678:	4910      	ldr	r1, [pc, #64]	@ (80106bc <tcp_slowtmr+0x290>)
 801067a:	5c8a      	ldrb	r2, [r1, r2]
 801067c:	4093      	lsls	r3, r2
 801067e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010680:	697b      	ldr	r3, [r7, #20]
 8010682:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8010686:	4293      	cmp	r3, r2
 8010688:	dc1a      	bgt.n	80106c0 <tcp_slowtmr+0x294>
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	b21a      	sxth	r2, r3
 801068e:	e019      	b.n	80106c4 <tcp_slowtmr+0x298>
 8010690:	2000d0e0 	.word	0x2000d0e0
 8010694:	2000d0f6 	.word	0x2000d0f6
 8010698:	2000d0ec 	.word	0x2000d0ec
 801069c:	0801f5e0 	.word	0x0801f5e0
 80106a0:	0801f924 	.word	0x0801f924
 80106a4:	0801f624 	.word	0x0801f624
 80106a8:	0801f950 	.word	0x0801f950
 80106ac:	0801f97c 	.word	0x0801f97c
 80106b0:	0801f9ac 	.word	0x0801f9ac
 80106b4:	0801f9e0 	.word	0x0801f9e0
 80106b8:	080216e0 	.word	0x080216e0
 80106bc:	080216d0 	.word	0x080216d0
 80106c0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80106c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80106ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106cc:	2200      	movs	r2, #0
 80106ce:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80106d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80106d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80106dc:	4293      	cmp	r3, r2
 80106de:	bf28      	it	cs
 80106e0:	4613      	movcs	r3, r2
 80106e2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80106e4:	8a7b      	ldrh	r3, [r7, #18]
 80106e6:	085b      	lsrs	r3, r3, #1
 80106e8:	b29a      	uxth	r2, r3
 80106ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106ec:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80106f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80106f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80106fa:	005b      	lsls	r3, r3, #1
 80106fc:	b29b      	uxth	r3, r3
 80106fe:	429a      	cmp	r2, r3
 8010700:	d206      	bcs.n	8010710 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8010702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010704:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010706:	005b      	lsls	r3, r3, #1
 8010708:	b29a      	uxth	r2, r3
 801070a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801070c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8010710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010712:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8010714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010716:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801071a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801071c:	2200      	movs	r2, #0
 801071e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8010722:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010724:	f004 fd3e 	bl	80151a4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8010728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801072a:	7d1b      	ldrb	r3, [r3, #20]
 801072c:	2b06      	cmp	r3, #6
 801072e:	d111      	bne.n	8010754 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8010730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010732:	8b5b      	ldrh	r3, [r3, #26]
 8010734:	f003 0310 	and.w	r3, r3, #16
 8010738:	2b00      	cmp	r3, #0
 801073a:	d00b      	beq.n	8010754 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801073c:	4b9d      	ldr	r3, [pc, #628]	@ (80109b4 <tcp_slowtmr+0x588>)
 801073e:	681a      	ldr	r2, [r3, #0]
 8010740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010742:	6a1b      	ldr	r3, [r3, #32]
 8010744:	1ad3      	subs	r3, r2, r3
 8010746:	2b28      	cmp	r3, #40	@ 0x28
 8010748:	d904      	bls.n	8010754 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801074a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801074e:	3301      	adds	r3, #1
 8010750:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010756:	7a5b      	ldrb	r3, [r3, #9]
 8010758:	f003 0308 	and.w	r3, r3, #8
 801075c:	2b00      	cmp	r3, #0
 801075e:	d04c      	beq.n	80107fa <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8010760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010762:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010764:	2b04      	cmp	r3, #4
 8010766:	d003      	beq.n	8010770 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8010768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801076a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801076c:	2b07      	cmp	r3, #7
 801076e:	d144      	bne.n	80107fa <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010770:	4b90      	ldr	r3, [pc, #576]	@ (80109b4 <tcp_slowtmr+0x588>)
 8010772:	681a      	ldr	r2, [r3, #0]
 8010774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010776:	6a1b      	ldr	r3, [r3, #32]
 8010778:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801077a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801077c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010780:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8010784:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8010788:	498b      	ldr	r1, [pc, #556]	@ (80109b8 <tcp_slowtmr+0x58c>)
 801078a:	fba1 1303 	umull	r1, r3, r1, r3
 801078e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010790:	429a      	cmp	r2, r3
 8010792:	d90a      	bls.n	80107aa <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8010794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010798:	3301      	adds	r3, #1
 801079a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801079e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80107a2:	3301      	adds	r3, #1
 80107a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80107a8:	e027      	b.n	80107fa <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80107aa:	4b82      	ldr	r3, [pc, #520]	@ (80109b4 <tcp_slowtmr+0x588>)
 80107ac:	681a      	ldr	r2, [r3, #0]
 80107ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107b0:	6a1b      	ldr	r3, [r3, #32]
 80107b2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80107b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107b6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80107ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107bc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80107c0:	4618      	mov	r0, r3
 80107c2:	4b7e      	ldr	r3, [pc, #504]	@ (80109bc <tcp_slowtmr+0x590>)
 80107c4:	fb00 f303 	mul.w	r3, r0, r3
 80107c8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80107ca:	497b      	ldr	r1, [pc, #492]	@ (80109b8 <tcp_slowtmr+0x58c>)
 80107cc:	fba1 1303 	umull	r1, r3, r1, r3
 80107d0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d911      	bls.n	80107fa <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 80107d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80107d8:	f004 ffe8 	bl	80157ac <tcp_keepalive>
 80107dc:	4603      	mov	r3, r0
 80107de:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80107e2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d107      	bne.n	80107fa <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 80107ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ec:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80107f0:	3301      	adds	r3, #1
 80107f2:	b2da      	uxtb	r2, r3
 80107f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107f6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80107fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d011      	beq.n	8010826 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8010802:	4b6c      	ldr	r3, [pc, #432]	@ (80109b4 <tcp_slowtmr+0x588>)
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010808:	6a1b      	ldr	r3, [r3, #32]
 801080a:	1ad2      	subs	r2, r2, r3
 801080c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801080e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8010812:	4619      	mov	r1, r3
 8010814:	460b      	mov	r3, r1
 8010816:	005b      	lsls	r3, r3, #1
 8010818:	440b      	add	r3, r1
 801081a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801081c:	429a      	cmp	r2, r3
 801081e:	d302      	bcc.n	8010826 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8010820:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010822:	f000 fea9 	bl	8011578 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8010826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010828:	7d1b      	ldrb	r3, [r3, #20]
 801082a:	2b03      	cmp	r3, #3
 801082c:	d10b      	bne.n	8010846 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801082e:	4b61      	ldr	r3, [pc, #388]	@ (80109b4 <tcp_slowtmr+0x588>)
 8010830:	681a      	ldr	r2, [r3, #0]
 8010832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010834:	6a1b      	ldr	r3, [r3, #32]
 8010836:	1ad3      	subs	r3, r2, r3
 8010838:	2b28      	cmp	r3, #40	@ 0x28
 801083a:	d904      	bls.n	8010846 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 801083c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010840:	3301      	adds	r3, #1
 8010842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8010846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010848:	7d1b      	ldrb	r3, [r3, #20]
 801084a:	2b09      	cmp	r3, #9
 801084c:	d10b      	bne.n	8010866 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801084e:	4b59      	ldr	r3, [pc, #356]	@ (80109b4 <tcp_slowtmr+0x588>)
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010854:	6a1b      	ldr	r3, [r3, #32]
 8010856:	1ad3      	subs	r3, r2, r3
 8010858:	2bf0      	cmp	r3, #240	@ 0xf0
 801085a:	d904      	bls.n	8010866 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 801085c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010860:	3301      	adds	r3, #1
 8010862:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8010866:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801086a:	2b00      	cmp	r3, #0
 801086c:	d060      	beq.n	8010930 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 801086e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010874:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8010876:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010878:	f000 fcca 	bl	8011210 <tcp_pcb_purge>
      if (prev != NULL) {
 801087c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801087e:	2b00      	cmp	r3, #0
 8010880:	d010      	beq.n	80108a4 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010882:	4b4f      	ldr	r3, [pc, #316]	@ (80109c0 <tcp_slowtmr+0x594>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010888:	429a      	cmp	r2, r3
 801088a:	d106      	bne.n	801089a <tcp_slowtmr+0x46e>
 801088c:	4b4d      	ldr	r3, [pc, #308]	@ (80109c4 <tcp_slowtmr+0x598>)
 801088e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8010892:	494d      	ldr	r1, [pc, #308]	@ (80109c8 <tcp_slowtmr+0x59c>)
 8010894:	484d      	ldr	r0, [pc, #308]	@ (80109cc <tcp_slowtmr+0x5a0>)
 8010896:	f009 fda3 	bl	801a3e0 <iprintf>
        prev->next = pcb->next;
 801089a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801089c:	68da      	ldr	r2, [r3, #12]
 801089e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108a0:	60da      	str	r2, [r3, #12]
 80108a2:	e00f      	b.n	80108c4 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80108a4:	4b46      	ldr	r3, [pc, #280]	@ (80109c0 <tcp_slowtmr+0x594>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d006      	beq.n	80108bc <tcp_slowtmr+0x490>
 80108ae:	4b45      	ldr	r3, [pc, #276]	@ (80109c4 <tcp_slowtmr+0x598>)
 80108b0:	f240 5271 	movw	r2, #1393	@ 0x571
 80108b4:	4946      	ldr	r1, [pc, #280]	@ (80109d0 <tcp_slowtmr+0x5a4>)
 80108b6:	4845      	ldr	r0, [pc, #276]	@ (80109cc <tcp_slowtmr+0x5a0>)
 80108b8:	f009 fd92 	bl	801a3e0 <iprintf>
        tcp_active_pcbs = pcb->next;
 80108bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108be:	68db      	ldr	r3, [r3, #12]
 80108c0:	4a3f      	ldr	r2, [pc, #252]	@ (80109c0 <tcp_slowtmr+0x594>)
 80108c2:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80108c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d013      	beq.n	80108f4 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80108cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ce:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80108d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80108d4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80108d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d8:	3304      	adds	r3, #4
 80108da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80108dc:	8ad2      	ldrh	r2, [r2, #22]
 80108de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80108e0:	8b09      	ldrh	r1, [r1, #24]
 80108e2:	9102      	str	r1, [sp, #8]
 80108e4:	9201      	str	r2, [sp, #4]
 80108e6:	9300      	str	r3, [sp, #0]
 80108e8:	462b      	mov	r3, r5
 80108ea:	4622      	mov	r2, r4
 80108ec:	4601      	mov	r1, r0
 80108ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80108f0:	f004 fea8 	bl	8015644 <tcp_rst>
      err_arg = pcb->callback_arg;
 80108f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108f6:	691b      	ldr	r3, [r3, #16]
 80108f8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80108fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108fc:	7d1b      	ldrb	r3, [r3, #20]
 80108fe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010902:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010906:	68db      	ldr	r3, [r3, #12]
 8010908:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801090a:	6838      	ldr	r0, [r7, #0]
 801090c:	f7fe ffd2 	bl	800f8b4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8010910:	4b30      	ldr	r3, [pc, #192]	@ (80109d4 <tcp_slowtmr+0x5a8>)
 8010912:	2200      	movs	r2, #0
 8010914:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d004      	beq.n	8010926 <tcp_slowtmr+0x4fa>
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	f06f 010c 	mvn.w	r1, #12
 8010922:	68b8      	ldr	r0, [r7, #8]
 8010924:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010926:	4b2b      	ldr	r3, [pc, #172]	@ (80109d4 <tcp_slowtmr+0x5a8>)
 8010928:	781b      	ldrb	r3, [r3, #0]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d037      	beq.n	801099e <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 801092e:	e590      	b.n	8010452 <tcp_slowtmr+0x26>
      prev = pcb;
 8010930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010932:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801093a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801093c:	7f1b      	ldrb	r3, [r3, #28]
 801093e:	3301      	adds	r3, #1
 8010940:	b2da      	uxtb	r2, r3
 8010942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010944:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010948:	7f1a      	ldrb	r2, [r3, #28]
 801094a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801094c:	7f5b      	ldrb	r3, [r3, #29]
 801094e:	429a      	cmp	r2, r3
 8010950:	d325      	bcc.n	801099e <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8010952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010954:	2200      	movs	r2, #0
 8010956:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8010958:	4b1e      	ldr	r3, [pc, #120]	@ (80109d4 <tcp_slowtmr+0x5a8>)
 801095a:	2200      	movs	r2, #0
 801095c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801095e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010960:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010964:	2b00      	cmp	r3, #0
 8010966:	d00b      	beq.n	8010980 <tcp_slowtmr+0x554>
 8010968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801096a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801096e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010970:	6912      	ldr	r2, [r2, #16]
 8010972:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010974:	4610      	mov	r0, r2
 8010976:	4798      	blx	r3
 8010978:	4603      	mov	r3, r0
 801097a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801097e:	e002      	b.n	8010986 <tcp_slowtmr+0x55a>
 8010980:	2300      	movs	r3, #0
 8010982:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8010986:	4b13      	ldr	r3, [pc, #76]	@ (80109d4 <tcp_slowtmr+0x5a8>)
 8010988:	781b      	ldrb	r3, [r3, #0]
 801098a:	2b00      	cmp	r3, #0
 801098c:	f47f ad60 	bne.w	8010450 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010990:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010994:	2b00      	cmp	r3, #0
 8010996:	d102      	bne.n	801099e <tcp_slowtmr+0x572>
          tcp_output(prev);
 8010998:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801099a:	f004 f89f 	bl	8014adc <tcp_output>
  while (pcb != NULL) {
 801099e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	f47f ad5c 	bne.w	801045e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80109a6:	2300      	movs	r3, #0
 80109a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80109aa:	4b0b      	ldr	r3, [pc, #44]	@ (80109d8 <tcp_slowtmr+0x5ac>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80109b0:	e067      	b.n	8010a82 <tcp_slowtmr+0x656>
 80109b2:	bf00      	nop
 80109b4:	2000d0e0 	.word	0x2000d0e0
 80109b8:	10624dd3 	.word	0x10624dd3
 80109bc:	000124f8 	.word	0x000124f8
 80109c0:	2000d0ec 	.word	0x2000d0ec
 80109c4:	0801f5e0 	.word	0x0801f5e0
 80109c8:	0801fa18 	.word	0x0801fa18
 80109cc:	0801f624 	.word	0x0801f624
 80109d0:	0801fa44 	.word	0x0801fa44
 80109d4:	2000d0f4 	.word	0x2000d0f4
 80109d8:	2000d0f0 	.word	0x2000d0f0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80109dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109de:	7d1b      	ldrb	r3, [r3, #20]
 80109e0:	2b0a      	cmp	r3, #10
 80109e2:	d006      	beq.n	80109f2 <tcp_slowtmr+0x5c6>
 80109e4:	4b2b      	ldr	r3, [pc, #172]	@ (8010a94 <tcp_slowtmr+0x668>)
 80109e6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80109ea:	492b      	ldr	r1, [pc, #172]	@ (8010a98 <tcp_slowtmr+0x66c>)
 80109ec:	482b      	ldr	r0, [pc, #172]	@ (8010a9c <tcp_slowtmr+0x670>)
 80109ee:	f009 fcf7 	bl	801a3e0 <iprintf>
    pcb_remove = 0;
 80109f2:	2300      	movs	r3, #0
 80109f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80109f8:	4b29      	ldr	r3, [pc, #164]	@ (8010aa0 <tcp_slowtmr+0x674>)
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109fe:	6a1b      	ldr	r3, [r3, #32]
 8010a00:	1ad3      	subs	r3, r2, r3
 8010a02:	2bf0      	cmp	r3, #240	@ 0xf0
 8010a04:	d904      	bls.n	8010a10 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8010a06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a0a:	3301      	adds	r3, #1
 8010a0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010a10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d02f      	beq.n	8010a78 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010a18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010a1a:	f000 fbf9 	bl	8011210 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d010      	beq.n	8010a46 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010a24:	4b1f      	ldr	r3, [pc, #124]	@ (8010aa4 <tcp_slowtmr+0x678>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	d106      	bne.n	8010a3c <tcp_slowtmr+0x610>
 8010a2e:	4b19      	ldr	r3, [pc, #100]	@ (8010a94 <tcp_slowtmr+0x668>)
 8010a30:	f240 52af 	movw	r2, #1455	@ 0x5af
 8010a34:	491c      	ldr	r1, [pc, #112]	@ (8010aa8 <tcp_slowtmr+0x67c>)
 8010a36:	4819      	ldr	r0, [pc, #100]	@ (8010a9c <tcp_slowtmr+0x670>)
 8010a38:	f009 fcd2 	bl	801a3e0 <iprintf>
        prev->next = pcb->next;
 8010a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a3e:	68da      	ldr	r2, [r3, #12]
 8010a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a42:	60da      	str	r2, [r3, #12]
 8010a44:	e00f      	b.n	8010a66 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010a46:	4b17      	ldr	r3, [pc, #92]	@ (8010aa4 <tcp_slowtmr+0x678>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d006      	beq.n	8010a5e <tcp_slowtmr+0x632>
 8010a50:	4b10      	ldr	r3, [pc, #64]	@ (8010a94 <tcp_slowtmr+0x668>)
 8010a52:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8010a56:	4915      	ldr	r1, [pc, #84]	@ (8010aac <tcp_slowtmr+0x680>)
 8010a58:	4810      	ldr	r0, [pc, #64]	@ (8010a9c <tcp_slowtmr+0x670>)
 8010a5a:	f009 fcc1 	bl	801a3e0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a60:	68db      	ldr	r3, [r3, #12]
 8010a62:	4a10      	ldr	r2, [pc, #64]	@ (8010aa4 <tcp_slowtmr+0x678>)
 8010a64:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a68:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a6c:	68db      	ldr	r3, [r3, #12]
 8010a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8010a70:	69f8      	ldr	r0, [r7, #28]
 8010a72:	f7fe ff1f 	bl	800f8b4 <tcp_free>
 8010a76:	e004      	b.n	8010a82 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8010a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a7e:	68db      	ldr	r3, [r3, #12]
 8010a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d1a9      	bne.n	80109dc <tcp_slowtmr+0x5b0>
    }
  }
}
 8010a88:	bf00      	nop
 8010a8a:	bf00      	nop
 8010a8c:	3730      	adds	r7, #48	@ 0x30
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bdb0      	pop	{r4, r5, r7, pc}
 8010a92:	bf00      	nop
 8010a94:	0801f5e0 	.word	0x0801f5e0
 8010a98:	0801fa70 	.word	0x0801fa70
 8010a9c:	0801f624 	.word	0x0801f624
 8010aa0:	2000d0e0 	.word	0x2000d0e0
 8010aa4:	2000d0f0 	.word	0x2000d0f0
 8010aa8:	0801faa0 	.word	0x0801faa0
 8010aac:	0801fac8 	.word	0x0801fac8

08010ab0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b082      	sub	sp, #8
 8010ab4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8010b6c <tcp_fasttmr+0xbc>)
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	3301      	adds	r3, #1
 8010abc:	b2da      	uxtb	r2, r3
 8010abe:	4b2b      	ldr	r3, [pc, #172]	@ (8010b6c <tcp_fasttmr+0xbc>)
 8010ac0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010ac2:	4b2b      	ldr	r3, [pc, #172]	@ (8010b70 <tcp_fasttmr+0xc0>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010ac8:	e048      	b.n	8010b5c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	7f9a      	ldrb	r2, [r3, #30]
 8010ace:	4b27      	ldr	r3, [pc, #156]	@ (8010b6c <tcp_fasttmr+0xbc>)
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	d03f      	beq.n	8010b56 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010ad6:	4b25      	ldr	r3, [pc, #148]	@ (8010b6c <tcp_fasttmr+0xbc>)
 8010ad8:	781a      	ldrb	r2, [r3, #0]
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	8b5b      	ldrh	r3, [r3, #26]
 8010ae2:	f003 0301 	and.w	r3, r3, #1
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d010      	beq.n	8010b0c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	8b5b      	ldrh	r3, [r3, #26]
 8010aee:	f043 0302 	orr.w	r3, r3, #2
 8010af2:	b29a      	uxth	r2, r3
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f003 ffef 	bl	8014adc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	8b5b      	ldrh	r3, [r3, #26]
 8010b02:	f023 0303 	bic.w	r3, r3, #3
 8010b06:	b29a      	uxth	r2, r3
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	8b5b      	ldrh	r3, [r3, #26]
 8010b10:	f003 0308 	and.w	r3, r3, #8
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d009      	beq.n	8010b2c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	8b5b      	ldrh	r3, [r3, #26]
 8010b1c:	f023 0308 	bic.w	r3, r3, #8
 8010b20:	b29a      	uxth	r2, r3
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010b26:	6878      	ldr	r0, [r7, #4]
 8010b28:	f7ff f858 	bl	800fbdc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	68db      	ldr	r3, [r3, #12]
 8010b30:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d00a      	beq.n	8010b50 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8010b74 <tcp_fasttmr+0xc4>)
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f000 f819 	bl	8010b78 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010b46:	4b0b      	ldr	r3, [pc, #44]	@ (8010b74 <tcp_fasttmr+0xc4>)
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d000      	beq.n	8010b50 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010b4e:	e7b8      	b.n	8010ac2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	607b      	str	r3, [r7, #4]
 8010b54:	e002      	b.n	8010b5c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	68db      	ldr	r3, [r3, #12]
 8010b5a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d1b3      	bne.n	8010aca <tcp_fasttmr+0x1a>
    }
  }
}
 8010b62:	bf00      	nop
 8010b64:	bf00      	nop
 8010b66:	3708      	adds	r7, #8
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}
 8010b6c:	2000d0f6 	.word	0x2000d0f6
 8010b70:	2000d0ec 	.word	0x2000d0ec
 8010b74:	2000d0f4 	.word	0x2000d0f4

08010b78 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010b78:	b590      	push	{r4, r7, lr}
 8010b7a:	b085      	sub	sp, #20
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d109      	bne.n	8010b9a <tcp_process_refused_data+0x22>
 8010b86:	4b37      	ldr	r3, [pc, #220]	@ (8010c64 <tcp_process_refused_data+0xec>)
 8010b88:	f240 6209 	movw	r2, #1545	@ 0x609
 8010b8c:	4936      	ldr	r1, [pc, #216]	@ (8010c68 <tcp_process_refused_data+0xf0>)
 8010b8e:	4837      	ldr	r0, [pc, #220]	@ (8010c6c <tcp_process_refused_data+0xf4>)
 8010b90:	f009 fc26 	bl	801a3e0 <iprintf>
 8010b94:	f06f 030f 	mvn.w	r3, #15
 8010b98:	e060      	b.n	8010c5c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010b9e:	7b5b      	ldrb	r3, [r3, #13]
 8010ba0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010ba6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2200      	movs	r2, #0
 8010bac:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d00b      	beq.n	8010bd0 <tcp_process_refused_data+0x58>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	6918      	ldr	r0, [r3, #16]
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	68ba      	ldr	r2, [r7, #8]
 8010bc6:	6879      	ldr	r1, [r7, #4]
 8010bc8:	47a0      	blx	r4
 8010bca:	4603      	mov	r3, r0
 8010bcc:	73fb      	strb	r3, [r7, #15]
 8010bce:	e007      	b.n	8010be0 <tcp_process_refused_data+0x68>
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	68ba      	ldr	r2, [r7, #8]
 8010bd4:	6879      	ldr	r1, [r7, #4]
 8010bd6:	2000      	movs	r0, #0
 8010bd8:	f000 f8a4 	bl	8010d24 <tcp_recv_null>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d12a      	bne.n	8010c3e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010be8:	7bbb      	ldrb	r3, [r7, #14]
 8010bea:	f003 0320 	and.w	r3, r3, #32
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d033      	beq.n	8010c5a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010bf6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010bfa:	d005      	beq.n	8010c08 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c00:	3301      	adds	r3, #1
 8010c02:	b29a      	uxth	r2, r3
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d00b      	beq.n	8010c2a <tcp_process_refused_data+0xb2>
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6918      	ldr	r0, [r3, #16]
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	2200      	movs	r2, #0
 8010c20:	6879      	ldr	r1, [r7, #4]
 8010c22:	47a0      	blx	r4
 8010c24:	4603      	mov	r3, r0
 8010c26:	73fb      	strb	r3, [r7, #15]
 8010c28:	e001      	b.n	8010c2e <tcp_process_refused_data+0xb6>
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c32:	f113 0f0d 	cmn.w	r3, #13
 8010c36:	d110      	bne.n	8010c5a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010c38:	f06f 030c 	mvn.w	r3, #12
 8010c3c:	e00e      	b.n	8010c5c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c42:	f113 0f0d 	cmn.w	r3, #13
 8010c46:	d102      	bne.n	8010c4e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010c48:	f06f 030c 	mvn.w	r3, #12
 8010c4c:	e006      	b.n	8010c5c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	68ba      	ldr	r2, [r7, #8]
 8010c52:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8010c54:	f06f 0304 	mvn.w	r3, #4
 8010c58:	e000      	b.n	8010c5c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010c5a:	2300      	movs	r3, #0
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3714      	adds	r7, #20
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd90      	pop	{r4, r7, pc}
 8010c64:	0801f5e0 	.word	0x0801f5e0
 8010c68:	0801faf0 	.word	0x0801faf0
 8010c6c:	0801f624 	.word	0x0801f624

08010c70 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010c78:	e007      	b.n	8010c8a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f000 f80a 	bl	8010c9a <tcp_seg_free>
    seg = next;
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d1f4      	bne.n	8010c7a <tcp_segs_free+0xa>
  }
}
 8010c90:	bf00      	nop
 8010c92:	bf00      	nop
 8010c94:	3710      	adds	r7, #16
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}

08010c9a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010c9a:	b580      	push	{r7, lr}
 8010c9c:	b082      	sub	sp, #8
 8010c9e:	af00      	add	r7, sp, #0
 8010ca0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d00c      	beq.n	8010cc2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d004      	beq.n	8010cba <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	685b      	ldr	r3, [r3, #4]
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f7fe fb41 	bl	800f33c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010cba:	6879      	ldr	r1, [r7, #4]
 8010cbc:	2003      	movs	r0, #3
 8010cbe:	f7fd fc2f 	bl	800e520 <memp_free>
  }
}
 8010cc2:	bf00      	nop
 8010cc4:	3708      	adds	r7, #8
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}
	...

08010ccc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b084      	sub	sp, #16
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d106      	bne.n	8010ce8 <tcp_seg_copy+0x1c>
 8010cda:	4b0f      	ldr	r3, [pc, #60]	@ (8010d18 <tcp_seg_copy+0x4c>)
 8010cdc:	f240 6282 	movw	r2, #1666	@ 0x682
 8010ce0:	490e      	ldr	r1, [pc, #56]	@ (8010d1c <tcp_seg_copy+0x50>)
 8010ce2:	480f      	ldr	r0, [pc, #60]	@ (8010d20 <tcp_seg_copy+0x54>)
 8010ce4:	f009 fb7c 	bl	801a3e0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010ce8:	2003      	movs	r0, #3
 8010cea:	f7fd fba3 	bl	800e434 <memp_malloc>
 8010cee:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d101      	bne.n	8010cfa <tcp_seg_copy+0x2e>
    return NULL;
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	e00a      	b.n	8010d10 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010cfa:	2210      	movs	r2, #16
 8010cfc:	6879      	ldr	r1, [r7, #4]
 8010cfe:	68f8      	ldr	r0, [r7, #12]
 8010d00:	f009 fdf7 	bl	801a8f2 <memcpy>
  pbuf_ref(cseg->p);
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	685b      	ldr	r3, [r3, #4]
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f7fe fbbd 	bl	800f488 <pbuf_ref>
  return cseg;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3710      	adds	r7, #16
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}
 8010d18:	0801f5e0 	.word	0x0801f5e0
 8010d1c:	0801fb34 	.word	0x0801fb34
 8010d20:	0801f624 	.word	0x0801f624

08010d24 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b084      	sub	sp, #16
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	60f8      	str	r0, [r7, #12]
 8010d2c:	60b9      	str	r1, [r7, #8]
 8010d2e:	607a      	str	r2, [r7, #4]
 8010d30:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d109      	bne.n	8010d4c <tcp_recv_null+0x28>
 8010d38:	4b12      	ldr	r3, [pc, #72]	@ (8010d84 <tcp_recv_null+0x60>)
 8010d3a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8010d3e:	4912      	ldr	r1, [pc, #72]	@ (8010d88 <tcp_recv_null+0x64>)
 8010d40:	4812      	ldr	r0, [pc, #72]	@ (8010d8c <tcp_recv_null+0x68>)
 8010d42:	f009 fb4d 	bl	801a3e0 <iprintf>
 8010d46:	f06f 030f 	mvn.w	r3, #15
 8010d4a:	e016      	b.n	8010d7a <tcp_recv_null+0x56>

  if (p != NULL) {
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d009      	beq.n	8010d66 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	891b      	ldrh	r3, [r3, #8]
 8010d56:	4619      	mov	r1, r3
 8010d58:	68b8      	ldr	r0, [r7, #8]
 8010d5a:	f7ff fad1 	bl	8010300 <tcp_recved>
    pbuf_free(p);
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f7fe faec 	bl	800f33c <pbuf_free>
 8010d64:	e008      	b.n	8010d78 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010d66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d104      	bne.n	8010d78 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010d6e:	68b8      	ldr	r0, [r7, #8]
 8010d70:	f7fe ff9e 	bl	800fcb0 <tcp_close>
 8010d74:	4603      	mov	r3, r0
 8010d76:	e000      	b.n	8010d7a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010d78:	2300      	movs	r3, #0
}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	3710      	adds	r7, #16
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}
 8010d82:	bf00      	nop
 8010d84:	0801f5e0 	.word	0x0801f5e0
 8010d88:	0801fb50 	.word	0x0801fb50
 8010d8c:	0801f624 	.word	0x0801f624

08010d90 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b086      	sub	sp, #24
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	4603      	mov	r3, r0
 8010d98:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	db01      	blt.n	8010da6 <tcp_kill_prio+0x16>
 8010da2:	79fb      	ldrb	r3, [r7, #7]
 8010da4:	e000      	b.n	8010da8 <tcp_kill_prio+0x18>
 8010da6:	237f      	movs	r3, #127	@ 0x7f
 8010da8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010daa:	7afb      	ldrb	r3, [r7, #11]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d034      	beq.n	8010e1a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010db0:	7afb      	ldrb	r3, [r7, #11]
 8010db2:	3b01      	subs	r3, #1
 8010db4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010db6:	2300      	movs	r3, #0
 8010db8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010dbe:	4b19      	ldr	r3, [pc, #100]	@ (8010e24 <tcp_kill_prio+0x94>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	617b      	str	r3, [r7, #20]
 8010dc4:	e01f      	b.n	8010e06 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010dc6:	697b      	ldr	r3, [r7, #20]
 8010dc8:	7d5b      	ldrb	r3, [r3, #21]
 8010dca:	7afa      	ldrb	r2, [r7, #11]
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	d80c      	bhi.n	8010dea <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010dd0:	697b      	ldr	r3, [r7, #20]
 8010dd2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010dd4:	7afa      	ldrb	r2, [r7, #11]
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d112      	bne.n	8010e00 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010dda:	4b13      	ldr	r3, [pc, #76]	@ (8010e28 <tcp_kill_prio+0x98>)
 8010ddc:	681a      	ldr	r2, [r3, #0]
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	6a1b      	ldr	r3, [r3, #32]
 8010de2:	1ad3      	subs	r3, r2, r3
 8010de4:	68fa      	ldr	r2, [r7, #12]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d80a      	bhi.n	8010e00 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010dea:	4b0f      	ldr	r3, [pc, #60]	@ (8010e28 <tcp_kill_prio+0x98>)
 8010dec:	681a      	ldr	r2, [r3, #0]
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	6a1b      	ldr	r3, [r3, #32]
 8010df2:	1ad3      	subs	r3, r2, r3
 8010df4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010dfa:	697b      	ldr	r3, [r7, #20]
 8010dfc:	7d5b      	ldrb	r3, [r3, #21]
 8010dfe:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	68db      	ldr	r3, [r3, #12]
 8010e04:	617b      	str	r3, [r7, #20]
 8010e06:	697b      	ldr	r3, [r7, #20]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d1dc      	bne.n	8010dc6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010e0c:	693b      	ldr	r3, [r7, #16]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d004      	beq.n	8010e1c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010e12:	6938      	ldr	r0, [r7, #16]
 8010e14:	f7ff f892 	bl	800ff3c <tcp_abort>
 8010e18:	e000      	b.n	8010e1c <tcp_kill_prio+0x8c>
    return;
 8010e1a:	bf00      	nop
  }
}
 8010e1c:	3718      	adds	r7, #24
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
 8010e22:	bf00      	nop
 8010e24:	2000d0ec 	.word	0x2000d0ec
 8010e28:	2000d0e0 	.word	0x2000d0e0

08010e2c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b086      	sub	sp, #24
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	4603      	mov	r3, r0
 8010e34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010e36:	79fb      	ldrb	r3, [r7, #7]
 8010e38:	2b08      	cmp	r3, #8
 8010e3a:	d009      	beq.n	8010e50 <tcp_kill_state+0x24>
 8010e3c:	79fb      	ldrb	r3, [r7, #7]
 8010e3e:	2b09      	cmp	r3, #9
 8010e40:	d006      	beq.n	8010e50 <tcp_kill_state+0x24>
 8010e42:	4b1a      	ldr	r3, [pc, #104]	@ (8010eac <tcp_kill_state+0x80>)
 8010e44:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8010e48:	4919      	ldr	r1, [pc, #100]	@ (8010eb0 <tcp_kill_state+0x84>)
 8010e4a:	481a      	ldr	r0, [pc, #104]	@ (8010eb4 <tcp_kill_state+0x88>)
 8010e4c:	f009 fac8 	bl	801a3e0 <iprintf>

  inactivity = 0;
 8010e50:	2300      	movs	r3, #0
 8010e52:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010e54:	2300      	movs	r3, #0
 8010e56:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e58:	4b17      	ldr	r3, [pc, #92]	@ (8010eb8 <tcp_kill_state+0x8c>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	617b      	str	r3, [r7, #20]
 8010e5e:	e017      	b.n	8010e90 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010e60:	697b      	ldr	r3, [r7, #20]
 8010e62:	7d1b      	ldrb	r3, [r3, #20]
 8010e64:	79fa      	ldrb	r2, [r7, #7]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d10f      	bne.n	8010e8a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010e6a:	4b14      	ldr	r3, [pc, #80]	@ (8010ebc <tcp_kill_state+0x90>)
 8010e6c:	681a      	ldr	r2, [r3, #0]
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	6a1b      	ldr	r3, [r3, #32]
 8010e72:	1ad3      	subs	r3, r2, r3
 8010e74:	68fa      	ldr	r2, [r7, #12]
 8010e76:	429a      	cmp	r2, r3
 8010e78:	d807      	bhi.n	8010e8a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010e7a:	4b10      	ldr	r3, [pc, #64]	@ (8010ebc <tcp_kill_state+0x90>)
 8010e7c:	681a      	ldr	r2, [r3, #0]
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	6a1b      	ldr	r3, [r3, #32]
 8010e82:	1ad3      	subs	r3, r2, r3
 8010e84:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	68db      	ldr	r3, [r3, #12]
 8010e8e:	617b      	str	r3, [r7, #20]
 8010e90:	697b      	ldr	r3, [r7, #20]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d1e4      	bne.n	8010e60 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010e96:	693b      	ldr	r3, [r7, #16]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d003      	beq.n	8010ea4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010e9c:	2100      	movs	r1, #0
 8010e9e:	6938      	ldr	r0, [r7, #16]
 8010ea0:	f7fe ff8e 	bl	800fdc0 <tcp_abandon>
  }
}
 8010ea4:	bf00      	nop
 8010ea6:	3718      	adds	r7, #24
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}
 8010eac:	0801f5e0 	.word	0x0801f5e0
 8010eb0:	0801fb6c 	.word	0x0801fb6c
 8010eb4:	0801f624 	.word	0x0801f624
 8010eb8:	2000d0ec 	.word	0x2000d0ec
 8010ebc:	2000d0e0 	.word	0x2000d0e0

08010ec0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b084      	sub	sp, #16
 8010ec4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010eca:	2300      	movs	r3, #0
 8010ecc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ece:	4b12      	ldr	r3, [pc, #72]	@ (8010f18 <tcp_kill_timewait+0x58>)
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	60fb      	str	r3, [r7, #12]
 8010ed4:	e012      	b.n	8010efc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010ed6:	4b11      	ldr	r3, [pc, #68]	@ (8010f1c <tcp_kill_timewait+0x5c>)
 8010ed8:	681a      	ldr	r2, [r3, #0]
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	6a1b      	ldr	r3, [r3, #32]
 8010ede:	1ad3      	subs	r3, r2, r3
 8010ee0:	687a      	ldr	r2, [r7, #4]
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	d807      	bhi.n	8010ef6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8010f1c <tcp_kill_timewait+0x5c>)
 8010ee8:	681a      	ldr	r2, [r3, #0]
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	6a1b      	ldr	r3, [r3, #32]
 8010eee:	1ad3      	subs	r3, r2, r3
 8010ef0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	68db      	ldr	r3, [r3, #12]
 8010efa:	60fb      	str	r3, [r7, #12]
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d1e9      	bne.n	8010ed6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d002      	beq.n	8010f0e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010f08:	68b8      	ldr	r0, [r7, #8]
 8010f0a:	f7ff f817 	bl	800ff3c <tcp_abort>
  }
}
 8010f0e:	bf00      	nop
 8010f10:	3710      	adds	r7, #16
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}
 8010f16:	bf00      	nop
 8010f18:	2000d0f0 	.word	0x2000d0f0
 8010f1c:	2000d0e0 	.word	0x2000d0e0

08010f20 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b082      	sub	sp, #8
 8010f24:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010f26:	4b10      	ldr	r3, [pc, #64]	@ (8010f68 <tcp_handle_closepend+0x48>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010f2c:	e014      	b.n	8010f58 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	68db      	ldr	r3, [r3, #12]
 8010f32:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	8b5b      	ldrh	r3, [r3, #26]
 8010f38:	f003 0308 	and.w	r3, r3, #8
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d009      	beq.n	8010f54 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	8b5b      	ldrh	r3, [r3, #26]
 8010f44:	f023 0308 	bic.w	r3, r3, #8
 8010f48:	b29a      	uxth	r2, r3
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	f7fe fe44 	bl	800fbdc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d1e7      	bne.n	8010f2e <tcp_handle_closepend+0xe>
  }
}
 8010f5e:	bf00      	nop
 8010f60:	bf00      	nop
 8010f62:	3708      	adds	r7, #8
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}
 8010f68:	2000d0ec 	.word	0x2000d0ec

08010f6c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b084      	sub	sp, #16
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	4603      	mov	r3, r0
 8010f74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010f76:	2001      	movs	r0, #1
 8010f78:	f7fd fa5c 	bl	800e434 <memp_malloc>
 8010f7c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d126      	bne.n	8010fd2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010f84:	f7ff ffcc 	bl	8010f20 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010f88:	f7ff ff9a 	bl	8010ec0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010f8c:	2001      	movs	r0, #1
 8010f8e:	f7fd fa51 	bl	800e434 <memp_malloc>
 8010f92:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d11b      	bne.n	8010fd2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010f9a:	2009      	movs	r0, #9
 8010f9c:	f7ff ff46 	bl	8010e2c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010fa0:	2001      	movs	r0, #1
 8010fa2:	f7fd fa47 	bl	800e434 <memp_malloc>
 8010fa6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d111      	bne.n	8010fd2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010fae:	2008      	movs	r0, #8
 8010fb0:	f7ff ff3c 	bl	8010e2c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010fb4:	2001      	movs	r0, #1
 8010fb6:	f7fd fa3d 	bl	800e434 <memp_malloc>
 8010fba:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d107      	bne.n	8010fd2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010fc2:	79fb      	ldrb	r3, [r7, #7]
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7ff fee3 	bl	8010d90 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010fca:	2001      	movs	r0, #1
 8010fcc:	f7fd fa32 	bl	800e434 <memp_malloc>
 8010fd0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d03f      	beq.n	8011058 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010fd8:	229c      	movs	r2, #156	@ 0x9c
 8010fda:	2100      	movs	r1, #0
 8010fdc:	68f8      	ldr	r0, [r7, #12]
 8010fde:	f009 fb91 	bl	801a704 <memset>
    pcb->prio = prio;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	79fa      	ldrb	r2, [r7, #7]
 8010fe6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8010fee:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8010ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	22ff      	movs	r2, #255	@ 0xff
 8011006:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801100e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	2206      	movs	r2, #6
 8011014:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	2206      	movs	r2, #6
 801101c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011024:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	2201      	movs	r2, #1
 801102a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801102e:	4b0d      	ldr	r3, [pc, #52]	@ (8011064 <tcp_alloc+0xf8>)
 8011030:	681a      	ldr	r2, [r3, #0]
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011036:	4b0c      	ldr	r3, [pc, #48]	@ (8011068 <tcp_alloc+0xfc>)
 8011038:	781a      	ldrb	r2, [r3, #0]
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8011044:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	4a08      	ldr	r2, [pc, #32]	@ (801106c <tcp_alloc+0x100>)
 801104c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	4a07      	ldr	r2, [pc, #28]	@ (8011070 <tcp_alloc+0x104>)
 8011054:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011058:	68fb      	ldr	r3, [r7, #12]
}
 801105a:	4618      	mov	r0, r3
 801105c:	3710      	adds	r7, #16
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}
 8011062:	bf00      	nop
 8011064:	2000d0e0 	.word	0x2000d0e0
 8011068:	2000d0f6 	.word	0x2000d0f6
 801106c:	08010d25 	.word	0x08010d25
 8011070:	006ddd00 	.word	0x006ddd00

08011074 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b084      	sub	sp, #16
 8011078:	af00      	add	r7, sp, #0
 801107a:	4603      	mov	r3, r0
 801107c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801107e:	2040      	movs	r0, #64	@ 0x40
 8011080:	f7ff ff74 	bl	8010f6c <tcp_alloc>
 8011084:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8011086:	68fb      	ldr	r3, [r7, #12]
}
 8011088:	4618      	mov	r0, r3
 801108a:	3710      	adds	r7, #16
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}

08011090 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8011090:	b480      	push	{r7}
 8011092:	b083      	sub	sp, #12
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d002      	beq.n	80110a6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	683a      	ldr	r2, [r7, #0]
 80110a4:	611a      	str	r2, [r3, #16]
  }
}
 80110a6:	bf00      	nop
 80110a8:	370c      	adds	r7, #12
 80110aa:	46bd      	mov	sp, r7
 80110ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b0:	4770      	bx	lr
	...

080110b4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b082      	sub	sp, #8
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
 80110bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d00e      	beq.n	80110e2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	7d1b      	ldrb	r3, [r3, #20]
 80110c8:	2b01      	cmp	r3, #1
 80110ca:	d106      	bne.n	80110da <tcp_recv+0x26>
 80110cc:	4b07      	ldr	r3, [pc, #28]	@ (80110ec <tcp_recv+0x38>)
 80110ce:	f240 72df 	movw	r2, #2015	@ 0x7df
 80110d2:	4907      	ldr	r1, [pc, #28]	@ (80110f0 <tcp_recv+0x3c>)
 80110d4:	4807      	ldr	r0, [pc, #28]	@ (80110f4 <tcp_recv+0x40>)
 80110d6:	f009 f983 	bl	801a3e0 <iprintf>
    pcb->recv = recv;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	683a      	ldr	r2, [r7, #0]
 80110de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 80110e2:	bf00      	nop
 80110e4:	3708      	adds	r7, #8
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}
 80110ea:	bf00      	nop
 80110ec:	0801f5e0 	.word	0x0801f5e0
 80110f0:	0801fb7c 	.word	0x0801fb7c
 80110f4:	0801f624 	.word	0x0801f624

080110f8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b082      	sub	sp, #8
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
 8011100:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d00e      	beq.n	8011126 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	7d1b      	ldrb	r3, [r3, #20]
 801110c:	2b01      	cmp	r3, #1
 801110e:	d106      	bne.n	801111e <tcp_sent+0x26>
 8011110:	4b07      	ldr	r3, [pc, #28]	@ (8011130 <tcp_sent+0x38>)
 8011112:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8011116:	4907      	ldr	r1, [pc, #28]	@ (8011134 <tcp_sent+0x3c>)
 8011118:	4807      	ldr	r0, [pc, #28]	@ (8011138 <tcp_sent+0x40>)
 801111a:	f009 f961 	bl	801a3e0 <iprintf>
    pcb->sent = sent;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	683a      	ldr	r2, [r7, #0]
 8011122:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8011126:	bf00      	nop
 8011128:	3708      	adds	r7, #8
 801112a:	46bd      	mov	sp, r7
 801112c:	bd80      	pop	{r7, pc}
 801112e:	bf00      	nop
 8011130:	0801f5e0 	.word	0x0801f5e0
 8011134:	0801fba4 	.word	0x0801fba4
 8011138:	0801f624 	.word	0x0801f624

0801113c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d00e      	beq.n	801116a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	7d1b      	ldrb	r3, [r3, #20]
 8011150:	2b01      	cmp	r3, #1
 8011152:	d106      	bne.n	8011162 <tcp_err+0x26>
 8011154:	4b07      	ldr	r3, [pc, #28]	@ (8011174 <tcp_err+0x38>)
 8011156:	f640 020d 	movw	r2, #2061	@ 0x80d
 801115a:	4907      	ldr	r1, [pc, #28]	@ (8011178 <tcp_err+0x3c>)
 801115c:	4807      	ldr	r0, [pc, #28]	@ (801117c <tcp_err+0x40>)
 801115e:	f009 f93f 	bl	801a3e0 <iprintf>
    pcb->errf = err;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	683a      	ldr	r2, [r7, #0]
 8011166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 801116a:	bf00      	nop
 801116c:	3708      	adds	r7, #8
 801116e:	46bd      	mov	sp, r7
 8011170:	bd80      	pop	{r7, pc}
 8011172:	bf00      	nop
 8011174:	0801f5e0 	.word	0x0801f5e0
 8011178:	0801fbcc 	.word	0x0801fbcc
 801117c:	0801f624 	.word	0x0801f624

08011180 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8011180:	b480      	push	{r7}
 8011182:	b085      	sub	sp, #20
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d008      	beq.n	80111a2 <tcp_accept+0x22>
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	7d1b      	ldrb	r3, [r3, #20]
 8011194:	2b01      	cmp	r3, #1
 8011196:	d104      	bne.n	80111a2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	683a      	ldr	r2, [r7, #0]
 80111a0:	619a      	str	r2, [r3, #24]
  }
}
 80111a2:	bf00      	nop
 80111a4:	3714      	adds	r7, #20
 80111a6:	46bd      	mov	sp, r7
 80111a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ac:	4770      	bx	lr
	...

080111b0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b084      	sub	sp, #16
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	60f8      	str	r0, [r7, #12]
 80111b8:	60b9      	str	r1, [r7, #8]
 80111ba:	4613      	mov	r3, r2
 80111bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d107      	bne.n	80111d4 <tcp_poll+0x24>
 80111c4:	4b0e      	ldr	r3, [pc, #56]	@ (8011200 <tcp_poll+0x50>)
 80111c6:	f640 023d 	movw	r2, #2109	@ 0x83d
 80111ca:	490e      	ldr	r1, [pc, #56]	@ (8011204 <tcp_poll+0x54>)
 80111cc:	480e      	ldr	r0, [pc, #56]	@ (8011208 <tcp_poll+0x58>)
 80111ce:	f009 f907 	bl	801a3e0 <iprintf>
 80111d2:	e011      	b.n	80111f8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	7d1b      	ldrb	r3, [r3, #20]
 80111d8:	2b01      	cmp	r3, #1
 80111da:	d106      	bne.n	80111ea <tcp_poll+0x3a>
 80111dc:	4b08      	ldr	r3, [pc, #32]	@ (8011200 <tcp_poll+0x50>)
 80111de:	f640 023e 	movw	r2, #2110	@ 0x83e
 80111e2:	490a      	ldr	r1, [pc, #40]	@ (801120c <tcp_poll+0x5c>)
 80111e4:	4808      	ldr	r0, [pc, #32]	@ (8011208 <tcp_poll+0x58>)
 80111e6:	f009 f8fb 	bl	801a3e0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	68ba      	ldr	r2, [r7, #8]
 80111ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	79fa      	ldrb	r2, [r7, #7]
 80111f6:	775a      	strb	r2, [r3, #29]
}
 80111f8:	3710      	adds	r7, #16
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}
 80111fe:	bf00      	nop
 8011200:	0801f5e0 	.word	0x0801f5e0
 8011204:	0801fbf4 	.word	0x0801fbf4
 8011208:	0801f624 	.word	0x0801f624
 801120c:	0801fc0c 	.word	0x0801fc0c

08011210 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b082      	sub	sp, #8
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d107      	bne.n	801122e <tcp_pcb_purge+0x1e>
 801121e:	4b21      	ldr	r3, [pc, #132]	@ (80112a4 <tcp_pcb_purge+0x94>)
 8011220:	f640 0251 	movw	r2, #2129	@ 0x851
 8011224:	4920      	ldr	r1, [pc, #128]	@ (80112a8 <tcp_pcb_purge+0x98>)
 8011226:	4821      	ldr	r0, [pc, #132]	@ (80112ac <tcp_pcb_purge+0x9c>)
 8011228:	f009 f8da 	bl	801a3e0 <iprintf>
 801122c:	e037      	b.n	801129e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	7d1b      	ldrb	r3, [r3, #20]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d033      	beq.n	801129e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801123a:	2b0a      	cmp	r3, #10
 801123c:	d02f      	beq.n	801129e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011242:	2b01      	cmp	r3, #1
 8011244:	d02b      	beq.n	801129e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801124a:	2b00      	cmp	r3, #0
 801124c:	d007      	beq.n	801125e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011252:	4618      	mov	r0, r3
 8011254:	f7fe f872 	bl	800f33c <pbuf_free>
      pcb->refused_data = NULL;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2200      	movs	r2, #0
 801125c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011262:	2b00      	cmp	r3, #0
 8011264:	d002      	beq.n	801126c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f000 f986 	bl	8011578 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011272:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011278:	4618      	mov	r0, r3
 801127a:	f7ff fcf9 	bl	8010c70 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011282:	4618      	mov	r0, r3
 8011284:	f7ff fcf4 	bl	8010c70 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2200      	movs	r2, #0
 801128c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2200      	movs	r2, #0
 801129a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801129e:	3708      	adds	r7, #8
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}
 80112a4:	0801f5e0 	.word	0x0801f5e0
 80112a8:	0801fc2c 	.word	0x0801fc2c
 80112ac:	0801f624 	.word	0x0801f624

080112b0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b084      	sub	sp, #16
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
 80112b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80112ba:	683b      	ldr	r3, [r7, #0]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d106      	bne.n	80112ce <tcp_pcb_remove+0x1e>
 80112c0:	4b3e      	ldr	r3, [pc, #248]	@ (80113bc <tcp_pcb_remove+0x10c>)
 80112c2:	f640 0283 	movw	r2, #2179	@ 0x883
 80112c6:	493e      	ldr	r1, [pc, #248]	@ (80113c0 <tcp_pcb_remove+0x110>)
 80112c8:	483e      	ldr	r0, [pc, #248]	@ (80113c4 <tcp_pcb_remove+0x114>)
 80112ca:	f009 f889 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d106      	bne.n	80112e2 <tcp_pcb_remove+0x32>
 80112d4:	4b39      	ldr	r3, [pc, #228]	@ (80113bc <tcp_pcb_remove+0x10c>)
 80112d6:	f640 0284 	movw	r2, #2180	@ 0x884
 80112da:	493b      	ldr	r1, [pc, #236]	@ (80113c8 <tcp_pcb_remove+0x118>)
 80112dc:	4839      	ldr	r0, [pc, #228]	@ (80113c4 <tcp_pcb_remove+0x114>)
 80112de:	f009 f87f 	bl	801a3e0 <iprintf>

  TCP_RMV(pcblist, pcb);
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	683a      	ldr	r2, [r7, #0]
 80112e8:	429a      	cmp	r2, r3
 80112ea:	d105      	bne.n	80112f8 <tcp_pcb_remove+0x48>
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	68da      	ldr	r2, [r3, #12]
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	601a      	str	r2, [r3, #0]
 80112f6:	e013      	b.n	8011320 <tcp_pcb_remove+0x70>
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	60fb      	str	r3, [r7, #12]
 80112fe:	e00c      	b.n	801131a <tcp_pcb_remove+0x6a>
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	68db      	ldr	r3, [r3, #12]
 8011304:	683a      	ldr	r2, [r7, #0]
 8011306:	429a      	cmp	r2, r3
 8011308:	d104      	bne.n	8011314 <tcp_pcb_remove+0x64>
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	68da      	ldr	r2, [r3, #12]
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	60da      	str	r2, [r3, #12]
 8011312:	e005      	b.n	8011320 <tcp_pcb_remove+0x70>
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	68db      	ldr	r3, [r3, #12]
 8011318:	60fb      	str	r3, [r7, #12]
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d1ef      	bne.n	8011300 <tcp_pcb_remove+0x50>
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	2200      	movs	r2, #0
 8011324:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011326:	6838      	ldr	r0, [r7, #0]
 8011328:	f7ff ff72 	bl	8011210 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	7d1b      	ldrb	r3, [r3, #20]
 8011330:	2b0a      	cmp	r3, #10
 8011332:	d013      	beq.n	801135c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011338:	2b01      	cmp	r3, #1
 801133a:	d00f      	beq.n	801135c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	8b5b      	ldrh	r3, [r3, #26]
 8011340:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011344:	2b00      	cmp	r3, #0
 8011346:	d009      	beq.n	801135c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	8b5b      	ldrh	r3, [r3, #26]
 801134c:	f043 0302 	orr.w	r3, r3, #2
 8011350:	b29a      	uxth	r2, r3
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011356:	6838      	ldr	r0, [r7, #0]
 8011358:	f003 fbc0 	bl	8014adc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	7d1b      	ldrb	r3, [r3, #20]
 8011360:	2b01      	cmp	r3, #1
 8011362:	d020      	beq.n	80113a6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011368:	2b00      	cmp	r3, #0
 801136a:	d006      	beq.n	801137a <tcp_pcb_remove+0xca>
 801136c:	4b13      	ldr	r3, [pc, #76]	@ (80113bc <tcp_pcb_remove+0x10c>)
 801136e:	f640 0293 	movw	r2, #2195	@ 0x893
 8011372:	4916      	ldr	r1, [pc, #88]	@ (80113cc <tcp_pcb_remove+0x11c>)
 8011374:	4813      	ldr	r0, [pc, #76]	@ (80113c4 <tcp_pcb_remove+0x114>)
 8011376:	f009 f833 	bl	801a3e0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801137e:	2b00      	cmp	r3, #0
 8011380:	d006      	beq.n	8011390 <tcp_pcb_remove+0xe0>
 8011382:	4b0e      	ldr	r3, [pc, #56]	@ (80113bc <tcp_pcb_remove+0x10c>)
 8011384:	f640 0294 	movw	r2, #2196	@ 0x894
 8011388:	4911      	ldr	r1, [pc, #68]	@ (80113d0 <tcp_pcb_remove+0x120>)
 801138a:	480e      	ldr	r0, [pc, #56]	@ (80113c4 <tcp_pcb_remove+0x114>)
 801138c:	f009 f828 	bl	801a3e0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011394:	2b00      	cmp	r3, #0
 8011396:	d006      	beq.n	80113a6 <tcp_pcb_remove+0xf6>
 8011398:	4b08      	ldr	r3, [pc, #32]	@ (80113bc <tcp_pcb_remove+0x10c>)
 801139a:	f640 0296 	movw	r2, #2198	@ 0x896
 801139e:	490d      	ldr	r1, [pc, #52]	@ (80113d4 <tcp_pcb_remove+0x124>)
 80113a0:	4808      	ldr	r0, [pc, #32]	@ (80113c4 <tcp_pcb_remove+0x114>)
 80113a2:	f009 f81d 	bl	801a3e0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	2200      	movs	r2, #0
 80113aa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	2200      	movs	r2, #0
 80113b0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80113b2:	bf00      	nop
 80113b4:	3710      	adds	r7, #16
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	0801f5e0 	.word	0x0801f5e0
 80113c0:	0801fc48 	.word	0x0801fc48
 80113c4:	0801f624 	.word	0x0801f624
 80113c8:	0801fc64 	.word	0x0801fc64
 80113cc:	0801fc84 	.word	0x0801fc84
 80113d0:	0801fc9c 	.word	0x0801fc9c
 80113d4:	0801fcb8 	.word	0x0801fcb8

080113d8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b082      	sub	sp, #8
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d106      	bne.n	80113f4 <tcp_next_iss+0x1c>
 80113e6:	4b0a      	ldr	r3, [pc, #40]	@ (8011410 <tcp_next_iss+0x38>)
 80113e8:	f640 02af 	movw	r2, #2223	@ 0x8af
 80113ec:	4909      	ldr	r1, [pc, #36]	@ (8011414 <tcp_next_iss+0x3c>)
 80113ee:	480a      	ldr	r0, [pc, #40]	@ (8011418 <tcp_next_iss+0x40>)
 80113f0:	f008 fff6 	bl	801a3e0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80113f4:	4b09      	ldr	r3, [pc, #36]	@ (801141c <tcp_next_iss+0x44>)
 80113f6:	681a      	ldr	r2, [r3, #0]
 80113f8:	4b09      	ldr	r3, [pc, #36]	@ (8011420 <tcp_next_iss+0x48>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	4413      	add	r3, r2
 80113fe:	4a07      	ldr	r2, [pc, #28]	@ (801141c <tcp_next_iss+0x44>)
 8011400:	6013      	str	r3, [r2, #0]
  return iss;
 8011402:	4b06      	ldr	r3, [pc, #24]	@ (801141c <tcp_next_iss+0x44>)
 8011404:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011406:	4618      	mov	r0, r3
 8011408:	3708      	adds	r7, #8
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}
 801140e:	bf00      	nop
 8011410:	0801f5e0 	.word	0x0801f5e0
 8011414:	0801fcd0 	.word	0x0801fcd0
 8011418:	0801f624 	.word	0x0801f624
 801141c:	20000028 	.word	0x20000028
 8011420:	2000d0e0 	.word	0x2000d0e0

08011424 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b086      	sub	sp, #24
 8011428:	af00      	add	r7, sp, #0
 801142a:	4603      	mov	r3, r0
 801142c:	60b9      	str	r1, [r7, #8]
 801142e:	607a      	str	r2, [r7, #4]
 8011430:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d106      	bne.n	8011446 <tcp_eff_send_mss_netif+0x22>
 8011438:	4b14      	ldr	r3, [pc, #80]	@ (801148c <tcp_eff_send_mss_netif+0x68>)
 801143a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801143e:	4914      	ldr	r1, [pc, #80]	@ (8011490 <tcp_eff_send_mss_netif+0x6c>)
 8011440:	4814      	ldr	r0, [pc, #80]	@ (8011494 <tcp_eff_send_mss_netif+0x70>)
 8011442:	f008 ffcd 	bl	801a3e0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d101      	bne.n	8011450 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801144c:	89fb      	ldrh	r3, [r7, #14]
 801144e:	e019      	b.n	8011484 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011454:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011456:	8afb      	ldrh	r3, [r7, #22]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d012      	beq.n	8011482 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801145c:	2328      	movs	r3, #40	@ 0x28
 801145e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011460:	8afa      	ldrh	r2, [r7, #22]
 8011462:	8abb      	ldrh	r3, [r7, #20]
 8011464:	429a      	cmp	r2, r3
 8011466:	d904      	bls.n	8011472 <tcp_eff_send_mss_netif+0x4e>
 8011468:	8afa      	ldrh	r2, [r7, #22]
 801146a:	8abb      	ldrh	r3, [r7, #20]
 801146c:	1ad3      	subs	r3, r2, r3
 801146e:	b29b      	uxth	r3, r3
 8011470:	e000      	b.n	8011474 <tcp_eff_send_mss_netif+0x50>
 8011472:	2300      	movs	r3, #0
 8011474:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011476:	8a7a      	ldrh	r2, [r7, #18]
 8011478:	89fb      	ldrh	r3, [r7, #14]
 801147a:	4293      	cmp	r3, r2
 801147c:	bf28      	it	cs
 801147e:	4613      	movcs	r3, r2
 8011480:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011482:	89fb      	ldrh	r3, [r7, #14]
}
 8011484:	4618      	mov	r0, r3
 8011486:	3718      	adds	r7, #24
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}
 801148c:	0801f5e0 	.word	0x0801f5e0
 8011490:	0801fcec 	.word	0x0801fcec
 8011494:	0801f624 	.word	0x0801f624

08011498 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b084      	sub	sp, #16
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
 80114a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80114a2:	683b      	ldr	r3, [r7, #0]
 80114a4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d119      	bne.n	80114e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80114ac:	4b10      	ldr	r3, [pc, #64]	@ (80114f0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80114ae:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80114b2:	4910      	ldr	r1, [pc, #64]	@ (80114f4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80114b4:	4810      	ldr	r0, [pc, #64]	@ (80114f8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80114b6:	f008 ff93 	bl	801a3e0 <iprintf>

  while (pcb != NULL) {
 80114ba:	e011      	b.n	80114e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	681a      	ldr	r2, [r3, #0]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d108      	bne.n	80114da <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80114ce:	68f8      	ldr	r0, [r7, #12]
 80114d0:	f7fe fd34 	bl	800ff3c <tcp_abort>
      pcb = next;
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	60fb      	str	r3, [r7, #12]
 80114d8:	e002      	b.n	80114e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	68db      	ldr	r3, [r3, #12]
 80114de:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d1ea      	bne.n	80114bc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80114e6:	bf00      	nop
 80114e8:	bf00      	nop
 80114ea:	3710      	adds	r7, #16
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}
 80114f0:	0801f5e0 	.word	0x0801f5e0
 80114f4:	0801fd14 	.word	0x0801fd14
 80114f8:	0801f624 	.word	0x0801f624

080114fc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b084      	sub	sp, #16
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
 8011504:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d02a      	beq.n	8011562 <tcp_netif_ip_addr_changed+0x66>
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d026      	beq.n	8011562 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011514:	4b15      	ldr	r3, [pc, #84]	@ (801156c <tcp_netif_ip_addr_changed+0x70>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	4619      	mov	r1, r3
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f7ff ffbc 	bl	8011498 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011520:	4b13      	ldr	r3, [pc, #76]	@ (8011570 <tcp_netif_ip_addr_changed+0x74>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	4619      	mov	r1, r3
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f7ff ffb6 	bl	8011498 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801152c:	683b      	ldr	r3, [r7, #0]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d017      	beq.n	8011562 <tcp_netif_ip_addr_changed+0x66>
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d013      	beq.n	8011562 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801153a:	4b0e      	ldr	r3, [pc, #56]	@ (8011574 <tcp_netif_ip_addr_changed+0x78>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	60fb      	str	r3, [r7, #12]
 8011540:	e00c      	b.n	801155c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	681a      	ldr	r2, [r3, #0]
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	429a      	cmp	r2, r3
 801154c:	d103      	bne.n	8011556 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	681a      	ldr	r2, [r3, #0]
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	68db      	ldr	r3, [r3, #12]
 801155a:	60fb      	str	r3, [r7, #12]
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d1ef      	bne.n	8011542 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011562:	bf00      	nop
 8011564:	3710      	adds	r7, #16
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}
 801156a:	bf00      	nop
 801156c:	2000d0ec 	.word	0x2000d0ec
 8011570:	2000d0e4 	.word	0x2000d0e4
 8011574:	2000d0e8 	.word	0x2000d0e8

08011578 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b082      	sub	sp, #8
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011584:	2b00      	cmp	r3, #0
 8011586:	d007      	beq.n	8011598 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801158c:	4618      	mov	r0, r3
 801158e:	f7ff fb6f 	bl	8010c70 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	2200      	movs	r2, #0
 8011596:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011598:	bf00      	nop
 801159a:	3708      	adds	r7, #8
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}

080115a0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80115a0:	b590      	push	{r4, r7, lr}
 80115a2:	b08d      	sub	sp, #52	@ 0x34
 80115a4:	af04      	add	r7, sp, #16
 80115a6:	6078      	str	r0, [r7, #4]
 80115a8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d105      	bne.n	80115bc <tcp_input+0x1c>
 80115b0:	4b9b      	ldr	r3, [pc, #620]	@ (8011820 <tcp_input+0x280>)
 80115b2:	2283      	movs	r2, #131	@ 0x83
 80115b4:	499b      	ldr	r1, [pc, #620]	@ (8011824 <tcp_input+0x284>)
 80115b6:	489c      	ldr	r0, [pc, #624]	@ (8011828 <tcp_input+0x288>)
 80115b8:	f008 ff12 	bl	801a3e0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	4a9a      	ldr	r2, [pc, #616]	@ (801182c <tcp_input+0x28c>)
 80115c2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	895b      	ldrh	r3, [r3, #10]
 80115c8:	2b13      	cmp	r3, #19
 80115ca:	f240 83d1 	bls.w	8011d70 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80115ce:	4b98      	ldr	r3, [pc, #608]	@ (8011830 <tcp_input+0x290>)
 80115d0:	695b      	ldr	r3, [r3, #20]
 80115d2:	4a97      	ldr	r2, [pc, #604]	@ (8011830 <tcp_input+0x290>)
 80115d4:	6812      	ldr	r2, [r2, #0]
 80115d6:	4611      	mov	r1, r2
 80115d8:	4618      	mov	r0, r3
 80115da:	f006 fbe3 	bl	8017da4 <ip4_addr_isbroadcast_u32>
 80115de:	4603      	mov	r3, r0
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	f040 83c7 	bne.w	8011d74 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80115e6:	4b92      	ldr	r3, [pc, #584]	@ (8011830 <tcp_input+0x290>)
 80115e8:	695b      	ldr	r3, [r3, #20]
 80115ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80115ee:	2be0      	cmp	r3, #224	@ 0xe0
 80115f0:	f000 83c0 	beq.w	8011d74 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80115f4:	4b8d      	ldr	r3, [pc, #564]	@ (801182c <tcp_input+0x28c>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	899b      	ldrh	r3, [r3, #12]
 80115fa:	b29b      	uxth	r3, r3
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7fc fa41 	bl	800da84 <lwip_htons>
 8011602:	4603      	mov	r3, r0
 8011604:	0b1b      	lsrs	r3, r3, #12
 8011606:	b29b      	uxth	r3, r3
 8011608:	b2db      	uxtb	r3, r3
 801160a:	009b      	lsls	r3, r3, #2
 801160c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801160e:	7cbb      	ldrb	r3, [r7, #18]
 8011610:	2b13      	cmp	r3, #19
 8011612:	f240 83b1 	bls.w	8011d78 <tcp_input+0x7d8>
 8011616:	7cbb      	ldrb	r3, [r7, #18]
 8011618:	b29a      	uxth	r2, r3
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	891b      	ldrh	r3, [r3, #8]
 801161e:	429a      	cmp	r2, r3
 8011620:	f200 83aa 	bhi.w	8011d78 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011624:	7cbb      	ldrb	r3, [r7, #18]
 8011626:	b29b      	uxth	r3, r3
 8011628:	3b14      	subs	r3, #20
 801162a:	b29a      	uxth	r2, r3
 801162c:	4b81      	ldr	r3, [pc, #516]	@ (8011834 <tcp_input+0x294>)
 801162e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011630:	4b81      	ldr	r3, [pc, #516]	@ (8011838 <tcp_input+0x298>)
 8011632:	2200      	movs	r2, #0
 8011634:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	895a      	ldrh	r2, [r3, #10]
 801163a:	7cbb      	ldrb	r3, [r7, #18]
 801163c:	b29b      	uxth	r3, r3
 801163e:	429a      	cmp	r2, r3
 8011640:	d309      	bcc.n	8011656 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011642:	4b7c      	ldr	r3, [pc, #496]	@ (8011834 <tcp_input+0x294>)
 8011644:	881a      	ldrh	r2, [r3, #0]
 8011646:	4b7d      	ldr	r3, [pc, #500]	@ (801183c <tcp_input+0x29c>)
 8011648:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801164a:	7cbb      	ldrb	r3, [r7, #18]
 801164c:	4619      	mov	r1, r3
 801164e:	6878      	ldr	r0, [r7, #4]
 8011650:	f7fd fdbc 	bl	800f1cc <pbuf_remove_header>
 8011654:	e04e      	b.n	80116f4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d105      	bne.n	801166a <tcp_input+0xca>
 801165e:	4b70      	ldr	r3, [pc, #448]	@ (8011820 <tcp_input+0x280>)
 8011660:	22c2      	movs	r2, #194	@ 0xc2
 8011662:	4977      	ldr	r1, [pc, #476]	@ (8011840 <tcp_input+0x2a0>)
 8011664:	4870      	ldr	r0, [pc, #448]	@ (8011828 <tcp_input+0x288>)
 8011666:	f008 febb 	bl	801a3e0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801166a:	2114      	movs	r1, #20
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f7fd fdad 	bl	800f1cc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	895a      	ldrh	r2, [r3, #10]
 8011676:	4b71      	ldr	r3, [pc, #452]	@ (801183c <tcp_input+0x29c>)
 8011678:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801167a:	4b6e      	ldr	r3, [pc, #440]	@ (8011834 <tcp_input+0x294>)
 801167c:	881a      	ldrh	r2, [r3, #0]
 801167e:	4b6f      	ldr	r3, [pc, #444]	@ (801183c <tcp_input+0x29c>)
 8011680:	881b      	ldrh	r3, [r3, #0]
 8011682:	1ad3      	subs	r3, r2, r3
 8011684:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011686:	4b6d      	ldr	r3, [pc, #436]	@ (801183c <tcp_input+0x29c>)
 8011688:	881b      	ldrh	r3, [r3, #0]
 801168a:	4619      	mov	r1, r3
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	f7fd fd9d 	bl	800f1cc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	895b      	ldrh	r3, [r3, #10]
 8011698:	8a3a      	ldrh	r2, [r7, #16]
 801169a:	429a      	cmp	r2, r3
 801169c:	f200 836e 	bhi.w	8011d7c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	685b      	ldr	r3, [r3, #4]
 80116a6:	4a64      	ldr	r2, [pc, #400]	@ (8011838 <tcp_input+0x298>)
 80116a8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	8a3a      	ldrh	r2, [r7, #16]
 80116b0:	4611      	mov	r1, r2
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7fd fd8a 	bl	800f1cc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	891a      	ldrh	r2, [r3, #8]
 80116bc:	8a3b      	ldrh	r3, [r7, #16]
 80116be:	1ad3      	subs	r3, r2, r3
 80116c0:	b29a      	uxth	r2, r3
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	895b      	ldrh	r3, [r3, #10]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d005      	beq.n	80116da <tcp_input+0x13a>
 80116ce:	4b54      	ldr	r3, [pc, #336]	@ (8011820 <tcp_input+0x280>)
 80116d0:	22df      	movs	r2, #223	@ 0xdf
 80116d2:	495c      	ldr	r1, [pc, #368]	@ (8011844 <tcp_input+0x2a4>)
 80116d4:	4854      	ldr	r0, [pc, #336]	@ (8011828 <tcp_input+0x288>)
 80116d6:	f008 fe83 	bl	801a3e0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	891a      	ldrh	r2, [r3, #8]
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	891b      	ldrh	r3, [r3, #8]
 80116e4:	429a      	cmp	r2, r3
 80116e6:	d005      	beq.n	80116f4 <tcp_input+0x154>
 80116e8:	4b4d      	ldr	r3, [pc, #308]	@ (8011820 <tcp_input+0x280>)
 80116ea:	22e0      	movs	r2, #224	@ 0xe0
 80116ec:	4956      	ldr	r1, [pc, #344]	@ (8011848 <tcp_input+0x2a8>)
 80116ee:	484e      	ldr	r0, [pc, #312]	@ (8011828 <tcp_input+0x288>)
 80116f0:	f008 fe76 	bl	801a3e0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80116f4:	4b4d      	ldr	r3, [pc, #308]	@ (801182c <tcp_input+0x28c>)
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	881b      	ldrh	r3, [r3, #0]
 80116fa:	b29b      	uxth	r3, r3
 80116fc:	4a4b      	ldr	r2, [pc, #300]	@ (801182c <tcp_input+0x28c>)
 80116fe:	6814      	ldr	r4, [r2, #0]
 8011700:	4618      	mov	r0, r3
 8011702:	f7fc f9bf 	bl	800da84 <lwip_htons>
 8011706:	4603      	mov	r3, r0
 8011708:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801170a:	4b48      	ldr	r3, [pc, #288]	@ (801182c <tcp_input+0x28c>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	885b      	ldrh	r3, [r3, #2]
 8011710:	b29b      	uxth	r3, r3
 8011712:	4a46      	ldr	r2, [pc, #280]	@ (801182c <tcp_input+0x28c>)
 8011714:	6814      	ldr	r4, [r2, #0]
 8011716:	4618      	mov	r0, r3
 8011718:	f7fc f9b4 	bl	800da84 <lwip_htons>
 801171c:	4603      	mov	r3, r0
 801171e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011720:	4b42      	ldr	r3, [pc, #264]	@ (801182c <tcp_input+0x28c>)
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	4a41      	ldr	r2, [pc, #260]	@ (801182c <tcp_input+0x28c>)
 8011728:	6814      	ldr	r4, [r2, #0]
 801172a:	4618      	mov	r0, r3
 801172c:	f7fc f9bf 	bl	800daae <lwip_htonl>
 8011730:	4603      	mov	r3, r0
 8011732:	6063      	str	r3, [r4, #4]
 8011734:	6863      	ldr	r3, [r4, #4]
 8011736:	4a45      	ldr	r2, [pc, #276]	@ (801184c <tcp_input+0x2ac>)
 8011738:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801173a:	4b3c      	ldr	r3, [pc, #240]	@ (801182c <tcp_input+0x28c>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	689b      	ldr	r3, [r3, #8]
 8011740:	4a3a      	ldr	r2, [pc, #232]	@ (801182c <tcp_input+0x28c>)
 8011742:	6814      	ldr	r4, [r2, #0]
 8011744:	4618      	mov	r0, r3
 8011746:	f7fc f9b2 	bl	800daae <lwip_htonl>
 801174a:	4603      	mov	r3, r0
 801174c:	60a3      	str	r3, [r4, #8]
 801174e:	68a3      	ldr	r3, [r4, #8]
 8011750:	4a3f      	ldr	r2, [pc, #252]	@ (8011850 <tcp_input+0x2b0>)
 8011752:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011754:	4b35      	ldr	r3, [pc, #212]	@ (801182c <tcp_input+0x28c>)
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	89db      	ldrh	r3, [r3, #14]
 801175a:	b29b      	uxth	r3, r3
 801175c:	4a33      	ldr	r2, [pc, #204]	@ (801182c <tcp_input+0x28c>)
 801175e:	6814      	ldr	r4, [r2, #0]
 8011760:	4618      	mov	r0, r3
 8011762:	f7fc f98f 	bl	800da84 <lwip_htons>
 8011766:	4603      	mov	r3, r0
 8011768:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801176a:	4b30      	ldr	r3, [pc, #192]	@ (801182c <tcp_input+0x28c>)
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	899b      	ldrh	r3, [r3, #12]
 8011770:	b29b      	uxth	r3, r3
 8011772:	4618      	mov	r0, r3
 8011774:	f7fc f986 	bl	800da84 <lwip_htons>
 8011778:	4603      	mov	r3, r0
 801177a:	b2db      	uxtb	r3, r3
 801177c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011780:	b2da      	uxtb	r2, r3
 8011782:	4b34      	ldr	r3, [pc, #208]	@ (8011854 <tcp_input+0x2b4>)
 8011784:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	891a      	ldrh	r2, [r3, #8]
 801178a:	4b33      	ldr	r3, [pc, #204]	@ (8011858 <tcp_input+0x2b8>)
 801178c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801178e:	4b31      	ldr	r3, [pc, #196]	@ (8011854 <tcp_input+0x2b4>)
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	f003 0303 	and.w	r3, r3, #3
 8011796:	2b00      	cmp	r3, #0
 8011798:	d00c      	beq.n	80117b4 <tcp_input+0x214>
    tcplen++;
 801179a:	4b2f      	ldr	r3, [pc, #188]	@ (8011858 <tcp_input+0x2b8>)
 801179c:	881b      	ldrh	r3, [r3, #0]
 801179e:	3301      	adds	r3, #1
 80117a0:	b29a      	uxth	r2, r3
 80117a2:	4b2d      	ldr	r3, [pc, #180]	@ (8011858 <tcp_input+0x2b8>)
 80117a4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	891a      	ldrh	r2, [r3, #8]
 80117aa:	4b2b      	ldr	r3, [pc, #172]	@ (8011858 <tcp_input+0x2b8>)
 80117ac:	881b      	ldrh	r3, [r3, #0]
 80117ae:	429a      	cmp	r2, r3
 80117b0:	f200 82e6 	bhi.w	8011d80 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80117b4:	2300      	movs	r3, #0
 80117b6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80117b8:	4b28      	ldr	r3, [pc, #160]	@ (801185c <tcp_input+0x2bc>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	61fb      	str	r3, [r7, #28]
 80117be:	e09d      	b.n	80118fc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80117c0:	69fb      	ldr	r3, [r7, #28]
 80117c2:	7d1b      	ldrb	r3, [r3, #20]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d105      	bne.n	80117d4 <tcp_input+0x234>
 80117c8:	4b15      	ldr	r3, [pc, #84]	@ (8011820 <tcp_input+0x280>)
 80117ca:	22fb      	movs	r2, #251	@ 0xfb
 80117cc:	4924      	ldr	r1, [pc, #144]	@ (8011860 <tcp_input+0x2c0>)
 80117ce:	4816      	ldr	r0, [pc, #88]	@ (8011828 <tcp_input+0x288>)
 80117d0:	f008 fe06 	bl	801a3e0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80117d4:	69fb      	ldr	r3, [r7, #28]
 80117d6:	7d1b      	ldrb	r3, [r3, #20]
 80117d8:	2b0a      	cmp	r3, #10
 80117da:	d105      	bne.n	80117e8 <tcp_input+0x248>
 80117dc:	4b10      	ldr	r3, [pc, #64]	@ (8011820 <tcp_input+0x280>)
 80117de:	22fc      	movs	r2, #252	@ 0xfc
 80117e0:	4920      	ldr	r1, [pc, #128]	@ (8011864 <tcp_input+0x2c4>)
 80117e2:	4811      	ldr	r0, [pc, #68]	@ (8011828 <tcp_input+0x288>)
 80117e4:	f008 fdfc 	bl	801a3e0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80117e8:	69fb      	ldr	r3, [r7, #28]
 80117ea:	7d1b      	ldrb	r3, [r3, #20]
 80117ec:	2b01      	cmp	r3, #1
 80117ee:	d105      	bne.n	80117fc <tcp_input+0x25c>
 80117f0:	4b0b      	ldr	r3, [pc, #44]	@ (8011820 <tcp_input+0x280>)
 80117f2:	22fd      	movs	r2, #253	@ 0xfd
 80117f4:	491c      	ldr	r1, [pc, #112]	@ (8011868 <tcp_input+0x2c8>)
 80117f6:	480c      	ldr	r0, [pc, #48]	@ (8011828 <tcp_input+0x288>)
 80117f8:	f008 fdf2 	bl	801a3e0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80117fc:	69fb      	ldr	r3, [r7, #28]
 80117fe:	7a1b      	ldrb	r3, [r3, #8]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d033      	beq.n	801186c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011804:	69fb      	ldr	r3, [r7, #28]
 8011806:	7a1a      	ldrb	r2, [r3, #8]
 8011808:	4b09      	ldr	r3, [pc, #36]	@ (8011830 <tcp_input+0x290>)
 801180a:	685b      	ldr	r3, [r3, #4]
 801180c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011810:	3301      	adds	r3, #1
 8011812:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011814:	429a      	cmp	r2, r3
 8011816:	d029      	beq.n	801186c <tcp_input+0x2cc>
      prev = pcb;
 8011818:	69fb      	ldr	r3, [r7, #28]
 801181a:	61bb      	str	r3, [r7, #24]
      continue;
 801181c:	e06b      	b.n	80118f6 <tcp_input+0x356>
 801181e:	bf00      	nop
 8011820:	0801fd48 	.word	0x0801fd48
 8011824:	0801fd7c 	.word	0x0801fd7c
 8011828:	0801fd94 	.word	0x0801fd94
 801182c:	2000d108 	.word	0x2000d108
 8011830:	2000998c 	.word	0x2000998c
 8011834:	2000d10c 	.word	0x2000d10c
 8011838:	2000d110 	.word	0x2000d110
 801183c:	2000d10e 	.word	0x2000d10e
 8011840:	0801fdbc 	.word	0x0801fdbc
 8011844:	0801fdcc 	.word	0x0801fdcc
 8011848:	0801fdd8 	.word	0x0801fdd8
 801184c:	2000d118 	.word	0x2000d118
 8011850:	2000d11c 	.word	0x2000d11c
 8011854:	2000d124 	.word	0x2000d124
 8011858:	2000d122 	.word	0x2000d122
 801185c:	2000d0ec 	.word	0x2000d0ec
 8011860:	0801fdf8 	.word	0x0801fdf8
 8011864:	0801fe20 	.word	0x0801fe20
 8011868:	0801fe4c 	.word	0x0801fe4c
    }

    if (pcb->remote_port == tcphdr->src &&
 801186c:	69fb      	ldr	r3, [r7, #28]
 801186e:	8b1a      	ldrh	r2, [r3, #24]
 8011870:	4b72      	ldr	r3, [pc, #456]	@ (8011a3c <tcp_input+0x49c>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	881b      	ldrh	r3, [r3, #0]
 8011876:	b29b      	uxth	r3, r3
 8011878:	429a      	cmp	r2, r3
 801187a:	d13a      	bne.n	80118f2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801187c:	69fb      	ldr	r3, [r7, #28]
 801187e:	8ada      	ldrh	r2, [r3, #22]
 8011880:	4b6e      	ldr	r3, [pc, #440]	@ (8011a3c <tcp_input+0x49c>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	885b      	ldrh	r3, [r3, #2]
 8011886:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011888:	429a      	cmp	r2, r3
 801188a:	d132      	bne.n	80118f2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801188c:	69fb      	ldr	r3, [r7, #28]
 801188e:	685a      	ldr	r2, [r3, #4]
 8011890:	4b6b      	ldr	r3, [pc, #428]	@ (8011a40 <tcp_input+0x4a0>)
 8011892:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011894:	429a      	cmp	r2, r3
 8011896:	d12c      	bne.n	80118f2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011898:	69fb      	ldr	r3, [r7, #28]
 801189a:	681a      	ldr	r2, [r3, #0]
 801189c:	4b68      	ldr	r3, [pc, #416]	@ (8011a40 <tcp_input+0x4a0>)
 801189e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d126      	bne.n	80118f2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80118a4:	69fb      	ldr	r3, [r7, #28]
 80118a6:	68db      	ldr	r3, [r3, #12]
 80118a8:	69fa      	ldr	r2, [r7, #28]
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d106      	bne.n	80118bc <tcp_input+0x31c>
 80118ae:	4b65      	ldr	r3, [pc, #404]	@ (8011a44 <tcp_input+0x4a4>)
 80118b0:	f240 120d 	movw	r2, #269	@ 0x10d
 80118b4:	4964      	ldr	r1, [pc, #400]	@ (8011a48 <tcp_input+0x4a8>)
 80118b6:	4865      	ldr	r0, [pc, #404]	@ (8011a4c <tcp_input+0x4ac>)
 80118b8:	f008 fd92 	bl	801a3e0 <iprintf>
      if (prev != NULL) {
 80118bc:	69bb      	ldr	r3, [r7, #24]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d00a      	beq.n	80118d8 <tcp_input+0x338>
        prev->next = pcb->next;
 80118c2:	69fb      	ldr	r3, [r7, #28]
 80118c4:	68da      	ldr	r2, [r3, #12]
 80118c6:	69bb      	ldr	r3, [r7, #24]
 80118c8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80118ca:	4b61      	ldr	r3, [pc, #388]	@ (8011a50 <tcp_input+0x4b0>)
 80118cc:	681a      	ldr	r2, [r3, #0]
 80118ce:	69fb      	ldr	r3, [r7, #28]
 80118d0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80118d2:	4a5f      	ldr	r2, [pc, #380]	@ (8011a50 <tcp_input+0x4b0>)
 80118d4:	69fb      	ldr	r3, [r7, #28]
 80118d6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80118d8:	69fb      	ldr	r3, [r7, #28]
 80118da:	68db      	ldr	r3, [r3, #12]
 80118dc:	69fa      	ldr	r2, [r7, #28]
 80118de:	429a      	cmp	r2, r3
 80118e0:	d111      	bne.n	8011906 <tcp_input+0x366>
 80118e2:	4b58      	ldr	r3, [pc, #352]	@ (8011a44 <tcp_input+0x4a4>)
 80118e4:	f240 1215 	movw	r2, #277	@ 0x115
 80118e8:	495a      	ldr	r1, [pc, #360]	@ (8011a54 <tcp_input+0x4b4>)
 80118ea:	4858      	ldr	r0, [pc, #352]	@ (8011a4c <tcp_input+0x4ac>)
 80118ec:	f008 fd78 	bl	801a3e0 <iprintf>
      break;
 80118f0:	e009      	b.n	8011906 <tcp_input+0x366>
    }
    prev = pcb;
 80118f2:	69fb      	ldr	r3, [r7, #28]
 80118f4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80118f6:	69fb      	ldr	r3, [r7, #28]
 80118f8:	68db      	ldr	r3, [r3, #12]
 80118fa:	61fb      	str	r3, [r7, #28]
 80118fc:	69fb      	ldr	r3, [r7, #28]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	f47f af5e 	bne.w	80117c0 <tcp_input+0x220>
 8011904:	e000      	b.n	8011908 <tcp_input+0x368>
      break;
 8011906:	bf00      	nop
  }

  if (pcb == NULL) {
 8011908:	69fb      	ldr	r3, [r7, #28]
 801190a:	2b00      	cmp	r3, #0
 801190c:	f040 80aa 	bne.w	8011a64 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011910:	4b51      	ldr	r3, [pc, #324]	@ (8011a58 <tcp_input+0x4b8>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	61fb      	str	r3, [r7, #28]
 8011916:	e03f      	b.n	8011998 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011918:	69fb      	ldr	r3, [r7, #28]
 801191a:	7d1b      	ldrb	r3, [r3, #20]
 801191c:	2b0a      	cmp	r3, #10
 801191e:	d006      	beq.n	801192e <tcp_input+0x38e>
 8011920:	4b48      	ldr	r3, [pc, #288]	@ (8011a44 <tcp_input+0x4a4>)
 8011922:	f240 121f 	movw	r2, #287	@ 0x11f
 8011926:	494d      	ldr	r1, [pc, #308]	@ (8011a5c <tcp_input+0x4bc>)
 8011928:	4848      	ldr	r0, [pc, #288]	@ (8011a4c <tcp_input+0x4ac>)
 801192a:	f008 fd59 	bl	801a3e0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801192e:	69fb      	ldr	r3, [r7, #28]
 8011930:	7a1b      	ldrb	r3, [r3, #8]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d009      	beq.n	801194a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011936:	69fb      	ldr	r3, [r7, #28]
 8011938:	7a1a      	ldrb	r2, [r3, #8]
 801193a:	4b41      	ldr	r3, [pc, #260]	@ (8011a40 <tcp_input+0x4a0>)
 801193c:	685b      	ldr	r3, [r3, #4]
 801193e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011942:	3301      	adds	r3, #1
 8011944:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011946:	429a      	cmp	r2, r3
 8011948:	d122      	bne.n	8011990 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801194a:	69fb      	ldr	r3, [r7, #28]
 801194c:	8b1a      	ldrh	r2, [r3, #24]
 801194e:	4b3b      	ldr	r3, [pc, #236]	@ (8011a3c <tcp_input+0x49c>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	881b      	ldrh	r3, [r3, #0]
 8011954:	b29b      	uxth	r3, r3
 8011956:	429a      	cmp	r2, r3
 8011958:	d11b      	bne.n	8011992 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801195a:	69fb      	ldr	r3, [r7, #28]
 801195c:	8ada      	ldrh	r2, [r3, #22]
 801195e:	4b37      	ldr	r3, [pc, #220]	@ (8011a3c <tcp_input+0x49c>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	885b      	ldrh	r3, [r3, #2]
 8011964:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011966:	429a      	cmp	r2, r3
 8011968:	d113      	bne.n	8011992 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801196a:	69fb      	ldr	r3, [r7, #28]
 801196c:	685a      	ldr	r2, [r3, #4]
 801196e:	4b34      	ldr	r3, [pc, #208]	@ (8011a40 <tcp_input+0x4a0>)
 8011970:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011972:	429a      	cmp	r2, r3
 8011974:	d10d      	bne.n	8011992 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011976:	69fb      	ldr	r3, [r7, #28]
 8011978:	681a      	ldr	r2, [r3, #0]
 801197a:	4b31      	ldr	r3, [pc, #196]	@ (8011a40 <tcp_input+0x4a0>)
 801197c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801197e:	429a      	cmp	r2, r3
 8011980:	d107      	bne.n	8011992 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011982:	69f8      	ldr	r0, [r7, #28]
 8011984:	f000 fb56 	bl	8012034 <tcp_timewait_input>
        }
        pbuf_free(p);
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	f7fd fcd7 	bl	800f33c <pbuf_free>
        return;
 801198e:	e1fd      	b.n	8011d8c <tcp_input+0x7ec>
        continue;
 8011990:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011992:	69fb      	ldr	r3, [r7, #28]
 8011994:	68db      	ldr	r3, [r3, #12]
 8011996:	61fb      	str	r3, [r7, #28]
 8011998:	69fb      	ldr	r3, [r7, #28]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d1bc      	bne.n	8011918 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801199e:	2300      	movs	r3, #0
 80119a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80119a2:	4b2f      	ldr	r3, [pc, #188]	@ (8011a60 <tcp_input+0x4c0>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	617b      	str	r3, [r7, #20]
 80119a8:	e02a      	b.n	8011a00 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	7a1b      	ldrb	r3, [r3, #8]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d00c      	beq.n	80119cc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	7a1a      	ldrb	r2, [r3, #8]
 80119b6:	4b22      	ldr	r3, [pc, #136]	@ (8011a40 <tcp_input+0x4a0>)
 80119b8:	685b      	ldr	r3, [r3, #4]
 80119ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80119be:	3301      	adds	r3, #1
 80119c0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80119c2:	429a      	cmp	r2, r3
 80119c4:	d002      	beq.n	80119cc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80119c6:	697b      	ldr	r3, [r7, #20]
 80119c8:	61bb      	str	r3, [r7, #24]
        continue;
 80119ca:	e016      	b.n	80119fa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80119cc:	697b      	ldr	r3, [r7, #20]
 80119ce:	8ada      	ldrh	r2, [r3, #22]
 80119d0:	4b1a      	ldr	r3, [pc, #104]	@ (8011a3c <tcp_input+0x49c>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	885b      	ldrh	r3, [r3, #2]
 80119d6:	b29b      	uxth	r3, r3
 80119d8:	429a      	cmp	r2, r3
 80119da:	d10c      	bne.n	80119f6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80119dc:	697b      	ldr	r3, [r7, #20]
 80119de:	681a      	ldr	r2, [r3, #0]
 80119e0:	4b17      	ldr	r3, [pc, #92]	@ (8011a40 <tcp_input+0x4a0>)
 80119e2:	695b      	ldr	r3, [r3, #20]
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d00f      	beq.n	8011a08 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d00d      	beq.n	8011a0a <tcp_input+0x46a>
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d009      	beq.n	8011a0a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80119f6:	697b      	ldr	r3, [r7, #20]
 80119f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80119fa:	697b      	ldr	r3, [r7, #20]
 80119fc:	68db      	ldr	r3, [r3, #12]
 80119fe:	617b      	str	r3, [r7, #20]
 8011a00:	697b      	ldr	r3, [r7, #20]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d1d1      	bne.n	80119aa <tcp_input+0x40a>
 8011a06:	e000      	b.n	8011a0a <tcp_input+0x46a>
            break;
 8011a08:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d029      	beq.n	8011a64 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011a10:	69bb      	ldr	r3, [r7, #24]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d00a      	beq.n	8011a2c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	68da      	ldr	r2, [r3, #12]
 8011a1a:	69bb      	ldr	r3, [r7, #24]
 8011a1c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011a1e:	4b10      	ldr	r3, [pc, #64]	@ (8011a60 <tcp_input+0x4c0>)
 8011a20:	681a      	ldr	r2, [r3, #0]
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011a26:	4a0e      	ldr	r2, [pc, #56]	@ (8011a60 <tcp_input+0x4c0>)
 8011a28:	697b      	ldr	r3, [r7, #20]
 8011a2a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011a2c:	6978      	ldr	r0, [r7, #20]
 8011a2e:	f000 fa03 	bl	8011e38 <tcp_listen_input>
      }
      pbuf_free(p);
 8011a32:	6878      	ldr	r0, [r7, #4]
 8011a34:	f7fd fc82 	bl	800f33c <pbuf_free>
      return;
 8011a38:	e1a8      	b.n	8011d8c <tcp_input+0x7ec>
 8011a3a:	bf00      	nop
 8011a3c:	2000d108 	.word	0x2000d108
 8011a40:	2000998c 	.word	0x2000998c
 8011a44:	0801fd48 	.word	0x0801fd48
 8011a48:	0801fe74 	.word	0x0801fe74
 8011a4c:	0801fd94 	.word	0x0801fd94
 8011a50:	2000d0ec 	.word	0x2000d0ec
 8011a54:	0801fea0 	.word	0x0801fea0
 8011a58:	2000d0f0 	.word	0x2000d0f0
 8011a5c:	0801fecc 	.word	0x0801fecc
 8011a60:	2000d0e8 	.word	0x2000d0e8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011a64:	69fb      	ldr	r3, [r7, #28]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	f000 8158 	beq.w	8011d1c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011a6c:	4b95      	ldr	r3, [pc, #596]	@ (8011cc4 <tcp_input+0x724>)
 8011a6e:	2200      	movs	r2, #0
 8011a70:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	891a      	ldrh	r2, [r3, #8]
 8011a76:	4b93      	ldr	r3, [pc, #588]	@ (8011cc4 <tcp_input+0x724>)
 8011a78:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8011a7a:	4a92      	ldr	r2, [pc, #584]	@ (8011cc4 <tcp_input+0x724>)
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011a80:	4b91      	ldr	r3, [pc, #580]	@ (8011cc8 <tcp_input+0x728>)
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	4a8f      	ldr	r2, [pc, #572]	@ (8011cc4 <tcp_input+0x724>)
 8011a86:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8011a88:	4b90      	ldr	r3, [pc, #576]	@ (8011ccc <tcp_input+0x72c>)
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011a8e:	4b90      	ldr	r3, [pc, #576]	@ (8011cd0 <tcp_input+0x730>)
 8011a90:	2200      	movs	r2, #0
 8011a92:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011a94:	4b8f      	ldr	r3, [pc, #572]	@ (8011cd4 <tcp_input+0x734>)
 8011a96:	2200      	movs	r2, #0
 8011a98:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011a9a:	4b8f      	ldr	r3, [pc, #572]	@ (8011cd8 <tcp_input+0x738>)
 8011a9c:	781b      	ldrb	r3, [r3, #0]
 8011a9e:	f003 0308 	and.w	r3, r3, #8
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d006      	beq.n	8011ab4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	7b5b      	ldrb	r3, [r3, #13]
 8011aaa:	f043 0301 	orr.w	r3, r3, #1
 8011aae:	b2da      	uxtb	r2, r3
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011ab4:	69fb      	ldr	r3, [r7, #28]
 8011ab6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d017      	beq.n	8011aec <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011abc:	69f8      	ldr	r0, [r7, #28]
 8011abe:	f7ff f85b 	bl	8010b78 <tcp_process_refused_data>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	f113 0f0d 	cmn.w	r3, #13
 8011ac8:	d007      	beq.n	8011ada <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011aca:	69fb      	ldr	r3, [r7, #28]
 8011acc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d00c      	beq.n	8011aec <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011ad2:	4b82      	ldr	r3, [pc, #520]	@ (8011cdc <tcp_input+0x73c>)
 8011ad4:	881b      	ldrh	r3, [r3, #0]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d008      	beq.n	8011aec <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011ada:	69fb      	ldr	r3, [r7, #28]
 8011adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	f040 80e3 	bne.w	8011caa <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011ae4:	69f8      	ldr	r0, [r7, #28]
 8011ae6:	f003 fdff 	bl	80156e8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011aea:	e0de      	b.n	8011caa <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8011aec:	4a7c      	ldr	r2, [pc, #496]	@ (8011ce0 <tcp_input+0x740>)
 8011aee:	69fb      	ldr	r3, [r7, #28]
 8011af0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011af2:	69f8      	ldr	r0, [r7, #28]
 8011af4:	f000 fb18 	bl	8012128 <tcp_process>
 8011af8:	4603      	mov	r3, r0
 8011afa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011afc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011b00:	f113 0f0d 	cmn.w	r3, #13
 8011b04:	f000 80d3 	beq.w	8011cae <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8011b08:	4b71      	ldr	r3, [pc, #452]	@ (8011cd0 <tcp_input+0x730>)
 8011b0a:	781b      	ldrb	r3, [r3, #0]
 8011b0c:	f003 0308 	and.w	r3, r3, #8
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d015      	beq.n	8011b40 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011b14:	69fb      	ldr	r3, [r7, #28]
 8011b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d008      	beq.n	8011b30 <tcp_input+0x590>
 8011b1e:	69fb      	ldr	r3, [r7, #28]
 8011b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011b24:	69fa      	ldr	r2, [r7, #28]
 8011b26:	6912      	ldr	r2, [r2, #16]
 8011b28:	f06f 010d 	mvn.w	r1, #13
 8011b2c:	4610      	mov	r0, r2
 8011b2e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011b30:	69f9      	ldr	r1, [r7, #28]
 8011b32:	486c      	ldr	r0, [pc, #432]	@ (8011ce4 <tcp_input+0x744>)
 8011b34:	f7ff fbbc 	bl	80112b0 <tcp_pcb_remove>
        tcp_free(pcb);
 8011b38:	69f8      	ldr	r0, [r7, #28]
 8011b3a:	f7fd febb 	bl	800f8b4 <tcp_free>
 8011b3e:	e0da      	b.n	8011cf6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8011b40:	2300      	movs	r3, #0
 8011b42:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011b44:	4b63      	ldr	r3, [pc, #396]	@ (8011cd4 <tcp_input+0x734>)
 8011b46:	881b      	ldrh	r3, [r3, #0]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d01d      	beq.n	8011b88 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011b4c:	4b61      	ldr	r3, [pc, #388]	@ (8011cd4 <tcp_input+0x734>)
 8011b4e:	881b      	ldrh	r3, [r3, #0]
 8011b50:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011b52:	69fb      	ldr	r3, [r7, #28]
 8011b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d00a      	beq.n	8011b72 <tcp_input+0x5d2>
 8011b5c:	69fb      	ldr	r3, [r7, #28]
 8011b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011b62:	69fa      	ldr	r2, [r7, #28]
 8011b64:	6910      	ldr	r0, [r2, #16]
 8011b66:	89fa      	ldrh	r2, [r7, #14]
 8011b68:	69f9      	ldr	r1, [r7, #28]
 8011b6a:	4798      	blx	r3
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	74fb      	strb	r3, [r7, #19]
 8011b70:	e001      	b.n	8011b76 <tcp_input+0x5d6>
 8011b72:	2300      	movs	r3, #0
 8011b74:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011b76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011b7a:	f113 0f0d 	cmn.w	r3, #13
 8011b7e:	f000 8098 	beq.w	8011cb2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011b82:	4b54      	ldr	r3, [pc, #336]	@ (8011cd4 <tcp_input+0x734>)
 8011b84:	2200      	movs	r2, #0
 8011b86:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011b88:	69f8      	ldr	r0, [r7, #28]
 8011b8a:	f000 f915 	bl	8011db8 <tcp_input_delayed_close>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	f040 8090 	bne.w	8011cb6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011b96:	4b4d      	ldr	r3, [pc, #308]	@ (8011ccc <tcp_input+0x72c>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d041      	beq.n	8011c22 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011b9e:	69fb      	ldr	r3, [r7, #28]
 8011ba0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d006      	beq.n	8011bb4 <tcp_input+0x614>
 8011ba6:	4b50      	ldr	r3, [pc, #320]	@ (8011ce8 <tcp_input+0x748>)
 8011ba8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011bac:	494f      	ldr	r1, [pc, #316]	@ (8011cec <tcp_input+0x74c>)
 8011bae:	4850      	ldr	r0, [pc, #320]	@ (8011cf0 <tcp_input+0x750>)
 8011bb0:	f008 fc16 	bl	801a3e0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011bb4:	69fb      	ldr	r3, [r7, #28]
 8011bb6:	8b5b      	ldrh	r3, [r3, #26]
 8011bb8:	f003 0310 	and.w	r3, r3, #16
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d008      	beq.n	8011bd2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011bc0:	4b42      	ldr	r3, [pc, #264]	@ (8011ccc <tcp_input+0x72c>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7fd fbb9 	bl	800f33c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011bca:	69f8      	ldr	r0, [r7, #28]
 8011bcc:	f7fe f9b6 	bl	800ff3c <tcp_abort>
            goto aborted;
 8011bd0:	e091      	b.n	8011cf6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011bd2:	69fb      	ldr	r3, [r7, #28]
 8011bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d00c      	beq.n	8011bf6 <tcp_input+0x656>
 8011bdc:	69fb      	ldr	r3, [r7, #28]
 8011bde:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011be2:	69fb      	ldr	r3, [r7, #28]
 8011be4:	6918      	ldr	r0, [r3, #16]
 8011be6:	4b39      	ldr	r3, [pc, #228]	@ (8011ccc <tcp_input+0x72c>)
 8011be8:	681a      	ldr	r2, [r3, #0]
 8011bea:	2300      	movs	r3, #0
 8011bec:	69f9      	ldr	r1, [r7, #28]
 8011bee:	47a0      	blx	r4
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	74fb      	strb	r3, [r7, #19]
 8011bf4:	e008      	b.n	8011c08 <tcp_input+0x668>
 8011bf6:	4b35      	ldr	r3, [pc, #212]	@ (8011ccc <tcp_input+0x72c>)
 8011bf8:	681a      	ldr	r2, [r3, #0]
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	69f9      	ldr	r1, [r7, #28]
 8011bfe:	2000      	movs	r0, #0
 8011c00:	f7ff f890 	bl	8010d24 <tcp_recv_null>
 8011c04:	4603      	mov	r3, r0
 8011c06:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011c08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011c0c:	f113 0f0d 	cmn.w	r3, #13
 8011c10:	d053      	beq.n	8011cba <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011c12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d003      	beq.n	8011c22 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8011ccc <tcp_input+0x72c>)
 8011c1c:	681a      	ldr	r2, [r3, #0]
 8011c1e:	69fb      	ldr	r3, [r7, #28]
 8011c20:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011c22:	4b2b      	ldr	r3, [pc, #172]	@ (8011cd0 <tcp_input+0x730>)
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	f003 0320 	and.w	r3, r3, #32
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d030      	beq.n	8011c90 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8011c2e:	69fb      	ldr	r3, [r7, #28]
 8011c30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d009      	beq.n	8011c4a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011c36:	69fb      	ldr	r3, [r7, #28]
 8011c38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011c3a:	7b5a      	ldrb	r2, [r3, #13]
 8011c3c:	69fb      	ldr	r3, [r7, #28]
 8011c3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011c40:	f042 0220 	orr.w	r2, r2, #32
 8011c44:	b2d2      	uxtb	r2, r2
 8011c46:	735a      	strb	r2, [r3, #13]
 8011c48:	e022      	b.n	8011c90 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011c4a:	69fb      	ldr	r3, [r7, #28]
 8011c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011c4e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011c52:	d005      	beq.n	8011c60 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8011c54:	69fb      	ldr	r3, [r7, #28]
 8011c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011c58:	3301      	adds	r3, #1
 8011c5a:	b29a      	uxth	r2, r3
 8011c5c:	69fb      	ldr	r3, [r7, #28]
 8011c5e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011c60:	69fb      	ldr	r3, [r7, #28]
 8011c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d00b      	beq.n	8011c82 <tcp_input+0x6e2>
 8011c6a:	69fb      	ldr	r3, [r7, #28]
 8011c6c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011c70:	69fb      	ldr	r3, [r7, #28]
 8011c72:	6918      	ldr	r0, [r3, #16]
 8011c74:	2300      	movs	r3, #0
 8011c76:	2200      	movs	r2, #0
 8011c78:	69f9      	ldr	r1, [r7, #28]
 8011c7a:	47a0      	blx	r4
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	74fb      	strb	r3, [r7, #19]
 8011c80:	e001      	b.n	8011c86 <tcp_input+0x6e6>
 8011c82:	2300      	movs	r3, #0
 8011c84:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011c86:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011c8a:	f113 0f0d 	cmn.w	r3, #13
 8011c8e:	d016      	beq.n	8011cbe <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011c90:	4b13      	ldr	r3, [pc, #76]	@ (8011ce0 <tcp_input+0x740>)
 8011c92:	2200      	movs	r2, #0
 8011c94:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011c96:	69f8      	ldr	r0, [r7, #28]
 8011c98:	f000 f88e 	bl	8011db8 <tcp_input_delayed_close>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d128      	bne.n	8011cf4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011ca2:	69f8      	ldr	r0, [r7, #28]
 8011ca4:	f002 ff1a 	bl	8014adc <tcp_output>
 8011ca8:	e025      	b.n	8011cf6 <tcp_input+0x756>
        goto aborted;
 8011caa:	bf00      	nop
 8011cac:	e023      	b.n	8011cf6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011cae:	bf00      	nop
 8011cb0:	e021      	b.n	8011cf6 <tcp_input+0x756>
              goto aborted;
 8011cb2:	bf00      	nop
 8011cb4:	e01f      	b.n	8011cf6 <tcp_input+0x756>
          goto aborted;
 8011cb6:	bf00      	nop
 8011cb8:	e01d      	b.n	8011cf6 <tcp_input+0x756>
            goto aborted;
 8011cba:	bf00      	nop
 8011cbc:	e01b      	b.n	8011cf6 <tcp_input+0x756>
              goto aborted;
 8011cbe:	bf00      	nop
 8011cc0:	e019      	b.n	8011cf6 <tcp_input+0x756>
 8011cc2:	bf00      	nop
 8011cc4:	2000d0f8 	.word	0x2000d0f8
 8011cc8:	2000d108 	.word	0x2000d108
 8011ccc:	2000d128 	.word	0x2000d128
 8011cd0:	2000d125 	.word	0x2000d125
 8011cd4:	2000d120 	.word	0x2000d120
 8011cd8:	2000d124 	.word	0x2000d124
 8011cdc:	2000d122 	.word	0x2000d122
 8011ce0:	2000d12c 	.word	0x2000d12c
 8011ce4:	2000d0ec 	.word	0x2000d0ec
 8011ce8:	0801fd48 	.word	0x0801fd48
 8011cec:	0801fefc 	.word	0x0801fefc
 8011cf0:	0801fd94 	.word	0x0801fd94
          goto aborted;
 8011cf4:	bf00      	nop
    tcp_input_pcb = NULL;
 8011cf6:	4b27      	ldr	r3, [pc, #156]	@ (8011d94 <tcp_input+0x7f4>)
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011cfc:	4b26      	ldr	r3, [pc, #152]	@ (8011d98 <tcp_input+0x7f8>)
 8011cfe:	2200      	movs	r2, #0
 8011d00:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011d02:	4b26      	ldr	r3, [pc, #152]	@ (8011d9c <tcp_input+0x7fc>)
 8011d04:	685b      	ldr	r3, [r3, #4]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d03f      	beq.n	8011d8a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8011d0a:	4b24      	ldr	r3, [pc, #144]	@ (8011d9c <tcp_input+0x7fc>)
 8011d0c:	685b      	ldr	r3, [r3, #4]
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f7fd fb14 	bl	800f33c <pbuf_free>
      inseg.p = NULL;
 8011d14:	4b21      	ldr	r3, [pc, #132]	@ (8011d9c <tcp_input+0x7fc>)
 8011d16:	2200      	movs	r2, #0
 8011d18:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011d1a:	e036      	b.n	8011d8a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011d1c:	4b20      	ldr	r3, [pc, #128]	@ (8011da0 <tcp_input+0x800>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	899b      	ldrh	r3, [r3, #12]
 8011d22:	b29b      	uxth	r3, r3
 8011d24:	4618      	mov	r0, r3
 8011d26:	f7fb fead 	bl	800da84 <lwip_htons>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	b2db      	uxtb	r3, r3
 8011d2e:	f003 0304 	and.w	r3, r3, #4
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d118      	bne.n	8011d68 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d36:	4b1b      	ldr	r3, [pc, #108]	@ (8011da4 <tcp_input+0x804>)
 8011d38:	6819      	ldr	r1, [r3, #0]
 8011d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8011da8 <tcp_input+0x808>)
 8011d3c:	881b      	ldrh	r3, [r3, #0]
 8011d3e:	461a      	mov	r2, r3
 8011d40:	4b1a      	ldr	r3, [pc, #104]	@ (8011dac <tcp_input+0x80c>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d46:	4b16      	ldr	r3, [pc, #88]	@ (8011da0 <tcp_input+0x800>)
 8011d48:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d4a:	885b      	ldrh	r3, [r3, #2]
 8011d4c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d4e:	4a14      	ldr	r2, [pc, #80]	@ (8011da0 <tcp_input+0x800>)
 8011d50:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d52:	8812      	ldrh	r2, [r2, #0]
 8011d54:	b292      	uxth	r2, r2
 8011d56:	9202      	str	r2, [sp, #8]
 8011d58:	9301      	str	r3, [sp, #4]
 8011d5a:	4b15      	ldr	r3, [pc, #84]	@ (8011db0 <tcp_input+0x810>)
 8011d5c:	9300      	str	r3, [sp, #0]
 8011d5e:	4b15      	ldr	r3, [pc, #84]	@ (8011db4 <tcp_input+0x814>)
 8011d60:	4602      	mov	r2, r0
 8011d62:	2000      	movs	r0, #0
 8011d64:	f003 fc6e 	bl	8015644 <tcp_rst>
    pbuf_free(p);
 8011d68:	6878      	ldr	r0, [r7, #4]
 8011d6a:	f7fd fae7 	bl	800f33c <pbuf_free>
  return;
 8011d6e:	e00c      	b.n	8011d8a <tcp_input+0x7ea>
    goto dropped;
 8011d70:	bf00      	nop
 8011d72:	e006      	b.n	8011d82 <tcp_input+0x7e2>
    goto dropped;
 8011d74:	bf00      	nop
 8011d76:	e004      	b.n	8011d82 <tcp_input+0x7e2>
    goto dropped;
 8011d78:	bf00      	nop
 8011d7a:	e002      	b.n	8011d82 <tcp_input+0x7e2>
      goto dropped;
 8011d7c:	bf00      	nop
 8011d7e:	e000      	b.n	8011d82 <tcp_input+0x7e2>
      goto dropped;
 8011d80:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011d82:	6878      	ldr	r0, [r7, #4]
 8011d84:	f7fd fada 	bl	800f33c <pbuf_free>
 8011d88:	e000      	b.n	8011d8c <tcp_input+0x7ec>
  return;
 8011d8a:	bf00      	nop
}
 8011d8c:	3724      	adds	r7, #36	@ 0x24
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd90      	pop	{r4, r7, pc}
 8011d92:	bf00      	nop
 8011d94:	2000d12c 	.word	0x2000d12c
 8011d98:	2000d128 	.word	0x2000d128
 8011d9c:	2000d0f8 	.word	0x2000d0f8
 8011da0:	2000d108 	.word	0x2000d108
 8011da4:	2000d11c 	.word	0x2000d11c
 8011da8:	2000d122 	.word	0x2000d122
 8011dac:	2000d118 	.word	0x2000d118
 8011db0:	2000999c 	.word	0x2000999c
 8011db4:	200099a0 	.word	0x200099a0

08011db8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b082      	sub	sp, #8
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d106      	bne.n	8011dd4 <tcp_input_delayed_close+0x1c>
 8011dc6:	4b17      	ldr	r3, [pc, #92]	@ (8011e24 <tcp_input_delayed_close+0x6c>)
 8011dc8:	f240 225a 	movw	r2, #602	@ 0x25a
 8011dcc:	4916      	ldr	r1, [pc, #88]	@ (8011e28 <tcp_input_delayed_close+0x70>)
 8011dce:	4817      	ldr	r0, [pc, #92]	@ (8011e2c <tcp_input_delayed_close+0x74>)
 8011dd0:	f008 fb06 	bl	801a3e0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011dd4:	4b16      	ldr	r3, [pc, #88]	@ (8011e30 <tcp_input_delayed_close+0x78>)
 8011dd6:	781b      	ldrb	r3, [r3, #0]
 8011dd8:	f003 0310 	and.w	r3, r3, #16
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d01c      	beq.n	8011e1a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	8b5b      	ldrh	r3, [r3, #26]
 8011de4:	f003 0310 	and.w	r3, r3, #16
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d10d      	bne.n	8011e08 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d008      	beq.n	8011e08 <tcp_input_delayed_close+0x50>
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011dfc:	687a      	ldr	r2, [r7, #4]
 8011dfe:	6912      	ldr	r2, [r2, #16]
 8011e00:	f06f 010e 	mvn.w	r1, #14
 8011e04:	4610      	mov	r0, r2
 8011e06:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011e08:	6879      	ldr	r1, [r7, #4]
 8011e0a:	480a      	ldr	r0, [pc, #40]	@ (8011e34 <tcp_input_delayed_close+0x7c>)
 8011e0c:	f7ff fa50 	bl	80112b0 <tcp_pcb_remove>
    tcp_free(pcb);
 8011e10:	6878      	ldr	r0, [r7, #4]
 8011e12:	f7fd fd4f 	bl	800f8b4 <tcp_free>
    return 1;
 8011e16:	2301      	movs	r3, #1
 8011e18:	e000      	b.n	8011e1c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011e1a:	2300      	movs	r3, #0
}
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	3708      	adds	r7, #8
 8011e20:	46bd      	mov	sp, r7
 8011e22:	bd80      	pop	{r7, pc}
 8011e24:	0801fd48 	.word	0x0801fd48
 8011e28:	0801ff18 	.word	0x0801ff18
 8011e2c:	0801fd94 	.word	0x0801fd94
 8011e30:	2000d125 	.word	0x2000d125
 8011e34:	2000d0ec 	.word	0x2000d0ec

08011e38 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011e38:	b590      	push	{r4, r7, lr}
 8011e3a:	b08b      	sub	sp, #44	@ 0x2c
 8011e3c:	af04      	add	r7, sp, #16
 8011e3e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011e40:	4b6f      	ldr	r3, [pc, #444]	@ (8012000 <tcp_listen_input+0x1c8>)
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	f003 0304 	and.w	r3, r3, #4
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	f040 80d2 	bne.w	8011ff2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d106      	bne.n	8011e62 <tcp_listen_input+0x2a>
 8011e54:	4b6b      	ldr	r3, [pc, #428]	@ (8012004 <tcp_listen_input+0x1cc>)
 8011e56:	f240 2281 	movw	r2, #641	@ 0x281
 8011e5a:	496b      	ldr	r1, [pc, #428]	@ (8012008 <tcp_listen_input+0x1d0>)
 8011e5c:	486b      	ldr	r0, [pc, #428]	@ (801200c <tcp_listen_input+0x1d4>)
 8011e5e:	f008 fabf 	bl	801a3e0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011e62:	4b67      	ldr	r3, [pc, #412]	@ (8012000 <tcp_listen_input+0x1c8>)
 8011e64:	781b      	ldrb	r3, [r3, #0]
 8011e66:	f003 0310 	and.w	r3, r3, #16
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d019      	beq.n	8011ea2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e6e:	4b68      	ldr	r3, [pc, #416]	@ (8012010 <tcp_listen_input+0x1d8>)
 8011e70:	6819      	ldr	r1, [r3, #0]
 8011e72:	4b68      	ldr	r3, [pc, #416]	@ (8012014 <tcp_listen_input+0x1dc>)
 8011e74:	881b      	ldrh	r3, [r3, #0]
 8011e76:	461a      	mov	r2, r3
 8011e78:	4b67      	ldr	r3, [pc, #412]	@ (8012018 <tcp_listen_input+0x1e0>)
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e7e:	4b67      	ldr	r3, [pc, #412]	@ (801201c <tcp_listen_input+0x1e4>)
 8011e80:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e82:	885b      	ldrh	r3, [r3, #2]
 8011e84:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e86:	4a65      	ldr	r2, [pc, #404]	@ (801201c <tcp_listen_input+0x1e4>)
 8011e88:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e8a:	8812      	ldrh	r2, [r2, #0]
 8011e8c:	b292      	uxth	r2, r2
 8011e8e:	9202      	str	r2, [sp, #8]
 8011e90:	9301      	str	r3, [sp, #4]
 8011e92:	4b63      	ldr	r3, [pc, #396]	@ (8012020 <tcp_listen_input+0x1e8>)
 8011e94:	9300      	str	r3, [sp, #0]
 8011e96:	4b63      	ldr	r3, [pc, #396]	@ (8012024 <tcp_listen_input+0x1ec>)
 8011e98:	4602      	mov	r2, r0
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f003 fbd2 	bl	8015644 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011ea0:	e0a9      	b.n	8011ff6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011ea2:	4b57      	ldr	r3, [pc, #348]	@ (8012000 <tcp_listen_input+0x1c8>)
 8011ea4:	781b      	ldrb	r3, [r3, #0]
 8011ea6:	f003 0302 	and.w	r3, r3, #2
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	f000 80a3 	beq.w	8011ff6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	7d5b      	ldrb	r3, [r3, #21]
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f7ff f859 	bl	8010f6c <tcp_alloc>
 8011eba:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d111      	bne.n	8011ee6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	699b      	ldr	r3, [r3, #24]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d00a      	beq.n	8011ee0 <tcp_listen_input+0xa8>
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	699b      	ldr	r3, [r3, #24]
 8011ece:	687a      	ldr	r2, [r7, #4]
 8011ed0:	6910      	ldr	r0, [r2, #16]
 8011ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8011ed6:	2100      	movs	r1, #0
 8011ed8:	4798      	blx	r3
 8011eda:	4603      	mov	r3, r0
 8011edc:	73bb      	strb	r3, [r7, #14]
      return;
 8011ede:	e08b      	b.n	8011ff8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011ee0:	23f0      	movs	r3, #240	@ 0xf0
 8011ee2:	73bb      	strb	r3, [r7, #14]
      return;
 8011ee4:	e088      	b.n	8011ff8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011ee6:	4b50      	ldr	r3, [pc, #320]	@ (8012028 <tcp_listen_input+0x1f0>)
 8011ee8:	695a      	ldr	r2, [r3, #20]
 8011eea:	697b      	ldr	r3, [r7, #20]
 8011eec:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011eee:	4b4e      	ldr	r3, [pc, #312]	@ (8012028 <tcp_listen_input+0x1f0>)
 8011ef0:	691a      	ldr	r2, [r3, #16]
 8011ef2:	697b      	ldr	r3, [r7, #20]
 8011ef4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	8ada      	ldrh	r2, [r3, #22]
 8011efa:	697b      	ldr	r3, [r7, #20]
 8011efc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011efe:	4b47      	ldr	r3, [pc, #284]	@ (801201c <tcp_listen_input+0x1e4>)
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	881b      	ldrh	r3, [r3, #0]
 8011f04:	b29a      	uxth	r2, r3
 8011f06:	697b      	ldr	r3, [r7, #20]
 8011f08:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	2203      	movs	r2, #3
 8011f0e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011f10:	4b41      	ldr	r3, [pc, #260]	@ (8012018 <tcp_listen_input+0x1e0>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	1c5a      	adds	r2, r3, #1
 8011f16:	697b      	ldr	r3, [r7, #20]
 8011f18:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011f1a:	697b      	ldr	r3, [r7, #20]
 8011f1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011f1e:	697b      	ldr	r3, [r7, #20]
 8011f20:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8011f22:	6978      	ldr	r0, [r7, #20]
 8011f24:	f7ff fa58 	bl	80113d8 <tcp_next_iss>
 8011f28:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011f2a:	697b      	ldr	r3, [r7, #20]
 8011f2c:	693a      	ldr	r2, [r7, #16]
 8011f2e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8011f30:	697b      	ldr	r3, [r7, #20]
 8011f32:	693a      	ldr	r2, [r7, #16]
 8011f34:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8011f36:	697b      	ldr	r3, [r7, #20]
 8011f38:	693a      	ldr	r2, [r7, #16]
 8011f3a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8011f3c:	697b      	ldr	r3, [r7, #20]
 8011f3e:	693a      	ldr	r2, [r7, #16]
 8011f40:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011f42:	4b35      	ldr	r3, [pc, #212]	@ (8012018 <tcp_listen_input+0x1e0>)
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	1e5a      	subs	r2, r3, #1
 8011f48:	697b      	ldr	r3, [r7, #20]
 8011f4a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	691a      	ldr	r2, [r3, #16]
 8011f50:	697b      	ldr	r3, [r7, #20]
 8011f52:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011f54:	697b      	ldr	r3, [r7, #20]
 8011f56:	687a      	ldr	r2, [r7, #4]
 8011f58:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	7a5b      	ldrb	r3, [r3, #9]
 8011f5e:	f003 030c 	and.w	r3, r3, #12
 8011f62:	b2da      	uxtb	r2, r3
 8011f64:	697b      	ldr	r3, [r7, #20]
 8011f66:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	7a1a      	ldrb	r2, [r3, #8]
 8011f6c:	697b      	ldr	r3, [r7, #20]
 8011f6e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011f70:	4b2e      	ldr	r3, [pc, #184]	@ (801202c <tcp_listen_input+0x1f4>)
 8011f72:	681a      	ldr	r2, [r3, #0]
 8011f74:	697b      	ldr	r3, [r7, #20]
 8011f76:	60da      	str	r2, [r3, #12]
 8011f78:	4a2c      	ldr	r2, [pc, #176]	@ (801202c <tcp_listen_input+0x1f4>)
 8011f7a:	697b      	ldr	r3, [r7, #20]
 8011f7c:	6013      	str	r3, [r2, #0]
 8011f7e:	f003 fd23 	bl	80159c8 <tcp_timer_needed>
 8011f82:	4b2b      	ldr	r3, [pc, #172]	@ (8012030 <tcp_listen_input+0x1f8>)
 8011f84:	2201      	movs	r2, #1
 8011f86:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011f88:	6978      	ldr	r0, [r7, #20]
 8011f8a:	f001 fd8b 	bl	8013aa4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011f8e:	4b23      	ldr	r3, [pc, #140]	@ (801201c <tcp_listen_input+0x1e4>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	89db      	ldrh	r3, [r3, #14]
 8011f94:	b29a      	uxth	r2, r3
 8011f96:	697b      	ldr	r3, [r7, #20]
 8011f98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011f9c:	697b      	ldr	r3, [r7, #20]
 8011f9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011fa2:	697b      	ldr	r3, [r7, #20]
 8011fa4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011fa8:	697b      	ldr	r3, [r7, #20]
 8011faa:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8011fac:	697b      	ldr	r3, [r7, #20]
 8011fae:	3304      	adds	r3, #4
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	f005 fc61 	bl	8017878 <ip4_route>
 8011fb6:	4601      	mov	r1, r0
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	3304      	adds	r3, #4
 8011fbc:	461a      	mov	r2, r3
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	f7ff fa30 	bl	8011424 <tcp_eff_send_mss_netif>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	461a      	mov	r2, r3
 8011fc8:	697b      	ldr	r3, [r7, #20]
 8011fca:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011fcc:	2112      	movs	r1, #18
 8011fce:	6978      	ldr	r0, [r7, #20]
 8011fd0:	f002 fc96 	bl	8014900 <tcp_enqueue_flags>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d004      	beq.n	8011fea <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011fe0:	2100      	movs	r1, #0
 8011fe2:	6978      	ldr	r0, [r7, #20]
 8011fe4:	f7fd feec 	bl	800fdc0 <tcp_abandon>
      return;
 8011fe8:	e006      	b.n	8011ff8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011fea:	6978      	ldr	r0, [r7, #20]
 8011fec:	f002 fd76 	bl	8014adc <tcp_output>
  return;
 8011ff0:	e001      	b.n	8011ff6 <tcp_listen_input+0x1be>
    return;
 8011ff2:	bf00      	nop
 8011ff4:	e000      	b.n	8011ff8 <tcp_listen_input+0x1c0>
  return;
 8011ff6:	bf00      	nop
}
 8011ff8:	371c      	adds	r7, #28
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd90      	pop	{r4, r7, pc}
 8011ffe:	bf00      	nop
 8012000:	2000d124 	.word	0x2000d124
 8012004:	0801fd48 	.word	0x0801fd48
 8012008:	0801ff40 	.word	0x0801ff40
 801200c:	0801fd94 	.word	0x0801fd94
 8012010:	2000d11c 	.word	0x2000d11c
 8012014:	2000d122 	.word	0x2000d122
 8012018:	2000d118 	.word	0x2000d118
 801201c:	2000d108 	.word	0x2000d108
 8012020:	2000999c 	.word	0x2000999c
 8012024:	200099a0 	.word	0x200099a0
 8012028:	2000998c 	.word	0x2000998c
 801202c:	2000d0ec 	.word	0x2000d0ec
 8012030:	2000d0f4 	.word	0x2000d0f4

08012034 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b086      	sub	sp, #24
 8012038:	af04      	add	r7, sp, #16
 801203a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801203c:	4b2f      	ldr	r3, [pc, #188]	@ (80120fc <tcp_timewait_input+0xc8>)
 801203e:	781b      	ldrb	r3, [r3, #0]
 8012040:	f003 0304 	and.w	r3, r3, #4
 8012044:	2b00      	cmp	r3, #0
 8012046:	d153      	bne.n	80120f0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d106      	bne.n	801205c <tcp_timewait_input+0x28>
 801204e:	4b2c      	ldr	r3, [pc, #176]	@ (8012100 <tcp_timewait_input+0xcc>)
 8012050:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012054:	492b      	ldr	r1, [pc, #172]	@ (8012104 <tcp_timewait_input+0xd0>)
 8012056:	482c      	ldr	r0, [pc, #176]	@ (8012108 <tcp_timewait_input+0xd4>)
 8012058:	f008 f9c2 	bl	801a3e0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801205c:	4b27      	ldr	r3, [pc, #156]	@ (80120fc <tcp_timewait_input+0xc8>)
 801205e:	781b      	ldrb	r3, [r3, #0]
 8012060:	f003 0302 	and.w	r3, r3, #2
 8012064:	2b00      	cmp	r3, #0
 8012066:	d02a      	beq.n	80120be <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012068:	4b28      	ldr	r3, [pc, #160]	@ (801210c <tcp_timewait_input+0xd8>)
 801206a:	681a      	ldr	r2, [r3, #0]
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012070:	1ad3      	subs	r3, r2, r3
 8012072:	2b00      	cmp	r3, #0
 8012074:	db2d      	blt.n	80120d2 <tcp_timewait_input+0x9e>
 8012076:	4b25      	ldr	r3, [pc, #148]	@ (801210c <tcp_timewait_input+0xd8>)
 8012078:	681a      	ldr	r2, [r3, #0]
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801207e:	6879      	ldr	r1, [r7, #4]
 8012080:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012082:	440b      	add	r3, r1
 8012084:	1ad3      	subs	r3, r2, r3
 8012086:	2b00      	cmp	r3, #0
 8012088:	dc23      	bgt.n	80120d2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801208a:	4b21      	ldr	r3, [pc, #132]	@ (8012110 <tcp_timewait_input+0xdc>)
 801208c:	6819      	ldr	r1, [r3, #0]
 801208e:	4b21      	ldr	r3, [pc, #132]	@ (8012114 <tcp_timewait_input+0xe0>)
 8012090:	881b      	ldrh	r3, [r3, #0]
 8012092:	461a      	mov	r2, r3
 8012094:	4b1d      	ldr	r3, [pc, #116]	@ (801210c <tcp_timewait_input+0xd8>)
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801209a:	4b1f      	ldr	r3, [pc, #124]	@ (8012118 <tcp_timewait_input+0xe4>)
 801209c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801209e:	885b      	ldrh	r3, [r3, #2]
 80120a0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80120a2:	4a1d      	ldr	r2, [pc, #116]	@ (8012118 <tcp_timewait_input+0xe4>)
 80120a4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80120a6:	8812      	ldrh	r2, [r2, #0]
 80120a8:	b292      	uxth	r2, r2
 80120aa:	9202      	str	r2, [sp, #8]
 80120ac:	9301      	str	r3, [sp, #4]
 80120ae:	4b1b      	ldr	r3, [pc, #108]	@ (801211c <tcp_timewait_input+0xe8>)
 80120b0:	9300      	str	r3, [sp, #0]
 80120b2:	4b1b      	ldr	r3, [pc, #108]	@ (8012120 <tcp_timewait_input+0xec>)
 80120b4:	4602      	mov	r2, r0
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	f003 fac4 	bl	8015644 <tcp_rst>
      return;
 80120bc:	e01b      	b.n	80120f6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80120be:	4b0f      	ldr	r3, [pc, #60]	@ (80120fc <tcp_timewait_input+0xc8>)
 80120c0:	781b      	ldrb	r3, [r3, #0]
 80120c2:	f003 0301 	and.w	r3, r3, #1
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d003      	beq.n	80120d2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80120ca:	4b16      	ldr	r3, [pc, #88]	@ (8012124 <tcp_timewait_input+0xf0>)
 80120cc:	681a      	ldr	r2, [r3, #0]
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80120d2:	4b10      	ldr	r3, [pc, #64]	@ (8012114 <tcp_timewait_input+0xe0>)
 80120d4:	881b      	ldrh	r3, [r3, #0]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d00c      	beq.n	80120f4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	8b5b      	ldrh	r3, [r3, #26]
 80120de:	f043 0302 	orr.w	r3, r3, #2
 80120e2:	b29a      	uxth	r2, r3
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f002 fcf7 	bl	8014adc <tcp_output>
  }
  return;
 80120ee:	e001      	b.n	80120f4 <tcp_timewait_input+0xc0>
    return;
 80120f0:	bf00      	nop
 80120f2:	e000      	b.n	80120f6 <tcp_timewait_input+0xc2>
  return;
 80120f4:	bf00      	nop
}
 80120f6:	3708      	adds	r7, #8
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}
 80120fc:	2000d124 	.word	0x2000d124
 8012100:	0801fd48 	.word	0x0801fd48
 8012104:	0801ff60 	.word	0x0801ff60
 8012108:	0801fd94 	.word	0x0801fd94
 801210c:	2000d118 	.word	0x2000d118
 8012110:	2000d11c 	.word	0x2000d11c
 8012114:	2000d122 	.word	0x2000d122
 8012118:	2000d108 	.word	0x2000d108
 801211c:	2000999c 	.word	0x2000999c
 8012120:	200099a0 	.word	0x200099a0
 8012124:	2000d0e0 	.word	0x2000d0e0

08012128 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012128:	b590      	push	{r4, r7, lr}
 801212a:	b08d      	sub	sp, #52	@ 0x34
 801212c:	af04      	add	r7, sp, #16
 801212e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012130:	2300      	movs	r3, #0
 8012132:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012134:	2300      	movs	r3, #0
 8012136:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d106      	bne.n	801214c <tcp_process+0x24>
 801213e:	4b9d      	ldr	r3, [pc, #628]	@ (80123b4 <tcp_process+0x28c>)
 8012140:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8012144:	499c      	ldr	r1, [pc, #624]	@ (80123b8 <tcp_process+0x290>)
 8012146:	489d      	ldr	r0, [pc, #628]	@ (80123bc <tcp_process+0x294>)
 8012148:	f008 f94a 	bl	801a3e0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801214c:	4b9c      	ldr	r3, [pc, #624]	@ (80123c0 <tcp_process+0x298>)
 801214e:	781b      	ldrb	r3, [r3, #0]
 8012150:	f003 0304 	and.w	r3, r3, #4
 8012154:	2b00      	cmp	r3, #0
 8012156:	d04e      	beq.n	80121f6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	7d1b      	ldrb	r3, [r3, #20]
 801215c:	2b02      	cmp	r3, #2
 801215e:	d108      	bne.n	8012172 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012164:	4b97      	ldr	r3, [pc, #604]	@ (80123c4 <tcp_process+0x29c>)
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	429a      	cmp	r2, r3
 801216a:	d123      	bne.n	80121b4 <tcp_process+0x8c>
        acceptable = 1;
 801216c:	2301      	movs	r3, #1
 801216e:	76fb      	strb	r3, [r7, #27]
 8012170:	e020      	b.n	80121b4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012176:	4b94      	ldr	r3, [pc, #592]	@ (80123c8 <tcp_process+0x2a0>)
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	429a      	cmp	r2, r3
 801217c:	d102      	bne.n	8012184 <tcp_process+0x5c>
        acceptable = 1;
 801217e:	2301      	movs	r3, #1
 8012180:	76fb      	strb	r3, [r7, #27]
 8012182:	e017      	b.n	80121b4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012184:	4b90      	ldr	r3, [pc, #576]	@ (80123c8 <tcp_process+0x2a0>)
 8012186:	681a      	ldr	r2, [r3, #0]
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801218c:	1ad3      	subs	r3, r2, r3
 801218e:	2b00      	cmp	r3, #0
 8012190:	db10      	blt.n	80121b4 <tcp_process+0x8c>
 8012192:	4b8d      	ldr	r3, [pc, #564]	@ (80123c8 <tcp_process+0x2a0>)
 8012194:	681a      	ldr	r2, [r3, #0]
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801219a:	6879      	ldr	r1, [r7, #4]
 801219c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801219e:	440b      	add	r3, r1
 80121a0:	1ad3      	subs	r3, r2, r3
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	dc06      	bgt.n	80121b4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	8b5b      	ldrh	r3, [r3, #26]
 80121aa:	f043 0302 	orr.w	r3, r3, #2
 80121ae:	b29a      	uxth	r2, r3
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80121b4:	7efb      	ldrb	r3, [r7, #27]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d01b      	beq.n	80121f2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	7d1b      	ldrb	r3, [r3, #20]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d106      	bne.n	80121d0 <tcp_process+0xa8>
 80121c2:	4b7c      	ldr	r3, [pc, #496]	@ (80123b4 <tcp_process+0x28c>)
 80121c4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80121c8:	4980      	ldr	r1, [pc, #512]	@ (80123cc <tcp_process+0x2a4>)
 80121ca:	487c      	ldr	r0, [pc, #496]	@ (80123bc <tcp_process+0x294>)
 80121cc:	f008 f908 	bl	801a3e0 <iprintf>
      recv_flags |= TF_RESET;
 80121d0:	4b7f      	ldr	r3, [pc, #508]	@ (80123d0 <tcp_process+0x2a8>)
 80121d2:	781b      	ldrb	r3, [r3, #0]
 80121d4:	f043 0308 	orr.w	r3, r3, #8
 80121d8:	b2da      	uxtb	r2, r3
 80121da:	4b7d      	ldr	r3, [pc, #500]	@ (80123d0 <tcp_process+0x2a8>)
 80121dc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	8b5b      	ldrh	r3, [r3, #26]
 80121e2:	f023 0301 	bic.w	r3, r3, #1
 80121e6:	b29a      	uxth	r2, r3
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80121ec:	f06f 030d 	mvn.w	r3, #13
 80121f0:	e37a      	b.n	80128e8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80121f2:	2300      	movs	r3, #0
 80121f4:	e378      	b.n	80128e8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80121f6:	4b72      	ldr	r3, [pc, #456]	@ (80123c0 <tcp_process+0x298>)
 80121f8:	781b      	ldrb	r3, [r3, #0]
 80121fa:	f003 0302 	and.w	r3, r3, #2
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d010      	beq.n	8012224 <tcp_process+0xfc>
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	7d1b      	ldrb	r3, [r3, #20]
 8012206:	2b02      	cmp	r3, #2
 8012208:	d00c      	beq.n	8012224 <tcp_process+0xfc>
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	7d1b      	ldrb	r3, [r3, #20]
 801220e:	2b03      	cmp	r3, #3
 8012210:	d008      	beq.n	8012224 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	8b5b      	ldrh	r3, [r3, #26]
 8012216:	f043 0302 	orr.w	r3, r3, #2
 801221a:	b29a      	uxth	r2, r3
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012220:	2300      	movs	r3, #0
 8012222:	e361      	b.n	80128e8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	8b5b      	ldrh	r3, [r3, #26]
 8012228:	f003 0310 	and.w	r3, r3, #16
 801222c:	2b00      	cmp	r3, #0
 801222e:	d103      	bne.n	8012238 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012230:	4b68      	ldr	r3, [pc, #416]	@ (80123d4 <tcp_process+0x2ac>)
 8012232:	681a      	ldr	r2, [r3, #0]
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2200      	movs	r2, #0
 801223c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	2200      	movs	r2, #0
 8012244:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8012248:	6878      	ldr	r0, [r7, #4]
 801224a:	f001 fc2b 	bl	8013aa4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	7d1b      	ldrb	r3, [r3, #20]
 8012252:	3b02      	subs	r3, #2
 8012254:	2b07      	cmp	r3, #7
 8012256:	f200 8337 	bhi.w	80128c8 <tcp_process+0x7a0>
 801225a:	a201      	add	r2, pc, #4	@ (adr r2, 8012260 <tcp_process+0x138>)
 801225c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012260:	08012281 	.word	0x08012281
 8012264:	080124b1 	.word	0x080124b1
 8012268:	08012629 	.word	0x08012629
 801226c:	08012653 	.word	0x08012653
 8012270:	08012777 	.word	0x08012777
 8012274:	08012629 	.word	0x08012629
 8012278:	08012803 	.word	0x08012803
 801227c:	08012893 	.word	0x08012893
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012280:	4b4f      	ldr	r3, [pc, #316]	@ (80123c0 <tcp_process+0x298>)
 8012282:	781b      	ldrb	r3, [r3, #0]
 8012284:	f003 0310 	and.w	r3, r3, #16
 8012288:	2b00      	cmp	r3, #0
 801228a:	f000 80e4 	beq.w	8012456 <tcp_process+0x32e>
 801228e:	4b4c      	ldr	r3, [pc, #304]	@ (80123c0 <tcp_process+0x298>)
 8012290:	781b      	ldrb	r3, [r3, #0]
 8012292:	f003 0302 	and.w	r3, r3, #2
 8012296:	2b00      	cmp	r3, #0
 8012298:	f000 80dd 	beq.w	8012456 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80122a0:	1c5a      	adds	r2, r3, #1
 80122a2:	4b48      	ldr	r3, [pc, #288]	@ (80123c4 <tcp_process+0x29c>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	f040 80d5 	bne.w	8012456 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80122ac:	4b46      	ldr	r3, [pc, #280]	@ (80123c8 <tcp_process+0x2a0>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	1c5a      	adds	r2, r3, #1
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80122be:	4b41      	ldr	r3, [pc, #260]	@ (80123c4 <tcp_process+0x29c>)
 80122c0:	681a      	ldr	r2, [r3, #0]
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80122c6:	4b44      	ldr	r3, [pc, #272]	@ (80123d8 <tcp_process+0x2b0>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	89db      	ldrh	r3, [r3, #14]
 80122cc:	b29a      	uxth	r2, r3
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80122e0:	4b39      	ldr	r3, [pc, #228]	@ (80123c8 <tcp_process+0x2a0>)
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	1e5a      	subs	r2, r3, #1
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	2204      	movs	r2, #4
 80122ee:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	3304      	adds	r3, #4
 80122f8:	4618      	mov	r0, r3
 80122fa:	f005 fabd 	bl	8017878 <ip4_route>
 80122fe:	4601      	mov	r1, r0
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	3304      	adds	r3, #4
 8012304:	461a      	mov	r2, r3
 8012306:	4620      	mov	r0, r4
 8012308:	f7ff f88c 	bl	8011424 <tcp_eff_send_mss_netif>
 801230c:	4603      	mov	r3, r0
 801230e:	461a      	mov	r2, r3
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012318:	009a      	lsls	r2, r3, #2
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801231e:	005b      	lsls	r3, r3, #1
 8012320:	f241 111c 	movw	r1, #4380	@ 0x111c
 8012324:	428b      	cmp	r3, r1
 8012326:	bf38      	it	cc
 8012328:	460b      	movcc	r3, r1
 801232a:	429a      	cmp	r2, r3
 801232c:	d204      	bcs.n	8012338 <tcp_process+0x210>
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012332:	009b      	lsls	r3, r3, #2
 8012334:	b29b      	uxth	r3, r3
 8012336:	e00d      	b.n	8012354 <tcp_process+0x22c>
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801233c:	005b      	lsls	r3, r3, #1
 801233e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8012342:	4293      	cmp	r3, r2
 8012344:	d904      	bls.n	8012350 <tcp_process+0x228>
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801234a:	005b      	lsls	r3, r3, #1
 801234c:	b29b      	uxth	r3, r3
 801234e:	e001      	b.n	8012354 <tcp_process+0x22c>
 8012350:	f241 131c 	movw	r3, #4380	@ 0x111c
 8012354:	687a      	ldr	r2, [r7, #4]
 8012356:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012360:	2b00      	cmp	r3, #0
 8012362:	d106      	bne.n	8012372 <tcp_process+0x24a>
 8012364:	4b13      	ldr	r3, [pc, #76]	@ (80123b4 <tcp_process+0x28c>)
 8012366:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801236a:	491c      	ldr	r1, [pc, #112]	@ (80123dc <tcp_process+0x2b4>)
 801236c:	4813      	ldr	r0, [pc, #76]	@ (80123bc <tcp_process+0x294>)
 801236e:	f008 f837 	bl	801a3e0 <iprintf>
        --pcb->snd_queuelen;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012378:	3b01      	subs	r3, #1
 801237a:	b29a      	uxth	r2, r3
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012386:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012388:	69fb      	ldr	r3, [r7, #28]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d12a      	bne.n	80123e4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012392:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012394:	69fb      	ldr	r3, [r7, #28]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d106      	bne.n	80123a8 <tcp_process+0x280>
 801239a:	4b06      	ldr	r3, [pc, #24]	@ (80123b4 <tcp_process+0x28c>)
 801239c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80123a0:	490f      	ldr	r1, [pc, #60]	@ (80123e0 <tcp_process+0x2b8>)
 80123a2:	4806      	ldr	r0, [pc, #24]	@ (80123bc <tcp_process+0x294>)
 80123a4:	f008 f81c 	bl	801a3e0 <iprintf>
          pcb->unsent = rseg->next;
 80123a8:	69fb      	ldr	r3, [r7, #28]
 80123aa:	681a      	ldr	r2, [r3, #0]
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	66da      	str	r2, [r3, #108]	@ 0x6c
 80123b0:	e01c      	b.n	80123ec <tcp_process+0x2c4>
 80123b2:	bf00      	nop
 80123b4:	0801fd48 	.word	0x0801fd48
 80123b8:	0801ff80 	.word	0x0801ff80
 80123bc:	0801fd94 	.word	0x0801fd94
 80123c0:	2000d124 	.word	0x2000d124
 80123c4:	2000d11c 	.word	0x2000d11c
 80123c8:	2000d118 	.word	0x2000d118
 80123cc:	0801ff9c 	.word	0x0801ff9c
 80123d0:	2000d125 	.word	0x2000d125
 80123d4:	2000d0e0 	.word	0x2000d0e0
 80123d8:	2000d108 	.word	0x2000d108
 80123dc:	0801ffbc 	.word	0x0801ffbc
 80123e0:	0801ffd4 	.word	0x0801ffd4
        } else {
          pcb->unacked = rseg->next;
 80123e4:	69fb      	ldr	r3, [r7, #28]
 80123e6:	681a      	ldr	r2, [r3, #0]
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80123ec:	69f8      	ldr	r0, [r7, #28]
 80123ee:	f7fe fc54 	bl	8010c9a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d104      	bne.n	8012404 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012400:	861a      	strh	r2, [r3, #48]	@ 0x30
 8012402:	e006      	b.n	8012412 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2200      	movs	r2, #0
 8012408:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2200      	movs	r2, #0
 801240e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012418:	2b00      	cmp	r3, #0
 801241a:	d00a      	beq.n	8012432 <tcp_process+0x30a>
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012422:	687a      	ldr	r2, [r7, #4]
 8012424:	6910      	ldr	r0, [r2, #16]
 8012426:	2200      	movs	r2, #0
 8012428:	6879      	ldr	r1, [r7, #4]
 801242a:	4798      	blx	r3
 801242c:	4603      	mov	r3, r0
 801242e:	76bb      	strb	r3, [r7, #26]
 8012430:	e001      	b.n	8012436 <tcp_process+0x30e>
 8012432:	2300      	movs	r3, #0
 8012434:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8012436:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801243a:	f113 0f0d 	cmn.w	r3, #13
 801243e:	d102      	bne.n	8012446 <tcp_process+0x31e>
          return ERR_ABRT;
 8012440:	f06f 030c 	mvn.w	r3, #12
 8012444:	e250      	b.n	80128e8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	8b5b      	ldrh	r3, [r3, #26]
 801244a:	f043 0302 	orr.w	r3, r3, #2
 801244e:	b29a      	uxth	r2, r3
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012454:	e23a      	b.n	80128cc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012456:	4b98      	ldr	r3, [pc, #608]	@ (80126b8 <tcp_process+0x590>)
 8012458:	781b      	ldrb	r3, [r3, #0]
 801245a:	f003 0310 	and.w	r3, r3, #16
 801245e:	2b00      	cmp	r3, #0
 8012460:	f000 8234 	beq.w	80128cc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012464:	4b95      	ldr	r3, [pc, #596]	@ (80126bc <tcp_process+0x594>)
 8012466:	6819      	ldr	r1, [r3, #0]
 8012468:	4b95      	ldr	r3, [pc, #596]	@ (80126c0 <tcp_process+0x598>)
 801246a:	881b      	ldrh	r3, [r3, #0]
 801246c:	461a      	mov	r2, r3
 801246e:	4b95      	ldr	r3, [pc, #596]	@ (80126c4 <tcp_process+0x59c>)
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012474:	4b94      	ldr	r3, [pc, #592]	@ (80126c8 <tcp_process+0x5a0>)
 8012476:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012478:	885b      	ldrh	r3, [r3, #2]
 801247a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801247c:	4a92      	ldr	r2, [pc, #584]	@ (80126c8 <tcp_process+0x5a0>)
 801247e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012480:	8812      	ldrh	r2, [r2, #0]
 8012482:	b292      	uxth	r2, r2
 8012484:	9202      	str	r2, [sp, #8]
 8012486:	9301      	str	r3, [sp, #4]
 8012488:	4b90      	ldr	r3, [pc, #576]	@ (80126cc <tcp_process+0x5a4>)
 801248a:	9300      	str	r3, [sp, #0]
 801248c:	4b90      	ldr	r3, [pc, #576]	@ (80126d0 <tcp_process+0x5a8>)
 801248e:	4602      	mov	r2, r0
 8012490:	6878      	ldr	r0, [r7, #4]
 8012492:	f003 f8d7 	bl	8015644 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801249c:	2b05      	cmp	r3, #5
 801249e:	f200 8215 	bhi.w	80128cc <tcp_process+0x7a4>
          pcb->rtime = 0;
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	2200      	movs	r2, #0
 80124a6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80124a8:	6878      	ldr	r0, [r7, #4]
 80124aa:	f002 fea3 	bl	80151f4 <tcp_rexmit_rto>
      break;
 80124ae:	e20d      	b.n	80128cc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80124b0:	4b81      	ldr	r3, [pc, #516]	@ (80126b8 <tcp_process+0x590>)
 80124b2:	781b      	ldrb	r3, [r3, #0]
 80124b4:	f003 0310 	and.w	r3, r3, #16
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	f000 80a1 	beq.w	8012600 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80124be:	4b7f      	ldr	r3, [pc, #508]	@ (80126bc <tcp_process+0x594>)
 80124c0:	681a      	ldr	r2, [r3, #0]
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80124c6:	1ad3      	subs	r3, r2, r3
 80124c8:	3b01      	subs	r3, #1
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	db7e      	blt.n	80125cc <tcp_process+0x4a4>
 80124ce:	4b7b      	ldr	r3, [pc, #492]	@ (80126bc <tcp_process+0x594>)
 80124d0:	681a      	ldr	r2, [r3, #0]
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80124d6:	1ad3      	subs	r3, r2, r3
 80124d8:	2b00      	cmp	r3, #0
 80124da:	dc77      	bgt.n	80125cc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2204      	movs	r2, #4
 80124e0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d102      	bne.n	80124f0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80124ea:	23fa      	movs	r3, #250	@ 0xfa
 80124ec:	76bb      	strb	r3, [r7, #26]
 80124ee:	e01d      	b.n	801252c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80124f4:	699b      	ldr	r3, [r3, #24]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d106      	bne.n	8012508 <tcp_process+0x3e0>
 80124fa:	4b76      	ldr	r3, [pc, #472]	@ (80126d4 <tcp_process+0x5ac>)
 80124fc:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8012500:	4975      	ldr	r1, [pc, #468]	@ (80126d8 <tcp_process+0x5b0>)
 8012502:	4876      	ldr	r0, [pc, #472]	@ (80126dc <tcp_process+0x5b4>)
 8012504:	f007 ff6c 	bl	801a3e0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801250c:	699b      	ldr	r3, [r3, #24]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d00a      	beq.n	8012528 <tcp_process+0x400>
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012516:	699b      	ldr	r3, [r3, #24]
 8012518:	687a      	ldr	r2, [r7, #4]
 801251a:	6910      	ldr	r0, [r2, #16]
 801251c:	2200      	movs	r2, #0
 801251e:	6879      	ldr	r1, [r7, #4]
 8012520:	4798      	blx	r3
 8012522:	4603      	mov	r3, r0
 8012524:	76bb      	strb	r3, [r7, #26]
 8012526:	e001      	b.n	801252c <tcp_process+0x404>
 8012528:	23f0      	movs	r3, #240	@ 0xf0
 801252a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801252c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d00a      	beq.n	801254a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012534:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012538:	f113 0f0d 	cmn.w	r3, #13
 801253c:	d002      	beq.n	8012544 <tcp_process+0x41c>
              tcp_abort(pcb);
 801253e:	6878      	ldr	r0, [r7, #4]
 8012540:	f7fd fcfc 	bl	800ff3c <tcp_abort>
            }
            return ERR_ABRT;
 8012544:	f06f 030c 	mvn.w	r3, #12
 8012548:	e1ce      	b.n	80128e8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801254a:	6878      	ldr	r0, [r7, #4]
 801254c:	f000 fae0 	bl	8012b10 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012550:	4b63      	ldr	r3, [pc, #396]	@ (80126e0 <tcp_process+0x5b8>)
 8012552:	881b      	ldrh	r3, [r3, #0]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d005      	beq.n	8012564 <tcp_process+0x43c>
            recv_acked--;
 8012558:	4b61      	ldr	r3, [pc, #388]	@ (80126e0 <tcp_process+0x5b8>)
 801255a:	881b      	ldrh	r3, [r3, #0]
 801255c:	3b01      	subs	r3, #1
 801255e:	b29a      	uxth	r2, r3
 8012560:	4b5f      	ldr	r3, [pc, #380]	@ (80126e0 <tcp_process+0x5b8>)
 8012562:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012568:	009a      	lsls	r2, r3, #2
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801256e:	005b      	lsls	r3, r3, #1
 8012570:	f241 111c 	movw	r1, #4380	@ 0x111c
 8012574:	428b      	cmp	r3, r1
 8012576:	bf38      	it	cc
 8012578:	460b      	movcc	r3, r1
 801257a:	429a      	cmp	r2, r3
 801257c:	d204      	bcs.n	8012588 <tcp_process+0x460>
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012582:	009b      	lsls	r3, r3, #2
 8012584:	b29b      	uxth	r3, r3
 8012586:	e00d      	b.n	80125a4 <tcp_process+0x47c>
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801258c:	005b      	lsls	r3, r3, #1
 801258e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8012592:	4293      	cmp	r3, r2
 8012594:	d904      	bls.n	80125a0 <tcp_process+0x478>
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801259a:	005b      	lsls	r3, r3, #1
 801259c:	b29b      	uxth	r3, r3
 801259e:	e001      	b.n	80125a4 <tcp_process+0x47c>
 80125a0:	f241 131c 	movw	r3, #4380	@ 0x111c
 80125a4:	687a      	ldr	r2, [r7, #4]
 80125a6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80125aa:	4b4e      	ldr	r3, [pc, #312]	@ (80126e4 <tcp_process+0x5bc>)
 80125ac:	781b      	ldrb	r3, [r3, #0]
 80125ae:	f003 0320 	and.w	r3, r3, #32
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d037      	beq.n	8012626 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	8b5b      	ldrh	r3, [r3, #26]
 80125ba:	f043 0302 	orr.w	r3, r3, #2
 80125be:	b29a      	uxth	r2, r3
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	2207      	movs	r2, #7
 80125c8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80125ca:	e02c      	b.n	8012626 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80125cc:	4b3b      	ldr	r3, [pc, #236]	@ (80126bc <tcp_process+0x594>)
 80125ce:	6819      	ldr	r1, [r3, #0]
 80125d0:	4b3b      	ldr	r3, [pc, #236]	@ (80126c0 <tcp_process+0x598>)
 80125d2:	881b      	ldrh	r3, [r3, #0]
 80125d4:	461a      	mov	r2, r3
 80125d6:	4b3b      	ldr	r3, [pc, #236]	@ (80126c4 <tcp_process+0x59c>)
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80125dc:	4b3a      	ldr	r3, [pc, #232]	@ (80126c8 <tcp_process+0x5a0>)
 80125de:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80125e0:	885b      	ldrh	r3, [r3, #2]
 80125e2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80125e4:	4a38      	ldr	r2, [pc, #224]	@ (80126c8 <tcp_process+0x5a0>)
 80125e6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80125e8:	8812      	ldrh	r2, [r2, #0]
 80125ea:	b292      	uxth	r2, r2
 80125ec:	9202      	str	r2, [sp, #8]
 80125ee:	9301      	str	r3, [sp, #4]
 80125f0:	4b36      	ldr	r3, [pc, #216]	@ (80126cc <tcp_process+0x5a4>)
 80125f2:	9300      	str	r3, [sp, #0]
 80125f4:	4b36      	ldr	r3, [pc, #216]	@ (80126d0 <tcp_process+0x5a8>)
 80125f6:	4602      	mov	r2, r0
 80125f8:	6878      	ldr	r0, [r7, #4]
 80125fa:	f003 f823 	bl	8015644 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80125fe:	e167      	b.n	80128d0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012600:	4b2d      	ldr	r3, [pc, #180]	@ (80126b8 <tcp_process+0x590>)
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	f003 0302 	and.w	r3, r3, #2
 8012608:	2b00      	cmp	r3, #0
 801260a:	f000 8161 	beq.w	80128d0 <tcp_process+0x7a8>
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012612:	1e5a      	subs	r2, r3, #1
 8012614:	4b2b      	ldr	r3, [pc, #172]	@ (80126c4 <tcp_process+0x59c>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	429a      	cmp	r2, r3
 801261a:	f040 8159 	bne.w	80128d0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801261e:	6878      	ldr	r0, [r7, #4]
 8012620:	f002 fe0a 	bl	8015238 <tcp_rexmit>
      break;
 8012624:	e154      	b.n	80128d0 <tcp_process+0x7a8>
 8012626:	e153      	b.n	80128d0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012628:	6878      	ldr	r0, [r7, #4]
 801262a:	f000 fa71 	bl	8012b10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801262e:	4b2d      	ldr	r3, [pc, #180]	@ (80126e4 <tcp_process+0x5bc>)
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	f003 0320 	and.w	r3, r3, #32
 8012636:	2b00      	cmp	r3, #0
 8012638:	f000 814c 	beq.w	80128d4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	8b5b      	ldrh	r3, [r3, #26]
 8012640:	f043 0302 	orr.w	r3, r3, #2
 8012644:	b29a      	uxth	r2, r3
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	2207      	movs	r2, #7
 801264e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012650:	e140      	b.n	80128d4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f000 fa5c 	bl	8012b10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012658:	4b22      	ldr	r3, [pc, #136]	@ (80126e4 <tcp_process+0x5bc>)
 801265a:	781b      	ldrb	r3, [r3, #0]
 801265c:	f003 0320 	and.w	r3, r3, #32
 8012660:	2b00      	cmp	r3, #0
 8012662:	d071      	beq.n	8012748 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012664:	4b14      	ldr	r3, [pc, #80]	@ (80126b8 <tcp_process+0x590>)
 8012666:	781b      	ldrb	r3, [r3, #0]
 8012668:	f003 0310 	and.w	r3, r3, #16
 801266c:	2b00      	cmp	r3, #0
 801266e:	d060      	beq.n	8012732 <tcp_process+0x60a>
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012674:	4b11      	ldr	r3, [pc, #68]	@ (80126bc <tcp_process+0x594>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	429a      	cmp	r2, r3
 801267a:	d15a      	bne.n	8012732 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012680:	2b00      	cmp	r3, #0
 8012682:	d156      	bne.n	8012732 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	8b5b      	ldrh	r3, [r3, #26]
 8012688:	f043 0302 	orr.w	r3, r3, #2
 801268c:	b29a      	uxth	r2, r3
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012692:	6878      	ldr	r0, [r7, #4]
 8012694:	f7fe fdbc 	bl	8011210 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012698:	4b13      	ldr	r3, [pc, #76]	@ (80126e8 <tcp_process+0x5c0>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	687a      	ldr	r2, [r7, #4]
 801269e:	429a      	cmp	r2, r3
 80126a0:	d105      	bne.n	80126ae <tcp_process+0x586>
 80126a2:	4b11      	ldr	r3, [pc, #68]	@ (80126e8 <tcp_process+0x5c0>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	68db      	ldr	r3, [r3, #12]
 80126a8:	4a0f      	ldr	r2, [pc, #60]	@ (80126e8 <tcp_process+0x5c0>)
 80126aa:	6013      	str	r3, [r2, #0]
 80126ac:	e02e      	b.n	801270c <tcp_process+0x5e4>
 80126ae:	4b0e      	ldr	r3, [pc, #56]	@ (80126e8 <tcp_process+0x5c0>)
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	617b      	str	r3, [r7, #20]
 80126b4:	e027      	b.n	8012706 <tcp_process+0x5de>
 80126b6:	bf00      	nop
 80126b8:	2000d124 	.word	0x2000d124
 80126bc:	2000d11c 	.word	0x2000d11c
 80126c0:	2000d122 	.word	0x2000d122
 80126c4:	2000d118 	.word	0x2000d118
 80126c8:	2000d108 	.word	0x2000d108
 80126cc:	2000999c 	.word	0x2000999c
 80126d0:	200099a0 	.word	0x200099a0
 80126d4:	0801fd48 	.word	0x0801fd48
 80126d8:	0801ffe8 	.word	0x0801ffe8
 80126dc:	0801fd94 	.word	0x0801fd94
 80126e0:	2000d120 	.word	0x2000d120
 80126e4:	2000d125 	.word	0x2000d125
 80126e8:	2000d0ec 	.word	0x2000d0ec
 80126ec:	697b      	ldr	r3, [r7, #20]
 80126ee:	68db      	ldr	r3, [r3, #12]
 80126f0:	687a      	ldr	r2, [r7, #4]
 80126f2:	429a      	cmp	r2, r3
 80126f4:	d104      	bne.n	8012700 <tcp_process+0x5d8>
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	68da      	ldr	r2, [r3, #12]
 80126fa:	697b      	ldr	r3, [r7, #20]
 80126fc:	60da      	str	r2, [r3, #12]
 80126fe:	e005      	b.n	801270c <tcp_process+0x5e4>
 8012700:	697b      	ldr	r3, [r7, #20]
 8012702:	68db      	ldr	r3, [r3, #12]
 8012704:	617b      	str	r3, [r7, #20]
 8012706:	697b      	ldr	r3, [r7, #20]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d1ef      	bne.n	80126ec <tcp_process+0x5c4>
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	2200      	movs	r2, #0
 8012710:	60da      	str	r2, [r3, #12]
 8012712:	4b77      	ldr	r3, [pc, #476]	@ (80128f0 <tcp_process+0x7c8>)
 8012714:	2201      	movs	r2, #1
 8012716:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	220a      	movs	r2, #10
 801271c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801271e:	4b75      	ldr	r3, [pc, #468]	@ (80128f4 <tcp_process+0x7cc>)
 8012720:	681a      	ldr	r2, [r3, #0]
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	60da      	str	r2, [r3, #12]
 8012726:	4a73      	ldr	r2, [pc, #460]	@ (80128f4 <tcp_process+0x7cc>)
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	6013      	str	r3, [r2, #0]
 801272c:	f003 f94c 	bl	80159c8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012730:	e0d2      	b.n	80128d8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	8b5b      	ldrh	r3, [r3, #26]
 8012736:	f043 0302 	orr.w	r3, r3, #2
 801273a:	b29a      	uxth	r2, r3
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	2208      	movs	r2, #8
 8012744:	751a      	strb	r2, [r3, #20]
      break;
 8012746:	e0c7      	b.n	80128d8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012748:	4b6b      	ldr	r3, [pc, #428]	@ (80128f8 <tcp_process+0x7d0>)
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	f003 0310 	and.w	r3, r3, #16
 8012750:	2b00      	cmp	r3, #0
 8012752:	f000 80c1 	beq.w	80128d8 <tcp_process+0x7b0>
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801275a:	4b68      	ldr	r3, [pc, #416]	@ (80128fc <tcp_process+0x7d4>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	429a      	cmp	r2, r3
 8012760:	f040 80ba 	bne.w	80128d8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012768:	2b00      	cmp	r3, #0
 801276a:	f040 80b5 	bne.w	80128d8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	2206      	movs	r2, #6
 8012772:	751a      	strb	r2, [r3, #20]
      break;
 8012774:	e0b0      	b.n	80128d8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f000 f9ca 	bl	8012b10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801277c:	4b60      	ldr	r3, [pc, #384]	@ (8012900 <tcp_process+0x7d8>)
 801277e:	781b      	ldrb	r3, [r3, #0]
 8012780:	f003 0320 	and.w	r3, r3, #32
 8012784:	2b00      	cmp	r3, #0
 8012786:	f000 80a9 	beq.w	80128dc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	8b5b      	ldrh	r3, [r3, #26]
 801278e:	f043 0302 	orr.w	r3, r3, #2
 8012792:	b29a      	uxth	r2, r3
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f7fe fd39 	bl	8011210 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801279e:	4b59      	ldr	r3, [pc, #356]	@ (8012904 <tcp_process+0x7dc>)
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	687a      	ldr	r2, [r7, #4]
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d105      	bne.n	80127b4 <tcp_process+0x68c>
 80127a8:	4b56      	ldr	r3, [pc, #344]	@ (8012904 <tcp_process+0x7dc>)
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	68db      	ldr	r3, [r3, #12]
 80127ae:	4a55      	ldr	r2, [pc, #340]	@ (8012904 <tcp_process+0x7dc>)
 80127b0:	6013      	str	r3, [r2, #0]
 80127b2:	e013      	b.n	80127dc <tcp_process+0x6b4>
 80127b4:	4b53      	ldr	r3, [pc, #332]	@ (8012904 <tcp_process+0x7dc>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	613b      	str	r3, [r7, #16]
 80127ba:	e00c      	b.n	80127d6 <tcp_process+0x6ae>
 80127bc:	693b      	ldr	r3, [r7, #16]
 80127be:	68db      	ldr	r3, [r3, #12]
 80127c0:	687a      	ldr	r2, [r7, #4]
 80127c2:	429a      	cmp	r2, r3
 80127c4:	d104      	bne.n	80127d0 <tcp_process+0x6a8>
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	68da      	ldr	r2, [r3, #12]
 80127ca:	693b      	ldr	r3, [r7, #16]
 80127cc:	60da      	str	r2, [r3, #12]
 80127ce:	e005      	b.n	80127dc <tcp_process+0x6b4>
 80127d0:	693b      	ldr	r3, [r7, #16]
 80127d2:	68db      	ldr	r3, [r3, #12]
 80127d4:	613b      	str	r3, [r7, #16]
 80127d6:	693b      	ldr	r3, [r7, #16]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d1ef      	bne.n	80127bc <tcp_process+0x694>
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2200      	movs	r2, #0
 80127e0:	60da      	str	r2, [r3, #12]
 80127e2:	4b43      	ldr	r3, [pc, #268]	@ (80128f0 <tcp_process+0x7c8>)
 80127e4:	2201      	movs	r2, #1
 80127e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	220a      	movs	r2, #10
 80127ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80127ee:	4b41      	ldr	r3, [pc, #260]	@ (80128f4 <tcp_process+0x7cc>)
 80127f0:	681a      	ldr	r2, [r3, #0]
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	60da      	str	r2, [r3, #12]
 80127f6:	4a3f      	ldr	r2, [pc, #252]	@ (80128f4 <tcp_process+0x7cc>)
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	6013      	str	r3, [r2, #0]
 80127fc:	f003 f8e4 	bl	80159c8 <tcp_timer_needed>
      }
      break;
 8012800:	e06c      	b.n	80128dc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8012802:	6878      	ldr	r0, [r7, #4]
 8012804:	f000 f984 	bl	8012b10 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012808:	4b3b      	ldr	r3, [pc, #236]	@ (80128f8 <tcp_process+0x7d0>)
 801280a:	781b      	ldrb	r3, [r3, #0]
 801280c:	f003 0310 	and.w	r3, r3, #16
 8012810:	2b00      	cmp	r3, #0
 8012812:	d065      	beq.n	80128e0 <tcp_process+0x7b8>
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012818:	4b38      	ldr	r3, [pc, #224]	@ (80128fc <tcp_process+0x7d4>)
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	429a      	cmp	r2, r3
 801281e:	d15f      	bne.n	80128e0 <tcp_process+0x7b8>
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012824:	2b00      	cmp	r3, #0
 8012826:	d15b      	bne.n	80128e0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f7fe fcf1 	bl	8011210 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801282e:	4b35      	ldr	r3, [pc, #212]	@ (8012904 <tcp_process+0x7dc>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	687a      	ldr	r2, [r7, #4]
 8012834:	429a      	cmp	r2, r3
 8012836:	d105      	bne.n	8012844 <tcp_process+0x71c>
 8012838:	4b32      	ldr	r3, [pc, #200]	@ (8012904 <tcp_process+0x7dc>)
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	68db      	ldr	r3, [r3, #12]
 801283e:	4a31      	ldr	r2, [pc, #196]	@ (8012904 <tcp_process+0x7dc>)
 8012840:	6013      	str	r3, [r2, #0]
 8012842:	e013      	b.n	801286c <tcp_process+0x744>
 8012844:	4b2f      	ldr	r3, [pc, #188]	@ (8012904 <tcp_process+0x7dc>)
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	60fb      	str	r3, [r7, #12]
 801284a:	e00c      	b.n	8012866 <tcp_process+0x73e>
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	68db      	ldr	r3, [r3, #12]
 8012850:	687a      	ldr	r2, [r7, #4]
 8012852:	429a      	cmp	r2, r3
 8012854:	d104      	bne.n	8012860 <tcp_process+0x738>
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	68da      	ldr	r2, [r3, #12]
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	60da      	str	r2, [r3, #12]
 801285e:	e005      	b.n	801286c <tcp_process+0x744>
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	68db      	ldr	r3, [r3, #12]
 8012864:	60fb      	str	r3, [r7, #12]
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d1ef      	bne.n	801284c <tcp_process+0x724>
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2200      	movs	r2, #0
 8012870:	60da      	str	r2, [r3, #12]
 8012872:	4b1f      	ldr	r3, [pc, #124]	@ (80128f0 <tcp_process+0x7c8>)
 8012874:	2201      	movs	r2, #1
 8012876:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	220a      	movs	r2, #10
 801287c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801287e:	4b1d      	ldr	r3, [pc, #116]	@ (80128f4 <tcp_process+0x7cc>)
 8012880:	681a      	ldr	r2, [r3, #0]
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	60da      	str	r2, [r3, #12]
 8012886:	4a1b      	ldr	r2, [pc, #108]	@ (80128f4 <tcp_process+0x7cc>)
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	6013      	str	r3, [r2, #0]
 801288c:	f003 f89c 	bl	80159c8 <tcp_timer_needed>
      }
      break;
 8012890:	e026      	b.n	80128e0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8012892:	6878      	ldr	r0, [r7, #4]
 8012894:	f000 f93c 	bl	8012b10 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012898:	4b17      	ldr	r3, [pc, #92]	@ (80128f8 <tcp_process+0x7d0>)
 801289a:	781b      	ldrb	r3, [r3, #0]
 801289c:	f003 0310 	and.w	r3, r3, #16
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d01f      	beq.n	80128e4 <tcp_process+0x7bc>
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80128a8:	4b14      	ldr	r3, [pc, #80]	@ (80128fc <tcp_process+0x7d4>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	429a      	cmp	r2, r3
 80128ae:	d119      	bne.n	80128e4 <tcp_process+0x7bc>
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d115      	bne.n	80128e4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80128b8:	4b11      	ldr	r3, [pc, #68]	@ (8012900 <tcp_process+0x7d8>)
 80128ba:	781b      	ldrb	r3, [r3, #0]
 80128bc:	f043 0310 	orr.w	r3, r3, #16
 80128c0:	b2da      	uxtb	r2, r3
 80128c2:	4b0f      	ldr	r3, [pc, #60]	@ (8012900 <tcp_process+0x7d8>)
 80128c4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80128c6:	e00d      	b.n	80128e4 <tcp_process+0x7bc>
    default:
      break;
 80128c8:	bf00      	nop
 80128ca:	e00c      	b.n	80128e6 <tcp_process+0x7be>
      break;
 80128cc:	bf00      	nop
 80128ce:	e00a      	b.n	80128e6 <tcp_process+0x7be>
      break;
 80128d0:	bf00      	nop
 80128d2:	e008      	b.n	80128e6 <tcp_process+0x7be>
      break;
 80128d4:	bf00      	nop
 80128d6:	e006      	b.n	80128e6 <tcp_process+0x7be>
      break;
 80128d8:	bf00      	nop
 80128da:	e004      	b.n	80128e6 <tcp_process+0x7be>
      break;
 80128dc:	bf00      	nop
 80128de:	e002      	b.n	80128e6 <tcp_process+0x7be>
      break;
 80128e0:	bf00      	nop
 80128e2:	e000      	b.n	80128e6 <tcp_process+0x7be>
      break;
 80128e4:	bf00      	nop
  }
  return ERR_OK;
 80128e6:	2300      	movs	r3, #0
}
 80128e8:	4618      	mov	r0, r3
 80128ea:	3724      	adds	r7, #36	@ 0x24
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd90      	pop	{r4, r7, pc}
 80128f0:	2000d0f4 	.word	0x2000d0f4
 80128f4:	2000d0f0 	.word	0x2000d0f0
 80128f8:	2000d124 	.word	0x2000d124
 80128fc:	2000d11c 	.word	0x2000d11c
 8012900:	2000d125 	.word	0x2000d125
 8012904:	2000d0ec 	.word	0x2000d0ec

08012908 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012908:	b590      	push	{r4, r7, lr}
 801290a:	b085      	sub	sp, #20
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
 8012910:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d106      	bne.n	8012926 <tcp_oos_insert_segment+0x1e>
 8012918:	4b3b      	ldr	r3, [pc, #236]	@ (8012a08 <tcp_oos_insert_segment+0x100>)
 801291a:	f240 421f 	movw	r2, #1055	@ 0x41f
 801291e:	493b      	ldr	r1, [pc, #236]	@ (8012a0c <tcp_oos_insert_segment+0x104>)
 8012920:	483b      	ldr	r0, [pc, #236]	@ (8012a10 <tcp_oos_insert_segment+0x108>)
 8012922:	f007 fd5d 	bl	801a3e0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	68db      	ldr	r3, [r3, #12]
 801292a:	899b      	ldrh	r3, [r3, #12]
 801292c:	b29b      	uxth	r3, r3
 801292e:	4618      	mov	r0, r3
 8012930:	f7fb f8a8 	bl	800da84 <lwip_htons>
 8012934:	4603      	mov	r3, r0
 8012936:	b2db      	uxtb	r3, r3
 8012938:	f003 0301 	and.w	r3, r3, #1
 801293c:	2b00      	cmp	r3, #0
 801293e:	d028      	beq.n	8012992 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012940:	6838      	ldr	r0, [r7, #0]
 8012942:	f7fe f995 	bl	8010c70 <tcp_segs_free>
    next = NULL;
 8012946:	2300      	movs	r3, #0
 8012948:	603b      	str	r3, [r7, #0]
 801294a:	e056      	b.n	80129fa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	68db      	ldr	r3, [r3, #12]
 8012950:	899b      	ldrh	r3, [r3, #12]
 8012952:	b29b      	uxth	r3, r3
 8012954:	4618      	mov	r0, r3
 8012956:	f7fb f895 	bl	800da84 <lwip_htons>
 801295a:	4603      	mov	r3, r0
 801295c:	b2db      	uxtb	r3, r3
 801295e:	f003 0301 	and.w	r3, r3, #1
 8012962:	2b00      	cmp	r3, #0
 8012964:	d00d      	beq.n	8012982 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	68db      	ldr	r3, [r3, #12]
 801296a:	899b      	ldrh	r3, [r3, #12]
 801296c:	b29c      	uxth	r4, r3
 801296e:	2001      	movs	r0, #1
 8012970:	f7fb f888 	bl	800da84 <lwip_htons>
 8012974:	4603      	mov	r3, r0
 8012976:	461a      	mov	r2, r3
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	68db      	ldr	r3, [r3, #12]
 801297c:	4322      	orrs	r2, r4
 801297e:	b292      	uxth	r2, r2
 8012980:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801298c:	68f8      	ldr	r0, [r7, #12]
 801298e:	f7fe f984 	bl	8010c9a <tcp_seg_free>
    while (next &&
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d00e      	beq.n	80129b6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	891b      	ldrh	r3, [r3, #8]
 801299c:	461a      	mov	r2, r3
 801299e:	4b1d      	ldr	r3, [pc, #116]	@ (8012a14 <tcp_oos_insert_segment+0x10c>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	441a      	add	r2, r3
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	68db      	ldr	r3, [r3, #12]
 80129a8:	685b      	ldr	r3, [r3, #4]
 80129aa:	6839      	ldr	r1, [r7, #0]
 80129ac:	8909      	ldrh	r1, [r1, #8]
 80129ae:	440b      	add	r3, r1
 80129b0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	daca      	bge.n	801294c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d01e      	beq.n	80129fa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	891b      	ldrh	r3, [r3, #8]
 80129c0:	461a      	mov	r2, r3
 80129c2:	4b14      	ldr	r3, [pc, #80]	@ (8012a14 <tcp_oos_insert_segment+0x10c>)
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	441a      	add	r2, r3
 80129c8:	683b      	ldr	r3, [r7, #0]
 80129ca:	68db      	ldr	r3, [r3, #12]
 80129cc:	685b      	ldr	r3, [r3, #4]
 80129ce:	1ad3      	subs	r3, r2, r3
    if (next &&
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	dd12      	ble.n	80129fa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80129d4:	683b      	ldr	r3, [r7, #0]
 80129d6:	68db      	ldr	r3, [r3, #12]
 80129d8:	685b      	ldr	r3, [r3, #4]
 80129da:	b29a      	uxth	r2, r3
 80129dc:	4b0d      	ldr	r3, [pc, #52]	@ (8012a14 <tcp_oos_insert_segment+0x10c>)
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	b29b      	uxth	r3, r3
 80129e2:	1ad3      	subs	r3, r2, r3
 80129e4:	b29a      	uxth	r2, r3
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	685a      	ldr	r2, [r3, #4]
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	891b      	ldrh	r3, [r3, #8]
 80129f2:	4619      	mov	r1, r3
 80129f4:	4610      	mov	r0, r2
 80129f6:	f7fc fae9 	bl	800efcc <pbuf_realloc>
    }
  }
  cseg->next = next;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	683a      	ldr	r2, [r7, #0]
 80129fe:	601a      	str	r2, [r3, #0]
}
 8012a00:	bf00      	nop
 8012a02:	3714      	adds	r7, #20
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd90      	pop	{r4, r7, pc}
 8012a08:	0801fd48 	.word	0x0801fd48
 8012a0c:	08020008 	.word	0x08020008
 8012a10:	0801fd94 	.word	0x0801fd94
 8012a14:	2000d118 	.word	0x2000d118

08012a18 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012a18:	b5b0      	push	{r4, r5, r7, lr}
 8012a1a:	b086      	sub	sp, #24
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	60f8      	str	r0, [r7, #12]
 8012a20:	60b9      	str	r1, [r7, #8]
 8012a22:	607a      	str	r2, [r7, #4]
 8012a24:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8012a26:	e03e      	b.n	8012aa6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8012a32:	697b      	ldr	r3, [r7, #20]
 8012a34:	685b      	ldr	r3, [r3, #4]
 8012a36:	4618      	mov	r0, r3
 8012a38:	f7fc fd0e 	bl	800f458 <pbuf_clen>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012a46:	8a7a      	ldrh	r2, [r7, #18]
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	d906      	bls.n	8012a5a <tcp_free_acked_segments+0x42>
 8012a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8012af8 <tcp_free_acked_segments+0xe0>)
 8012a4e:	f240 4257 	movw	r2, #1111	@ 0x457
 8012a52:	492a      	ldr	r1, [pc, #168]	@ (8012afc <tcp_free_acked_segments+0xe4>)
 8012a54:	482a      	ldr	r0, [pc, #168]	@ (8012b00 <tcp_free_acked_segments+0xe8>)
 8012a56:	f007 fcc3 	bl	801a3e0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8012a60:	8a7b      	ldrh	r3, [r7, #18]
 8012a62:	1ad3      	subs	r3, r2, r3
 8012a64:	b29a      	uxth	r2, r3
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	891a      	ldrh	r2, [r3, #8]
 8012a70:	4b24      	ldr	r3, [pc, #144]	@ (8012b04 <tcp_free_acked_segments+0xec>)
 8012a72:	881b      	ldrh	r3, [r3, #0]
 8012a74:	4413      	add	r3, r2
 8012a76:	b29a      	uxth	r2, r3
 8012a78:	4b22      	ldr	r3, [pc, #136]	@ (8012b04 <tcp_free_acked_segments+0xec>)
 8012a7a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012a7c:	6978      	ldr	r0, [r7, #20]
 8012a7e:	f7fe f90c 	bl	8010c9a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d00c      	beq.n	8012aa6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d109      	bne.n	8012aa6 <tcp_free_acked_segments+0x8e>
 8012a92:	683b      	ldr	r3, [r7, #0]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d106      	bne.n	8012aa6 <tcp_free_acked_segments+0x8e>
 8012a98:	4b17      	ldr	r3, [pc, #92]	@ (8012af8 <tcp_free_acked_segments+0xe0>)
 8012a9a:	f240 4261 	movw	r2, #1121	@ 0x461
 8012a9e:	491a      	ldr	r1, [pc, #104]	@ (8012b08 <tcp_free_acked_segments+0xf0>)
 8012aa0:	4817      	ldr	r0, [pc, #92]	@ (8012b00 <tcp_free_acked_segments+0xe8>)
 8012aa2:	f007 fc9d 	bl	801a3e0 <iprintf>
  while (seg_list != NULL &&
 8012aa6:	68bb      	ldr	r3, [r7, #8]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d020      	beq.n	8012aee <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012aac:	68bb      	ldr	r3, [r7, #8]
 8012aae:	68db      	ldr	r3, [r3, #12]
 8012ab0:	685b      	ldr	r3, [r3, #4]
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7fa fffb 	bl	800daae <lwip_htonl>
 8012ab8:	4604      	mov	r4, r0
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	891b      	ldrh	r3, [r3, #8]
 8012abe:	461d      	mov	r5, r3
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	68db      	ldr	r3, [r3, #12]
 8012ac4:	899b      	ldrh	r3, [r3, #12]
 8012ac6:	b29b      	uxth	r3, r3
 8012ac8:	4618      	mov	r0, r3
 8012aca:	f7fa ffdb 	bl	800da84 <lwip_htons>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	b2db      	uxtb	r3, r3
 8012ad2:	f003 0303 	and.w	r3, r3, #3
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d001      	beq.n	8012ade <tcp_free_acked_segments+0xc6>
 8012ada:	2301      	movs	r3, #1
 8012adc:	e000      	b.n	8012ae0 <tcp_free_acked_segments+0xc8>
 8012ade:	2300      	movs	r3, #0
 8012ae0:	442b      	add	r3, r5
 8012ae2:	18e2      	adds	r2, r4, r3
 8012ae4:	4b09      	ldr	r3, [pc, #36]	@ (8012b0c <tcp_free_acked_segments+0xf4>)
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	dd9c      	ble.n	8012a28 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012aee:	68bb      	ldr	r3, [r7, #8]
}
 8012af0:	4618      	mov	r0, r3
 8012af2:	3718      	adds	r7, #24
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bdb0      	pop	{r4, r5, r7, pc}
 8012af8:	0801fd48 	.word	0x0801fd48
 8012afc:	08020030 	.word	0x08020030
 8012b00:	0801fd94 	.word	0x0801fd94
 8012b04:	2000d120 	.word	0x2000d120
 8012b08:	08020058 	.word	0x08020058
 8012b0c:	2000d11c 	.word	0x2000d11c

08012b10 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012b10:	b5b0      	push	{r4, r5, r7, lr}
 8012b12:	b094      	sub	sp, #80	@ 0x50
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012b18:	2300      	movs	r3, #0
 8012b1a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d106      	bne.n	8012b30 <tcp_receive+0x20>
 8012b22:	4b91      	ldr	r3, [pc, #580]	@ (8012d68 <tcp_receive+0x258>)
 8012b24:	f240 427b 	movw	r2, #1147	@ 0x47b
 8012b28:	4990      	ldr	r1, [pc, #576]	@ (8012d6c <tcp_receive+0x25c>)
 8012b2a:	4891      	ldr	r0, [pc, #580]	@ (8012d70 <tcp_receive+0x260>)
 8012b2c:	f007 fc58 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	7d1b      	ldrb	r3, [r3, #20]
 8012b34:	2b03      	cmp	r3, #3
 8012b36:	d806      	bhi.n	8012b46 <tcp_receive+0x36>
 8012b38:	4b8b      	ldr	r3, [pc, #556]	@ (8012d68 <tcp_receive+0x258>)
 8012b3a:	f240 427c 	movw	r2, #1148	@ 0x47c
 8012b3e:	498d      	ldr	r1, [pc, #564]	@ (8012d74 <tcp_receive+0x264>)
 8012b40:	488b      	ldr	r0, [pc, #556]	@ (8012d70 <tcp_receive+0x260>)
 8012b42:	f007 fc4d 	bl	801a3e0 <iprintf>

  if (flags & TCP_ACK) {
 8012b46:	4b8c      	ldr	r3, [pc, #560]	@ (8012d78 <tcp_receive+0x268>)
 8012b48:	781b      	ldrb	r3, [r3, #0]
 8012b4a:	f003 0310 	and.w	r3, r3, #16
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	f000 8264 	beq.w	801301c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012b5a:	461a      	mov	r2, r3
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b60:	4413      	add	r3, r2
 8012b62:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012b68:	4b84      	ldr	r3, [pc, #528]	@ (8012d7c <tcp_receive+0x26c>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	1ad3      	subs	r3, r2, r3
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	db1b      	blt.n	8012baa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012b76:	4b81      	ldr	r3, [pc, #516]	@ (8012d7c <tcp_receive+0x26c>)
 8012b78:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	d106      	bne.n	8012b8c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012b82:	4b7f      	ldr	r3, [pc, #508]	@ (8012d80 <tcp_receive+0x270>)
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	1ad3      	subs	r3, r2, r3
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	db0e      	blt.n	8012baa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012b90:	4b7b      	ldr	r3, [pc, #492]	@ (8012d80 <tcp_receive+0x270>)
 8012b92:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012b94:	429a      	cmp	r2, r3
 8012b96:	d125      	bne.n	8012be4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012b98:	4b7a      	ldr	r3, [pc, #488]	@ (8012d84 <tcp_receive+0x274>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	89db      	ldrh	r3, [r3, #14]
 8012b9e:	b29a      	uxth	r2, r3
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	d91c      	bls.n	8012be4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012baa:	4b76      	ldr	r3, [pc, #472]	@ (8012d84 <tcp_receive+0x274>)
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	89db      	ldrh	r3, [r3, #14]
 8012bb0:	b29a      	uxth	r2, r3
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d205      	bcs.n	8012bd4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8012bd4:	4b69      	ldr	r3, [pc, #420]	@ (8012d7c <tcp_receive+0x26c>)
 8012bd6:	681a      	ldr	r2, [r3, #0]
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8012bdc:	4b68      	ldr	r3, [pc, #416]	@ (8012d80 <tcp_receive+0x270>)
 8012bde:	681a      	ldr	r2, [r3, #0]
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012be4:	4b66      	ldr	r3, [pc, #408]	@ (8012d80 <tcp_receive+0x270>)
 8012be6:	681a      	ldr	r2, [r3, #0]
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012bec:	1ad3      	subs	r3, r2, r3
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	dc58      	bgt.n	8012ca4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012bf2:	4b65      	ldr	r3, [pc, #404]	@ (8012d88 <tcp_receive+0x278>)
 8012bf4:	881b      	ldrh	r3, [r3, #0]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d14b      	bne.n	8012c92 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012bfe:	687a      	ldr	r2, [r7, #4]
 8012c00:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8012c04:	4413      	add	r3, r2
 8012c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012c08:	429a      	cmp	r2, r3
 8012c0a:	d142      	bne.n	8012c92 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	db3d      	blt.n	8012c92 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012c1a:	4b59      	ldr	r3, [pc, #356]	@ (8012d80 <tcp_receive+0x270>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	429a      	cmp	r2, r3
 8012c20:	d137      	bne.n	8012c92 <tcp_receive+0x182>
              found_dupack = 1;
 8012c22:	2301      	movs	r3, #1
 8012c24:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012c2c:	2bff      	cmp	r3, #255	@ 0xff
 8012c2e:	d007      	beq.n	8012c40 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012c36:	3301      	adds	r3, #1
 8012c38:	b2da      	uxtb	r2, r3
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012c46:	2b03      	cmp	r3, #3
 8012c48:	d91b      	bls.n	8012c82 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012c54:	4413      	add	r3, r2
 8012c56:	b29a      	uxth	r2, r3
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	d30a      	bcc.n	8012c78 <tcp_receive+0x168>
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012c6c:	4413      	add	r3, r2
 8012c6e:	b29a      	uxth	r2, r3
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012c76:	e004      	b.n	8012c82 <tcp_receive+0x172>
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012c7e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012c88:	2b02      	cmp	r3, #2
 8012c8a:	d902      	bls.n	8012c92 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	f002 fb3f 	bl	8015310 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012c92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	f040 8161 	bne.w	8012f5c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012ca2:	e15b      	b.n	8012f5c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012ca4:	4b36      	ldr	r3, [pc, #216]	@ (8012d80 <tcp_receive+0x270>)
 8012ca6:	681a      	ldr	r2, [r3, #0]
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012cac:	1ad3      	subs	r3, r2, r3
 8012cae:	3b01      	subs	r3, #1
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	f2c0 814e 	blt.w	8012f52 <tcp_receive+0x442>
 8012cb6:	4b32      	ldr	r3, [pc, #200]	@ (8012d80 <tcp_receive+0x270>)
 8012cb8:	681a      	ldr	r2, [r3, #0]
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012cbe:	1ad3      	subs	r3, r2, r3
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	f300 8146 	bgt.w	8012f52 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	8b5b      	ldrh	r3, [r3, #26]
 8012cca:	f003 0304 	and.w	r3, r3, #4
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d010      	beq.n	8012cf4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	8b5b      	ldrh	r3, [r3, #26]
 8012cd6:	f023 0304 	bic.w	r3, r3, #4
 8012cda:	b29a      	uxth	r2, r3
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	2200      	movs	r2, #0
 8012cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012d02:	10db      	asrs	r3, r3, #3
 8012d04:	b21b      	sxth	r3, r3
 8012d06:	b29a      	uxth	r2, r3
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012d0e:	b29b      	uxth	r3, r3
 8012d10:	4413      	add	r3, r2
 8012d12:	b29b      	uxth	r3, r3
 8012d14:	b21a      	sxth	r2, r3
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012d1c:	4b18      	ldr	r3, [pc, #96]	@ (8012d80 <tcp_receive+0x270>)
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	b29a      	uxth	r2, r3
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d26:	b29b      	uxth	r3, r3
 8012d28:	1ad3      	subs	r3, r2, r3
 8012d2a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2200      	movs	r2, #0
 8012d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8012d34:	4b12      	ldr	r3, [pc, #72]	@ (8012d80 <tcp_receive+0x270>)
 8012d36:	681a      	ldr	r2, [r3, #0]
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	7d1b      	ldrb	r3, [r3, #20]
 8012d40:	2b03      	cmp	r3, #3
 8012d42:	f240 8097 	bls.w	8012e74 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012d52:	429a      	cmp	r2, r3
 8012d54:	d245      	bcs.n	8012de2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	8b5b      	ldrh	r3, [r3, #26]
 8012d5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d014      	beq.n	8012d8c <tcp_receive+0x27c>
 8012d62:	2301      	movs	r3, #1
 8012d64:	e013      	b.n	8012d8e <tcp_receive+0x27e>
 8012d66:	bf00      	nop
 8012d68:	0801fd48 	.word	0x0801fd48
 8012d6c:	08020078 	.word	0x08020078
 8012d70:	0801fd94 	.word	0x0801fd94
 8012d74:	08020094 	.word	0x08020094
 8012d78:	2000d124 	.word	0x2000d124
 8012d7c:	2000d118 	.word	0x2000d118
 8012d80:	2000d11c 	.word	0x2000d11c
 8012d84:	2000d108 	.word	0x2000d108
 8012d88:	2000d122 	.word	0x2000d122
 8012d8c:	2302      	movs	r3, #2
 8012d8e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012d92:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8012d96:	b29a      	uxth	r2, r3
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012d9c:	fb12 f303 	smulbb	r3, r2, r3
 8012da0:	b29b      	uxth	r3, r3
 8012da2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012da4:	4293      	cmp	r3, r2
 8012da6:	bf28      	it	cs
 8012da8:	4613      	movcs	r3, r2
 8012daa:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012db2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012db4:	4413      	add	r3, r2
 8012db6:	b29a      	uxth	r2, r3
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d309      	bcc.n	8012dd6 <tcp_receive+0x2c6>
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012dc8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012dca:	4413      	add	r3, r2
 8012dcc:	b29a      	uxth	r2, r3
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012dd4:	e04e      	b.n	8012e74 <tcp_receive+0x364>
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012ddc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012de0:	e048      	b.n	8012e74 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012de8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012dea:	4413      	add	r3, r2
 8012dec:	b29a      	uxth	r2, r3
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012df4:	429a      	cmp	r2, r3
 8012df6:	d309      	bcc.n	8012e0c <tcp_receive+0x2fc>
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012dfe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012e00:	4413      	add	r3, r2
 8012e02:	b29a      	uxth	r2, r3
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8012e0a:	e004      	b.n	8012e16 <tcp_receive+0x306>
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012e12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012e22:	429a      	cmp	r2, r3
 8012e24:	d326      	bcc.n	8012e74 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012e32:	1ad3      	subs	r3, r2, r3
 8012e34:	b29a      	uxth	r2, r3
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012e46:	4413      	add	r3, r2
 8012e48:	b29a      	uxth	r2, r3
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012e50:	429a      	cmp	r2, r3
 8012e52:	d30a      	bcc.n	8012e6a <tcp_receive+0x35a>
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012e5e:	4413      	add	r3, r2
 8012e60:	b29a      	uxth	r2, r3
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012e68:	e004      	b.n	8012e74 <tcp_receive+0x364>
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012e70:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012e7c:	4a98      	ldr	r2, [pc, #608]	@ (80130e0 <tcp_receive+0x5d0>)
 8012e7e:	6878      	ldr	r0, [r7, #4]
 8012e80:	f7ff fdca 	bl	8012a18 <tcp_free_acked_segments>
 8012e84:	4602      	mov	r2, r0
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012e92:	4a94      	ldr	r2, [pc, #592]	@ (80130e4 <tcp_receive+0x5d4>)
 8012e94:	6878      	ldr	r0, [r7, #4]
 8012e96:	f7ff fdbf 	bl	8012a18 <tcp_free_acked_segments>
 8012e9a:	4602      	mov	r2, r0
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d104      	bne.n	8012eb2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012eae:	861a      	strh	r2, [r3, #48]	@ 0x30
 8012eb0:	e002      	b.n	8012eb8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d103      	bne.n	8012ece <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	2200      	movs	r2, #0
 8012eca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012ed4:	4b84      	ldr	r3, [pc, #528]	@ (80130e8 <tcp_receive+0x5d8>)
 8012ed6:	881b      	ldrh	r3, [r3, #0]
 8012ed8:	4413      	add	r3, r2
 8012eda:	b29a      	uxth	r2, r3
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	8b5b      	ldrh	r3, [r3, #26]
 8012ee6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d035      	beq.n	8012f5a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d118      	bne.n	8012f28 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d00c      	beq.n	8012f18 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012f06:	68db      	ldr	r3, [r3, #12]
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7fa fdcf 	bl	800daae <lwip_htonl>
 8012f10:	4603      	mov	r3, r0
 8012f12:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	dc20      	bgt.n	8012f5a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	8b5b      	ldrh	r3, [r3, #26]
 8012f1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012f20:	b29a      	uxth	r2, r3
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012f26:	e018      	b.n	8012f5a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012f30:	68db      	ldr	r3, [r3, #12]
 8012f32:	685b      	ldr	r3, [r3, #4]
 8012f34:	4618      	mov	r0, r3
 8012f36:	f7fa fdba 	bl	800daae <lwip_htonl>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	1ae3      	subs	r3, r4, r3
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	dc0b      	bgt.n	8012f5a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	8b5b      	ldrh	r3, [r3, #26]
 8012f46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012f4a:	b29a      	uxth	r2, r3
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012f50:	e003      	b.n	8012f5a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012f52:	6878      	ldr	r0, [r7, #4]
 8012f54:	f002 fbc8 	bl	80156e8 <tcp_send_empty_ack>
 8012f58:	e000      	b.n	8012f5c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012f5a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d05b      	beq.n	801301c <tcp_receive+0x50c>
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f68:	4b60      	ldr	r3, [pc, #384]	@ (80130ec <tcp_receive+0x5dc>)
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	1ad3      	subs	r3, r2, r3
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	da54      	bge.n	801301c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012f72:	4b5f      	ldr	r3, [pc, #380]	@ (80130f0 <tcp_receive+0x5e0>)
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	b29a      	uxth	r2, r3
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012f7c:	b29b      	uxth	r3, r3
 8012f7e:	1ad3      	subs	r3, r2, r3
 8012f80:	b29b      	uxth	r3, r3
 8012f82:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012f86:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012f90:	10db      	asrs	r3, r3, #3
 8012f92:	b21b      	sxth	r3, r3
 8012f94:	b29b      	uxth	r3, r3
 8012f96:	1ad3      	subs	r3, r2, r3
 8012f98:	b29b      	uxth	r3, r3
 8012f9a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012fa4:	b29a      	uxth	r2, r3
 8012fa6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012faa:	4413      	add	r3, r2
 8012fac:	b29b      	uxth	r3, r3
 8012fae:	b21a      	sxth	r2, r3
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8012fb4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	da05      	bge.n	8012fc8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012fbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012fc0:	425b      	negs	r3, r3
 8012fc2:	b29b      	uxth	r3, r3
 8012fc4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012fc8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012fd2:	109b      	asrs	r3, r3, #2
 8012fd4:	b21b      	sxth	r3, r3
 8012fd6:	b29b      	uxth	r3, r3
 8012fd8:	1ad3      	subs	r3, r2, r3
 8012fda:	b29b      	uxth	r3, r3
 8012fdc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012fe6:	b29a      	uxth	r2, r3
 8012fe8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012fec:	4413      	add	r3, r2
 8012fee:	b29b      	uxth	r3, r3
 8012ff0:	b21a      	sxth	r2, r3
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012ffc:	10db      	asrs	r3, r3, #3
 8012ffe:	b21b      	sxth	r3, r3
 8013000:	b29a      	uxth	r2, r3
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013008:	b29b      	uxth	r3, r3
 801300a:	4413      	add	r3, r2
 801300c:	b29b      	uxth	r3, r3
 801300e:	b21a      	sxth	r2, r3
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	2200      	movs	r2, #0
 801301a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801301c:	4b35      	ldr	r3, [pc, #212]	@ (80130f4 <tcp_receive+0x5e4>)
 801301e:	881b      	ldrh	r3, [r3, #0]
 8013020:	2b00      	cmp	r3, #0
 8013022:	f000 84df 	beq.w	80139e4 <tcp_receive+0xed4>
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	7d1b      	ldrb	r3, [r3, #20]
 801302a:	2b06      	cmp	r3, #6
 801302c:	f200 84da 	bhi.w	80139e4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013034:	4b30      	ldr	r3, [pc, #192]	@ (80130f8 <tcp_receive+0x5e8>)
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	1ad3      	subs	r3, r2, r3
 801303a:	3b01      	subs	r3, #1
 801303c:	2b00      	cmp	r3, #0
 801303e:	f2c0 808f 	blt.w	8013160 <tcp_receive+0x650>
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013046:	4b2b      	ldr	r3, [pc, #172]	@ (80130f4 <tcp_receive+0x5e4>)
 8013048:	881b      	ldrh	r3, [r3, #0]
 801304a:	4619      	mov	r1, r3
 801304c:	4b2a      	ldr	r3, [pc, #168]	@ (80130f8 <tcp_receive+0x5e8>)
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	440b      	add	r3, r1
 8013052:	1ad3      	subs	r3, r2, r3
 8013054:	3301      	adds	r3, #1
 8013056:	2b00      	cmp	r3, #0
 8013058:	f300 8082 	bgt.w	8013160 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801305c:	4b27      	ldr	r3, [pc, #156]	@ (80130fc <tcp_receive+0x5ec>)
 801305e:	685b      	ldr	r3, [r3, #4]
 8013060:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013066:	4b24      	ldr	r3, [pc, #144]	@ (80130f8 <tcp_receive+0x5e8>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	1ad3      	subs	r3, r2, r3
 801306c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801306e:	4b23      	ldr	r3, [pc, #140]	@ (80130fc <tcp_receive+0x5ec>)
 8013070:	685b      	ldr	r3, [r3, #4]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d106      	bne.n	8013084 <tcp_receive+0x574>
 8013076:	4b22      	ldr	r3, [pc, #136]	@ (8013100 <tcp_receive+0x5f0>)
 8013078:	f240 5294 	movw	r2, #1428	@ 0x594
 801307c:	4921      	ldr	r1, [pc, #132]	@ (8013104 <tcp_receive+0x5f4>)
 801307e:	4822      	ldr	r0, [pc, #136]	@ (8013108 <tcp_receive+0x5f8>)
 8013080:	f007 f9ae 	bl	801a3e0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013086:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801308a:	4293      	cmp	r3, r2
 801308c:	d906      	bls.n	801309c <tcp_receive+0x58c>
 801308e:	4b1c      	ldr	r3, [pc, #112]	@ (8013100 <tcp_receive+0x5f0>)
 8013090:	f240 5295 	movw	r2, #1429	@ 0x595
 8013094:	491d      	ldr	r1, [pc, #116]	@ (801310c <tcp_receive+0x5fc>)
 8013096:	481c      	ldr	r0, [pc, #112]	@ (8013108 <tcp_receive+0x5f8>)
 8013098:	f007 f9a2 	bl	801a3e0 <iprintf>
      off = (u16_t)off32;
 801309c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801309e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80130a2:	4b16      	ldr	r3, [pc, #88]	@ (80130fc <tcp_receive+0x5ec>)
 80130a4:	685b      	ldr	r3, [r3, #4]
 80130a6:	891b      	ldrh	r3, [r3, #8]
 80130a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80130ac:	429a      	cmp	r2, r3
 80130ae:	d906      	bls.n	80130be <tcp_receive+0x5ae>
 80130b0:	4b13      	ldr	r3, [pc, #76]	@ (8013100 <tcp_receive+0x5f0>)
 80130b2:	f240 5297 	movw	r2, #1431	@ 0x597
 80130b6:	4916      	ldr	r1, [pc, #88]	@ (8013110 <tcp_receive+0x600>)
 80130b8:	4813      	ldr	r0, [pc, #76]	@ (8013108 <tcp_receive+0x5f8>)
 80130ba:	f007 f991 	bl	801a3e0 <iprintf>
      inseg.len -= off;
 80130be:	4b0f      	ldr	r3, [pc, #60]	@ (80130fc <tcp_receive+0x5ec>)
 80130c0:	891a      	ldrh	r2, [r3, #8]
 80130c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80130c6:	1ad3      	subs	r3, r2, r3
 80130c8:	b29a      	uxth	r2, r3
 80130ca:	4b0c      	ldr	r3, [pc, #48]	@ (80130fc <tcp_receive+0x5ec>)
 80130cc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80130ce:	4b0b      	ldr	r3, [pc, #44]	@ (80130fc <tcp_receive+0x5ec>)
 80130d0:	685b      	ldr	r3, [r3, #4]
 80130d2:	891a      	ldrh	r2, [r3, #8]
 80130d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80130d8:	1ad3      	subs	r3, r2, r3
 80130da:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80130dc:	e02a      	b.n	8013134 <tcp_receive+0x624>
 80130de:	bf00      	nop
 80130e0:	080200b0 	.word	0x080200b0
 80130e4:	080200b8 	.word	0x080200b8
 80130e8:	2000d120 	.word	0x2000d120
 80130ec:	2000d11c 	.word	0x2000d11c
 80130f0:	2000d0e0 	.word	0x2000d0e0
 80130f4:	2000d122 	.word	0x2000d122
 80130f8:	2000d118 	.word	0x2000d118
 80130fc:	2000d0f8 	.word	0x2000d0f8
 8013100:	0801fd48 	.word	0x0801fd48
 8013104:	080200c0 	.word	0x080200c0
 8013108:	0801fd94 	.word	0x0801fd94
 801310c:	080200d0 	.word	0x080200d0
 8013110:	080200e0 	.word	0x080200e0
        off -= p->len;
 8013114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013116:	895b      	ldrh	r3, [r3, #10]
 8013118:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801311c:	1ad3      	subs	r3, r2, r3
 801311e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013122:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013124:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013126:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801312a:	2200      	movs	r2, #0
 801312c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801312e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8013134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013136:	895b      	ldrh	r3, [r3, #10]
 8013138:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801313c:	429a      	cmp	r2, r3
 801313e:	d8e9      	bhi.n	8013114 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013140:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013144:	4619      	mov	r1, r3
 8013146:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013148:	f7fc f840 	bl	800f1cc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013150:	4a90      	ldr	r2, [pc, #576]	@ (8013394 <tcp_receive+0x884>)
 8013152:	6013      	str	r3, [r2, #0]
 8013154:	4b90      	ldr	r3, [pc, #576]	@ (8013398 <tcp_receive+0x888>)
 8013156:	68db      	ldr	r3, [r3, #12]
 8013158:	4a8e      	ldr	r2, [pc, #568]	@ (8013394 <tcp_receive+0x884>)
 801315a:	6812      	ldr	r2, [r2, #0]
 801315c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801315e:	e00d      	b.n	801317c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013160:	4b8c      	ldr	r3, [pc, #560]	@ (8013394 <tcp_receive+0x884>)
 8013162:	681a      	ldr	r2, [r3, #0]
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013168:	1ad3      	subs	r3, r2, r3
 801316a:	2b00      	cmp	r3, #0
 801316c:	da06      	bge.n	801317c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	8b5b      	ldrh	r3, [r3, #26]
 8013172:	f043 0302 	orr.w	r3, r3, #2
 8013176:	b29a      	uxth	r2, r3
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801317c:	4b85      	ldr	r3, [pc, #532]	@ (8013394 <tcp_receive+0x884>)
 801317e:	681a      	ldr	r2, [r3, #0]
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013184:	1ad3      	subs	r3, r2, r3
 8013186:	2b00      	cmp	r3, #0
 8013188:	f2c0 8427 	blt.w	80139da <tcp_receive+0xeca>
 801318c:	4b81      	ldr	r3, [pc, #516]	@ (8013394 <tcp_receive+0x884>)
 801318e:	681a      	ldr	r2, [r3, #0]
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013194:	6879      	ldr	r1, [r7, #4]
 8013196:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013198:	440b      	add	r3, r1
 801319a:	1ad3      	subs	r3, r2, r3
 801319c:	3301      	adds	r3, #1
 801319e:	2b00      	cmp	r3, #0
 80131a0:	f300 841b 	bgt.w	80139da <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80131a8:	4b7a      	ldr	r3, [pc, #488]	@ (8013394 <tcp_receive+0x884>)
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	429a      	cmp	r2, r3
 80131ae:	f040 8298 	bne.w	80136e2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80131b2:	4b79      	ldr	r3, [pc, #484]	@ (8013398 <tcp_receive+0x888>)
 80131b4:	891c      	ldrh	r4, [r3, #8]
 80131b6:	4b78      	ldr	r3, [pc, #480]	@ (8013398 <tcp_receive+0x888>)
 80131b8:	68db      	ldr	r3, [r3, #12]
 80131ba:	899b      	ldrh	r3, [r3, #12]
 80131bc:	b29b      	uxth	r3, r3
 80131be:	4618      	mov	r0, r3
 80131c0:	f7fa fc60 	bl	800da84 <lwip_htons>
 80131c4:	4603      	mov	r3, r0
 80131c6:	b2db      	uxtb	r3, r3
 80131c8:	f003 0303 	and.w	r3, r3, #3
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d001      	beq.n	80131d4 <tcp_receive+0x6c4>
 80131d0:	2301      	movs	r3, #1
 80131d2:	e000      	b.n	80131d6 <tcp_receive+0x6c6>
 80131d4:	2300      	movs	r3, #0
 80131d6:	4423      	add	r3, r4
 80131d8:	b29a      	uxth	r2, r3
 80131da:	4b70      	ldr	r3, [pc, #448]	@ (801339c <tcp_receive+0x88c>)
 80131dc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80131e2:	4b6e      	ldr	r3, [pc, #440]	@ (801339c <tcp_receive+0x88c>)
 80131e4:	881b      	ldrh	r3, [r3, #0]
 80131e6:	429a      	cmp	r2, r3
 80131e8:	d274      	bcs.n	80132d4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80131ea:	4b6b      	ldr	r3, [pc, #428]	@ (8013398 <tcp_receive+0x888>)
 80131ec:	68db      	ldr	r3, [r3, #12]
 80131ee:	899b      	ldrh	r3, [r3, #12]
 80131f0:	b29b      	uxth	r3, r3
 80131f2:	4618      	mov	r0, r3
 80131f4:	f7fa fc46 	bl	800da84 <lwip_htons>
 80131f8:	4603      	mov	r3, r0
 80131fa:	b2db      	uxtb	r3, r3
 80131fc:	f003 0301 	and.w	r3, r3, #1
 8013200:	2b00      	cmp	r3, #0
 8013202:	d01e      	beq.n	8013242 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013204:	4b64      	ldr	r3, [pc, #400]	@ (8013398 <tcp_receive+0x888>)
 8013206:	68db      	ldr	r3, [r3, #12]
 8013208:	899b      	ldrh	r3, [r3, #12]
 801320a:	b29b      	uxth	r3, r3
 801320c:	b21b      	sxth	r3, r3
 801320e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013212:	b21c      	sxth	r4, r3
 8013214:	4b60      	ldr	r3, [pc, #384]	@ (8013398 <tcp_receive+0x888>)
 8013216:	68db      	ldr	r3, [r3, #12]
 8013218:	899b      	ldrh	r3, [r3, #12]
 801321a:	b29b      	uxth	r3, r3
 801321c:	4618      	mov	r0, r3
 801321e:	f7fa fc31 	bl	800da84 <lwip_htons>
 8013222:	4603      	mov	r3, r0
 8013224:	b2db      	uxtb	r3, r3
 8013226:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801322a:	b29b      	uxth	r3, r3
 801322c:	4618      	mov	r0, r3
 801322e:	f7fa fc29 	bl	800da84 <lwip_htons>
 8013232:	4603      	mov	r3, r0
 8013234:	b21b      	sxth	r3, r3
 8013236:	4323      	orrs	r3, r4
 8013238:	b21a      	sxth	r2, r3
 801323a:	4b57      	ldr	r3, [pc, #348]	@ (8013398 <tcp_receive+0x888>)
 801323c:	68db      	ldr	r3, [r3, #12]
 801323e:	b292      	uxth	r2, r2
 8013240:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013246:	4b54      	ldr	r3, [pc, #336]	@ (8013398 <tcp_receive+0x888>)
 8013248:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801324a:	4b53      	ldr	r3, [pc, #332]	@ (8013398 <tcp_receive+0x888>)
 801324c:	68db      	ldr	r3, [r3, #12]
 801324e:	899b      	ldrh	r3, [r3, #12]
 8013250:	b29b      	uxth	r3, r3
 8013252:	4618      	mov	r0, r3
 8013254:	f7fa fc16 	bl	800da84 <lwip_htons>
 8013258:	4603      	mov	r3, r0
 801325a:	b2db      	uxtb	r3, r3
 801325c:	f003 0302 	and.w	r3, r3, #2
 8013260:	2b00      	cmp	r3, #0
 8013262:	d005      	beq.n	8013270 <tcp_receive+0x760>
            inseg.len -= 1;
 8013264:	4b4c      	ldr	r3, [pc, #304]	@ (8013398 <tcp_receive+0x888>)
 8013266:	891b      	ldrh	r3, [r3, #8]
 8013268:	3b01      	subs	r3, #1
 801326a:	b29a      	uxth	r2, r3
 801326c:	4b4a      	ldr	r3, [pc, #296]	@ (8013398 <tcp_receive+0x888>)
 801326e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013270:	4b49      	ldr	r3, [pc, #292]	@ (8013398 <tcp_receive+0x888>)
 8013272:	685b      	ldr	r3, [r3, #4]
 8013274:	4a48      	ldr	r2, [pc, #288]	@ (8013398 <tcp_receive+0x888>)
 8013276:	8912      	ldrh	r2, [r2, #8]
 8013278:	4611      	mov	r1, r2
 801327a:	4618      	mov	r0, r3
 801327c:	f7fb fea6 	bl	800efcc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013280:	4b45      	ldr	r3, [pc, #276]	@ (8013398 <tcp_receive+0x888>)
 8013282:	891c      	ldrh	r4, [r3, #8]
 8013284:	4b44      	ldr	r3, [pc, #272]	@ (8013398 <tcp_receive+0x888>)
 8013286:	68db      	ldr	r3, [r3, #12]
 8013288:	899b      	ldrh	r3, [r3, #12]
 801328a:	b29b      	uxth	r3, r3
 801328c:	4618      	mov	r0, r3
 801328e:	f7fa fbf9 	bl	800da84 <lwip_htons>
 8013292:	4603      	mov	r3, r0
 8013294:	b2db      	uxtb	r3, r3
 8013296:	f003 0303 	and.w	r3, r3, #3
 801329a:	2b00      	cmp	r3, #0
 801329c:	d001      	beq.n	80132a2 <tcp_receive+0x792>
 801329e:	2301      	movs	r3, #1
 80132a0:	e000      	b.n	80132a4 <tcp_receive+0x794>
 80132a2:	2300      	movs	r3, #0
 80132a4:	4423      	add	r3, r4
 80132a6:	b29a      	uxth	r2, r3
 80132a8:	4b3c      	ldr	r3, [pc, #240]	@ (801339c <tcp_receive+0x88c>)
 80132aa:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80132ac:	4b3b      	ldr	r3, [pc, #236]	@ (801339c <tcp_receive+0x88c>)
 80132ae:	881b      	ldrh	r3, [r3, #0]
 80132b0:	461a      	mov	r2, r3
 80132b2:	4b38      	ldr	r3, [pc, #224]	@ (8013394 <tcp_receive+0x884>)
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	441a      	add	r2, r3
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132bc:	6879      	ldr	r1, [r7, #4]
 80132be:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80132c0:	440b      	add	r3, r1
 80132c2:	429a      	cmp	r2, r3
 80132c4:	d006      	beq.n	80132d4 <tcp_receive+0x7c4>
 80132c6:	4b36      	ldr	r3, [pc, #216]	@ (80133a0 <tcp_receive+0x890>)
 80132c8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80132cc:	4935      	ldr	r1, [pc, #212]	@ (80133a4 <tcp_receive+0x894>)
 80132ce:	4836      	ldr	r0, [pc, #216]	@ (80133a8 <tcp_receive+0x898>)
 80132d0:	f007 f886 	bl	801a3e0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80132d8:	2b00      	cmp	r3, #0
 80132da:	f000 80e6 	beq.w	80134aa <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80132de:	4b2e      	ldr	r3, [pc, #184]	@ (8013398 <tcp_receive+0x888>)
 80132e0:	68db      	ldr	r3, [r3, #12]
 80132e2:	899b      	ldrh	r3, [r3, #12]
 80132e4:	b29b      	uxth	r3, r3
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7fa fbcc 	bl	800da84 <lwip_htons>
 80132ec:	4603      	mov	r3, r0
 80132ee:	b2db      	uxtb	r3, r3
 80132f0:	f003 0301 	and.w	r3, r3, #1
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d010      	beq.n	801331a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80132f8:	e00a      	b.n	8013310 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80132fe:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013304:	681a      	ldr	r2, [r3, #0]
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801330a:	68f8      	ldr	r0, [r7, #12]
 801330c:	f7fd fcc5 	bl	8010c9a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013314:	2b00      	cmp	r3, #0
 8013316:	d1f0      	bne.n	80132fa <tcp_receive+0x7ea>
 8013318:	e0c7      	b.n	80134aa <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801331e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013320:	e051      	b.n	80133c6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013324:	68db      	ldr	r3, [r3, #12]
 8013326:	899b      	ldrh	r3, [r3, #12]
 8013328:	b29b      	uxth	r3, r3
 801332a:	4618      	mov	r0, r3
 801332c:	f7fa fbaa 	bl	800da84 <lwip_htons>
 8013330:	4603      	mov	r3, r0
 8013332:	b2db      	uxtb	r3, r3
 8013334:	f003 0301 	and.w	r3, r3, #1
 8013338:	2b00      	cmp	r3, #0
 801333a:	d03c      	beq.n	80133b6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801333c:	4b16      	ldr	r3, [pc, #88]	@ (8013398 <tcp_receive+0x888>)
 801333e:	68db      	ldr	r3, [r3, #12]
 8013340:	899b      	ldrh	r3, [r3, #12]
 8013342:	b29b      	uxth	r3, r3
 8013344:	4618      	mov	r0, r3
 8013346:	f7fa fb9d 	bl	800da84 <lwip_htons>
 801334a:	4603      	mov	r3, r0
 801334c:	b2db      	uxtb	r3, r3
 801334e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013352:	2b00      	cmp	r3, #0
 8013354:	d12f      	bne.n	80133b6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013356:	4b10      	ldr	r3, [pc, #64]	@ (8013398 <tcp_receive+0x888>)
 8013358:	68db      	ldr	r3, [r3, #12]
 801335a:	899b      	ldrh	r3, [r3, #12]
 801335c:	b29c      	uxth	r4, r3
 801335e:	2001      	movs	r0, #1
 8013360:	f7fa fb90 	bl	800da84 <lwip_htons>
 8013364:	4603      	mov	r3, r0
 8013366:	461a      	mov	r2, r3
 8013368:	4b0b      	ldr	r3, [pc, #44]	@ (8013398 <tcp_receive+0x888>)
 801336a:	68db      	ldr	r3, [r3, #12]
 801336c:	4322      	orrs	r2, r4
 801336e:	b292      	uxth	r2, r2
 8013370:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013372:	4b09      	ldr	r3, [pc, #36]	@ (8013398 <tcp_receive+0x888>)
 8013374:	891c      	ldrh	r4, [r3, #8]
 8013376:	4b08      	ldr	r3, [pc, #32]	@ (8013398 <tcp_receive+0x888>)
 8013378:	68db      	ldr	r3, [r3, #12]
 801337a:	899b      	ldrh	r3, [r3, #12]
 801337c:	b29b      	uxth	r3, r3
 801337e:	4618      	mov	r0, r3
 8013380:	f7fa fb80 	bl	800da84 <lwip_htons>
 8013384:	4603      	mov	r3, r0
 8013386:	b2db      	uxtb	r3, r3
 8013388:	f003 0303 	and.w	r3, r3, #3
 801338c:	2b00      	cmp	r3, #0
 801338e:	d00d      	beq.n	80133ac <tcp_receive+0x89c>
 8013390:	2301      	movs	r3, #1
 8013392:	e00c      	b.n	80133ae <tcp_receive+0x89e>
 8013394:	2000d118 	.word	0x2000d118
 8013398:	2000d0f8 	.word	0x2000d0f8
 801339c:	2000d122 	.word	0x2000d122
 80133a0:	0801fd48 	.word	0x0801fd48
 80133a4:	080200f0 	.word	0x080200f0
 80133a8:	0801fd94 	.word	0x0801fd94
 80133ac:	2300      	movs	r3, #0
 80133ae:	4423      	add	r3, r4
 80133b0:	b29a      	uxth	r2, r3
 80133b2:	4b98      	ldr	r3, [pc, #608]	@ (8013614 <tcp_receive+0xb04>)
 80133b4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80133b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133b8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80133ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80133c0:	6938      	ldr	r0, [r7, #16]
 80133c2:	f7fd fc6a 	bl	8010c9a <tcp_seg_free>
            while (next &&
 80133c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d00e      	beq.n	80133ea <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80133cc:	4b91      	ldr	r3, [pc, #580]	@ (8013614 <tcp_receive+0xb04>)
 80133ce:	881b      	ldrh	r3, [r3, #0]
 80133d0:	461a      	mov	r2, r3
 80133d2:	4b91      	ldr	r3, [pc, #580]	@ (8013618 <tcp_receive+0xb08>)
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	441a      	add	r2, r3
 80133d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133da:	68db      	ldr	r3, [r3, #12]
 80133dc:	685b      	ldr	r3, [r3, #4]
 80133de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80133e0:	8909      	ldrh	r1, [r1, #8]
 80133e2:	440b      	add	r3, r1
 80133e4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	da9b      	bge.n	8013322 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80133ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d059      	beq.n	80134a4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80133f0:	4b88      	ldr	r3, [pc, #544]	@ (8013614 <tcp_receive+0xb04>)
 80133f2:	881b      	ldrh	r3, [r3, #0]
 80133f4:	461a      	mov	r2, r3
 80133f6:	4b88      	ldr	r3, [pc, #544]	@ (8013618 <tcp_receive+0xb08>)
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	441a      	add	r2, r3
 80133fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133fe:	68db      	ldr	r3, [r3, #12]
 8013400:	685b      	ldr	r3, [r3, #4]
 8013402:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013404:	2b00      	cmp	r3, #0
 8013406:	dd4d      	ble.n	80134a4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801340a:	68db      	ldr	r3, [r3, #12]
 801340c:	685b      	ldr	r3, [r3, #4]
 801340e:	b29a      	uxth	r2, r3
 8013410:	4b81      	ldr	r3, [pc, #516]	@ (8013618 <tcp_receive+0xb08>)
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	b29b      	uxth	r3, r3
 8013416:	1ad3      	subs	r3, r2, r3
 8013418:	b29a      	uxth	r2, r3
 801341a:	4b80      	ldr	r3, [pc, #512]	@ (801361c <tcp_receive+0xb0c>)
 801341c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801341e:	4b7f      	ldr	r3, [pc, #508]	@ (801361c <tcp_receive+0xb0c>)
 8013420:	68db      	ldr	r3, [r3, #12]
 8013422:	899b      	ldrh	r3, [r3, #12]
 8013424:	b29b      	uxth	r3, r3
 8013426:	4618      	mov	r0, r3
 8013428:	f7fa fb2c 	bl	800da84 <lwip_htons>
 801342c:	4603      	mov	r3, r0
 801342e:	b2db      	uxtb	r3, r3
 8013430:	f003 0302 	and.w	r3, r3, #2
 8013434:	2b00      	cmp	r3, #0
 8013436:	d005      	beq.n	8013444 <tcp_receive+0x934>
                inseg.len -= 1;
 8013438:	4b78      	ldr	r3, [pc, #480]	@ (801361c <tcp_receive+0xb0c>)
 801343a:	891b      	ldrh	r3, [r3, #8]
 801343c:	3b01      	subs	r3, #1
 801343e:	b29a      	uxth	r2, r3
 8013440:	4b76      	ldr	r3, [pc, #472]	@ (801361c <tcp_receive+0xb0c>)
 8013442:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013444:	4b75      	ldr	r3, [pc, #468]	@ (801361c <tcp_receive+0xb0c>)
 8013446:	685b      	ldr	r3, [r3, #4]
 8013448:	4a74      	ldr	r2, [pc, #464]	@ (801361c <tcp_receive+0xb0c>)
 801344a:	8912      	ldrh	r2, [r2, #8]
 801344c:	4611      	mov	r1, r2
 801344e:	4618      	mov	r0, r3
 8013450:	f7fb fdbc 	bl	800efcc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013454:	4b71      	ldr	r3, [pc, #452]	@ (801361c <tcp_receive+0xb0c>)
 8013456:	891c      	ldrh	r4, [r3, #8]
 8013458:	4b70      	ldr	r3, [pc, #448]	@ (801361c <tcp_receive+0xb0c>)
 801345a:	68db      	ldr	r3, [r3, #12]
 801345c:	899b      	ldrh	r3, [r3, #12]
 801345e:	b29b      	uxth	r3, r3
 8013460:	4618      	mov	r0, r3
 8013462:	f7fa fb0f 	bl	800da84 <lwip_htons>
 8013466:	4603      	mov	r3, r0
 8013468:	b2db      	uxtb	r3, r3
 801346a:	f003 0303 	and.w	r3, r3, #3
 801346e:	2b00      	cmp	r3, #0
 8013470:	d001      	beq.n	8013476 <tcp_receive+0x966>
 8013472:	2301      	movs	r3, #1
 8013474:	e000      	b.n	8013478 <tcp_receive+0x968>
 8013476:	2300      	movs	r3, #0
 8013478:	4423      	add	r3, r4
 801347a:	b29a      	uxth	r2, r3
 801347c:	4b65      	ldr	r3, [pc, #404]	@ (8013614 <tcp_receive+0xb04>)
 801347e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013480:	4b64      	ldr	r3, [pc, #400]	@ (8013614 <tcp_receive+0xb04>)
 8013482:	881b      	ldrh	r3, [r3, #0]
 8013484:	461a      	mov	r2, r3
 8013486:	4b64      	ldr	r3, [pc, #400]	@ (8013618 <tcp_receive+0xb08>)
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	441a      	add	r2, r3
 801348c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801348e:	68db      	ldr	r3, [r3, #12]
 8013490:	685b      	ldr	r3, [r3, #4]
 8013492:	429a      	cmp	r2, r3
 8013494:	d006      	beq.n	80134a4 <tcp_receive+0x994>
 8013496:	4b62      	ldr	r3, [pc, #392]	@ (8013620 <tcp_receive+0xb10>)
 8013498:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801349c:	4961      	ldr	r1, [pc, #388]	@ (8013624 <tcp_receive+0xb14>)
 801349e:	4862      	ldr	r0, [pc, #392]	@ (8013628 <tcp_receive+0xb18>)
 80134a0:	f006 ff9e 	bl	801a3e0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80134a8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80134aa:	4b5a      	ldr	r3, [pc, #360]	@ (8013614 <tcp_receive+0xb04>)
 80134ac:	881b      	ldrh	r3, [r3, #0]
 80134ae:	461a      	mov	r2, r3
 80134b0:	4b59      	ldr	r3, [pc, #356]	@ (8013618 <tcp_receive+0xb08>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	441a      	add	r2, r3
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80134be:	4b55      	ldr	r3, [pc, #340]	@ (8013614 <tcp_receive+0xb04>)
 80134c0:	881b      	ldrh	r3, [r3, #0]
 80134c2:	429a      	cmp	r2, r3
 80134c4:	d206      	bcs.n	80134d4 <tcp_receive+0x9c4>
 80134c6:	4b56      	ldr	r3, [pc, #344]	@ (8013620 <tcp_receive+0xb10>)
 80134c8:	f240 6207 	movw	r2, #1543	@ 0x607
 80134cc:	4957      	ldr	r1, [pc, #348]	@ (801362c <tcp_receive+0xb1c>)
 80134ce:	4856      	ldr	r0, [pc, #344]	@ (8013628 <tcp_receive+0xb18>)
 80134d0:	f006 ff86 	bl	801a3e0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80134d8:	4b4e      	ldr	r3, [pc, #312]	@ (8013614 <tcp_receive+0xb04>)
 80134da:	881b      	ldrh	r3, [r3, #0]
 80134dc:	1ad3      	subs	r3, r2, r3
 80134de:	b29a      	uxth	r2, r3
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80134e4:	6878      	ldr	r0, [r7, #4]
 80134e6:	f7fc feb1 	bl	801024c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80134ea:	4b4c      	ldr	r3, [pc, #304]	@ (801361c <tcp_receive+0xb0c>)
 80134ec:	685b      	ldr	r3, [r3, #4]
 80134ee:	891b      	ldrh	r3, [r3, #8]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d006      	beq.n	8013502 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80134f4:	4b49      	ldr	r3, [pc, #292]	@ (801361c <tcp_receive+0xb0c>)
 80134f6:	685b      	ldr	r3, [r3, #4]
 80134f8:	4a4d      	ldr	r2, [pc, #308]	@ (8013630 <tcp_receive+0xb20>)
 80134fa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80134fc:	4b47      	ldr	r3, [pc, #284]	@ (801361c <tcp_receive+0xb0c>)
 80134fe:	2200      	movs	r2, #0
 8013500:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013502:	4b46      	ldr	r3, [pc, #280]	@ (801361c <tcp_receive+0xb0c>)
 8013504:	68db      	ldr	r3, [r3, #12]
 8013506:	899b      	ldrh	r3, [r3, #12]
 8013508:	b29b      	uxth	r3, r3
 801350a:	4618      	mov	r0, r3
 801350c:	f7fa faba 	bl	800da84 <lwip_htons>
 8013510:	4603      	mov	r3, r0
 8013512:	b2db      	uxtb	r3, r3
 8013514:	f003 0301 	and.w	r3, r3, #1
 8013518:	2b00      	cmp	r3, #0
 801351a:	f000 80b8 	beq.w	801368e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801351e:	4b45      	ldr	r3, [pc, #276]	@ (8013634 <tcp_receive+0xb24>)
 8013520:	781b      	ldrb	r3, [r3, #0]
 8013522:	f043 0320 	orr.w	r3, r3, #32
 8013526:	b2da      	uxtb	r2, r3
 8013528:	4b42      	ldr	r3, [pc, #264]	@ (8013634 <tcp_receive+0xb24>)
 801352a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801352c:	e0af      	b.n	801368e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013532:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013538:	68db      	ldr	r3, [r3, #12]
 801353a:	685b      	ldr	r3, [r3, #4]
 801353c:	4a36      	ldr	r2, [pc, #216]	@ (8013618 <tcp_receive+0xb08>)
 801353e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013540:	68bb      	ldr	r3, [r7, #8]
 8013542:	891b      	ldrh	r3, [r3, #8]
 8013544:	461c      	mov	r4, r3
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	68db      	ldr	r3, [r3, #12]
 801354a:	899b      	ldrh	r3, [r3, #12]
 801354c:	b29b      	uxth	r3, r3
 801354e:	4618      	mov	r0, r3
 8013550:	f7fa fa98 	bl	800da84 <lwip_htons>
 8013554:	4603      	mov	r3, r0
 8013556:	b2db      	uxtb	r3, r3
 8013558:	f003 0303 	and.w	r3, r3, #3
 801355c:	2b00      	cmp	r3, #0
 801355e:	d001      	beq.n	8013564 <tcp_receive+0xa54>
 8013560:	2301      	movs	r3, #1
 8013562:	e000      	b.n	8013566 <tcp_receive+0xa56>
 8013564:	2300      	movs	r3, #0
 8013566:	191a      	adds	r2, r3, r4
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801356c:	441a      	add	r2, r3
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013576:	461c      	mov	r4, r3
 8013578:	68bb      	ldr	r3, [r7, #8]
 801357a:	891b      	ldrh	r3, [r3, #8]
 801357c:	461d      	mov	r5, r3
 801357e:	68bb      	ldr	r3, [r7, #8]
 8013580:	68db      	ldr	r3, [r3, #12]
 8013582:	899b      	ldrh	r3, [r3, #12]
 8013584:	b29b      	uxth	r3, r3
 8013586:	4618      	mov	r0, r3
 8013588:	f7fa fa7c 	bl	800da84 <lwip_htons>
 801358c:	4603      	mov	r3, r0
 801358e:	b2db      	uxtb	r3, r3
 8013590:	f003 0303 	and.w	r3, r3, #3
 8013594:	2b00      	cmp	r3, #0
 8013596:	d001      	beq.n	801359c <tcp_receive+0xa8c>
 8013598:	2301      	movs	r3, #1
 801359a:	e000      	b.n	801359e <tcp_receive+0xa8e>
 801359c:	2300      	movs	r3, #0
 801359e:	442b      	add	r3, r5
 80135a0:	429c      	cmp	r4, r3
 80135a2:	d206      	bcs.n	80135b2 <tcp_receive+0xaa2>
 80135a4:	4b1e      	ldr	r3, [pc, #120]	@ (8013620 <tcp_receive+0xb10>)
 80135a6:	f240 622b 	movw	r2, #1579	@ 0x62b
 80135aa:	4923      	ldr	r1, [pc, #140]	@ (8013638 <tcp_receive+0xb28>)
 80135ac:	481e      	ldr	r0, [pc, #120]	@ (8013628 <tcp_receive+0xb18>)
 80135ae:	f006 ff17 	bl	801a3e0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80135b2:	68bb      	ldr	r3, [r7, #8]
 80135b4:	891b      	ldrh	r3, [r3, #8]
 80135b6:	461c      	mov	r4, r3
 80135b8:	68bb      	ldr	r3, [r7, #8]
 80135ba:	68db      	ldr	r3, [r3, #12]
 80135bc:	899b      	ldrh	r3, [r3, #12]
 80135be:	b29b      	uxth	r3, r3
 80135c0:	4618      	mov	r0, r3
 80135c2:	f7fa fa5f 	bl	800da84 <lwip_htons>
 80135c6:	4603      	mov	r3, r0
 80135c8:	b2db      	uxtb	r3, r3
 80135ca:	f003 0303 	and.w	r3, r3, #3
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d001      	beq.n	80135d6 <tcp_receive+0xac6>
 80135d2:	2301      	movs	r3, #1
 80135d4:	e000      	b.n	80135d8 <tcp_receive+0xac8>
 80135d6:	2300      	movs	r3, #0
 80135d8:	1919      	adds	r1, r3, r4
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80135de:	b28b      	uxth	r3, r1
 80135e0:	1ad3      	subs	r3, r2, r3
 80135e2:	b29a      	uxth	r2, r3
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80135e8:	6878      	ldr	r0, [r7, #4]
 80135ea:	f7fc fe2f 	bl	801024c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	685b      	ldr	r3, [r3, #4]
 80135f2:	891b      	ldrh	r3, [r3, #8]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d028      	beq.n	801364a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80135f8:	4b0d      	ldr	r3, [pc, #52]	@ (8013630 <tcp_receive+0xb20>)
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d01d      	beq.n	801363c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8013600:	4b0b      	ldr	r3, [pc, #44]	@ (8013630 <tcp_receive+0xb20>)
 8013602:	681a      	ldr	r2, [r3, #0]
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	685b      	ldr	r3, [r3, #4]
 8013608:	4619      	mov	r1, r3
 801360a:	4610      	mov	r0, r2
 801360c:	f7fb ff64 	bl	800f4d8 <pbuf_cat>
 8013610:	e018      	b.n	8013644 <tcp_receive+0xb34>
 8013612:	bf00      	nop
 8013614:	2000d122 	.word	0x2000d122
 8013618:	2000d118 	.word	0x2000d118
 801361c:	2000d0f8 	.word	0x2000d0f8
 8013620:	0801fd48 	.word	0x0801fd48
 8013624:	08020128 	.word	0x08020128
 8013628:	0801fd94 	.word	0x0801fd94
 801362c:	08020164 	.word	0x08020164
 8013630:	2000d128 	.word	0x2000d128
 8013634:	2000d125 	.word	0x2000d125
 8013638:	08020184 	.word	0x08020184
            } else {
              recv_data = cseg->p;
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	685b      	ldr	r3, [r3, #4]
 8013640:	4a70      	ldr	r2, [pc, #448]	@ (8013804 <tcp_receive+0xcf4>)
 8013642:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013644:	68bb      	ldr	r3, [r7, #8]
 8013646:	2200      	movs	r2, #0
 8013648:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801364a:	68bb      	ldr	r3, [r7, #8]
 801364c:	68db      	ldr	r3, [r3, #12]
 801364e:	899b      	ldrh	r3, [r3, #12]
 8013650:	b29b      	uxth	r3, r3
 8013652:	4618      	mov	r0, r3
 8013654:	f7fa fa16 	bl	800da84 <lwip_htons>
 8013658:	4603      	mov	r3, r0
 801365a:	b2db      	uxtb	r3, r3
 801365c:	f003 0301 	and.w	r3, r3, #1
 8013660:	2b00      	cmp	r3, #0
 8013662:	d00d      	beq.n	8013680 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013664:	4b68      	ldr	r3, [pc, #416]	@ (8013808 <tcp_receive+0xcf8>)
 8013666:	781b      	ldrb	r3, [r3, #0]
 8013668:	f043 0320 	orr.w	r3, r3, #32
 801366c:	b2da      	uxtb	r2, r3
 801366e:	4b66      	ldr	r3, [pc, #408]	@ (8013808 <tcp_receive+0xcf8>)
 8013670:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	7d1b      	ldrb	r3, [r3, #20]
 8013676:	2b04      	cmp	r3, #4
 8013678:	d102      	bne.n	8013680 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	2207      	movs	r2, #7
 801367e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013680:	68bb      	ldr	r3, [r7, #8]
 8013682:	681a      	ldr	r2, [r3, #0]
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8013688:	68b8      	ldr	r0, [r7, #8]
 801368a:	f7fd fb06 	bl	8010c9a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013692:	2b00      	cmp	r3, #0
 8013694:	d008      	beq.n	80136a8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801369a:	68db      	ldr	r3, [r3, #12]
 801369c:	685a      	ldr	r2, [r3, #4]
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80136a2:	429a      	cmp	r2, r3
 80136a4:	f43f af43 	beq.w	801352e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	8b5b      	ldrh	r3, [r3, #26]
 80136ac:	f003 0301 	and.w	r3, r3, #1
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d00e      	beq.n	80136d2 <tcp_receive+0xbc2>
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	8b5b      	ldrh	r3, [r3, #26]
 80136b8:	f023 0301 	bic.w	r3, r3, #1
 80136bc:	b29a      	uxth	r2, r3
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	835a      	strh	r2, [r3, #26]
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	8b5b      	ldrh	r3, [r3, #26]
 80136c6:	f043 0302 	orr.w	r3, r3, #2
 80136ca:	b29a      	uxth	r2, r3
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80136d0:	e187      	b.n	80139e2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	8b5b      	ldrh	r3, [r3, #26]
 80136d6:	f043 0301 	orr.w	r3, r3, #1
 80136da:	b29a      	uxth	r2, r3
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80136e0:	e17f      	b.n	80139e2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d106      	bne.n	80136f8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80136ea:	4848      	ldr	r0, [pc, #288]	@ (801380c <tcp_receive+0xcfc>)
 80136ec:	f7fd faee 	bl	8010ccc <tcp_seg_copy>
 80136f0:	4602      	mov	r2, r0
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	675a      	str	r2, [r3, #116]	@ 0x74
 80136f6:	e16c      	b.n	80139d2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80136f8:	2300      	movs	r3, #0
 80136fa:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013700:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013702:	e156      	b.n	80139b2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8013704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013706:	68db      	ldr	r3, [r3, #12]
 8013708:	685a      	ldr	r2, [r3, #4]
 801370a:	4b41      	ldr	r3, [pc, #260]	@ (8013810 <tcp_receive+0xd00>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	429a      	cmp	r2, r3
 8013710:	d11d      	bne.n	801374e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013712:	4b3e      	ldr	r3, [pc, #248]	@ (801380c <tcp_receive+0xcfc>)
 8013714:	891a      	ldrh	r2, [r3, #8]
 8013716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013718:	891b      	ldrh	r3, [r3, #8]
 801371a:	429a      	cmp	r2, r3
 801371c:	f240 814e 	bls.w	80139bc <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013720:	483a      	ldr	r0, [pc, #232]	@ (801380c <tcp_receive+0xcfc>)
 8013722:	f7fd fad3 	bl	8010ccc <tcp_seg_copy>
 8013726:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013728:	697b      	ldr	r3, [r7, #20]
 801372a:	2b00      	cmp	r3, #0
 801372c:	f000 8148 	beq.w	80139c0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8013730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013732:	2b00      	cmp	r3, #0
 8013734:	d003      	beq.n	801373e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8013736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013738:	697a      	ldr	r2, [r7, #20]
 801373a:	601a      	str	r2, [r3, #0]
 801373c:	e002      	b.n	8013744 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	697a      	ldr	r2, [r7, #20]
 8013742:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013744:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013746:	6978      	ldr	r0, [r7, #20]
 8013748:	f7ff f8de 	bl	8012908 <tcp_oos_insert_segment>
                }
                break;
 801374c:	e138      	b.n	80139c0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801374e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013750:	2b00      	cmp	r3, #0
 8013752:	d117      	bne.n	8013784 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013754:	4b2e      	ldr	r3, [pc, #184]	@ (8013810 <tcp_receive+0xd00>)
 8013756:	681a      	ldr	r2, [r3, #0]
 8013758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801375a:	68db      	ldr	r3, [r3, #12]
 801375c:	685b      	ldr	r3, [r3, #4]
 801375e:	1ad3      	subs	r3, r2, r3
 8013760:	2b00      	cmp	r3, #0
 8013762:	da57      	bge.n	8013814 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013764:	4829      	ldr	r0, [pc, #164]	@ (801380c <tcp_receive+0xcfc>)
 8013766:	f7fd fab1 	bl	8010ccc <tcp_seg_copy>
 801376a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801376c:	69bb      	ldr	r3, [r7, #24]
 801376e:	2b00      	cmp	r3, #0
 8013770:	f000 8128 	beq.w	80139c4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	69ba      	ldr	r2, [r7, #24]
 8013778:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801377a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801377c:	69b8      	ldr	r0, [r7, #24]
 801377e:	f7ff f8c3 	bl	8012908 <tcp_oos_insert_segment>
                  }
                  break;
 8013782:	e11f      	b.n	80139c4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013784:	4b22      	ldr	r3, [pc, #136]	@ (8013810 <tcp_receive+0xd00>)
 8013786:	681a      	ldr	r2, [r3, #0]
 8013788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801378a:	68db      	ldr	r3, [r3, #12]
 801378c:	685b      	ldr	r3, [r3, #4]
 801378e:	1ad3      	subs	r3, r2, r3
 8013790:	3b01      	subs	r3, #1
 8013792:	2b00      	cmp	r3, #0
 8013794:	db3e      	blt.n	8013814 <tcp_receive+0xd04>
 8013796:	4b1e      	ldr	r3, [pc, #120]	@ (8013810 <tcp_receive+0xd00>)
 8013798:	681a      	ldr	r2, [r3, #0]
 801379a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801379c:	68db      	ldr	r3, [r3, #12]
 801379e:	685b      	ldr	r3, [r3, #4]
 80137a0:	1ad3      	subs	r3, r2, r3
 80137a2:	3301      	adds	r3, #1
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	dc35      	bgt.n	8013814 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80137a8:	4818      	ldr	r0, [pc, #96]	@ (801380c <tcp_receive+0xcfc>)
 80137aa:	f7fd fa8f 	bl	8010ccc <tcp_seg_copy>
 80137ae:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80137b0:	69fb      	ldr	r3, [r7, #28]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	f000 8108 	beq.w	80139c8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80137b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137ba:	68db      	ldr	r3, [r3, #12]
 80137bc:	685b      	ldr	r3, [r3, #4]
 80137be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80137c0:	8912      	ldrh	r2, [r2, #8]
 80137c2:	441a      	add	r2, r3
 80137c4:	4b12      	ldr	r3, [pc, #72]	@ (8013810 <tcp_receive+0xd00>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	1ad3      	subs	r3, r2, r3
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	dd12      	ble.n	80137f4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80137ce:	4b10      	ldr	r3, [pc, #64]	@ (8013810 <tcp_receive+0xd00>)
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	b29a      	uxth	r2, r3
 80137d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137d6:	68db      	ldr	r3, [r3, #12]
 80137d8:	685b      	ldr	r3, [r3, #4]
 80137da:	b29b      	uxth	r3, r3
 80137dc:	1ad3      	subs	r3, r2, r3
 80137de:	b29a      	uxth	r2, r3
 80137e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137e2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80137e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137e6:	685a      	ldr	r2, [r3, #4]
 80137e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137ea:	891b      	ldrh	r3, [r3, #8]
 80137ec:	4619      	mov	r1, r3
 80137ee:	4610      	mov	r0, r2
 80137f0:	f7fb fbec 	bl	800efcc <pbuf_realloc>
                    }
                    prev->next = cseg;
 80137f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137f6:	69fa      	ldr	r2, [r7, #28]
 80137f8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80137fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80137fc:	69f8      	ldr	r0, [r7, #28]
 80137fe:	f7ff f883 	bl	8012908 <tcp_oos_insert_segment>
                  }
                  break;
 8013802:	e0e1      	b.n	80139c8 <tcp_receive+0xeb8>
 8013804:	2000d128 	.word	0x2000d128
 8013808:	2000d125 	.word	0x2000d125
 801380c:	2000d0f8 	.word	0x2000d0f8
 8013810:	2000d118 	.word	0x2000d118
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013816:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	2b00      	cmp	r3, #0
 801381e:	f040 80c5 	bne.w	80139ac <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013822:	4b7f      	ldr	r3, [pc, #508]	@ (8013a20 <tcp_receive+0xf10>)
 8013824:	681a      	ldr	r2, [r3, #0]
 8013826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013828:	68db      	ldr	r3, [r3, #12]
 801382a:	685b      	ldr	r3, [r3, #4]
 801382c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801382e:	2b00      	cmp	r3, #0
 8013830:	f340 80bc 	ble.w	80139ac <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013836:	68db      	ldr	r3, [r3, #12]
 8013838:	899b      	ldrh	r3, [r3, #12]
 801383a:	b29b      	uxth	r3, r3
 801383c:	4618      	mov	r0, r3
 801383e:	f7fa f921 	bl	800da84 <lwip_htons>
 8013842:	4603      	mov	r3, r0
 8013844:	b2db      	uxtb	r3, r3
 8013846:	f003 0301 	and.w	r3, r3, #1
 801384a:	2b00      	cmp	r3, #0
 801384c:	f040 80be 	bne.w	80139cc <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013850:	4874      	ldr	r0, [pc, #464]	@ (8013a24 <tcp_receive+0xf14>)
 8013852:	f7fd fa3b 	bl	8010ccc <tcp_seg_copy>
 8013856:	4602      	mov	r2, r0
 8013858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801385a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801385c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	2b00      	cmp	r3, #0
 8013862:	f000 80b5 	beq.w	80139d0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013868:	68db      	ldr	r3, [r3, #12]
 801386a:	685b      	ldr	r3, [r3, #4]
 801386c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801386e:	8912      	ldrh	r2, [r2, #8]
 8013870:	441a      	add	r2, r3
 8013872:	4b6b      	ldr	r3, [pc, #428]	@ (8013a20 <tcp_receive+0xf10>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	1ad3      	subs	r3, r2, r3
 8013878:	2b00      	cmp	r3, #0
 801387a:	dd12      	ble.n	80138a2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801387c:	4b68      	ldr	r3, [pc, #416]	@ (8013a20 <tcp_receive+0xf10>)
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	b29a      	uxth	r2, r3
 8013882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013884:	68db      	ldr	r3, [r3, #12]
 8013886:	685b      	ldr	r3, [r3, #4]
 8013888:	b29b      	uxth	r3, r3
 801388a:	1ad3      	subs	r3, r2, r3
 801388c:	b29a      	uxth	r2, r3
 801388e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013890:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013894:	685a      	ldr	r2, [r3, #4]
 8013896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013898:	891b      	ldrh	r3, [r3, #8]
 801389a:	4619      	mov	r1, r3
 801389c:	4610      	mov	r0, r2
 801389e:	f7fb fb95 	bl	800efcc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80138a2:	4b61      	ldr	r3, [pc, #388]	@ (8013a28 <tcp_receive+0xf18>)
 80138a4:	881b      	ldrh	r3, [r3, #0]
 80138a6:	461a      	mov	r2, r3
 80138a8:	4b5d      	ldr	r3, [pc, #372]	@ (8013a20 <tcp_receive+0xf10>)
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	441a      	add	r2, r3
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138b2:	6879      	ldr	r1, [r7, #4]
 80138b4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80138b6:	440b      	add	r3, r1
 80138b8:	1ad3      	subs	r3, r2, r3
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	f340 8088 	ble.w	80139d0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80138c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	68db      	ldr	r3, [r3, #12]
 80138c6:	899b      	ldrh	r3, [r3, #12]
 80138c8:	b29b      	uxth	r3, r3
 80138ca:	4618      	mov	r0, r3
 80138cc:	f7fa f8da 	bl	800da84 <lwip_htons>
 80138d0:	4603      	mov	r3, r0
 80138d2:	b2db      	uxtb	r3, r3
 80138d4:	f003 0301 	and.w	r3, r3, #1
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d021      	beq.n	8013920 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80138dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	68db      	ldr	r3, [r3, #12]
 80138e2:	899b      	ldrh	r3, [r3, #12]
 80138e4:	b29b      	uxth	r3, r3
 80138e6:	b21b      	sxth	r3, r3
 80138e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80138ec:	b21c      	sxth	r4, r3
 80138ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	68db      	ldr	r3, [r3, #12]
 80138f4:	899b      	ldrh	r3, [r3, #12]
 80138f6:	b29b      	uxth	r3, r3
 80138f8:	4618      	mov	r0, r3
 80138fa:	f7fa f8c3 	bl	800da84 <lwip_htons>
 80138fe:	4603      	mov	r3, r0
 8013900:	b2db      	uxtb	r3, r3
 8013902:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8013906:	b29b      	uxth	r3, r3
 8013908:	4618      	mov	r0, r3
 801390a:	f7fa f8bb 	bl	800da84 <lwip_htons>
 801390e:	4603      	mov	r3, r0
 8013910:	b21b      	sxth	r3, r3
 8013912:	4323      	orrs	r3, r4
 8013914:	b21a      	sxth	r2, r3
 8013916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	68db      	ldr	r3, [r3, #12]
 801391c:	b292      	uxth	r2, r2
 801391e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013924:	b29a      	uxth	r2, r3
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801392a:	4413      	add	r3, r2
 801392c:	b299      	uxth	r1, r3
 801392e:	4b3c      	ldr	r3, [pc, #240]	@ (8013a20 <tcp_receive+0xf10>)
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	b29a      	uxth	r2, r3
 8013934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	1a8a      	subs	r2, r1, r2
 801393a:	b292      	uxth	r2, r2
 801393c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801393e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	685a      	ldr	r2, [r3, #4]
 8013944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	891b      	ldrh	r3, [r3, #8]
 801394a:	4619      	mov	r1, r3
 801394c:	4610      	mov	r0, r2
 801394e:	f7fb fb3d 	bl	800efcc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	891c      	ldrh	r4, [r3, #8]
 8013958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	68db      	ldr	r3, [r3, #12]
 801395e:	899b      	ldrh	r3, [r3, #12]
 8013960:	b29b      	uxth	r3, r3
 8013962:	4618      	mov	r0, r3
 8013964:	f7fa f88e 	bl	800da84 <lwip_htons>
 8013968:	4603      	mov	r3, r0
 801396a:	b2db      	uxtb	r3, r3
 801396c:	f003 0303 	and.w	r3, r3, #3
 8013970:	2b00      	cmp	r3, #0
 8013972:	d001      	beq.n	8013978 <tcp_receive+0xe68>
 8013974:	2301      	movs	r3, #1
 8013976:	e000      	b.n	801397a <tcp_receive+0xe6a>
 8013978:	2300      	movs	r3, #0
 801397a:	4423      	add	r3, r4
 801397c:	b29a      	uxth	r2, r3
 801397e:	4b2a      	ldr	r3, [pc, #168]	@ (8013a28 <tcp_receive+0xf18>)
 8013980:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013982:	4b29      	ldr	r3, [pc, #164]	@ (8013a28 <tcp_receive+0xf18>)
 8013984:	881b      	ldrh	r3, [r3, #0]
 8013986:	461a      	mov	r2, r3
 8013988:	4b25      	ldr	r3, [pc, #148]	@ (8013a20 <tcp_receive+0xf10>)
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	441a      	add	r2, r3
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013992:	6879      	ldr	r1, [r7, #4]
 8013994:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013996:	440b      	add	r3, r1
 8013998:	429a      	cmp	r2, r3
 801399a:	d019      	beq.n	80139d0 <tcp_receive+0xec0>
 801399c:	4b23      	ldr	r3, [pc, #140]	@ (8013a2c <tcp_receive+0xf1c>)
 801399e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80139a2:	4923      	ldr	r1, [pc, #140]	@ (8013a30 <tcp_receive+0xf20>)
 80139a4:	4823      	ldr	r0, [pc, #140]	@ (8013a34 <tcp_receive+0xf24>)
 80139a6:	f006 fd1b 	bl	801a3e0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80139aa:	e011      	b.n	80139d0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80139ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80139b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	f47f aea5 	bne.w	8013704 <tcp_receive+0xbf4>
 80139ba:	e00a      	b.n	80139d2 <tcp_receive+0xec2>
                break;
 80139bc:	bf00      	nop
 80139be:	e008      	b.n	80139d2 <tcp_receive+0xec2>
                break;
 80139c0:	bf00      	nop
 80139c2:	e006      	b.n	80139d2 <tcp_receive+0xec2>
                  break;
 80139c4:	bf00      	nop
 80139c6:	e004      	b.n	80139d2 <tcp_receive+0xec2>
                  break;
 80139c8:	bf00      	nop
 80139ca:	e002      	b.n	80139d2 <tcp_receive+0xec2>
                  break;
 80139cc:	bf00      	nop
 80139ce:	e000      	b.n	80139d2 <tcp_receive+0xec2>
                break;
 80139d0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80139d2:	6878      	ldr	r0, [r7, #4]
 80139d4:	f001 fe88 	bl	80156e8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80139d8:	e003      	b.n	80139e2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80139da:	6878      	ldr	r0, [r7, #4]
 80139dc:	f001 fe84 	bl	80156e8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80139e0:	e01a      	b.n	8013a18 <tcp_receive+0xf08>
 80139e2:	e019      	b.n	8013a18 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80139e4:	4b0e      	ldr	r3, [pc, #56]	@ (8013a20 <tcp_receive+0xf10>)
 80139e6:	681a      	ldr	r2, [r3, #0]
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139ec:	1ad3      	subs	r3, r2, r3
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	db0a      	blt.n	8013a08 <tcp_receive+0xef8>
 80139f2:	4b0b      	ldr	r3, [pc, #44]	@ (8013a20 <tcp_receive+0xf10>)
 80139f4:	681a      	ldr	r2, [r3, #0]
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139fa:	6879      	ldr	r1, [r7, #4]
 80139fc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80139fe:	440b      	add	r3, r1
 8013a00:	1ad3      	subs	r3, r2, r3
 8013a02:	3301      	adds	r3, #1
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	dd07      	ble.n	8013a18 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	8b5b      	ldrh	r3, [r3, #26]
 8013a0c:	f043 0302 	orr.w	r3, r3, #2
 8013a10:	b29a      	uxth	r2, r3
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013a16:	e7ff      	b.n	8013a18 <tcp_receive+0xf08>
 8013a18:	bf00      	nop
 8013a1a:	3750      	adds	r7, #80	@ 0x50
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8013a20:	2000d118 	.word	0x2000d118
 8013a24:	2000d0f8 	.word	0x2000d0f8
 8013a28:	2000d122 	.word	0x2000d122
 8013a2c:	0801fd48 	.word	0x0801fd48
 8013a30:	080200f0 	.word	0x080200f0
 8013a34:	0801fd94 	.word	0x0801fd94

08013a38 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013a38:	b480      	push	{r7}
 8013a3a:	b083      	sub	sp, #12
 8013a3c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8013a3e:	4b15      	ldr	r3, [pc, #84]	@ (8013a94 <tcp_get_next_optbyte+0x5c>)
 8013a40:	881b      	ldrh	r3, [r3, #0]
 8013a42:	1c5a      	adds	r2, r3, #1
 8013a44:	b291      	uxth	r1, r2
 8013a46:	4a13      	ldr	r2, [pc, #76]	@ (8013a94 <tcp_get_next_optbyte+0x5c>)
 8013a48:	8011      	strh	r1, [r2, #0]
 8013a4a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013a4c:	4b12      	ldr	r3, [pc, #72]	@ (8013a98 <tcp_get_next_optbyte+0x60>)
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d004      	beq.n	8013a5e <tcp_get_next_optbyte+0x26>
 8013a54:	4b11      	ldr	r3, [pc, #68]	@ (8013a9c <tcp_get_next_optbyte+0x64>)
 8013a56:	881b      	ldrh	r3, [r3, #0]
 8013a58:	88fa      	ldrh	r2, [r7, #6]
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	d208      	bcs.n	8013a70 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8013a5e:	4b10      	ldr	r3, [pc, #64]	@ (8013aa0 <tcp_get_next_optbyte+0x68>)
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	3314      	adds	r3, #20
 8013a64:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013a66:	88fb      	ldrh	r3, [r7, #6]
 8013a68:	683a      	ldr	r2, [r7, #0]
 8013a6a:	4413      	add	r3, r2
 8013a6c:	781b      	ldrb	r3, [r3, #0]
 8013a6e:	e00b      	b.n	8013a88 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013a70:	88fb      	ldrh	r3, [r7, #6]
 8013a72:	b2da      	uxtb	r2, r3
 8013a74:	4b09      	ldr	r3, [pc, #36]	@ (8013a9c <tcp_get_next_optbyte+0x64>)
 8013a76:	881b      	ldrh	r3, [r3, #0]
 8013a78:	b2db      	uxtb	r3, r3
 8013a7a:	1ad3      	subs	r3, r2, r3
 8013a7c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8013a7e:	4b06      	ldr	r3, [pc, #24]	@ (8013a98 <tcp_get_next_optbyte+0x60>)
 8013a80:	681a      	ldr	r2, [r3, #0]
 8013a82:	797b      	ldrb	r3, [r7, #5]
 8013a84:	4413      	add	r3, r2
 8013a86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	370c      	adds	r7, #12
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a92:	4770      	bx	lr
 8013a94:	2000d114 	.word	0x2000d114
 8013a98:	2000d110 	.word	0x2000d110
 8013a9c:	2000d10e 	.word	0x2000d10e
 8013aa0:	2000d108 	.word	0x2000d108

08013aa4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b084      	sub	sp, #16
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d106      	bne.n	8013ac0 <tcp_parseopt+0x1c>
 8013ab2:	4b32      	ldr	r3, [pc, #200]	@ (8013b7c <tcp_parseopt+0xd8>)
 8013ab4:	f240 727d 	movw	r2, #1917	@ 0x77d
 8013ab8:	4931      	ldr	r1, [pc, #196]	@ (8013b80 <tcp_parseopt+0xdc>)
 8013aba:	4832      	ldr	r0, [pc, #200]	@ (8013b84 <tcp_parseopt+0xe0>)
 8013abc:	f006 fc90 	bl	801a3e0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013ac0:	4b31      	ldr	r3, [pc, #196]	@ (8013b88 <tcp_parseopt+0xe4>)
 8013ac2:	881b      	ldrh	r3, [r3, #0]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d056      	beq.n	8013b76 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013ac8:	4b30      	ldr	r3, [pc, #192]	@ (8013b8c <tcp_parseopt+0xe8>)
 8013aca:	2200      	movs	r2, #0
 8013acc:	801a      	strh	r2, [r3, #0]
 8013ace:	e046      	b.n	8013b5e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8013ad0:	f7ff ffb2 	bl	8013a38 <tcp_get_next_optbyte>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013ad8:	7bfb      	ldrb	r3, [r7, #15]
 8013ada:	2b02      	cmp	r3, #2
 8013adc:	d006      	beq.n	8013aec <tcp_parseopt+0x48>
 8013ade:	2b02      	cmp	r3, #2
 8013ae0:	dc2a      	bgt.n	8013b38 <tcp_parseopt+0x94>
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d042      	beq.n	8013b6c <tcp_parseopt+0xc8>
 8013ae6:	2b01      	cmp	r3, #1
 8013ae8:	d038      	beq.n	8013b5c <tcp_parseopt+0xb8>
 8013aea:	e025      	b.n	8013b38 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013aec:	f7ff ffa4 	bl	8013a38 <tcp_get_next_optbyte>
 8013af0:	4603      	mov	r3, r0
 8013af2:	2b04      	cmp	r3, #4
 8013af4:	d13c      	bne.n	8013b70 <tcp_parseopt+0xcc>
 8013af6:	4b25      	ldr	r3, [pc, #148]	@ (8013b8c <tcp_parseopt+0xe8>)
 8013af8:	881b      	ldrh	r3, [r3, #0]
 8013afa:	3301      	adds	r3, #1
 8013afc:	4a22      	ldr	r2, [pc, #136]	@ (8013b88 <tcp_parseopt+0xe4>)
 8013afe:	8812      	ldrh	r2, [r2, #0]
 8013b00:	4293      	cmp	r3, r2
 8013b02:	da35      	bge.n	8013b70 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013b04:	f7ff ff98 	bl	8013a38 <tcp_get_next_optbyte>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	021b      	lsls	r3, r3, #8
 8013b0c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013b0e:	f7ff ff93 	bl	8013a38 <tcp_get_next_optbyte>
 8013b12:	4603      	mov	r3, r0
 8013b14:	461a      	mov	r2, r3
 8013b16:	89bb      	ldrh	r3, [r7, #12]
 8013b18:	4313      	orrs	r3, r2
 8013b1a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013b1c:	89bb      	ldrh	r3, [r7, #12]
 8013b1e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8013b22:	d804      	bhi.n	8013b2e <tcp_parseopt+0x8a>
 8013b24:	89bb      	ldrh	r3, [r7, #12]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d001      	beq.n	8013b2e <tcp_parseopt+0x8a>
 8013b2a:	89ba      	ldrh	r2, [r7, #12]
 8013b2c:	e001      	b.n	8013b32 <tcp_parseopt+0x8e>
 8013b2e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8013b36:	e012      	b.n	8013b5e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013b38:	f7ff ff7e 	bl	8013a38 <tcp_get_next_optbyte>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8013b40:	7afb      	ldrb	r3, [r7, #11]
 8013b42:	2b01      	cmp	r3, #1
 8013b44:	d916      	bls.n	8013b74 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013b46:	7afb      	ldrb	r3, [r7, #11]
 8013b48:	b29a      	uxth	r2, r3
 8013b4a:	4b10      	ldr	r3, [pc, #64]	@ (8013b8c <tcp_parseopt+0xe8>)
 8013b4c:	881b      	ldrh	r3, [r3, #0]
 8013b4e:	4413      	add	r3, r2
 8013b50:	b29b      	uxth	r3, r3
 8013b52:	3b02      	subs	r3, #2
 8013b54:	b29a      	uxth	r2, r3
 8013b56:	4b0d      	ldr	r3, [pc, #52]	@ (8013b8c <tcp_parseopt+0xe8>)
 8013b58:	801a      	strh	r2, [r3, #0]
 8013b5a:	e000      	b.n	8013b5e <tcp_parseopt+0xba>
          break;
 8013b5c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8013b8c <tcp_parseopt+0xe8>)
 8013b60:	881a      	ldrh	r2, [r3, #0]
 8013b62:	4b09      	ldr	r3, [pc, #36]	@ (8013b88 <tcp_parseopt+0xe4>)
 8013b64:	881b      	ldrh	r3, [r3, #0]
 8013b66:	429a      	cmp	r2, r3
 8013b68:	d3b2      	bcc.n	8013ad0 <tcp_parseopt+0x2c>
 8013b6a:	e004      	b.n	8013b76 <tcp_parseopt+0xd2>
          return;
 8013b6c:	bf00      	nop
 8013b6e:	e002      	b.n	8013b76 <tcp_parseopt+0xd2>
            return;
 8013b70:	bf00      	nop
 8013b72:	e000      	b.n	8013b76 <tcp_parseopt+0xd2>
            return;
 8013b74:	bf00      	nop
      }
    }
  }
}
 8013b76:	3710      	adds	r7, #16
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	bd80      	pop	{r7, pc}
 8013b7c:	0801fd48 	.word	0x0801fd48
 8013b80:	080201ac 	.word	0x080201ac
 8013b84:	0801fd94 	.word	0x0801fd94
 8013b88:	2000d10c 	.word	0x2000d10c
 8013b8c:	2000d114 	.word	0x2000d114

08013b90 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013b90:	b480      	push	{r7}
 8013b92:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013b94:	4b05      	ldr	r3, [pc, #20]	@ (8013bac <tcp_trigger_input_pcb_close+0x1c>)
 8013b96:	781b      	ldrb	r3, [r3, #0]
 8013b98:	f043 0310 	orr.w	r3, r3, #16
 8013b9c:	b2da      	uxtb	r2, r3
 8013b9e:	4b03      	ldr	r3, [pc, #12]	@ (8013bac <tcp_trigger_input_pcb_close+0x1c>)
 8013ba0:	701a      	strb	r2, [r3, #0]
}
 8013ba2:	bf00      	nop
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013baa:	4770      	bx	lr
 8013bac:	2000d125 	.word	0x2000d125

08013bb0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b084      	sub	sp, #16
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	60f8      	str	r0, [r7, #12]
 8013bb8:	60b9      	str	r1, [r7, #8]
 8013bba:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d00a      	beq.n	8013bd8 <tcp_route+0x28>
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	7a1b      	ldrb	r3, [r3, #8]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d006      	beq.n	8013bd8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	7a1b      	ldrb	r3, [r3, #8]
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f7fa ffbc 	bl	800eb4c <netif_get_by_index>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	e003      	b.n	8013be0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f003 fe4d 	bl	8017878 <ip4_route>
 8013bde:	4603      	mov	r3, r0
  }
}
 8013be0:	4618      	mov	r0, r3
 8013be2:	3710      	adds	r7, #16
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bd80      	pop	{r7, pc}

08013be8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013be8:	b590      	push	{r4, r7, lr}
 8013bea:	b087      	sub	sp, #28
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	60f8      	str	r0, [r7, #12]
 8013bf0:	60b9      	str	r1, [r7, #8]
 8013bf2:	603b      	str	r3, [r7, #0]
 8013bf4:	4613      	mov	r3, r2
 8013bf6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d105      	bne.n	8013c0a <tcp_create_segment+0x22>
 8013bfe:	4b43      	ldr	r3, [pc, #268]	@ (8013d0c <tcp_create_segment+0x124>)
 8013c00:	22a3      	movs	r2, #163	@ 0xa3
 8013c02:	4943      	ldr	r1, [pc, #268]	@ (8013d10 <tcp_create_segment+0x128>)
 8013c04:	4843      	ldr	r0, [pc, #268]	@ (8013d14 <tcp_create_segment+0x12c>)
 8013c06:	f006 fbeb 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013c0a:	68bb      	ldr	r3, [r7, #8]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d105      	bne.n	8013c1c <tcp_create_segment+0x34>
 8013c10:	4b3e      	ldr	r3, [pc, #248]	@ (8013d0c <tcp_create_segment+0x124>)
 8013c12:	22a4      	movs	r2, #164	@ 0xa4
 8013c14:	4940      	ldr	r1, [pc, #256]	@ (8013d18 <tcp_create_segment+0x130>)
 8013c16:	483f      	ldr	r0, [pc, #252]	@ (8013d14 <tcp_create_segment+0x12c>)
 8013c18:	f006 fbe2 	bl	801a3e0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013c1c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013c20:	009b      	lsls	r3, r3, #2
 8013c22:	b2db      	uxtb	r3, r3
 8013c24:	f003 0304 	and.w	r3, r3, #4
 8013c28:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013c2a:	2003      	movs	r0, #3
 8013c2c:	f7fa fc02 	bl	800e434 <memp_malloc>
 8013c30:	6138      	str	r0, [r7, #16]
 8013c32:	693b      	ldr	r3, [r7, #16]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d104      	bne.n	8013c42 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013c38:	68b8      	ldr	r0, [r7, #8]
 8013c3a:	f7fb fb7f 	bl	800f33c <pbuf_free>
    return NULL;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	e060      	b.n	8013d04 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8013c42:	693b      	ldr	r3, [r7, #16]
 8013c44:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013c48:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013c4a:	693b      	ldr	r3, [r7, #16]
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013c50:	693b      	ldr	r3, [r7, #16]
 8013c52:	68ba      	ldr	r2, [r7, #8]
 8013c54:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013c56:	68bb      	ldr	r3, [r7, #8]
 8013c58:	891a      	ldrh	r2, [r3, #8]
 8013c5a:	7dfb      	ldrb	r3, [r7, #23]
 8013c5c:	b29b      	uxth	r3, r3
 8013c5e:	429a      	cmp	r2, r3
 8013c60:	d205      	bcs.n	8013c6e <tcp_create_segment+0x86>
 8013c62:	4b2a      	ldr	r3, [pc, #168]	@ (8013d0c <tcp_create_segment+0x124>)
 8013c64:	22b0      	movs	r2, #176	@ 0xb0
 8013c66:	492d      	ldr	r1, [pc, #180]	@ (8013d1c <tcp_create_segment+0x134>)
 8013c68:	482a      	ldr	r0, [pc, #168]	@ (8013d14 <tcp_create_segment+0x12c>)
 8013c6a:	f006 fbb9 	bl	801a3e0 <iprintf>
  seg->len = p->tot_len - optlen;
 8013c6e:	68bb      	ldr	r3, [r7, #8]
 8013c70:	891a      	ldrh	r2, [r3, #8]
 8013c72:	7dfb      	ldrb	r3, [r7, #23]
 8013c74:	b29b      	uxth	r3, r3
 8013c76:	1ad3      	subs	r3, r2, r3
 8013c78:	b29a      	uxth	r2, r3
 8013c7a:	693b      	ldr	r3, [r7, #16]
 8013c7c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013c7e:	2114      	movs	r1, #20
 8013c80:	68b8      	ldr	r0, [r7, #8]
 8013c82:	f7fb fa93 	bl	800f1ac <pbuf_add_header>
 8013c86:	4603      	mov	r3, r0
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d004      	beq.n	8013c96 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013c8c:	6938      	ldr	r0, [r7, #16]
 8013c8e:	f7fd f804 	bl	8010c9a <tcp_seg_free>
    return NULL;
 8013c92:	2300      	movs	r3, #0
 8013c94:	e036      	b.n	8013d04 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013c96:	693b      	ldr	r3, [r7, #16]
 8013c98:	685b      	ldr	r3, [r3, #4]
 8013c9a:	685a      	ldr	r2, [r3, #4]
 8013c9c:	693b      	ldr	r3, [r7, #16]
 8013c9e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	8ada      	ldrh	r2, [r3, #22]
 8013ca4:	693b      	ldr	r3, [r7, #16]
 8013ca6:	68dc      	ldr	r4, [r3, #12]
 8013ca8:	4610      	mov	r0, r2
 8013caa:	f7f9 feeb 	bl	800da84 <lwip_htons>
 8013cae:	4603      	mov	r3, r0
 8013cb0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	8b1a      	ldrh	r2, [r3, #24]
 8013cb6:	693b      	ldr	r3, [r7, #16]
 8013cb8:	68dc      	ldr	r4, [r3, #12]
 8013cba:	4610      	mov	r0, r2
 8013cbc:	f7f9 fee2 	bl	800da84 <lwip_htons>
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013cc4:	693b      	ldr	r3, [r7, #16]
 8013cc6:	68dc      	ldr	r4, [r3, #12]
 8013cc8:	6838      	ldr	r0, [r7, #0]
 8013cca:	f7f9 fef0 	bl	800daae <lwip_htonl>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013cd2:	7dfb      	ldrb	r3, [r7, #23]
 8013cd4:	089b      	lsrs	r3, r3, #2
 8013cd6:	b2db      	uxtb	r3, r3
 8013cd8:	3305      	adds	r3, #5
 8013cda:	b29b      	uxth	r3, r3
 8013cdc:	031b      	lsls	r3, r3, #12
 8013cde:	b29a      	uxth	r2, r3
 8013ce0:	79fb      	ldrb	r3, [r7, #7]
 8013ce2:	b29b      	uxth	r3, r3
 8013ce4:	4313      	orrs	r3, r2
 8013ce6:	b29a      	uxth	r2, r3
 8013ce8:	693b      	ldr	r3, [r7, #16]
 8013cea:	68dc      	ldr	r4, [r3, #12]
 8013cec:	4610      	mov	r0, r2
 8013cee:	f7f9 fec9 	bl	800da84 <lwip_htons>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013cf6:	693b      	ldr	r3, [r7, #16]
 8013cf8:	68db      	ldr	r3, [r3, #12]
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	749a      	strb	r2, [r3, #18]
 8013cfe:	2200      	movs	r2, #0
 8013d00:	74da      	strb	r2, [r3, #19]
  return seg;
 8013d02:	693b      	ldr	r3, [r7, #16]
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	371c      	adds	r7, #28
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd90      	pop	{r4, r7, pc}
 8013d0c:	080201c8 	.word	0x080201c8
 8013d10:	080201fc 	.word	0x080201fc
 8013d14:	0802021c 	.word	0x0802021c
 8013d18:	08020244 	.word	0x08020244
 8013d1c:	08020268 	.word	0x08020268

08013d20 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b086      	sub	sp, #24
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	607b      	str	r3, [r7, #4]
 8013d28:	4603      	mov	r3, r0
 8013d2a:	73fb      	strb	r3, [r7, #15]
 8013d2c:	460b      	mov	r3, r1
 8013d2e:	81bb      	strh	r3, [r7, #12]
 8013d30:	4613      	mov	r3, r2
 8013d32:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013d34:	89bb      	ldrh	r3, [r7, #12]
 8013d36:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d105      	bne.n	8013d4a <tcp_pbuf_prealloc+0x2a>
 8013d3e:	4b30      	ldr	r3, [pc, #192]	@ (8013e00 <tcp_pbuf_prealloc+0xe0>)
 8013d40:	22e8      	movs	r2, #232	@ 0xe8
 8013d42:	4930      	ldr	r1, [pc, #192]	@ (8013e04 <tcp_pbuf_prealloc+0xe4>)
 8013d44:	4830      	ldr	r0, [pc, #192]	@ (8013e08 <tcp_pbuf_prealloc+0xe8>)
 8013d46:	f006 fb4b 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8013d4a:	6a3b      	ldr	r3, [r7, #32]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d105      	bne.n	8013d5c <tcp_pbuf_prealloc+0x3c>
 8013d50:	4b2b      	ldr	r3, [pc, #172]	@ (8013e00 <tcp_pbuf_prealloc+0xe0>)
 8013d52:	22e9      	movs	r2, #233	@ 0xe9
 8013d54:	492d      	ldr	r1, [pc, #180]	@ (8013e0c <tcp_pbuf_prealloc+0xec>)
 8013d56:	482c      	ldr	r0, [pc, #176]	@ (8013e08 <tcp_pbuf_prealloc+0xe8>)
 8013d58:	f006 fb42 	bl	801a3e0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8013d5c:	89ba      	ldrh	r2, [r7, #12]
 8013d5e:	897b      	ldrh	r3, [r7, #10]
 8013d60:	429a      	cmp	r2, r3
 8013d62:	d221      	bcs.n	8013da8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013d64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013d68:	f003 0302 	and.w	r3, r3, #2
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d111      	bne.n	8013d94 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8013d70:	6a3b      	ldr	r3, [r7, #32]
 8013d72:	8b5b      	ldrh	r3, [r3, #26]
 8013d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d115      	bne.n	8013da8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8013d7c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d007      	beq.n	8013d94 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013d84:	6a3b      	ldr	r3, [r7, #32]
 8013d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d103      	bne.n	8013d94 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8013d8c:	6a3b      	ldr	r3, [r7, #32]
 8013d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d009      	beq.n	8013da8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013d94:	89bb      	ldrh	r3, [r7, #12]
 8013d96:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8013d9a:	f023 0203 	bic.w	r2, r3, #3
 8013d9e:	897b      	ldrh	r3, [r7, #10]
 8013da0:	4293      	cmp	r3, r2
 8013da2:	bf28      	it	cs
 8013da4:	4613      	movcs	r3, r2
 8013da6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013da8:	8af9      	ldrh	r1, [r7, #22]
 8013daa:	7bfb      	ldrb	r3, [r7, #15]
 8013dac:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013db0:	4618      	mov	r0, r3
 8013db2:	f7fa ffad 	bl	800ed10 <pbuf_alloc>
 8013db6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013db8:	693b      	ldr	r3, [r7, #16]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d101      	bne.n	8013dc2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	e019      	b.n	8013df6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013dc2:	693b      	ldr	r3, [r7, #16]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d006      	beq.n	8013dd8 <tcp_pbuf_prealloc+0xb8>
 8013dca:	4b0d      	ldr	r3, [pc, #52]	@ (8013e00 <tcp_pbuf_prealloc+0xe0>)
 8013dcc:	f240 120b 	movw	r2, #267	@ 0x10b
 8013dd0:	490f      	ldr	r1, [pc, #60]	@ (8013e10 <tcp_pbuf_prealloc+0xf0>)
 8013dd2:	480d      	ldr	r0, [pc, #52]	@ (8013e08 <tcp_pbuf_prealloc+0xe8>)
 8013dd4:	f006 fb04 	bl	801a3e0 <iprintf>
  *oversize = p->len - length;
 8013dd8:	693b      	ldr	r3, [r7, #16]
 8013dda:	895a      	ldrh	r2, [r3, #10]
 8013ddc:	89bb      	ldrh	r3, [r7, #12]
 8013dde:	1ad3      	subs	r3, r2, r3
 8013de0:	b29a      	uxth	r2, r3
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013de6:	693b      	ldr	r3, [r7, #16]
 8013de8:	89ba      	ldrh	r2, [r7, #12]
 8013dea:	811a      	strh	r2, [r3, #8]
 8013dec:	693b      	ldr	r3, [r7, #16]
 8013dee:	891a      	ldrh	r2, [r3, #8]
 8013df0:	693b      	ldr	r3, [r7, #16]
 8013df2:	815a      	strh	r2, [r3, #10]
  return p;
 8013df4:	693b      	ldr	r3, [r7, #16]
}
 8013df6:	4618      	mov	r0, r3
 8013df8:	3718      	adds	r7, #24
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd80      	pop	{r7, pc}
 8013dfe:	bf00      	nop
 8013e00:	080201c8 	.word	0x080201c8
 8013e04:	08020280 	.word	0x08020280
 8013e08:	0802021c 	.word	0x0802021c
 8013e0c:	080202a4 	.word	0x080202a4
 8013e10:	080202c4 	.word	0x080202c4

08013e14 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b082      	sub	sp, #8
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
 8013e1c:	460b      	mov	r3, r1
 8013e1e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d106      	bne.n	8013e34 <tcp_write_checks+0x20>
 8013e26:	4b33      	ldr	r3, [pc, #204]	@ (8013ef4 <tcp_write_checks+0xe0>)
 8013e28:	f240 1233 	movw	r2, #307	@ 0x133
 8013e2c:	4932      	ldr	r1, [pc, #200]	@ (8013ef8 <tcp_write_checks+0xe4>)
 8013e2e:	4833      	ldr	r0, [pc, #204]	@ (8013efc <tcp_write_checks+0xe8>)
 8013e30:	f006 fad6 	bl	801a3e0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	7d1b      	ldrb	r3, [r3, #20]
 8013e38:	2b04      	cmp	r3, #4
 8013e3a:	d00e      	beq.n	8013e5a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013e40:	2b07      	cmp	r3, #7
 8013e42:	d00a      	beq.n	8013e5a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013e48:	2b02      	cmp	r3, #2
 8013e4a:	d006      	beq.n	8013e5a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013e50:	2b03      	cmp	r3, #3
 8013e52:	d002      	beq.n	8013e5a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013e54:	f06f 030a 	mvn.w	r3, #10
 8013e58:	e048      	b.n	8013eec <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8013e5a:	887b      	ldrh	r3, [r7, #2]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d101      	bne.n	8013e64 <tcp_write_checks+0x50>
    return ERR_OK;
 8013e60:	2300      	movs	r3, #0
 8013e62:	e043      	b.n	8013eec <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013e6a:	887a      	ldrh	r2, [r7, #2]
 8013e6c:	429a      	cmp	r2, r3
 8013e6e:	d909      	bls.n	8013e84 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	8b5b      	ldrh	r3, [r3, #26]
 8013e74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013e78:	b29a      	uxth	r2, r3
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8013e82:	e033      	b.n	8013eec <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013e8a:	2b08      	cmp	r3, #8
 8013e8c:	d909      	bls.n	8013ea2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	8b5b      	ldrh	r3, [r3, #26]
 8013e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013e96:	b29a      	uxth	r2, r3
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8013ea0:	e024      	b.n	8013eec <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d00f      	beq.n	8013ecc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d11a      	bne.n	8013eea <tcp_write_checks+0xd6>
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d116      	bne.n	8013eea <tcp_write_checks+0xd6>
 8013ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8013ef4 <tcp_write_checks+0xe0>)
 8013ebe:	f240 1255 	movw	r2, #341	@ 0x155
 8013ec2:	490f      	ldr	r1, [pc, #60]	@ (8013f00 <tcp_write_checks+0xec>)
 8013ec4:	480d      	ldr	r0, [pc, #52]	@ (8013efc <tcp_write_checks+0xe8>)
 8013ec6:	f006 fa8b 	bl	801a3e0 <iprintf>
 8013eca:	e00e      	b.n	8013eea <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d103      	bne.n	8013edc <tcp_write_checks+0xc8>
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d006      	beq.n	8013eea <tcp_write_checks+0xd6>
 8013edc:	4b05      	ldr	r3, [pc, #20]	@ (8013ef4 <tcp_write_checks+0xe0>)
 8013ede:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8013ee2:	4908      	ldr	r1, [pc, #32]	@ (8013f04 <tcp_write_checks+0xf0>)
 8013ee4:	4805      	ldr	r0, [pc, #20]	@ (8013efc <tcp_write_checks+0xe8>)
 8013ee6:	f006 fa7b 	bl	801a3e0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8013eea:	2300      	movs	r3, #0
}
 8013eec:	4618      	mov	r0, r3
 8013eee:	3708      	adds	r7, #8
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	bd80      	pop	{r7, pc}
 8013ef4:	080201c8 	.word	0x080201c8
 8013ef8:	080202d8 	.word	0x080202d8
 8013efc:	0802021c 	.word	0x0802021c
 8013f00:	080202f8 	.word	0x080202f8
 8013f04:	08020334 	.word	0x08020334

08013f08 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013f08:	b590      	push	{r4, r7, lr}
 8013f0a:	b09b      	sub	sp, #108	@ 0x6c
 8013f0c:	af04      	add	r7, sp, #16
 8013f0e:	60f8      	str	r0, [r7, #12]
 8013f10:	60b9      	str	r1, [r7, #8]
 8013f12:	4611      	mov	r1, r2
 8013f14:	461a      	mov	r2, r3
 8013f16:	460b      	mov	r3, r1
 8013f18:	80fb      	strh	r3, [r7, #6]
 8013f1a:	4613      	mov	r3, r2
 8013f1c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013f22:	2300      	movs	r3, #0
 8013f24:	653b      	str	r3, [r7, #80]	@ 0x50
 8013f26:	2300      	movs	r3, #0
 8013f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013f2e:	2300      	movs	r3, #0
 8013f30:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013f32:	2300      	movs	r3, #0
 8013f34:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013f38:	2300      	movs	r3, #0
 8013f3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013f42:	2300      	movs	r3, #0
 8013f44:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013f46:	2300      	movs	r3, #0
 8013f48:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d109      	bne.n	8013f64 <tcp_write+0x5c>
 8013f50:	4ba4      	ldr	r3, [pc, #656]	@ (80141e4 <tcp_write+0x2dc>)
 8013f52:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8013f56:	49a4      	ldr	r1, [pc, #656]	@ (80141e8 <tcp_write+0x2e0>)
 8013f58:	48a4      	ldr	r0, [pc, #656]	@ (80141ec <tcp_write+0x2e4>)
 8013f5a:	f006 fa41 	bl	801a3e0 <iprintf>
 8013f5e:	f06f 030f 	mvn.w	r3, #15
 8013f62:	e32a      	b.n	80145ba <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8013f6a:	085b      	lsrs	r3, r3, #1
 8013f6c:	b29a      	uxth	r2, r3
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013f72:	4293      	cmp	r3, r2
 8013f74:	bf28      	it	cs
 8013f76:	4613      	movcs	r3, r2
 8013f78:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8013f7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d102      	bne.n	8013f86 <tcp_write+0x7e>
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013f84:	e000      	b.n	8013f88 <tcp_write+0x80>
 8013f86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013f88:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8013f8a:	68bb      	ldr	r3, [r7, #8]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d109      	bne.n	8013fa4 <tcp_write+0x9c>
 8013f90:	4b94      	ldr	r3, [pc, #592]	@ (80141e4 <tcp_write+0x2dc>)
 8013f92:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8013f96:	4996      	ldr	r1, [pc, #600]	@ (80141f0 <tcp_write+0x2e8>)
 8013f98:	4894      	ldr	r0, [pc, #592]	@ (80141ec <tcp_write+0x2e4>)
 8013f9a:	f006 fa21 	bl	801a3e0 <iprintf>
 8013f9e:	f06f 030f 	mvn.w	r3, #15
 8013fa2:	e30a      	b.n	80145ba <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013fa4:	88fb      	ldrh	r3, [r7, #6]
 8013fa6:	4619      	mov	r1, r3
 8013fa8:	68f8      	ldr	r0, [r7, #12]
 8013faa:	f7ff ff33 	bl	8013e14 <tcp_write_checks>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8013fb4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d002      	beq.n	8013fc2 <tcp_write+0xba>
    return err;
 8013fbc:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8013fc0:	e2fb      	b.n	80145ba <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013fc8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013fcc:	2300      	movs	r3, #0
 8013fce:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	f000 80f6 	beq.w	80141c8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013fe0:	653b      	str	r3, [r7, #80]	@ 0x50
 8013fe2:	e002      	b.n	8013fea <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013fe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d1f8      	bne.n	8013fe4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ff4:	7a9b      	ldrb	r3, [r3, #10]
 8013ff6:	009b      	lsls	r3, r3, #2
 8013ff8:	b29b      	uxth	r3, r3
 8013ffa:	f003 0304 	and.w	r3, r3, #4
 8013ffe:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8014000:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014002:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014004:	891b      	ldrh	r3, [r3, #8]
 8014006:	4619      	mov	r1, r3
 8014008:	8c3b      	ldrh	r3, [r7, #32]
 801400a:	440b      	add	r3, r1
 801400c:	429a      	cmp	r2, r3
 801400e:	da06      	bge.n	801401e <tcp_write+0x116>
 8014010:	4b74      	ldr	r3, [pc, #464]	@ (80141e4 <tcp_write+0x2dc>)
 8014012:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8014016:	4977      	ldr	r1, [pc, #476]	@ (80141f4 <tcp_write+0x2ec>)
 8014018:	4874      	ldr	r0, [pc, #464]	@ (80141ec <tcp_write+0x2e4>)
 801401a:	f006 f9e1 	bl	801a3e0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801401e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014020:	891a      	ldrh	r2, [r3, #8]
 8014022:	8c3b      	ldrh	r3, [r7, #32]
 8014024:	4413      	add	r3, r2
 8014026:	b29b      	uxth	r3, r3
 8014028:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801402a:	1ad3      	subs	r3, r2, r3
 801402c:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8014034:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8014036:	8a7b      	ldrh	r3, [r7, #18]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d026      	beq.n	801408a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801403c:	8a7b      	ldrh	r3, [r7, #18]
 801403e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014040:	429a      	cmp	r2, r3
 8014042:	d206      	bcs.n	8014052 <tcp_write+0x14a>
 8014044:	4b67      	ldr	r3, [pc, #412]	@ (80141e4 <tcp_write+0x2dc>)
 8014046:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801404a:	496b      	ldr	r1, [pc, #428]	@ (80141f8 <tcp_write+0x2f0>)
 801404c:	4867      	ldr	r0, [pc, #412]	@ (80141ec <tcp_write+0x2e4>)
 801404e:	f006 f9c7 	bl	801a3e0 <iprintf>
      seg = last_unsent;
 8014052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014054:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8014056:	8a7b      	ldrh	r3, [r7, #18]
 8014058:	88fa      	ldrh	r2, [r7, #6]
 801405a:	4293      	cmp	r3, r2
 801405c:	bf28      	it	cs
 801405e:	4613      	movcs	r3, r2
 8014060:	b29b      	uxth	r3, r3
 8014062:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014064:	4293      	cmp	r3, r2
 8014066:	bf28      	it	cs
 8014068:	4613      	movcs	r3, r2
 801406a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 801406c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014070:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014072:	4413      	add	r3, r2
 8014074:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8014078:	8a7a      	ldrh	r2, [r7, #18]
 801407a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801407c:	1ad3      	subs	r3, r2, r3
 801407e:	b29b      	uxth	r3, r3
 8014080:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8014082:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014084:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014086:	1ad3      	subs	r3, r2, r3
 8014088:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801408a:	8a7b      	ldrh	r3, [r7, #18]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d00b      	beq.n	80140a8 <tcp_write+0x1a0>
 8014090:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014094:	88fb      	ldrh	r3, [r7, #6]
 8014096:	429a      	cmp	r2, r3
 8014098:	d006      	beq.n	80140a8 <tcp_write+0x1a0>
 801409a:	4b52      	ldr	r3, [pc, #328]	@ (80141e4 <tcp_write+0x2dc>)
 801409c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80140a0:	4956      	ldr	r1, [pc, #344]	@ (80141fc <tcp_write+0x2f4>)
 80140a2:	4852      	ldr	r0, [pc, #328]	@ (80141ec <tcp_write+0x2e4>)
 80140a4:	f006 f99c 	bl	801a3e0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80140a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80140ac:	88fb      	ldrh	r3, [r7, #6]
 80140ae:	429a      	cmp	r2, r3
 80140b0:	f080 8167 	bcs.w	8014382 <tcp_write+0x47a>
 80140b4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	f000 8163 	beq.w	8014382 <tcp_write+0x47a>
 80140bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80140be:	891b      	ldrh	r3, [r3, #8]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	f000 815e 	beq.w	8014382 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80140c6:	88fa      	ldrh	r2, [r7, #6]
 80140c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80140cc:	1ad2      	subs	r2, r2, r3
 80140ce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80140d0:	4293      	cmp	r3, r2
 80140d2:	bfa8      	it	ge
 80140d4:	4613      	movge	r3, r2
 80140d6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80140d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80140da:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80140dc:	797b      	ldrb	r3, [r7, #5]
 80140de:	f003 0301 	and.w	r3, r3, #1
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d027      	beq.n	8014136 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80140e6:	f107 0012 	add.w	r0, r7, #18
 80140ea:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80140ec:	8bf9      	ldrh	r1, [r7, #30]
 80140ee:	2301      	movs	r3, #1
 80140f0:	9302      	str	r3, [sp, #8]
 80140f2:	797b      	ldrb	r3, [r7, #5]
 80140f4:	9301      	str	r3, [sp, #4]
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	9300      	str	r3, [sp, #0]
 80140fa:	4603      	mov	r3, r0
 80140fc:	2000      	movs	r0, #0
 80140fe:	f7ff fe0f 	bl	8013d20 <tcp_pbuf_prealloc>
 8014102:	6578      	str	r0, [r7, #84]	@ 0x54
 8014104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014106:	2b00      	cmp	r3, #0
 8014108:	f000 8225 	beq.w	8014556 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801410c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801410e:	6858      	ldr	r0, [r3, #4]
 8014110:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014114:	68ba      	ldr	r2, [r7, #8]
 8014116:	4413      	add	r3, r2
 8014118:	8bfa      	ldrh	r2, [r7, #30]
 801411a:	4619      	mov	r1, r3
 801411c:	f006 fbe9 	bl	801a8f2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8014120:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8014122:	f7fb f999 	bl	800f458 <pbuf_clen>
 8014126:	4603      	mov	r3, r0
 8014128:	461a      	mov	r2, r3
 801412a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801412e:	4413      	add	r3, r2
 8014130:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8014134:	e041      	b.n	80141ba <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8014136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014138:	685b      	ldr	r3, [r3, #4]
 801413a:	637b      	str	r3, [r7, #52]	@ 0x34
 801413c:	e002      	b.n	8014144 <tcp_write+0x23c>
 801413e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	637b      	str	r3, [r7, #52]	@ 0x34
 8014144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d1f8      	bne.n	801413e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801414c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801414e:	7b1b      	ldrb	r3, [r3, #12]
 8014150:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014154:	2b00      	cmp	r3, #0
 8014156:	d115      	bne.n	8014184 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8014158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801415a:	685b      	ldr	r3, [r3, #4]
 801415c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801415e:	8952      	ldrh	r2, [r2, #10]
 8014160:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014162:	68ba      	ldr	r2, [r7, #8]
 8014164:	429a      	cmp	r2, r3
 8014166:	d10d      	bne.n	8014184 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8014168:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801416c:	2b00      	cmp	r3, #0
 801416e:	d006      	beq.n	801417e <tcp_write+0x276>
 8014170:	4b1c      	ldr	r3, [pc, #112]	@ (80141e4 <tcp_write+0x2dc>)
 8014172:	f240 2231 	movw	r2, #561	@ 0x231
 8014176:	4922      	ldr	r1, [pc, #136]	@ (8014200 <tcp_write+0x2f8>)
 8014178:	481c      	ldr	r0, [pc, #112]	@ (80141ec <tcp_write+0x2e4>)
 801417a:	f006 f931 	bl	801a3e0 <iprintf>
          extendlen = seglen;
 801417e:	8bfb      	ldrh	r3, [r7, #30]
 8014180:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8014182:	e01a      	b.n	80141ba <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8014184:	8bfb      	ldrh	r3, [r7, #30]
 8014186:	2201      	movs	r2, #1
 8014188:	4619      	mov	r1, r3
 801418a:	2000      	movs	r0, #0
 801418c:	f7fa fdc0 	bl	800ed10 <pbuf_alloc>
 8014190:	6578      	str	r0, [r7, #84]	@ 0x54
 8014192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014194:	2b00      	cmp	r3, #0
 8014196:	f000 81e0 	beq.w	801455a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801419a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801419e:	68ba      	ldr	r2, [r7, #8]
 80141a0:	441a      	add	r2, r3
 80141a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141a4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80141a6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80141a8:	f7fb f956 	bl	800f458 <pbuf_clen>
 80141ac:	4603      	mov	r3, r0
 80141ae:	461a      	mov	r2, r3
 80141b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80141b4:	4413      	add	r3, r2
 80141b6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80141ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80141be:	8bfb      	ldrh	r3, [r7, #30]
 80141c0:	4413      	add	r3, r2
 80141c2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80141c6:	e0dc      	b.n	8014382 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	f000 80d7 	beq.w	8014382 <tcp_write+0x47a>
 80141d4:	4b03      	ldr	r3, [pc, #12]	@ (80141e4 <tcp_write+0x2dc>)
 80141d6:	f240 224a 	movw	r2, #586	@ 0x24a
 80141da:	490a      	ldr	r1, [pc, #40]	@ (8014204 <tcp_write+0x2fc>)
 80141dc:	4803      	ldr	r0, [pc, #12]	@ (80141ec <tcp_write+0x2e4>)
 80141de:	f006 f8ff 	bl	801a3e0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80141e2:	e0ce      	b.n	8014382 <tcp_write+0x47a>
 80141e4:	080201c8 	.word	0x080201c8
 80141e8:	08020368 	.word	0x08020368
 80141ec:	0802021c 	.word	0x0802021c
 80141f0:	08020380 	.word	0x08020380
 80141f4:	080203b4 	.word	0x080203b4
 80141f8:	080203cc 	.word	0x080203cc
 80141fc:	080203ec 	.word	0x080203ec
 8014200:	0802040c 	.word	0x0802040c
 8014204:	08020438 	.word	0x08020438
    struct pbuf *p;
    u16_t left = len - pos;
 8014208:	88fa      	ldrh	r2, [r7, #6]
 801420a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801420e:	1ad3      	subs	r3, r2, r3
 8014210:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8014212:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8014216:	b29b      	uxth	r3, r3
 8014218:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801421a:	1ad3      	subs	r3, r2, r3
 801421c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801421e:	8b7a      	ldrh	r2, [r7, #26]
 8014220:	8bbb      	ldrh	r3, [r7, #28]
 8014222:	4293      	cmp	r3, r2
 8014224:	bf28      	it	cs
 8014226:	4613      	movcs	r3, r2
 8014228:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801422a:	797b      	ldrb	r3, [r7, #5]
 801422c:	f003 0301 	and.w	r3, r3, #1
 8014230:	2b00      	cmp	r3, #0
 8014232:	d036      	beq.n	80142a2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8014234:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8014238:	b29a      	uxth	r2, r3
 801423a:	8b3b      	ldrh	r3, [r7, #24]
 801423c:	4413      	add	r3, r2
 801423e:	b299      	uxth	r1, r3
 8014240:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014242:	2b00      	cmp	r3, #0
 8014244:	bf0c      	ite	eq
 8014246:	2301      	moveq	r3, #1
 8014248:	2300      	movne	r3, #0
 801424a:	b2db      	uxtb	r3, r3
 801424c:	f107 0012 	add.w	r0, r7, #18
 8014250:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014252:	9302      	str	r3, [sp, #8]
 8014254:	797b      	ldrb	r3, [r7, #5]
 8014256:	9301      	str	r3, [sp, #4]
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	9300      	str	r3, [sp, #0]
 801425c:	4603      	mov	r3, r0
 801425e:	2036      	movs	r0, #54	@ 0x36
 8014260:	f7ff fd5e 	bl	8013d20 <tcp_pbuf_prealloc>
 8014264:	6338      	str	r0, [r7, #48]	@ 0x30
 8014266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014268:	2b00      	cmp	r3, #0
 801426a:	f000 8178 	beq.w	801455e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801426e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014270:	895b      	ldrh	r3, [r3, #10]
 8014272:	8b3a      	ldrh	r2, [r7, #24]
 8014274:	429a      	cmp	r2, r3
 8014276:	d906      	bls.n	8014286 <tcp_write+0x37e>
 8014278:	4b8c      	ldr	r3, [pc, #560]	@ (80144ac <tcp_write+0x5a4>)
 801427a:	f240 2266 	movw	r2, #614	@ 0x266
 801427e:	498c      	ldr	r1, [pc, #560]	@ (80144b0 <tcp_write+0x5a8>)
 8014280:	488c      	ldr	r0, [pc, #560]	@ (80144b4 <tcp_write+0x5ac>)
 8014282:	f006 f8ad 	bl	801a3e0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8014286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014288:	685a      	ldr	r2, [r3, #4]
 801428a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801428e:	18d0      	adds	r0, r2, r3
 8014290:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014294:	68ba      	ldr	r2, [r7, #8]
 8014296:	4413      	add	r3, r2
 8014298:	8b3a      	ldrh	r2, [r7, #24]
 801429a:	4619      	mov	r1, r3
 801429c:	f006 fb29 	bl	801a8f2 <memcpy>
 80142a0:	e02f      	b.n	8014302 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80142a2:	8a7b      	ldrh	r3, [r7, #18]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d006      	beq.n	80142b6 <tcp_write+0x3ae>
 80142a8:	4b80      	ldr	r3, [pc, #512]	@ (80144ac <tcp_write+0x5a4>)
 80142aa:	f240 2271 	movw	r2, #625	@ 0x271
 80142ae:	4982      	ldr	r1, [pc, #520]	@ (80144b8 <tcp_write+0x5b0>)
 80142b0:	4880      	ldr	r0, [pc, #512]	@ (80144b4 <tcp_write+0x5ac>)
 80142b2:	f006 f895 	bl	801a3e0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80142b6:	8b3b      	ldrh	r3, [r7, #24]
 80142b8:	2201      	movs	r2, #1
 80142ba:	4619      	mov	r1, r3
 80142bc:	2036      	movs	r0, #54	@ 0x36
 80142be:	f7fa fd27 	bl	800ed10 <pbuf_alloc>
 80142c2:	6178      	str	r0, [r7, #20]
 80142c4:	697b      	ldr	r3, [r7, #20]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	f000 814b 	beq.w	8014562 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80142cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80142d0:	68ba      	ldr	r2, [r7, #8]
 80142d2:	441a      	add	r2, r3
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80142d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80142dc:	b29b      	uxth	r3, r3
 80142de:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80142e2:	4619      	mov	r1, r3
 80142e4:	2036      	movs	r0, #54	@ 0x36
 80142e6:	f7fa fd13 	bl	800ed10 <pbuf_alloc>
 80142ea:	6338      	str	r0, [r7, #48]	@ 0x30
 80142ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d103      	bne.n	80142fa <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80142f2:	6978      	ldr	r0, [r7, #20]
 80142f4:	f7fb f822 	bl	800f33c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80142f8:	e136      	b.n	8014568 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80142fa:	6979      	ldr	r1, [r7, #20]
 80142fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80142fe:	f7fb f8eb 	bl	800f4d8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8014302:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014304:	f7fb f8a8 	bl	800f458 <pbuf_clen>
 8014308:	4603      	mov	r3, r0
 801430a:	461a      	mov	r2, r3
 801430c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014310:	4413      	add	r3, r2
 8014312:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8014316:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801431a:	2b09      	cmp	r3, #9
 801431c:	d903      	bls.n	8014326 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801431e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014320:	f7fb f80c 	bl	800f33c <pbuf_free>
      goto memerr;
 8014324:	e120      	b.n	8014568 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801432a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801432e:	441a      	add	r2, r3
 8014330:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014334:	9300      	str	r3, [sp, #0]
 8014336:	4613      	mov	r3, r2
 8014338:	2200      	movs	r2, #0
 801433a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801433c:	68f8      	ldr	r0, [r7, #12]
 801433e:	f7ff fc53 	bl	8013be8 <tcp_create_segment>
 8014342:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8014344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014346:	2b00      	cmp	r3, #0
 8014348:	f000 810d 	beq.w	8014566 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801434c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801434e:	2b00      	cmp	r3, #0
 8014350:	d102      	bne.n	8014358 <tcp_write+0x450>
      queue = seg;
 8014352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014354:	647b      	str	r3, [r7, #68]	@ 0x44
 8014356:	e00c      	b.n	8014372 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8014358:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801435a:	2b00      	cmp	r3, #0
 801435c:	d106      	bne.n	801436c <tcp_write+0x464>
 801435e:	4b53      	ldr	r3, [pc, #332]	@ (80144ac <tcp_write+0x5a4>)
 8014360:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014364:	4955      	ldr	r1, [pc, #340]	@ (80144bc <tcp_write+0x5b4>)
 8014366:	4853      	ldr	r0, [pc, #332]	@ (80144b4 <tcp_write+0x5ac>)
 8014368:	f006 f83a 	bl	801a3e0 <iprintf>
      prev_seg->next = seg;
 801436c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801436e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014370:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8014372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014374:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8014376:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801437a:	8b3b      	ldrh	r3, [r7, #24]
 801437c:	4413      	add	r3, r2
 801437e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8014382:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014386:	88fb      	ldrh	r3, [r7, #6]
 8014388:	429a      	cmp	r2, r3
 801438a:	f4ff af3d 	bcc.w	8014208 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801438e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014390:	2b00      	cmp	r3, #0
 8014392:	d02c      	beq.n	80143ee <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8014394:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014396:	685b      	ldr	r3, [r3, #4]
 8014398:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801439a:	e01e      	b.n	80143da <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801439c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801439e:	891a      	ldrh	r2, [r3, #8]
 80143a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80143a2:	4413      	add	r3, r2
 80143a4:	b29a      	uxth	r2, r3
 80143a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143a8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80143aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d110      	bne.n	80143d4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80143b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143b4:	685b      	ldr	r3, [r3, #4]
 80143b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80143b8:	8952      	ldrh	r2, [r2, #10]
 80143ba:	4413      	add	r3, r2
 80143bc:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80143be:	68b9      	ldr	r1, [r7, #8]
 80143c0:	4618      	mov	r0, r3
 80143c2:	f006 fa96 	bl	801a8f2 <memcpy>
        p->len += oversize_used;
 80143c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143c8:	895a      	ldrh	r2, [r3, #10]
 80143ca:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80143cc:	4413      	add	r3, r2
 80143ce:	b29a      	uxth	r2, r3
 80143d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143d2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80143d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80143da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d1dd      	bne.n	801439c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80143e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143e2:	891a      	ldrh	r2, [r3, #8]
 80143e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80143e6:	4413      	add	r3, r2
 80143e8:	b29a      	uxth	r2, r3
 80143ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143ec:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80143ee:	8a7a      	ldrh	r2, [r7, #18]
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80143f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d018      	beq.n	801442e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80143fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d106      	bne.n	8014410 <tcp_write+0x508>
 8014402:	4b2a      	ldr	r3, [pc, #168]	@ (80144ac <tcp_write+0x5a4>)
 8014404:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8014408:	492d      	ldr	r1, [pc, #180]	@ (80144c0 <tcp_write+0x5b8>)
 801440a:	482a      	ldr	r0, [pc, #168]	@ (80144b4 <tcp_write+0x5ac>)
 801440c:	f005 ffe8 	bl	801a3e0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8014410:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014412:	685b      	ldr	r3, [r3, #4]
 8014414:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014416:	4618      	mov	r0, r3
 8014418:	f7fb f85e 	bl	800f4d8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801441c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801441e:	891a      	ldrh	r2, [r3, #8]
 8014420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014422:	891b      	ldrh	r3, [r3, #8]
 8014424:	4413      	add	r3, r2
 8014426:	b29a      	uxth	r2, r3
 8014428:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801442a:	811a      	strh	r2, [r3, #8]
 801442c:	e037      	b.n	801449e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801442e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014430:	2b00      	cmp	r3, #0
 8014432:	d034      	beq.n	801449e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8014434:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014436:	2b00      	cmp	r3, #0
 8014438:	d003      	beq.n	8014442 <tcp_write+0x53a>
 801443a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801443c:	685b      	ldr	r3, [r3, #4]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d106      	bne.n	8014450 <tcp_write+0x548>
 8014442:	4b1a      	ldr	r3, [pc, #104]	@ (80144ac <tcp_write+0x5a4>)
 8014444:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8014448:	491e      	ldr	r1, [pc, #120]	@ (80144c4 <tcp_write+0x5bc>)
 801444a:	481a      	ldr	r0, [pc, #104]	@ (80144b4 <tcp_write+0x5ac>)
 801444c:	f005 ffc8 	bl	801a3e0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014450:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014452:	685b      	ldr	r3, [r3, #4]
 8014454:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014456:	e009      	b.n	801446c <tcp_write+0x564>
      p->tot_len += extendlen;
 8014458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801445a:	891a      	ldrh	r2, [r3, #8]
 801445c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801445e:	4413      	add	r3, r2
 8014460:	b29a      	uxth	r2, r3
 8014462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014464:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801446c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d1f1      	bne.n	8014458 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8014474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014476:	891a      	ldrh	r2, [r3, #8]
 8014478:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801447a:	4413      	add	r3, r2
 801447c:	b29a      	uxth	r2, r3
 801447e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014480:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8014482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014484:	895a      	ldrh	r2, [r3, #10]
 8014486:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014488:	4413      	add	r3, r2
 801448a:	b29a      	uxth	r2, r3
 801448c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801448e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8014490:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014492:	891a      	ldrh	r2, [r3, #8]
 8014494:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014496:	4413      	add	r3, r2
 8014498:	b29a      	uxth	r2, r3
 801449a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801449c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801449e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d111      	bne.n	80144c8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80144a8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80144aa:	e010      	b.n	80144ce <tcp_write+0x5c6>
 80144ac:	080201c8 	.word	0x080201c8
 80144b0:	08020468 	.word	0x08020468
 80144b4:	0802021c 	.word	0x0802021c
 80144b8:	080204a8 	.word	0x080204a8
 80144bc:	080204b8 	.word	0x080204b8
 80144c0:	080204cc 	.word	0x080204cc
 80144c4:	08020504 	.word	0x08020504
  } else {
    last_unsent->next = queue;
 80144c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80144ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80144cc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80144d2:	88fb      	ldrh	r3, [r7, #6]
 80144d4:	441a      	add	r2, r3
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80144e0:	88fb      	ldrh	r3, [r7, #6]
 80144e2:	1ad3      	subs	r3, r2, r3
 80144e4:	b29a      	uxth	r2, r3
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80144f2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d00e      	beq.n	801451e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014504:	2b00      	cmp	r3, #0
 8014506:	d10a      	bne.n	801451e <tcp_write+0x616>
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801450c:	2b00      	cmp	r3, #0
 801450e:	d106      	bne.n	801451e <tcp_write+0x616>
 8014510:	4b2c      	ldr	r3, [pc, #176]	@ (80145c4 <tcp_write+0x6bc>)
 8014512:	f240 3212 	movw	r2, #786	@ 0x312
 8014516:	492c      	ldr	r1, [pc, #176]	@ (80145c8 <tcp_write+0x6c0>)
 8014518:	482c      	ldr	r0, [pc, #176]	@ (80145cc <tcp_write+0x6c4>)
 801451a:	f005 ff61 	bl	801a3e0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801451e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014520:	2b00      	cmp	r3, #0
 8014522:	d016      	beq.n	8014552 <tcp_write+0x64a>
 8014524:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014526:	68db      	ldr	r3, [r3, #12]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d012      	beq.n	8014552 <tcp_write+0x64a>
 801452c:	797b      	ldrb	r3, [r7, #5]
 801452e:	f003 0302 	and.w	r3, r3, #2
 8014532:	2b00      	cmp	r3, #0
 8014534:	d10d      	bne.n	8014552 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8014536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014538:	68db      	ldr	r3, [r3, #12]
 801453a:	899b      	ldrh	r3, [r3, #12]
 801453c:	b29c      	uxth	r4, r3
 801453e:	2008      	movs	r0, #8
 8014540:	f7f9 faa0 	bl	800da84 <lwip_htons>
 8014544:	4603      	mov	r3, r0
 8014546:	461a      	mov	r2, r3
 8014548:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801454a:	68db      	ldr	r3, [r3, #12]
 801454c:	4322      	orrs	r2, r4
 801454e:	b292      	uxth	r2, r2
 8014550:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8014552:	2300      	movs	r3, #0
 8014554:	e031      	b.n	80145ba <tcp_write+0x6b2>
          goto memerr;
 8014556:	bf00      	nop
 8014558:	e006      	b.n	8014568 <tcp_write+0x660>
            goto memerr;
 801455a:	bf00      	nop
 801455c:	e004      	b.n	8014568 <tcp_write+0x660>
        goto memerr;
 801455e:	bf00      	nop
 8014560:	e002      	b.n	8014568 <tcp_write+0x660>
        goto memerr;
 8014562:	bf00      	nop
 8014564:	e000      	b.n	8014568 <tcp_write+0x660>
      goto memerr;
 8014566:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	8b5b      	ldrh	r3, [r3, #26]
 801456c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014570:	b29a      	uxth	r2, r3
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8014576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014578:	2b00      	cmp	r3, #0
 801457a:	d002      	beq.n	8014582 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801457c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801457e:	f7fa fedd 	bl	800f33c <pbuf_free>
  }
  if (queue != NULL) {
 8014582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014584:	2b00      	cmp	r3, #0
 8014586:	d002      	beq.n	801458e <tcp_write+0x686>
    tcp_segs_free(queue);
 8014588:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801458a:	f7fc fb71 	bl	8010c70 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014594:	2b00      	cmp	r3, #0
 8014596:	d00e      	beq.n	80145b6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801459c:	2b00      	cmp	r3, #0
 801459e:	d10a      	bne.n	80145b6 <tcp_write+0x6ae>
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d106      	bne.n	80145b6 <tcp_write+0x6ae>
 80145a8:	4b06      	ldr	r3, [pc, #24]	@ (80145c4 <tcp_write+0x6bc>)
 80145aa:	f240 3227 	movw	r2, #807	@ 0x327
 80145ae:	4906      	ldr	r1, [pc, #24]	@ (80145c8 <tcp_write+0x6c0>)
 80145b0:	4806      	ldr	r0, [pc, #24]	@ (80145cc <tcp_write+0x6c4>)
 80145b2:	f005 ff15 	bl	801a3e0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80145b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80145ba:	4618      	mov	r0, r3
 80145bc:	375c      	adds	r7, #92	@ 0x5c
 80145be:	46bd      	mov	sp, r7
 80145c0:	bd90      	pop	{r4, r7, pc}
 80145c2:	bf00      	nop
 80145c4:	080201c8 	.word	0x080201c8
 80145c8:	0802053c 	.word	0x0802053c
 80145cc:	0802021c 	.word	0x0802021c

080145d0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80145d0:	b590      	push	{r4, r7, lr}
 80145d2:	b08b      	sub	sp, #44	@ 0x2c
 80145d4:	af02      	add	r7, sp, #8
 80145d6:	6078      	str	r0, [r7, #4]
 80145d8:	460b      	mov	r3, r1
 80145da:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80145dc:	2300      	movs	r3, #0
 80145de:	61fb      	str	r3, [r7, #28]
 80145e0:	2300      	movs	r3, #0
 80145e2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80145e4:	2300      	movs	r3, #0
 80145e6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d106      	bne.n	80145fc <tcp_split_unsent_seg+0x2c>
 80145ee:	4b95      	ldr	r3, [pc, #596]	@ (8014844 <tcp_split_unsent_seg+0x274>)
 80145f0:	f240 324b 	movw	r2, #843	@ 0x34b
 80145f4:	4994      	ldr	r1, [pc, #592]	@ (8014848 <tcp_split_unsent_seg+0x278>)
 80145f6:	4895      	ldr	r0, [pc, #596]	@ (801484c <tcp_split_unsent_seg+0x27c>)
 80145f8:	f005 fef2 	bl	801a3e0 <iprintf>

  useg = pcb->unsent;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014600:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014602:	697b      	ldr	r3, [r7, #20]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d102      	bne.n	801460e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014608:	f04f 33ff 	mov.w	r3, #4294967295
 801460c:	e116      	b.n	801483c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801460e:	887b      	ldrh	r3, [r7, #2]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d109      	bne.n	8014628 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014614:	4b8b      	ldr	r3, [pc, #556]	@ (8014844 <tcp_split_unsent_seg+0x274>)
 8014616:	f240 3253 	movw	r2, #851	@ 0x353
 801461a:	498d      	ldr	r1, [pc, #564]	@ (8014850 <tcp_split_unsent_seg+0x280>)
 801461c:	488b      	ldr	r0, [pc, #556]	@ (801484c <tcp_split_unsent_seg+0x27c>)
 801461e:	f005 fedf 	bl	801a3e0 <iprintf>
    return ERR_VAL;
 8014622:	f06f 0305 	mvn.w	r3, #5
 8014626:	e109      	b.n	801483c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014628:	697b      	ldr	r3, [r7, #20]
 801462a:	891b      	ldrh	r3, [r3, #8]
 801462c:	887a      	ldrh	r2, [r7, #2]
 801462e:	429a      	cmp	r2, r3
 8014630:	d301      	bcc.n	8014636 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014632:	2300      	movs	r3, #0
 8014634:	e102      	b.n	801483c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801463a:	887a      	ldrh	r2, [r7, #2]
 801463c:	429a      	cmp	r2, r3
 801463e:	d906      	bls.n	801464e <tcp_split_unsent_seg+0x7e>
 8014640:	4b80      	ldr	r3, [pc, #512]	@ (8014844 <tcp_split_unsent_seg+0x274>)
 8014642:	f240 325b 	movw	r2, #859	@ 0x35b
 8014646:	4983      	ldr	r1, [pc, #524]	@ (8014854 <tcp_split_unsent_seg+0x284>)
 8014648:	4880      	ldr	r0, [pc, #512]	@ (801484c <tcp_split_unsent_seg+0x27c>)
 801464a:	f005 fec9 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801464e:	697b      	ldr	r3, [r7, #20]
 8014650:	891b      	ldrh	r3, [r3, #8]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d106      	bne.n	8014664 <tcp_split_unsent_seg+0x94>
 8014656:	4b7b      	ldr	r3, [pc, #492]	@ (8014844 <tcp_split_unsent_seg+0x274>)
 8014658:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801465c:	497e      	ldr	r1, [pc, #504]	@ (8014858 <tcp_split_unsent_seg+0x288>)
 801465e:	487b      	ldr	r0, [pc, #492]	@ (801484c <tcp_split_unsent_seg+0x27c>)
 8014660:	f005 febe 	bl	801a3e0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014664:	697b      	ldr	r3, [r7, #20]
 8014666:	7a9b      	ldrb	r3, [r3, #10]
 8014668:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801466a:	7bfb      	ldrb	r3, [r7, #15]
 801466c:	009b      	lsls	r3, r3, #2
 801466e:	b2db      	uxtb	r3, r3
 8014670:	f003 0304 	and.w	r3, r3, #4
 8014674:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014676:	697b      	ldr	r3, [r7, #20]
 8014678:	891a      	ldrh	r2, [r3, #8]
 801467a:	887b      	ldrh	r3, [r7, #2]
 801467c:	1ad3      	subs	r3, r2, r3
 801467e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014680:	7bbb      	ldrb	r3, [r7, #14]
 8014682:	b29a      	uxth	r2, r3
 8014684:	89bb      	ldrh	r3, [r7, #12]
 8014686:	4413      	add	r3, r2
 8014688:	b29b      	uxth	r3, r3
 801468a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801468e:	4619      	mov	r1, r3
 8014690:	2036      	movs	r0, #54	@ 0x36
 8014692:	f7fa fb3d 	bl	800ed10 <pbuf_alloc>
 8014696:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014698:	693b      	ldr	r3, [r7, #16]
 801469a:	2b00      	cmp	r3, #0
 801469c:	f000 80b7 	beq.w	801480e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80146a0:	697b      	ldr	r3, [r7, #20]
 80146a2:	685b      	ldr	r3, [r3, #4]
 80146a4:	891a      	ldrh	r2, [r3, #8]
 80146a6:	697b      	ldr	r3, [r7, #20]
 80146a8:	891b      	ldrh	r3, [r3, #8]
 80146aa:	1ad3      	subs	r3, r2, r3
 80146ac:	b29a      	uxth	r2, r3
 80146ae:	887b      	ldrh	r3, [r7, #2]
 80146b0:	4413      	add	r3, r2
 80146b2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80146b4:	697b      	ldr	r3, [r7, #20]
 80146b6:	6858      	ldr	r0, [r3, #4]
 80146b8:	693b      	ldr	r3, [r7, #16]
 80146ba:	685a      	ldr	r2, [r3, #4]
 80146bc:	7bbb      	ldrb	r3, [r7, #14]
 80146be:	18d1      	adds	r1, r2, r3
 80146c0:	897b      	ldrh	r3, [r7, #10]
 80146c2:	89ba      	ldrh	r2, [r7, #12]
 80146c4:	f7fb f840 	bl	800f748 <pbuf_copy_partial>
 80146c8:	4603      	mov	r3, r0
 80146ca:	461a      	mov	r2, r3
 80146cc:	89bb      	ldrh	r3, [r7, #12]
 80146ce:	4293      	cmp	r3, r2
 80146d0:	f040 809f 	bne.w	8014812 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80146d4:	697b      	ldr	r3, [r7, #20]
 80146d6:	68db      	ldr	r3, [r3, #12]
 80146d8:	899b      	ldrh	r3, [r3, #12]
 80146da:	b29b      	uxth	r3, r3
 80146dc:	4618      	mov	r0, r3
 80146de:	f7f9 f9d1 	bl	800da84 <lwip_htons>
 80146e2:	4603      	mov	r3, r0
 80146e4:	b2db      	uxtb	r3, r3
 80146e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80146ea:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80146ec:	2300      	movs	r3, #0
 80146ee:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80146f0:	7efb      	ldrb	r3, [r7, #27]
 80146f2:	f003 0308 	and.w	r3, r3, #8
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d007      	beq.n	801470a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80146fa:	7efb      	ldrb	r3, [r7, #27]
 80146fc:	f023 0308 	bic.w	r3, r3, #8
 8014700:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014702:	7ebb      	ldrb	r3, [r7, #26]
 8014704:	f043 0308 	orr.w	r3, r3, #8
 8014708:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801470a:	7efb      	ldrb	r3, [r7, #27]
 801470c:	f003 0301 	and.w	r3, r3, #1
 8014710:	2b00      	cmp	r3, #0
 8014712:	d007      	beq.n	8014724 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014714:	7efb      	ldrb	r3, [r7, #27]
 8014716:	f023 0301 	bic.w	r3, r3, #1
 801471a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801471c:	7ebb      	ldrb	r3, [r7, #26]
 801471e:	f043 0301 	orr.w	r3, r3, #1
 8014722:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014724:	697b      	ldr	r3, [r7, #20]
 8014726:	68db      	ldr	r3, [r3, #12]
 8014728:	685b      	ldr	r3, [r3, #4]
 801472a:	4618      	mov	r0, r3
 801472c:	f7f9 f9bf 	bl	800daae <lwip_htonl>
 8014730:	4602      	mov	r2, r0
 8014732:	887b      	ldrh	r3, [r7, #2]
 8014734:	18d1      	adds	r1, r2, r3
 8014736:	7eba      	ldrb	r2, [r7, #26]
 8014738:	7bfb      	ldrb	r3, [r7, #15]
 801473a:	9300      	str	r3, [sp, #0]
 801473c:	460b      	mov	r3, r1
 801473e:	6939      	ldr	r1, [r7, #16]
 8014740:	6878      	ldr	r0, [r7, #4]
 8014742:	f7ff fa51 	bl	8013be8 <tcp_create_segment>
 8014746:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014748:	69fb      	ldr	r3, [r7, #28]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d063      	beq.n	8014816 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801474e:	697b      	ldr	r3, [r7, #20]
 8014750:	685b      	ldr	r3, [r3, #4]
 8014752:	4618      	mov	r0, r3
 8014754:	f7fa fe80 	bl	800f458 <pbuf_clen>
 8014758:	4603      	mov	r3, r0
 801475a:	461a      	mov	r2, r3
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014762:	1a9b      	subs	r3, r3, r2
 8014764:	b29a      	uxth	r2, r3
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801476c:	697b      	ldr	r3, [r7, #20]
 801476e:	6858      	ldr	r0, [r3, #4]
 8014770:	697b      	ldr	r3, [r7, #20]
 8014772:	685b      	ldr	r3, [r3, #4]
 8014774:	891a      	ldrh	r2, [r3, #8]
 8014776:	89bb      	ldrh	r3, [r7, #12]
 8014778:	1ad3      	subs	r3, r2, r3
 801477a:	b29b      	uxth	r3, r3
 801477c:	4619      	mov	r1, r3
 801477e:	f7fa fc25 	bl	800efcc <pbuf_realloc>
  useg->len -= remainder;
 8014782:	697b      	ldr	r3, [r7, #20]
 8014784:	891a      	ldrh	r2, [r3, #8]
 8014786:	89bb      	ldrh	r3, [r7, #12]
 8014788:	1ad3      	subs	r3, r2, r3
 801478a:	b29a      	uxth	r2, r3
 801478c:	697b      	ldr	r3, [r7, #20]
 801478e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014790:	697b      	ldr	r3, [r7, #20]
 8014792:	68db      	ldr	r3, [r3, #12]
 8014794:	899b      	ldrh	r3, [r3, #12]
 8014796:	b29c      	uxth	r4, r3
 8014798:	7efb      	ldrb	r3, [r7, #27]
 801479a:	b29b      	uxth	r3, r3
 801479c:	4618      	mov	r0, r3
 801479e:	f7f9 f971 	bl	800da84 <lwip_htons>
 80147a2:	4603      	mov	r3, r0
 80147a4:	461a      	mov	r2, r3
 80147a6:	697b      	ldr	r3, [r7, #20]
 80147a8:	68db      	ldr	r3, [r3, #12]
 80147aa:	4322      	orrs	r2, r4
 80147ac:	b292      	uxth	r2, r2
 80147ae:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	685b      	ldr	r3, [r3, #4]
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7fa fe4f 	bl	800f458 <pbuf_clen>
 80147ba:	4603      	mov	r3, r0
 80147bc:	461a      	mov	r2, r3
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80147c4:	4413      	add	r3, r2
 80147c6:	b29a      	uxth	r2, r3
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80147ce:	69fb      	ldr	r3, [r7, #28]
 80147d0:	685b      	ldr	r3, [r3, #4]
 80147d2:	4618      	mov	r0, r3
 80147d4:	f7fa fe40 	bl	800f458 <pbuf_clen>
 80147d8:	4603      	mov	r3, r0
 80147da:	461a      	mov	r2, r3
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80147e2:	4413      	add	r3, r2
 80147e4:	b29a      	uxth	r2, r3
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80147ec:	697b      	ldr	r3, [r7, #20]
 80147ee:	681a      	ldr	r2, [r3, #0]
 80147f0:	69fb      	ldr	r3, [r7, #28]
 80147f2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80147f4:	697b      	ldr	r3, [r7, #20]
 80147f6:	69fa      	ldr	r2, [r7, #28]
 80147f8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80147fa:	69fb      	ldr	r3, [r7, #28]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d103      	bne.n	801480a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	2200      	movs	r2, #0
 8014806:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801480a:	2300      	movs	r3, #0
 801480c:	e016      	b.n	801483c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801480e:	bf00      	nop
 8014810:	e002      	b.n	8014818 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014812:	bf00      	nop
 8014814:	e000      	b.n	8014818 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014816:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014818:	69fb      	ldr	r3, [r7, #28]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d006      	beq.n	801482c <tcp_split_unsent_seg+0x25c>
 801481e:	4b09      	ldr	r3, [pc, #36]	@ (8014844 <tcp_split_unsent_seg+0x274>)
 8014820:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8014824:	490d      	ldr	r1, [pc, #52]	@ (801485c <tcp_split_unsent_seg+0x28c>)
 8014826:	4809      	ldr	r0, [pc, #36]	@ (801484c <tcp_split_unsent_seg+0x27c>)
 8014828:	f005 fdda 	bl	801a3e0 <iprintf>
  if (p != NULL) {
 801482c:	693b      	ldr	r3, [r7, #16]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d002      	beq.n	8014838 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8014832:	6938      	ldr	r0, [r7, #16]
 8014834:	f7fa fd82 	bl	800f33c <pbuf_free>
  }

  return ERR_MEM;
 8014838:	f04f 33ff 	mov.w	r3, #4294967295
}
 801483c:	4618      	mov	r0, r3
 801483e:	3724      	adds	r7, #36	@ 0x24
 8014840:	46bd      	mov	sp, r7
 8014842:	bd90      	pop	{r4, r7, pc}
 8014844:	080201c8 	.word	0x080201c8
 8014848:	0802055c 	.word	0x0802055c
 801484c:	0802021c 	.word	0x0802021c
 8014850:	08020580 	.word	0x08020580
 8014854:	080205a4 	.word	0x080205a4
 8014858:	080205b4 	.word	0x080205b4
 801485c:	080205c4 	.word	0x080205c4

08014860 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014860:	b590      	push	{r4, r7, lr}
 8014862:	b085      	sub	sp, #20
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d106      	bne.n	801487c <tcp_send_fin+0x1c>
 801486e:	4b21      	ldr	r3, [pc, #132]	@ (80148f4 <tcp_send_fin+0x94>)
 8014870:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8014874:	4920      	ldr	r1, [pc, #128]	@ (80148f8 <tcp_send_fin+0x98>)
 8014876:	4821      	ldr	r0, [pc, #132]	@ (80148fc <tcp_send_fin+0x9c>)
 8014878:	f005 fdb2 	bl	801a3e0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014880:	2b00      	cmp	r3, #0
 8014882:	d02e      	beq.n	80148e2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014888:	60fb      	str	r3, [r7, #12]
 801488a:	e002      	b.n	8014892 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d1f8      	bne.n	801488c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	68db      	ldr	r3, [r3, #12]
 801489e:	899b      	ldrh	r3, [r3, #12]
 80148a0:	b29b      	uxth	r3, r3
 80148a2:	4618      	mov	r0, r3
 80148a4:	f7f9 f8ee 	bl	800da84 <lwip_htons>
 80148a8:	4603      	mov	r3, r0
 80148aa:	b2db      	uxtb	r3, r3
 80148ac:	f003 0307 	and.w	r3, r3, #7
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d116      	bne.n	80148e2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	68db      	ldr	r3, [r3, #12]
 80148b8:	899b      	ldrh	r3, [r3, #12]
 80148ba:	b29c      	uxth	r4, r3
 80148bc:	2001      	movs	r0, #1
 80148be:	f7f9 f8e1 	bl	800da84 <lwip_htons>
 80148c2:	4603      	mov	r3, r0
 80148c4:	461a      	mov	r2, r3
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	68db      	ldr	r3, [r3, #12]
 80148ca:	4322      	orrs	r2, r4
 80148cc:	b292      	uxth	r2, r2
 80148ce:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	8b5b      	ldrh	r3, [r3, #26]
 80148d4:	f043 0320 	orr.w	r3, r3, #32
 80148d8:	b29a      	uxth	r2, r3
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80148de:	2300      	movs	r3, #0
 80148e0:	e004      	b.n	80148ec <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80148e2:	2101      	movs	r1, #1
 80148e4:	6878      	ldr	r0, [r7, #4]
 80148e6:	f000 f80b 	bl	8014900 <tcp_enqueue_flags>
 80148ea:	4603      	mov	r3, r0
}
 80148ec:	4618      	mov	r0, r3
 80148ee:	3714      	adds	r7, #20
 80148f0:	46bd      	mov	sp, r7
 80148f2:	bd90      	pop	{r4, r7, pc}
 80148f4:	080201c8 	.word	0x080201c8
 80148f8:	080205d0 	.word	0x080205d0
 80148fc:	0802021c 	.word	0x0802021c

08014900 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b08a      	sub	sp, #40	@ 0x28
 8014904:	af02      	add	r7, sp, #8
 8014906:	6078      	str	r0, [r7, #4]
 8014908:	460b      	mov	r3, r1
 801490a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801490c:	2300      	movs	r3, #0
 801490e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014910:	2300      	movs	r3, #0
 8014912:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014914:	78fb      	ldrb	r3, [r7, #3]
 8014916:	f003 0303 	and.w	r3, r3, #3
 801491a:	2b00      	cmp	r3, #0
 801491c:	d106      	bne.n	801492c <tcp_enqueue_flags+0x2c>
 801491e:	4b67      	ldr	r3, [pc, #412]	@ (8014abc <tcp_enqueue_flags+0x1bc>)
 8014920:	f240 4211 	movw	r2, #1041	@ 0x411
 8014924:	4966      	ldr	r1, [pc, #408]	@ (8014ac0 <tcp_enqueue_flags+0x1c0>)
 8014926:	4867      	ldr	r0, [pc, #412]	@ (8014ac4 <tcp_enqueue_flags+0x1c4>)
 8014928:	f005 fd5a 	bl	801a3e0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d106      	bne.n	8014940 <tcp_enqueue_flags+0x40>
 8014932:	4b62      	ldr	r3, [pc, #392]	@ (8014abc <tcp_enqueue_flags+0x1bc>)
 8014934:	f240 4213 	movw	r2, #1043	@ 0x413
 8014938:	4963      	ldr	r1, [pc, #396]	@ (8014ac8 <tcp_enqueue_flags+0x1c8>)
 801493a:	4862      	ldr	r0, [pc, #392]	@ (8014ac4 <tcp_enqueue_flags+0x1c4>)
 801493c:	f005 fd50 	bl	801a3e0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014940:	78fb      	ldrb	r3, [r7, #3]
 8014942:	f003 0302 	and.w	r3, r3, #2
 8014946:	2b00      	cmp	r3, #0
 8014948:	d001      	beq.n	801494e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801494a:	2301      	movs	r3, #1
 801494c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801494e:	7ffb      	ldrb	r3, [r7, #31]
 8014950:	009b      	lsls	r3, r3, #2
 8014952:	b2db      	uxtb	r3, r3
 8014954:	f003 0304 	and.w	r3, r3, #4
 8014958:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801495a:	7dfb      	ldrb	r3, [r7, #23]
 801495c:	b29b      	uxth	r3, r3
 801495e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014962:	4619      	mov	r1, r3
 8014964:	2036      	movs	r0, #54	@ 0x36
 8014966:	f7fa f9d3 	bl	800ed10 <pbuf_alloc>
 801496a:	6138      	str	r0, [r7, #16]
 801496c:	693b      	ldr	r3, [r7, #16]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d109      	bne.n	8014986 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	8b5b      	ldrh	r3, [r3, #26]
 8014976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801497a:	b29a      	uxth	r2, r3
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014980:	f04f 33ff 	mov.w	r3, #4294967295
 8014984:	e095      	b.n	8014ab2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014986:	693b      	ldr	r3, [r7, #16]
 8014988:	895a      	ldrh	r2, [r3, #10]
 801498a:	7dfb      	ldrb	r3, [r7, #23]
 801498c:	b29b      	uxth	r3, r3
 801498e:	429a      	cmp	r2, r3
 8014990:	d206      	bcs.n	80149a0 <tcp_enqueue_flags+0xa0>
 8014992:	4b4a      	ldr	r3, [pc, #296]	@ (8014abc <tcp_enqueue_flags+0x1bc>)
 8014994:	f240 4239 	movw	r2, #1081	@ 0x439
 8014998:	494c      	ldr	r1, [pc, #304]	@ (8014acc <tcp_enqueue_flags+0x1cc>)
 801499a:	484a      	ldr	r0, [pc, #296]	@ (8014ac4 <tcp_enqueue_flags+0x1c4>)
 801499c:	f005 fd20 	bl	801a3e0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80149a4:	78fa      	ldrb	r2, [r7, #3]
 80149a6:	7ffb      	ldrb	r3, [r7, #31]
 80149a8:	9300      	str	r3, [sp, #0]
 80149aa:	460b      	mov	r3, r1
 80149ac:	6939      	ldr	r1, [r7, #16]
 80149ae:	6878      	ldr	r0, [r7, #4]
 80149b0:	f7ff f91a 	bl	8013be8 <tcp_create_segment>
 80149b4:	60f8      	str	r0, [r7, #12]
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d109      	bne.n	80149d0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	8b5b      	ldrh	r3, [r3, #26]
 80149c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80149c4:	b29a      	uxth	r2, r3
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80149ca:	f04f 33ff 	mov.w	r3, #4294967295
 80149ce:	e070      	b.n	8014ab2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	68db      	ldr	r3, [r3, #12]
 80149d4:	f003 0303 	and.w	r3, r3, #3
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d006      	beq.n	80149ea <tcp_enqueue_flags+0xea>
 80149dc:	4b37      	ldr	r3, [pc, #220]	@ (8014abc <tcp_enqueue_flags+0x1bc>)
 80149de:	f240 4242 	movw	r2, #1090	@ 0x442
 80149e2:	493b      	ldr	r1, [pc, #236]	@ (8014ad0 <tcp_enqueue_flags+0x1d0>)
 80149e4:	4837      	ldr	r0, [pc, #220]	@ (8014ac4 <tcp_enqueue_flags+0x1c4>)
 80149e6:	f005 fcfb 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	891b      	ldrh	r3, [r3, #8]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d006      	beq.n	8014a00 <tcp_enqueue_flags+0x100>
 80149f2:	4b32      	ldr	r3, [pc, #200]	@ (8014abc <tcp_enqueue_flags+0x1bc>)
 80149f4:	f240 4243 	movw	r2, #1091	@ 0x443
 80149f8:	4936      	ldr	r1, [pc, #216]	@ (8014ad4 <tcp_enqueue_flags+0x1d4>)
 80149fa:	4832      	ldr	r0, [pc, #200]	@ (8014ac4 <tcp_enqueue_flags+0x1c4>)
 80149fc:	f005 fcf0 	bl	801a3e0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d103      	bne.n	8014a10 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	68fa      	ldr	r2, [r7, #12]
 8014a0c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014a0e:	e00d      	b.n	8014a2c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014a14:	61bb      	str	r3, [r7, #24]
 8014a16:	e002      	b.n	8014a1e <tcp_enqueue_flags+0x11e>
 8014a18:	69bb      	ldr	r3, [r7, #24]
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	61bb      	str	r3, [r7, #24]
 8014a1e:	69bb      	ldr	r3, [r7, #24]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d1f8      	bne.n	8014a18 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014a26:	69bb      	ldr	r3, [r7, #24]
 8014a28:	68fa      	ldr	r2, [r7, #12]
 8014a2a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	2200      	movs	r2, #0
 8014a30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014a34:	78fb      	ldrb	r3, [r7, #3]
 8014a36:	f003 0302 	and.w	r3, r3, #2
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d104      	bne.n	8014a48 <tcp_enqueue_flags+0x148>
 8014a3e:	78fb      	ldrb	r3, [r7, #3]
 8014a40:	f003 0301 	and.w	r3, r3, #1
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d004      	beq.n	8014a52 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014a4c:	1c5a      	adds	r2, r3, #1
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014a52:	78fb      	ldrb	r3, [r7, #3]
 8014a54:	f003 0301 	and.w	r3, r3, #1
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d006      	beq.n	8014a6a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	8b5b      	ldrh	r3, [r3, #26]
 8014a60:	f043 0320 	orr.w	r3, r3, #32
 8014a64:	b29a      	uxth	r2, r3
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	685b      	ldr	r3, [r3, #4]
 8014a6e:	4618      	mov	r0, r3
 8014a70:	f7fa fcf2 	bl	800f458 <pbuf_clen>
 8014a74:	4603      	mov	r3, r0
 8014a76:	461a      	mov	r2, r3
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014a7e:	4413      	add	r3, r2
 8014a80:	b29a      	uxth	r2, r3
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d00e      	beq.n	8014ab0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d10a      	bne.n	8014ab0 <tcp_enqueue_flags+0x1b0>
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d106      	bne.n	8014ab0 <tcp_enqueue_flags+0x1b0>
 8014aa2:	4b06      	ldr	r3, [pc, #24]	@ (8014abc <tcp_enqueue_flags+0x1bc>)
 8014aa4:	f240 4265 	movw	r2, #1125	@ 0x465
 8014aa8:	490b      	ldr	r1, [pc, #44]	@ (8014ad8 <tcp_enqueue_flags+0x1d8>)
 8014aaa:	4806      	ldr	r0, [pc, #24]	@ (8014ac4 <tcp_enqueue_flags+0x1c4>)
 8014aac:	f005 fc98 	bl	801a3e0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014ab0:	2300      	movs	r3, #0
}
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	3720      	adds	r7, #32
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd80      	pop	{r7, pc}
 8014aba:	bf00      	nop
 8014abc:	080201c8 	.word	0x080201c8
 8014ac0:	080205ec 	.word	0x080205ec
 8014ac4:	0802021c 	.word	0x0802021c
 8014ac8:	08020644 	.word	0x08020644
 8014acc:	08020664 	.word	0x08020664
 8014ad0:	080206a0 	.word	0x080206a0
 8014ad4:	080206b8 	.word	0x080206b8
 8014ad8:	080206e4 	.word	0x080206e4

08014adc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014adc:	b5b0      	push	{r4, r5, r7, lr}
 8014ade:	b08a      	sub	sp, #40	@ 0x28
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d106      	bne.n	8014af8 <tcp_output+0x1c>
 8014aea:	4b8a      	ldr	r3, [pc, #552]	@ (8014d14 <tcp_output+0x238>)
 8014aec:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8014af0:	4989      	ldr	r1, [pc, #548]	@ (8014d18 <tcp_output+0x23c>)
 8014af2:	488a      	ldr	r0, [pc, #552]	@ (8014d1c <tcp_output+0x240>)
 8014af4:	f005 fc74 	bl	801a3e0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	7d1b      	ldrb	r3, [r3, #20]
 8014afc:	2b01      	cmp	r3, #1
 8014afe:	d106      	bne.n	8014b0e <tcp_output+0x32>
 8014b00:	4b84      	ldr	r3, [pc, #528]	@ (8014d14 <tcp_output+0x238>)
 8014b02:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8014b06:	4986      	ldr	r1, [pc, #536]	@ (8014d20 <tcp_output+0x244>)
 8014b08:	4884      	ldr	r0, [pc, #528]	@ (8014d1c <tcp_output+0x240>)
 8014b0a:	f005 fc69 	bl	801a3e0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014b0e:	4b85      	ldr	r3, [pc, #532]	@ (8014d24 <tcp_output+0x248>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	687a      	ldr	r2, [r7, #4]
 8014b14:	429a      	cmp	r2, r3
 8014b16:	d101      	bne.n	8014b1c <tcp_output+0x40>
    return ERR_OK;
 8014b18:	2300      	movs	r3, #0
 8014b1a:	e1ce      	b.n	8014eba <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014b28:	4293      	cmp	r3, r2
 8014b2a:	bf28      	it	cs
 8014b2c:	4613      	movcs	r3, r2
 8014b2e:	b29b      	uxth	r3, r3
 8014b30:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b36:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8014b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d10b      	bne.n	8014b56 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	8b5b      	ldrh	r3, [r3, #26]
 8014b42:	f003 0302 	and.w	r3, r3, #2
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	f000 81aa 	beq.w	8014ea0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8014b4c:	6878      	ldr	r0, [r7, #4]
 8014b4e:	f000 fdcb 	bl	80156e8 <tcp_send_empty_ack>
 8014b52:	4603      	mov	r3, r0
 8014b54:	e1b1      	b.n	8014eba <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014b56:	6879      	ldr	r1, [r7, #4]
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	3304      	adds	r3, #4
 8014b5c:	461a      	mov	r2, r3
 8014b5e:	6878      	ldr	r0, [r7, #4]
 8014b60:	f7ff f826 	bl	8013bb0 <tcp_route>
 8014b64:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014b66:	697b      	ldr	r3, [r7, #20]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d102      	bne.n	8014b72 <tcp_output+0x96>
    return ERR_RTE;
 8014b6c:	f06f 0303 	mvn.w	r3, #3
 8014b70:	e1a3      	b.n	8014eba <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d003      	beq.n	8014b80 <tcp_output+0xa4>
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d111      	bne.n	8014ba4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014b80:	697b      	ldr	r3, [r7, #20]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d002      	beq.n	8014b8c <tcp_output+0xb0>
 8014b86:	697b      	ldr	r3, [r7, #20]
 8014b88:	3304      	adds	r3, #4
 8014b8a:	e000      	b.n	8014b8e <tcp_output+0xb2>
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014b90:	693b      	ldr	r3, [r7, #16]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d102      	bne.n	8014b9c <tcp_output+0xc0>
      return ERR_RTE;
 8014b96:	f06f 0303 	mvn.w	r3, #3
 8014b9a:	e18e      	b.n	8014eba <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014b9c:	693b      	ldr	r3, [r7, #16]
 8014b9e:	681a      	ldr	r2, [r3, #0]
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ba6:	68db      	ldr	r3, [r3, #12]
 8014ba8:	685b      	ldr	r3, [r3, #4]
 8014baa:	4618      	mov	r0, r3
 8014bac:	f7f8 ff7f 	bl	800daae <lwip_htonl>
 8014bb0:	4602      	mov	r2, r0
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014bb6:	1ad3      	subs	r3, r2, r3
 8014bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014bba:	8912      	ldrh	r2, [r2, #8]
 8014bbc:	4413      	add	r3, r2
 8014bbe:	69ba      	ldr	r2, [r7, #24]
 8014bc0:	429a      	cmp	r2, r3
 8014bc2:	d227      	bcs.n	8014c14 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014bca:	461a      	mov	r2, r3
 8014bcc:	69bb      	ldr	r3, [r7, #24]
 8014bce:	4293      	cmp	r3, r2
 8014bd0:	d114      	bne.n	8014bfc <tcp_output+0x120>
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d110      	bne.n	8014bfc <tcp_output+0x120>
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d10b      	bne.n	8014bfc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	2200      	movs	r2, #0
 8014be8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	2201      	movs	r2, #1
 8014bf0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	8b5b      	ldrh	r3, [r3, #26]
 8014c00:	f003 0302 	and.w	r3, r3, #2
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	f000 814d 	beq.w	8014ea4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8014c0a:	6878      	ldr	r0, [r7, #4]
 8014c0c:	f000 fd6c 	bl	80156e8 <tcp_send_empty_ack>
 8014c10:	4603      	mov	r3, r0
 8014c12:	e152      	b.n	8014eba <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	2200      	movs	r2, #0
 8014c18:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014c20:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014c22:	6a3b      	ldr	r3, [r7, #32]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	f000 811c 	beq.w	8014e62 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8014c2a:	e002      	b.n	8014c32 <tcp_output+0x156>
 8014c2c:	6a3b      	ldr	r3, [r7, #32]
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	623b      	str	r3, [r7, #32]
 8014c32:	6a3b      	ldr	r3, [r7, #32]
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d1f8      	bne.n	8014c2c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014c3a:	e112      	b.n	8014e62 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c3e:	68db      	ldr	r3, [r3, #12]
 8014c40:	899b      	ldrh	r3, [r3, #12]
 8014c42:	b29b      	uxth	r3, r3
 8014c44:	4618      	mov	r0, r3
 8014c46:	f7f8 ff1d 	bl	800da84 <lwip_htons>
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	b2db      	uxtb	r3, r3
 8014c4e:	f003 0304 	and.w	r3, r3, #4
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d006      	beq.n	8014c64 <tcp_output+0x188>
 8014c56:	4b2f      	ldr	r3, [pc, #188]	@ (8014d14 <tcp_output+0x238>)
 8014c58:	f240 5236 	movw	r2, #1334	@ 0x536
 8014c5c:	4932      	ldr	r1, [pc, #200]	@ (8014d28 <tcp_output+0x24c>)
 8014c5e:	482f      	ldr	r0, [pc, #188]	@ (8014d1c <tcp_output+0x240>)
 8014c60:	f005 fbbe 	bl	801a3e0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d01f      	beq.n	8014cac <tcp_output+0x1d0>
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	8b5b      	ldrh	r3, [r3, #26]
 8014c70:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d119      	bne.n	8014cac <tcp_output+0x1d0>
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d00b      	beq.n	8014c98 <tcp_output+0x1bc>
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d110      	bne.n	8014cac <tcp_output+0x1d0>
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014c8e:	891a      	ldrh	r2, [r3, #8]
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014c94:	429a      	cmp	r2, r3
 8014c96:	d209      	bcs.n	8014cac <tcp_output+0x1d0>
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d004      	beq.n	8014cac <tcp_output+0x1d0>
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014ca8:	2b08      	cmp	r3, #8
 8014caa:	d901      	bls.n	8014cb0 <tcp_output+0x1d4>
 8014cac:	2301      	movs	r3, #1
 8014cae:	e000      	b.n	8014cb2 <tcp_output+0x1d6>
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d106      	bne.n	8014cc4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	8b5b      	ldrh	r3, [r3, #26]
 8014cba:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	f000 80e4 	beq.w	8014e8c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	7d1b      	ldrb	r3, [r3, #20]
 8014cc8:	2b02      	cmp	r3, #2
 8014cca:	d00d      	beq.n	8014ce8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cce:	68db      	ldr	r3, [r3, #12]
 8014cd0:	899b      	ldrh	r3, [r3, #12]
 8014cd2:	b29c      	uxth	r4, r3
 8014cd4:	2010      	movs	r0, #16
 8014cd6:	f7f8 fed5 	bl	800da84 <lwip_htons>
 8014cda:	4603      	mov	r3, r0
 8014cdc:	461a      	mov	r2, r3
 8014cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ce0:	68db      	ldr	r3, [r3, #12]
 8014ce2:	4322      	orrs	r2, r4
 8014ce4:	b292      	uxth	r2, r2
 8014ce6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014ce8:	697a      	ldr	r2, [r7, #20]
 8014cea:	6879      	ldr	r1, [r7, #4]
 8014cec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014cee:	f000 f909 	bl	8014f04 <tcp_output_segment>
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d016      	beq.n	8014d2c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	8b5b      	ldrh	r3, [r3, #26]
 8014d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014d06:	b29a      	uxth	r2, r3
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	835a      	strh	r2, [r3, #26]
      return err;
 8014d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d10:	e0d3      	b.n	8014eba <tcp_output+0x3de>
 8014d12:	bf00      	nop
 8014d14:	080201c8 	.word	0x080201c8
 8014d18:	0802070c 	.word	0x0802070c
 8014d1c:	0802021c 	.word	0x0802021c
 8014d20:	08020724 	.word	0x08020724
 8014d24:	2000d12c 	.word	0x2000d12c
 8014d28:	0802074c 	.word	0x0802074c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d2e:	681a      	ldr	r2, [r3, #0]
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	7d1b      	ldrb	r3, [r3, #20]
 8014d38:	2b02      	cmp	r3, #2
 8014d3a:	d006      	beq.n	8014d4a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	8b5b      	ldrh	r3, [r3, #26]
 8014d40:	f023 0303 	bic.w	r3, r3, #3
 8014d44:	b29a      	uxth	r2, r3
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d4c:	68db      	ldr	r3, [r3, #12]
 8014d4e:	685b      	ldr	r3, [r3, #4]
 8014d50:	4618      	mov	r0, r3
 8014d52:	f7f8 feac 	bl	800daae <lwip_htonl>
 8014d56:	4604      	mov	r4, r0
 8014d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d5a:	891b      	ldrh	r3, [r3, #8]
 8014d5c:	461d      	mov	r5, r3
 8014d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d60:	68db      	ldr	r3, [r3, #12]
 8014d62:	899b      	ldrh	r3, [r3, #12]
 8014d64:	b29b      	uxth	r3, r3
 8014d66:	4618      	mov	r0, r3
 8014d68:	f7f8 fe8c 	bl	800da84 <lwip_htons>
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	b2db      	uxtb	r3, r3
 8014d70:	f003 0303 	and.w	r3, r3, #3
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d001      	beq.n	8014d7c <tcp_output+0x2a0>
 8014d78:	2301      	movs	r3, #1
 8014d7a:	e000      	b.n	8014d7e <tcp_output+0x2a2>
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	442b      	add	r3, r5
 8014d80:	4423      	add	r3, r4
 8014d82:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014d88:	68bb      	ldr	r3, [r7, #8]
 8014d8a:	1ad3      	subs	r3, r2, r3
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	da02      	bge.n	8014d96 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	68ba      	ldr	r2, [r7, #8]
 8014d94:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d98:	891b      	ldrh	r3, [r3, #8]
 8014d9a:	461c      	mov	r4, r3
 8014d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d9e:	68db      	ldr	r3, [r3, #12]
 8014da0:	899b      	ldrh	r3, [r3, #12]
 8014da2:	b29b      	uxth	r3, r3
 8014da4:	4618      	mov	r0, r3
 8014da6:	f7f8 fe6d 	bl	800da84 <lwip_htons>
 8014daa:	4603      	mov	r3, r0
 8014dac:	b2db      	uxtb	r3, r3
 8014dae:	f003 0303 	and.w	r3, r3, #3
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d001      	beq.n	8014dba <tcp_output+0x2de>
 8014db6:	2301      	movs	r3, #1
 8014db8:	e000      	b.n	8014dbc <tcp_output+0x2e0>
 8014dba:	2300      	movs	r3, #0
 8014dbc:	4423      	add	r3, r4
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d049      	beq.n	8014e56 <tcp_output+0x37a>
      seg->next = NULL;
 8014dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d105      	bne.n	8014ddc <tcp_output+0x300>
        pcb->unacked = seg;
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014dd4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8014dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dd8:	623b      	str	r3, [r7, #32]
 8014dda:	e03f      	b.n	8014e5c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dde:	68db      	ldr	r3, [r3, #12]
 8014de0:	685b      	ldr	r3, [r3, #4]
 8014de2:	4618      	mov	r0, r3
 8014de4:	f7f8 fe63 	bl	800daae <lwip_htonl>
 8014de8:	4604      	mov	r4, r0
 8014dea:	6a3b      	ldr	r3, [r7, #32]
 8014dec:	68db      	ldr	r3, [r3, #12]
 8014dee:	685b      	ldr	r3, [r3, #4]
 8014df0:	4618      	mov	r0, r3
 8014df2:	f7f8 fe5c 	bl	800daae <lwip_htonl>
 8014df6:	4603      	mov	r3, r0
 8014df8:	1ae3      	subs	r3, r4, r3
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	da24      	bge.n	8014e48 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	3370      	adds	r3, #112	@ 0x70
 8014e02:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014e04:	e002      	b.n	8014e0c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014e06:	69fb      	ldr	r3, [r7, #28]
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014e0c:	69fb      	ldr	r3, [r7, #28]
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d011      	beq.n	8014e38 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014e14:	69fb      	ldr	r3, [r7, #28]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	68db      	ldr	r3, [r3, #12]
 8014e1a:	685b      	ldr	r3, [r3, #4]
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	f7f8 fe46 	bl	800daae <lwip_htonl>
 8014e22:	4604      	mov	r4, r0
 8014e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e26:	68db      	ldr	r3, [r3, #12]
 8014e28:	685b      	ldr	r3, [r3, #4]
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f7f8 fe3f 	bl	800daae <lwip_htonl>
 8014e30:	4603      	mov	r3, r0
 8014e32:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	dbe6      	blt.n	8014e06 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014e38:	69fb      	ldr	r3, [r7, #28]
 8014e3a:	681a      	ldr	r2, [r3, #0]
 8014e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e3e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014e40:	69fb      	ldr	r3, [r7, #28]
 8014e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014e44:	601a      	str	r2, [r3, #0]
 8014e46:	e009      	b.n	8014e5c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014e48:	6a3b      	ldr	r3, [r7, #32]
 8014e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014e4c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014e4e:	6a3b      	ldr	r3, [r7, #32]
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	623b      	str	r3, [r7, #32]
 8014e54:	e002      	b.n	8014e5c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014e56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014e58:	f7fb ff1f 	bl	8010c9a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e60:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8014e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d012      	beq.n	8014e8e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e6a:	68db      	ldr	r3, [r3, #12]
 8014e6c:	685b      	ldr	r3, [r3, #4]
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f7f8 fe1d 	bl	800daae <lwip_htonl>
 8014e74:	4602      	mov	r2, r0
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014e7a:	1ad3      	subs	r3, r2, r3
 8014e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014e7e:	8912      	ldrh	r2, [r2, #8]
 8014e80:	4413      	add	r3, r2
  while (seg != NULL &&
 8014e82:	69ba      	ldr	r2, [r7, #24]
 8014e84:	429a      	cmp	r2, r3
 8014e86:	f4bf aed9 	bcs.w	8014c3c <tcp_output+0x160>
 8014e8a:	e000      	b.n	8014e8e <tcp_output+0x3b2>
      break;
 8014e8c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d108      	bne.n	8014ea8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	2200      	movs	r2, #0
 8014e9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8014e9e:	e004      	b.n	8014eaa <tcp_output+0x3ce>
    goto output_done;
 8014ea0:	bf00      	nop
 8014ea2:	e002      	b.n	8014eaa <tcp_output+0x3ce>
    goto output_done;
 8014ea4:	bf00      	nop
 8014ea6:	e000      	b.n	8014eaa <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014ea8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	8b5b      	ldrh	r3, [r3, #26]
 8014eae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014eb2:	b29a      	uxth	r2, r3
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014eb8:	2300      	movs	r3, #0
}
 8014eba:	4618      	mov	r0, r3
 8014ebc:	3728      	adds	r7, #40	@ 0x28
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8014ec2:	bf00      	nop

08014ec4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	b082      	sub	sp, #8
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d106      	bne.n	8014ee0 <tcp_output_segment_busy+0x1c>
 8014ed2:	4b09      	ldr	r3, [pc, #36]	@ (8014ef8 <tcp_output_segment_busy+0x34>)
 8014ed4:	f240 529a 	movw	r2, #1434	@ 0x59a
 8014ed8:	4908      	ldr	r1, [pc, #32]	@ (8014efc <tcp_output_segment_busy+0x38>)
 8014eda:	4809      	ldr	r0, [pc, #36]	@ (8014f00 <tcp_output_segment_busy+0x3c>)
 8014edc:	f005 fa80 	bl	801a3e0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	685b      	ldr	r3, [r3, #4]
 8014ee4:	7b9b      	ldrb	r3, [r3, #14]
 8014ee6:	2b01      	cmp	r3, #1
 8014ee8:	d001      	beq.n	8014eee <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014eea:	2301      	movs	r3, #1
 8014eec:	e000      	b.n	8014ef0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8014eee:	2300      	movs	r3, #0
}
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	3708      	adds	r7, #8
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	bd80      	pop	{r7, pc}
 8014ef8:	080201c8 	.word	0x080201c8
 8014efc:	08020764 	.word	0x08020764
 8014f00:	0802021c 	.word	0x0802021c

08014f04 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014f04:	b5b0      	push	{r4, r5, r7, lr}
 8014f06:	b08c      	sub	sp, #48	@ 0x30
 8014f08:	af04      	add	r7, sp, #16
 8014f0a:	60f8      	str	r0, [r7, #12]
 8014f0c:	60b9      	str	r1, [r7, #8]
 8014f0e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d106      	bne.n	8014f24 <tcp_output_segment+0x20>
 8014f16:	4b64      	ldr	r3, [pc, #400]	@ (80150a8 <tcp_output_segment+0x1a4>)
 8014f18:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8014f1c:	4963      	ldr	r1, [pc, #396]	@ (80150ac <tcp_output_segment+0x1a8>)
 8014f1e:	4864      	ldr	r0, [pc, #400]	@ (80150b0 <tcp_output_segment+0x1ac>)
 8014f20:	f005 fa5e 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d106      	bne.n	8014f38 <tcp_output_segment+0x34>
 8014f2a:	4b5f      	ldr	r3, [pc, #380]	@ (80150a8 <tcp_output_segment+0x1a4>)
 8014f2c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8014f30:	4960      	ldr	r1, [pc, #384]	@ (80150b4 <tcp_output_segment+0x1b0>)
 8014f32:	485f      	ldr	r0, [pc, #380]	@ (80150b0 <tcp_output_segment+0x1ac>)
 8014f34:	f005 fa54 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d106      	bne.n	8014f4c <tcp_output_segment+0x48>
 8014f3e:	4b5a      	ldr	r3, [pc, #360]	@ (80150a8 <tcp_output_segment+0x1a4>)
 8014f40:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8014f44:	495c      	ldr	r1, [pc, #368]	@ (80150b8 <tcp_output_segment+0x1b4>)
 8014f46:	485a      	ldr	r0, [pc, #360]	@ (80150b0 <tcp_output_segment+0x1ac>)
 8014f48:	f005 fa4a 	bl	801a3e0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014f4c:	68f8      	ldr	r0, [r7, #12]
 8014f4e:	f7ff ffb9 	bl	8014ec4 <tcp_output_segment_busy>
 8014f52:	4603      	mov	r3, r0
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d001      	beq.n	8014f5c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014f58:	2300      	movs	r3, #0
 8014f5a:	e0a1      	b.n	80150a0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014f5c:	68bb      	ldr	r3, [r7, #8]
 8014f5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	68dc      	ldr	r4, [r3, #12]
 8014f64:	4610      	mov	r0, r2
 8014f66:	f7f8 fda2 	bl	800daae <lwip_htonl>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014f6e:	68bb      	ldr	r3, [r7, #8]
 8014f70:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	68dc      	ldr	r4, [r3, #12]
 8014f76:	4610      	mov	r0, r2
 8014f78:	f7f8 fd84 	bl	800da84 <lwip_htons>
 8014f7c:	4603      	mov	r3, r0
 8014f7e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014f80:	68bb      	ldr	r3, [r7, #8]
 8014f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f84:	68ba      	ldr	r2, [r7, #8]
 8014f86:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8014f88:	441a      	add	r2, r3
 8014f8a:	68bb      	ldr	r3, [r7, #8]
 8014f8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	68db      	ldr	r3, [r3, #12]
 8014f92:	3314      	adds	r3, #20
 8014f94:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	7a9b      	ldrb	r3, [r3, #10]
 8014f9a:	f003 0301 	and.w	r3, r3, #1
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d015      	beq.n	8014fce <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014fa2:	68bb      	ldr	r3, [r7, #8]
 8014fa4:	3304      	adds	r3, #4
 8014fa6:	461a      	mov	r2, r3
 8014fa8:	6879      	ldr	r1, [r7, #4]
 8014faa:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8014fae:	f7fc fa39 	bl	8011424 <tcp_eff_send_mss_netif>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014fb6:	8b7b      	ldrh	r3, [r7, #26]
 8014fb8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	f7f8 fd76 	bl	800daae <lwip_htonl>
 8014fc2:	4602      	mov	r2, r0
 8014fc4:	69fb      	ldr	r3, [r7, #28]
 8014fc6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014fc8:	69fb      	ldr	r3, [r7, #28]
 8014fca:	3304      	adds	r3, #4
 8014fcc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014fce:	68bb      	ldr	r3, [r7, #8]
 8014fd0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	da02      	bge.n	8014fde <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014fd8:	68bb      	ldr	r3, [r7, #8]
 8014fda:	2200      	movs	r2, #0
 8014fdc:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8014fde:	68bb      	ldr	r3, [r7, #8]
 8014fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d10c      	bne.n	8015000 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014fe6:	4b35      	ldr	r3, [pc, #212]	@ (80150bc <tcp_output_segment+0x1b8>)
 8014fe8:	681a      	ldr	r2, [r3, #0]
 8014fea:	68bb      	ldr	r3, [r7, #8]
 8014fec:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	68db      	ldr	r3, [r3, #12]
 8014ff2:	685b      	ldr	r3, [r3, #4]
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f7f8 fd5a 	bl	800daae <lwip_htonl>
 8014ffa:	4602      	mov	r2, r0
 8014ffc:	68bb      	ldr	r3, [r7, #8]
 8014ffe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	68da      	ldr	r2, [r3, #12]
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	685b      	ldr	r3, [r3, #4]
 8015008:	685b      	ldr	r3, [r3, #4]
 801500a:	1ad3      	subs	r3, r2, r3
 801500c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	685b      	ldr	r3, [r3, #4]
 8015012:	8959      	ldrh	r1, [r3, #10]
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	685b      	ldr	r3, [r3, #4]
 8015018:	8b3a      	ldrh	r2, [r7, #24]
 801501a:	1a8a      	subs	r2, r1, r2
 801501c:	b292      	uxth	r2, r2
 801501e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	685b      	ldr	r3, [r3, #4]
 8015024:	8919      	ldrh	r1, [r3, #8]
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	685b      	ldr	r3, [r3, #4]
 801502a:	8b3a      	ldrh	r2, [r7, #24]
 801502c:	1a8a      	subs	r2, r1, r2
 801502e:	b292      	uxth	r2, r2
 8015030:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	685b      	ldr	r3, [r3, #4]
 8015036:	68fa      	ldr	r2, [r7, #12]
 8015038:	68d2      	ldr	r2, [r2, #12]
 801503a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	68db      	ldr	r3, [r3, #12]
 8015040:	2200      	movs	r2, #0
 8015042:	741a      	strb	r2, [r3, #16]
 8015044:	2200      	movs	r2, #0
 8015046:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	68da      	ldr	r2, [r3, #12]
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	7a9b      	ldrb	r3, [r3, #10]
 8015050:	f003 0301 	and.w	r3, r3, #1
 8015054:	2b00      	cmp	r3, #0
 8015056:	d001      	beq.n	801505c <tcp_output_segment+0x158>
 8015058:	2318      	movs	r3, #24
 801505a:	e000      	b.n	801505e <tcp_output_segment+0x15a>
 801505c:	2314      	movs	r3, #20
 801505e:	4413      	add	r3, r2
 8015060:	69fa      	ldr	r2, [r7, #28]
 8015062:	429a      	cmp	r2, r3
 8015064:	d006      	beq.n	8015074 <tcp_output_segment+0x170>
 8015066:	4b10      	ldr	r3, [pc, #64]	@ (80150a8 <tcp_output_segment+0x1a4>)
 8015068:	f240 621c 	movw	r2, #1564	@ 0x61c
 801506c:	4914      	ldr	r1, [pc, #80]	@ (80150c0 <tcp_output_segment+0x1bc>)
 801506e:	4810      	ldr	r0, [pc, #64]	@ (80150b0 <tcp_output_segment+0x1ac>)
 8015070:	f005 f9b6 	bl	801a3e0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	6858      	ldr	r0, [r3, #4]
 8015078:	68b9      	ldr	r1, [r7, #8]
 801507a:	68bb      	ldr	r3, [r7, #8]
 801507c:	1d1c      	adds	r4, r3, #4
 801507e:	68bb      	ldr	r3, [r7, #8]
 8015080:	7add      	ldrb	r5, [r3, #11]
 8015082:	68bb      	ldr	r3, [r7, #8]
 8015084:	7a9b      	ldrb	r3, [r3, #10]
 8015086:	687a      	ldr	r2, [r7, #4]
 8015088:	9202      	str	r2, [sp, #8]
 801508a:	2206      	movs	r2, #6
 801508c:	9201      	str	r2, [sp, #4]
 801508e:	9300      	str	r3, [sp, #0]
 8015090:	462b      	mov	r3, r5
 8015092:	4622      	mov	r2, r4
 8015094:	f002 fdae 	bl	8017bf4 <ip4_output_if>
 8015098:	4603      	mov	r3, r0
 801509a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801509c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80150a0:	4618      	mov	r0, r3
 80150a2:	3720      	adds	r7, #32
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bdb0      	pop	{r4, r5, r7, pc}
 80150a8:	080201c8 	.word	0x080201c8
 80150ac:	0802078c 	.word	0x0802078c
 80150b0:	0802021c 	.word	0x0802021c
 80150b4:	080207ac 	.word	0x080207ac
 80150b8:	080207cc 	.word	0x080207cc
 80150bc:	2000d0e0 	.word	0x2000d0e0
 80150c0:	080207f0 	.word	0x080207f0

080150c4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80150c4:	b5b0      	push	{r4, r5, r7, lr}
 80150c6:	b084      	sub	sp, #16
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d106      	bne.n	80150e0 <tcp_rexmit_rto_prepare+0x1c>
 80150d2:	4b31      	ldr	r3, [pc, #196]	@ (8015198 <tcp_rexmit_rto_prepare+0xd4>)
 80150d4:	f240 6263 	movw	r2, #1635	@ 0x663
 80150d8:	4930      	ldr	r1, [pc, #192]	@ (801519c <tcp_rexmit_rto_prepare+0xd8>)
 80150da:	4831      	ldr	r0, [pc, #196]	@ (80151a0 <tcp_rexmit_rto_prepare+0xdc>)
 80150dc:	f005 f980 	bl	801a3e0 <iprintf>

  if (pcb->unacked == NULL) {
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d102      	bne.n	80150ee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80150e8:	f06f 0305 	mvn.w	r3, #5
 80150ec:	e050      	b.n	8015190 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80150f2:	60fb      	str	r3, [r7, #12]
 80150f4:	e00b      	b.n	801510e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80150f6:	68f8      	ldr	r0, [r7, #12]
 80150f8:	f7ff fee4 	bl	8014ec4 <tcp_output_segment_busy>
 80150fc:	4603      	mov	r3, r0
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d002      	beq.n	8015108 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015102:	f06f 0305 	mvn.w	r3, #5
 8015106:	e043      	b.n	8015190 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	60fb      	str	r3, [r7, #12]
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d1ef      	bne.n	80150f6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015116:	68f8      	ldr	r0, [r7, #12]
 8015118:	f7ff fed4 	bl	8014ec4 <tcp_output_segment_busy>
 801511c:	4603      	mov	r3, r0
 801511e:	2b00      	cmp	r3, #0
 8015120:	d002      	beq.n	8015128 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015122:	f06f 0305 	mvn.w	r3, #5
 8015126:	e033      	b.n	8015190 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	2200      	movs	r2, #0
 801513c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	8b5b      	ldrh	r3, [r3, #26]
 8015142:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8015146:	b29a      	uxth	r2, r3
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	68db      	ldr	r3, [r3, #12]
 8015150:	685b      	ldr	r3, [r3, #4]
 8015152:	4618      	mov	r0, r3
 8015154:	f7f8 fcab 	bl	800daae <lwip_htonl>
 8015158:	4604      	mov	r4, r0
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	891b      	ldrh	r3, [r3, #8]
 801515e:	461d      	mov	r5, r3
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	68db      	ldr	r3, [r3, #12]
 8015164:	899b      	ldrh	r3, [r3, #12]
 8015166:	b29b      	uxth	r3, r3
 8015168:	4618      	mov	r0, r3
 801516a:	f7f8 fc8b 	bl	800da84 <lwip_htons>
 801516e:	4603      	mov	r3, r0
 8015170:	b2db      	uxtb	r3, r3
 8015172:	f003 0303 	and.w	r3, r3, #3
 8015176:	2b00      	cmp	r3, #0
 8015178:	d001      	beq.n	801517e <tcp_rexmit_rto_prepare+0xba>
 801517a:	2301      	movs	r3, #1
 801517c:	e000      	b.n	8015180 <tcp_rexmit_rto_prepare+0xbc>
 801517e:	2300      	movs	r3, #0
 8015180:	442b      	add	r3, r5
 8015182:	18e2      	adds	r2, r4, r3
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	2200      	movs	r2, #0
 801518c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801518e:	2300      	movs	r3, #0
}
 8015190:	4618      	mov	r0, r3
 8015192:	3710      	adds	r7, #16
 8015194:	46bd      	mov	sp, r7
 8015196:	bdb0      	pop	{r4, r5, r7, pc}
 8015198:	080201c8 	.word	0x080201c8
 801519c:	08020804 	.word	0x08020804
 80151a0:	0802021c 	.word	0x0802021c

080151a4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b082      	sub	sp, #8
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d106      	bne.n	80151c0 <tcp_rexmit_rto_commit+0x1c>
 80151b2:	4b0d      	ldr	r3, [pc, #52]	@ (80151e8 <tcp_rexmit_rto_commit+0x44>)
 80151b4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80151b8:	490c      	ldr	r1, [pc, #48]	@ (80151ec <tcp_rexmit_rto_commit+0x48>)
 80151ba:	480d      	ldr	r0, [pc, #52]	@ (80151f0 <tcp_rexmit_rto_commit+0x4c>)
 80151bc:	f005 f910 	bl	801a3e0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80151c6:	2bff      	cmp	r3, #255	@ 0xff
 80151c8:	d007      	beq.n	80151da <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80151d0:	3301      	adds	r3, #1
 80151d2:	b2da      	uxtb	r2, r3
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80151da:	6878      	ldr	r0, [r7, #4]
 80151dc:	f7ff fc7e 	bl	8014adc <tcp_output>
}
 80151e0:	bf00      	nop
 80151e2:	3708      	adds	r7, #8
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd80      	pop	{r7, pc}
 80151e8:	080201c8 	.word	0x080201c8
 80151ec:	08020828 	.word	0x08020828
 80151f0:	0802021c 	.word	0x0802021c

080151f4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b082      	sub	sp, #8
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d106      	bne.n	8015210 <tcp_rexmit_rto+0x1c>
 8015202:	4b0a      	ldr	r3, [pc, #40]	@ (801522c <tcp_rexmit_rto+0x38>)
 8015204:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8015208:	4909      	ldr	r1, [pc, #36]	@ (8015230 <tcp_rexmit_rto+0x3c>)
 801520a:	480a      	ldr	r0, [pc, #40]	@ (8015234 <tcp_rexmit_rto+0x40>)
 801520c:	f005 f8e8 	bl	801a3e0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015210:	6878      	ldr	r0, [r7, #4]
 8015212:	f7ff ff57 	bl	80150c4 <tcp_rexmit_rto_prepare>
 8015216:	4603      	mov	r3, r0
 8015218:	2b00      	cmp	r3, #0
 801521a:	d102      	bne.n	8015222 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801521c:	6878      	ldr	r0, [r7, #4]
 801521e:	f7ff ffc1 	bl	80151a4 <tcp_rexmit_rto_commit>
  }
}
 8015222:	bf00      	nop
 8015224:	3708      	adds	r7, #8
 8015226:	46bd      	mov	sp, r7
 8015228:	bd80      	pop	{r7, pc}
 801522a:	bf00      	nop
 801522c:	080201c8 	.word	0x080201c8
 8015230:	0802084c 	.word	0x0802084c
 8015234:	0802021c 	.word	0x0802021c

08015238 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015238:	b590      	push	{r4, r7, lr}
 801523a:	b085      	sub	sp, #20
 801523c:	af00      	add	r7, sp, #0
 801523e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d106      	bne.n	8015254 <tcp_rexmit+0x1c>
 8015246:	4b2f      	ldr	r3, [pc, #188]	@ (8015304 <tcp_rexmit+0xcc>)
 8015248:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801524c:	492e      	ldr	r1, [pc, #184]	@ (8015308 <tcp_rexmit+0xd0>)
 801524e:	482f      	ldr	r0, [pc, #188]	@ (801530c <tcp_rexmit+0xd4>)
 8015250:	f005 f8c6 	bl	801a3e0 <iprintf>

  if (pcb->unacked == NULL) {
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015258:	2b00      	cmp	r3, #0
 801525a:	d102      	bne.n	8015262 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801525c:	f06f 0305 	mvn.w	r3, #5
 8015260:	e04c      	b.n	80152fc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015266:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015268:	68b8      	ldr	r0, [r7, #8]
 801526a:	f7ff fe2b 	bl	8014ec4 <tcp_output_segment_busy>
 801526e:	4603      	mov	r3, r0
 8015270:	2b00      	cmp	r3, #0
 8015272:	d002      	beq.n	801527a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015274:	f06f 0305 	mvn.w	r3, #5
 8015278:	e040      	b.n	80152fc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801527a:	68bb      	ldr	r3, [r7, #8]
 801527c:	681a      	ldr	r2, [r3, #0]
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	336c      	adds	r3, #108	@ 0x6c
 8015286:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015288:	e002      	b.n	8015290 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d011      	beq.n	80152bc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	68db      	ldr	r3, [r3, #12]
 801529e:	685b      	ldr	r3, [r3, #4]
 80152a0:	4618      	mov	r0, r3
 80152a2:	f7f8 fc04 	bl	800daae <lwip_htonl>
 80152a6:	4604      	mov	r4, r0
 80152a8:	68bb      	ldr	r3, [r7, #8]
 80152aa:	68db      	ldr	r3, [r3, #12]
 80152ac:	685b      	ldr	r3, [r3, #4]
 80152ae:	4618      	mov	r0, r3
 80152b0:	f7f8 fbfd 	bl	800daae <lwip_htonl>
 80152b4:	4603      	mov	r3, r0
 80152b6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	dbe6      	blt.n	801528a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	681a      	ldr	r2, [r3, #0]
 80152c0:	68bb      	ldr	r3, [r7, #8]
 80152c2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	68ba      	ldr	r2, [r7, #8]
 80152c8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80152ca:	68bb      	ldr	r3, [r7, #8]
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d103      	bne.n	80152da <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	2200      	movs	r2, #0
 80152d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80152e0:	2bff      	cmp	r3, #255	@ 0xff
 80152e2:	d007      	beq.n	80152f4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80152ea:	3301      	adds	r3, #1
 80152ec:	b2da      	uxtb	r2, r3
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	2200      	movs	r2, #0
 80152f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80152fa:	2300      	movs	r3, #0
}
 80152fc:	4618      	mov	r0, r3
 80152fe:	3714      	adds	r7, #20
 8015300:	46bd      	mov	sp, r7
 8015302:	bd90      	pop	{r4, r7, pc}
 8015304:	080201c8 	.word	0x080201c8
 8015308:	08020868 	.word	0x08020868
 801530c:	0802021c 	.word	0x0802021c

08015310 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015310:	b580      	push	{r7, lr}
 8015312:	b082      	sub	sp, #8
 8015314:	af00      	add	r7, sp, #0
 8015316:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d106      	bne.n	801532c <tcp_rexmit_fast+0x1c>
 801531e:	4b2a      	ldr	r3, [pc, #168]	@ (80153c8 <tcp_rexmit_fast+0xb8>)
 8015320:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8015324:	4929      	ldr	r1, [pc, #164]	@ (80153cc <tcp_rexmit_fast+0xbc>)
 8015326:	482a      	ldr	r0, [pc, #168]	@ (80153d0 <tcp_rexmit_fast+0xc0>)
 8015328:	f005 f85a 	bl	801a3e0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015330:	2b00      	cmp	r3, #0
 8015332:	d044      	beq.n	80153be <tcp_rexmit_fast+0xae>
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	8b5b      	ldrh	r3, [r3, #26]
 8015338:	f003 0304 	and.w	r3, r3, #4
 801533c:	2b00      	cmp	r3, #0
 801533e:	d13e      	bne.n	80153be <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015340:	6878      	ldr	r0, [r7, #4]
 8015342:	f7ff ff79 	bl	8015238 <tcp_rexmit>
 8015346:	4603      	mov	r3, r0
 8015348:	2b00      	cmp	r3, #0
 801534a:	d138      	bne.n	80153be <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015358:	4293      	cmp	r3, r2
 801535a:	bf28      	it	cs
 801535c:	4613      	movcs	r3, r2
 801535e:	b29b      	uxth	r3, r3
 8015360:	0fda      	lsrs	r2, r3, #31
 8015362:	4413      	add	r3, r2
 8015364:	105b      	asrs	r3, r3, #1
 8015366:	b29a      	uxth	r2, r3
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015374:	461a      	mov	r2, r3
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801537a:	005b      	lsls	r3, r3, #1
 801537c:	429a      	cmp	r2, r3
 801537e:	d206      	bcs.n	801538e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015384:	005b      	lsls	r3, r3, #1
 8015386:	b29a      	uxth	r2, r3
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015398:	4619      	mov	r1, r3
 801539a:	0049      	lsls	r1, r1, #1
 801539c:	440b      	add	r3, r1
 801539e:	b29b      	uxth	r3, r3
 80153a0:	4413      	add	r3, r2
 80153a2:	b29a      	uxth	r2, r3
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	8b5b      	ldrh	r3, [r3, #26]
 80153ae:	f043 0304 	orr.w	r3, r3, #4
 80153b2:	b29a      	uxth	r2, r3
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2200      	movs	r2, #0
 80153bc:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80153be:	bf00      	nop
 80153c0:	3708      	adds	r7, #8
 80153c2:	46bd      	mov	sp, r7
 80153c4:	bd80      	pop	{r7, pc}
 80153c6:	bf00      	nop
 80153c8:	080201c8 	.word	0x080201c8
 80153cc:	08020880 	.word	0x08020880
 80153d0:	0802021c 	.word	0x0802021c

080153d4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b086      	sub	sp, #24
 80153d8:	af00      	add	r7, sp, #0
 80153da:	60f8      	str	r0, [r7, #12]
 80153dc:	607b      	str	r3, [r7, #4]
 80153de:	460b      	mov	r3, r1
 80153e0:	817b      	strh	r3, [r7, #10]
 80153e2:	4613      	mov	r3, r2
 80153e4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80153e6:	897a      	ldrh	r2, [r7, #10]
 80153e8:	893b      	ldrh	r3, [r7, #8]
 80153ea:	4413      	add	r3, r2
 80153ec:	b29b      	uxth	r3, r3
 80153ee:	3314      	adds	r3, #20
 80153f0:	b29b      	uxth	r3, r3
 80153f2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80153f6:	4619      	mov	r1, r3
 80153f8:	2022      	movs	r0, #34	@ 0x22
 80153fa:	f7f9 fc89 	bl	800ed10 <pbuf_alloc>
 80153fe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015400:	697b      	ldr	r3, [r7, #20]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d04d      	beq.n	80154a2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015406:	897b      	ldrh	r3, [r7, #10]
 8015408:	3313      	adds	r3, #19
 801540a:	697a      	ldr	r2, [r7, #20]
 801540c:	8952      	ldrh	r2, [r2, #10]
 801540e:	4293      	cmp	r3, r2
 8015410:	db06      	blt.n	8015420 <tcp_output_alloc_header_common+0x4c>
 8015412:	4b26      	ldr	r3, [pc, #152]	@ (80154ac <tcp_output_alloc_header_common+0xd8>)
 8015414:	f240 7223 	movw	r2, #1827	@ 0x723
 8015418:	4925      	ldr	r1, [pc, #148]	@ (80154b0 <tcp_output_alloc_header_common+0xdc>)
 801541a:	4826      	ldr	r0, [pc, #152]	@ (80154b4 <tcp_output_alloc_header_common+0xe0>)
 801541c:	f004 ffe0 	bl	801a3e0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015420:	697b      	ldr	r3, [r7, #20]
 8015422:	685b      	ldr	r3, [r3, #4]
 8015424:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015426:	8c3b      	ldrh	r3, [r7, #32]
 8015428:	4618      	mov	r0, r3
 801542a:	f7f8 fb2b 	bl	800da84 <lwip_htons>
 801542e:	4603      	mov	r3, r0
 8015430:	461a      	mov	r2, r3
 8015432:	693b      	ldr	r3, [r7, #16]
 8015434:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015436:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015438:	4618      	mov	r0, r3
 801543a:	f7f8 fb23 	bl	800da84 <lwip_htons>
 801543e:	4603      	mov	r3, r0
 8015440:	461a      	mov	r2, r3
 8015442:	693b      	ldr	r3, [r7, #16]
 8015444:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015446:	693b      	ldr	r3, [r7, #16]
 8015448:	687a      	ldr	r2, [r7, #4]
 801544a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801544c:	68f8      	ldr	r0, [r7, #12]
 801544e:	f7f8 fb2e 	bl	800daae <lwip_htonl>
 8015452:	4602      	mov	r2, r0
 8015454:	693b      	ldr	r3, [r7, #16]
 8015456:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015458:	897b      	ldrh	r3, [r7, #10]
 801545a:	089b      	lsrs	r3, r3, #2
 801545c:	b29b      	uxth	r3, r3
 801545e:	3305      	adds	r3, #5
 8015460:	b29b      	uxth	r3, r3
 8015462:	031b      	lsls	r3, r3, #12
 8015464:	b29a      	uxth	r2, r3
 8015466:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801546a:	b29b      	uxth	r3, r3
 801546c:	4313      	orrs	r3, r2
 801546e:	b29b      	uxth	r3, r3
 8015470:	4618      	mov	r0, r3
 8015472:	f7f8 fb07 	bl	800da84 <lwip_htons>
 8015476:	4603      	mov	r3, r0
 8015478:	461a      	mov	r2, r3
 801547a:	693b      	ldr	r3, [r7, #16]
 801547c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801547e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015480:	4618      	mov	r0, r3
 8015482:	f7f8 faff 	bl	800da84 <lwip_htons>
 8015486:	4603      	mov	r3, r0
 8015488:	461a      	mov	r2, r3
 801548a:	693b      	ldr	r3, [r7, #16]
 801548c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801548e:	693b      	ldr	r3, [r7, #16]
 8015490:	2200      	movs	r2, #0
 8015492:	741a      	strb	r2, [r3, #16]
 8015494:	2200      	movs	r2, #0
 8015496:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015498:	693b      	ldr	r3, [r7, #16]
 801549a:	2200      	movs	r2, #0
 801549c:	749a      	strb	r2, [r3, #18]
 801549e:	2200      	movs	r2, #0
 80154a0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80154a2:	697b      	ldr	r3, [r7, #20]
}
 80154a4:	4618      	mov	r0, r3
 80154a6:	3718      	adds	r7, #24
 80154a8:	46bd      	mov	sp, r7
 80154aa:	bd80      	pop	{r7, pc}
 80154ac:	080201c8 	.word	0x080201c8
 80154b0:	080208a0 	.word	0x080208a0
 80154b4:	0802021c 	.word	0x0802021c

080154b8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80154b8:	b5b0      	push	{r4, r5, r7, lr}
 80154ba:	b08a      	sub	sp, #40	@ 0x28
 80154bc:	af04      	add	r7, sp, #16
 80154be:	60f8      	str	r0, [r7, #12]
 80154c0:	607b      	str	r3, [r7, #4]
 80154c2:	460b      	mov	r3, r1
 80154c4:	817b      	strh	r3, [r7, #10]
 80154c6:	4613      	mov	r3, r2
 80154c8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d106      	bne.n	80154de <tcp_output_alloc_header+0x26>
 80154d0:	4b15      	ldr	r3, [pc, #84]	@ (8015528 <tcp_output_alloc_header+0x70>)
 80154d2:	f240 7242 	movw	r2, #1858	@ 0x742
 80154d6:	4915      	ldr	r1, [pc, #84]	@ (801552c <tcp_output_alloc_header+0x74>)
 80154d8:	4815      	ldr	r0, [pc, #84]	@ (8015530 <tcp_output_alloc_header+0x78>)
 80154da:	f004 ff81 	bl	801a3e0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	8adb      	ldrh	r3, [r3, #22]
 80154e6:	68fa      	ldr	r2, [r7, #12]
 80154e8:	8b12      	ldrh	r2, [r2, #24]
 80154ea:	68f9      	ldr	r1, [r7, #12]
 80154ec:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80154ee:	893d      	ldrh	r5, [r7, #8]
 80154f0:	897c      	ldrh	r4, [r7, #10]
 80154f2:	9103      	str	r1, [sp, #12]
 80154f4:	2110      	movs	r1, #16
 80154f6:	9102      	str	r1, [sp, #8]
 80154f8:	9201      	str	r2, [sp, #4]
 80154fa:	9300      	str	r3, [sp, #0]
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	462a      	mov	r2, r5
 8015500:	4621      	mov	r1, r4
 8015502:	f7ff ff67 	bl	80153d4 <tcp_output_alloc_header_common>
 8015506:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015508:	697b      	ldr	r3, [r7, #20]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d006      	beq.n	801551c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015512:	68fa      	ldr	r2, [r7, #12]
 8015514:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8015516:	441a      	add	r2, r3
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801551c:	697b      	ldr	r3, [r7, #20]
}
 801551e:	4618      	mov	r0, r3
 8015520:	3718      	adds	r7, #24
 8015522:	46bd      	mov	sp, r7
 8015524:	bdb0      	pop	{r4, r5, r7, pc}
 8015526:	bf00      	nop
 8015528:	080201c8 	.word	0x080201c8
 801552c:	080208d0 	.word	0x080208d0
 8015530:	0802021c 	.word	0x0802021c

08015534 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b088      	sub	sp, #32
 8015538:	af00      	add	r7, sp, #0
 801553a:	60f8      	str	r0, [r7, #12]
 801553c:	60b9      	str	r1, [r7, #8]
 801553e:	4611      	mov	r1, r2
 8015540:	461a      	mov	r2, r3
 8015542:	460b      	mov	r3, r1
 8015544:	71fb      	strb	r3, [r7, #7]
 8015546:	4613      	mov	r3, r2
 8015548:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801554a:	2300      	movs	r3, #0
 801554c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801554e:	68bb      	ldr	r3, [r7, #8]
 8015550:	2b00      	cmp	r3, #0
 8015552:	d106      	bne.n	8015562 <tcp_output_fill_options+0x2e>
 8015554:	4b12      	ldr	r3, [pc, #72]	@ (80155a0 <tcp_output_fill_options+0x6c>)
 8015556:	f240 7256 	movw	r2, #1878	@ 0x756
 801555a:	4912      	ldr	r1, [pc, #72]	@ (80155a4 <tcp_output_fill_options+0x70>)
 801555c:	4812      	ldr	r0, [pc, #72]	@ (80155a8 <tcp_output_fill_options+0x74>)
 801555e:	f004 ff3f 	bl	801a3e0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015562:	68bb      	ldr	r3, [r7, #8]
 8015564:	685b      	ldr	r3, [r3, #4]
 8015566:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015568:	69bb      	ldr	r3, [r7, #24]
 801556a:	3314      	adds	r3, #20
 801556c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801556e:	8bfb      	ldrh	r3, [r7, #30]
 8015570:	009b      	lsls	r3, r3, #2
 8015572:	461a      	mov	r2, r3
 8015574:	79fb      	ldrb	r3, [r7, #7]
 8015576:	009b      	lsls	r3, r3, #2
 8015578:	f003 0304 	and.w	r3, r3, #4
 801557c:	4413      	add	r3, r2
 801557e:	3314      	adds	r3, #20
 8015580:	69ba      	ldr	r2, [r7, #24]
 8015582:	4413      	add	r3, r2
 8015584:	697a      	ldr	r2, [r7, #20]
 8015586:	429a      	cmp	r2, r3
 8015588:	d006      	beq.n	8015598 <tcp_output_fill_options+0x64>
 801558a:	4b05      	ldr	r3, [pc, #20]	@ (80155a0 <tcp_output_fill_options+0x6c>)
 801558c:	f240 7275 	movw	r2, #1909	@ 0x775
 8015590:	4906      	ldr	r1, [pc, #24]	@ (80155ac <tcp_output_fill_options+0x78>)
 8015592:	4805      	ldr	r0, [pc, #20]	@ (80155a8 <tcp_output_fill_options+0x74>)
 8015594:	f004 ff24 	bl	801a3e0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015598:	bf00      	nop
 801559a:	3720      	adds	r7, #32
 801559c:	46bd      	mov	sp, r7
 801559e:	bd80      	pop	{r7, pc}
 80155a0:	080201c8 	.word	0x080201c8
 80155a4:	080208f8 	.word	0x080208f8
 80155a8:	0802021c 	.word	0x0802021c
 80155ac:	080207f0 	.word	0x080207f0

080155b0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b08a      	sub	sp, #40	@ 0x28
 80155b4:	af04      	add	r7, sp, #16
 80155b6:	60f8      	str	r0, [r7, #12]
 80155b8:	60b9      	str	r1, [r7, #8]
 80155ba:	607a      	str	r2, [r7, #4]
 80155bc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80155be:	68bb      	ldr	r3, [r7, #8]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d106      	bne.n	80155d2 <tcp_output_control_segment+0x22>
 80155c4:	4b1c      	ldr	r3, [pc, #112]	@ (8015638 <tcp_output_control_segment+0x88>)
 80155c6:	f240 7287 	movw	r2, #1927	@ 0x787
 80155ca:	491c      	ldr	r1, [pc, #112]	@ (801563c <tcp_output_control_segment+0x8c>)
 80155cc:	481c      	ldr	r0, [pc, #112]	@ (8015640 <tcp_output_control_segment+0x90>)
 80155ce:	f004 ff07 	bl	801a3e0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80155d2:	683a      	ldr	r2, [r7, #0]
 80155d4:	6879      	ldr	r1, [r7, #4]
 80155d6:	68f8      	ldr	r0, [r7, #12]
 80155d8:	f7fe faea 	bl	8013bb0 <tcp_route>
 80155dc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80155de:	693b      	ldr	r3, [r7, #16]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d102      	bne.n	80155ea <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80155e4:	23fc      	movs	r3, #252	@ 0xfc
 80155e6:	75fb      	strb	r3, [r7, #23]
 80155e8:	e01c      	b.n	8015624 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d006      	beq.n	80155fe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	7adb      	ldrb	r3, [r3, #11]
 80155f4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	7a9b      	ldrb	r3, [r3, #10]
 80155fa:	757b      	strb	r3, [r7, #21]
 80155fc:	e003      	b.n	8015606 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80155fe:	23ff      	movs	r3, #255	@ 0xff
 8015600:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015602:	2300      	movs	r3, #0
 8015604:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015606:	7dba      	ldrb	r2, [r7, #22]
 8015608:	693b      	ldr	r3, [r7, #16]
 801560a:	9302      	str	r3, [sp, #8]
 801560c:	2306      	movs	r3, #6
 801560e:	9301      	str	r3, [sp, #4]
 8015610:	7d7b      	ldrb	r3, [r7, #21]
 8015612:	9300      	str	r3, [sp, #0]
 8015614:	4613      	mov	r3, r2
 8015616:	683a      	ldr	r2, [r7, #0]
 8015618:	6879      	ldr	r1, [r7, #4]
 801561a:	68b8      	ldr	r0, [r7, #8]
 801561c:	f002 faea 	bl	8017bf4 <ip4_output_if>
 8015620:	4603      	mov	r3, r0
 8015622:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015624:	68b8      	ldr	r0, [r7, #8]
 8015626:	f7f9 fe89 	bl	800f33c <pbuf_free>
  return err;
 801562a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801562e:	4618      	mov	r0, r3
 8015630:	3718      	adds	r7, #24
 8015632:	46bd      	mov	sp, r7
 8015634:	bd80      	pop	{r7, pc}
 8015636:	bf00      	nop
 8015638:	080201c8 	.word	0x080201c8
 801563c:	08020920 	.word	0x08020920
 8015640:	0802021c 	.word	0x0802021c

08015644 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015644:	b590      	push	{r4, r7, lr}
 8015646:	b08b      	sub	sp, #44	@ 0x2c
 8015648:	af04      	add	r7, sp, #16
 801564a:	60f8      	str	r0, [r7, #12]
 801564c:	60b9      	str	r1, [r7, #8]
 801564e:	607a      	str	r2, [r7, #4]
 8015650:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015652:	683b      	ldr	r3, [r7, #0]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d106      	bne.n	8015666 <tcp_rst+0x22>
 8015658:	4b1f      	ldr	r3, [pc, #124]	@ (80156d8 <tcp_rst+0x94>)
 801565a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801565e:	491f      	ldr	r1, [pc, #124]	@ (80156dc <tcp_rst+0x98>)
 8015660:	481f      	ldr	r0, [pc, #124]	@ (80156e0 <tcp_rst+0x9c>)
 8015662:	f004 febd 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015668:	2b00      	cmp	r3, #0
 801566a:	d106      	bne.n	801567a <tcp_rst+0x36>
 801566c:	4b1a      	ldr	r3, [pc, #104]	@ (80156d8 <tcp_rst+0x94>)
 801566e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8015672:	491c      	ldr	r1, [pc, #112]	@ (80156e4 <tcp_rst+0xa0>)
 8015674:	481a      	ldr	r0, [pc, #104]	@ (80156e0 <tcp_rst+0x9c>)
 8015676:	f004 feb3 	bl	801a3e0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801567a:	2300      	movs	r3, #0
 801567c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801567e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8015682:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015684:	7dfb      	ldrb	r3, [r7, #23]
 8015686:	b29c      	uxth	r4, r3
 8015688:	68b8      	ldr	r0, [r7, #8]
 801568a:	f7f8 fa10 	bl	800daae <lwip_htonl>
 801568e:	4602      	mov	r2, r0
 8015690:	8abb      	ldrh	r3, [r7, #20]
 8015692:	9303      	str	r3, [sp, #12]
 8015694:	2314      	movs	r3, #20
 8015696:	9302      	str	r3, [sp, #8]
 8015698:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801569a:	9301      	str	r3, [sp, #4]
 801569c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801569e:	9300      	str	r3, [sp, #0]
 80156a0:	4613      	mov	r3, r2
 80156a2:	2200      	movs	r2, #0
 80156a4:	4621      	mov	r1, r4
 80156a6:	6878      	ldr	r0, [r7, #4]
 80156a8:	f7ff fe94 	bl	80153d4 <tcp_output_alloc_header_common>
 80156ac:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80156ae:	693b      	ldr	r3, [r7, #16]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d00c      	beq.n	80156ce <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80156b4:	7dfb      	ldrb	r3, [r7, #23]
 80156b6:	2200      	movs	r2, #0
 80156b8:	6939      	ldr	r1, [r7, #16]
 80156ba:	68f8      	ldr	r0, [r7, #12]
 80156bc:	f7ff ff3a 	bl	8015534 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80156c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156c2:	683a      	ldr	r2, [r7, #0]
 80156c4:	6939      	ldr	r1, [r7, #16]
 80156c6:	68f8      	ldr	r0, [r7, #12]
 80156c8:	f7ff ff72 	bl	80155b0 <tcp_output_control_segment>
 80156cc:	e000      	b.n	80156d0 <tcp_rst+0x8c>
    return;
 80156ce:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80156d0:	371c      	adds	r7, #28
 80156d2:	46bd      	mov	sp, r7
 80156d4:	bd90      	pop	{r4, r7, pc}
 80156d6:	bf00      	nop
 80156d8:	080201c8 	.word	0x080201c8
 80156dc:	0802094c 	.word	0x0802094c
 80156e0:	0802021c 	.word	0x0802021c
 80156e4:	08020968 	.word	0x08020968

080156e8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80156e8:	b590      	push	{r4, r7, lr}
 80156ea:	b087      	sub	sp, #28
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80156f0:	2300      	movs	r3, #0
 80156f2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80156f4:	2300      	movs	r3, #0
 80156f6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d106      	bne.n	801570c <tcp_send_empty_ack+0x24>
 80156fe:	4b28      	ldr	r3, [pc, #160]	@ (80157a0 <tcp_send_empty_ack+0xb8>)
 8015700:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8015704:	4927      	ldr	r1, [pc, #156]	@ (80157a4 <tcp_send_empty_ack+0xbc>)
 8015706:	4828      	ldr	r0, [pc, #160]	@ (80157a8 <tcp_send_empty_ack+0xc0>)
 8015708:	f004 fe6a 	bl	801a3e0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801570c:	7dfb      	ldrb	r3, [r7, #23]
 801570e:	009b      	lsls	r3, r3, #2
 8015710:	b2db      	uxtb	r3, r3
 8015712:	f003 0304 	and.w	r3, r3, #4
 8015716:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015718:	7d7b      	ldrb	r3, [r7, #21]
 801571a:	b29c      	uxth	r4, r3
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015720:	4618      	mov	r0, r3
 8015722:	f7f8 f9c4 	bl	800daae <lwip_htonl>
 8015726:	4603      	mov	r3, r0
 8015728:	2200      	movs	r2, #0
 801572a:	4621      	mov	r1, r4
 801572c:	6878      	ldr	r0, [r7, #4]
 801572e:	f7ff fec3 	bl	80154b8 <tcp_output_alloc_header>
 8015732:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015734:	693b      	ldr	r3, [r7, #16]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d109      	bne.n	801574e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	8b5b      	ldrh	r3, [r3, #26]
 801573e:	f043 0303 	orr.w	r3, r3, #3
 8015742:	b29a      	uxth	r2, r3
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015748:	f06f 0301 	mvn.w	r3, #1
 801574c:	e023      	b.n	8015796 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801574e:	7dbb      	ldrb	r3, [r7, #22]
 8015750:	7dfa      	ldrb	r2, [r7, #23]
 8015752:	6939      	ldr	r1, [r7, #16]
 8015754:	6878      	ldr	r0, [r7, #4]
 8015756:	f7ff feed 	bl	8015534 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801575a:	687a      	ldr	r2, [r7, #4]
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	3304      	adds	r3, #4
 8015760:	6939      	ldr	r1, [r7, #16]
 8015762:	6878      	ldr	r0, [r7, #4]
 8015764:	f7ff ff24 	bl	80155b0 <tcp_output_control_segment>
 8015768:	4603      	mov	r3, r0
 801576a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801576c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015770:	2b00      	cmp	r3, #0
 8015772:	d007      	beq.n	8015784 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	8b5b      	ldrh	r3, [r3, #26]
 8015778:	f043 0303 	orr.w	r3, r3, #3
 801577c:	b29a      	uxth	r2, r3
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	835a      	strh	r2, [r3, #26]
 8015782:	e006      	b.n	8015792 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	8b5b      	ldrh	r3, [r3, #26]
 8015788:	f023 0303 	bic.w	r3, r3, #3
 801578c:	b29a      	uxth	r2, r3
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015792:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015796:	4618      	mov	r0, r3
 8015798:	371c      	adds	r7, #28
 801579a:	46bd      	mov	sp, r7
 801579c:	bd90      	pop	{r4, r7, pc}
 801579e:	bf00      	nop
 80157a0:	080201c8 	.word	0x080201c8
 80157a4:	08020984 	.word	0x08020984
 80157a8:	0802021c 	.word	0x0802021c

080157ac <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80157ac:	b590      	push	{r4, r7, lr}
 80157ae:	b087      	sub	sp, #28
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80157b4:	2300      	movs	r3, #0
 80157b6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d106      	bne.n	80157cc <tcp_keepalive+0x20>
 80157be:	4b18      	ldr	r3, [pc, #96]	@ (8015820 <tcp_keepalive+0x74>)
 80157c0:	f640 0224 	movw	r2, #2084	@ 0x824
 80157c4:	4917      	ldr	r1, [pc, #92]	@ (8015824 <tcp_keepalive+0x78>)
 80157c6:	4818      	ldr	r0, [pc, #96]	@ (8015828 <tcp_keepalive+0x7c>)
 80157c8:	f004 fe0a 	bl	801a3e0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80157cc:	7dfb      	ldrb	r3, [r7, #23]
 80157ce:	b29c      	uxth	r4, r3
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80157d4:	3b01      	subs	r3, #1
 80157d6:	4618      	mov	r0, r3
 80157d8:	f7f8 f969 	bl	800daae <lwip_htonl>
 80157dc:	4603      	mov	r3, r0
 80157de:	2200      	movs	r2, #0
 80157e0:	4621      	mov	r1, r4
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	f7ff fe68 	bl	80154b8 <tcp_output_alloc_header>
 80157e8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80157ea:	693b      	ldr	r3, [r7, #16]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d102      	bne.n	80157f6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80157f0:	f04f 33ff 	mov.w	r3, #4294967295
 80157f4:	e010      	b.n	8015818 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80157f6:	7dfb      	ldrb	r3, [r7, #23]
 80157f8:	2200      	movs	r2, #0
 80157fa:	6939      	ldr	r1, [r7, #16]
 80157fc:	6878      	ldr	r0, [r7, #4]
 80157fe:	f7ff fe99 	bl	8015534 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015802:	687a      	ldr	r2, [r7, #4]
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	3304      	adds	r3, #4
 8015808:	6939      	ldr	r1, [r7, #16]
 801580a:	6878      	ldr	r0, [r7, #4]
 801580c:	f7ff fed0 	bl	80155b0 <tcp_output_control_segment>
 8015810:	4603      	mov	r3, r0
 8015812:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015814:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015818:	4618      	mov	r0, r3
 801581a:	371c      	adds	r7, #28
 801581c:	46bd      	mov	sp, r7
 801581e:	bd90      	pop	{r4, r7, pc}
 8015820:	080201c8 	.word	0x080201c8
 8015824:	080209a4 	.word	0x080209a4
 8015828:	0802021c 	.word	0x0802021c

0801582c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801582c:	b590      	push	{r4, r7, lr}
 801582e:	b08b      	sub	sp, #44	@ 0x2c
 8015830:	af00      	add	r7, sp, #0
 8015832:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015834:	2300      	movs	r3, #0
 8015836:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d106      	bne.n	801584e <tcp_zero_window_probe+0x22>
 8015840:	4b4c      	ldr	r3, [pc, #304]	@ (8015974 <tcp_zero_window_probe+0x148>)
 8015842:	f640 024f 	movw	r2, #2127	@ 0x84f
 8015846:	494c      	ldr	r1, [pc, #304]	@ (8015978 <tcp_zero_window_probe+0x14c>)
 8015848:	484c      	ldr	r0, [pc, #304]	@ (801597c <tcp_zero_window_probe+0x150>)
 801584a:	f004 fdc9 	bl	801a3e0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015852:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015854:	6a3b      	ldr	r3, [r7, #32]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d101      	bne.n	801585e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801585a:	2300      	movs	r3, #0
 801585c:	e086      	b.n	801596c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015864:	2bff      	cmp	r3, #255	@ 0xff
 8015866:	d007      	beq.n	8015878 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801586e:	3301      	adds	r3, #1
 8015870:	b2da      	uxtb	r2, r3
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015878:	6a3b      	ldr	r3, [r7, #32]
 801587a:	68db      	ldr	r3, [r3, #12]
 801587c:	899b      	ldrh	r3, [r3, #12]
 801587e:	b29b      	uxth	r3, r3
 8015880:	4618      	mov	r0, r3
 8015882:	f7f8 f8ff 	bl	800da84 <lwip_htons>
 8015886:	4603      	mov	r3, r0
 8015888:	b2db      	uxtb	r3, r3
 801588a:	f003 0301 	and.w	r3, r3, #1
 801588e:	2b00      	cmp	r3, #0
 8015890:	d005      	beq.n	801589e <tcp_zero_window_probe+0x72>
 8015892:	6a3b      	ldr	r3, [r7, #32]
 8015894:	891b      	ldrh	r3, [r3, #8]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d101      	bne.n	801589e <tcp_zero_window_probe+0x72>
 801589a:	2301      	movs	r3, #1
 801589c:	e000      	b.n	80158a0 <tcp_zero_window_probe+0x74>
 801589e:	2300      	movs	r3, #0
 80158a0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80158a2:	7ffb      	ldrb	r3, [r7, #31]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	bf0c      	ite	eq
 80158a8:	2301      	moveq	r3, #1
 80158aa:	2300      	movne	r3, #0
 80158ac:	b2db      	uxtb	r3, r3
 80158ae:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80158b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80158b4:	b299      	uxth	r1, r3
 80158b6:	6a3b      	ldr	r3, [r7, #32]
 80158b8:	68db      	ldr	r3, [r3, #12]
 80158ba:	685b      	ldr	r3, [r3, #4]
 80158bc:	8bba      	ldrh	r2, [r7, #28]
 80158be:	6878      	ldr	r0, [r7, #4]
 80158c0:	f7ff fdfa 	bl	80154b8 <tcp_output_alloc_header>
 80158c4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80158c6:	69bb      	ldr	r3, [r7, #24]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d102      	bne.n	80158d2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80158cc:	f04f 33ff 	mov.w	r3, #4294967295
 80158d0:	e04c      	b.n	801596c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80158d2:	69bb      	ldr	r3, [r7, #24]
 80158d4:	685b      	ldr	r3, [r3, #4]
 80158d6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80158d8:	7ffb      	ldrb	r3, [r7, #31]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d011      	beq.n	8015902 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80158de:	697b      	ldr	r3, [r7, #20]
 80158e0:	899b      	ldrh	r3, [r3, #12]
 80158e2:	b29b      	uxth	r3, r3
 80158e4:	b21b      	sxth	r3, r3
 80158e6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80158ea:	b21c      	sxth	r4, r3
 80158ec:	2011      	movs	r0, #17
 80158ee:	f7f8 f8c9 	bl	800da84 <lwip_htons>
 80158f2:	4603      	mov	r3, r0
 80158f4:	b21b      	sxth	r3, r3
 80158f6:	4323      	orrs	r3, r4
 80158f8:	b21b      	sxth	r3, r3
 80158fa:	b29a      	uxth	r2, r3
 80158fc:	697b      	ldr	r3, [r7, #20]
 80158fe:	819a      	strh	r2, [r3, #12]
 8015900:	e010      	b.n	8015924 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015902:	69bb      	ldr	r3, [r7, #24]
 8015904:	685b      	ldr	r3, [r3, #4]
 8015906:	3314      	adds	r3, #20
 8015908:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801590a:	6a3b      	ldr	r3, [r7, #32]
 801590c:	6858      	ldr	r0, [r3, #4]
 801590e:	6a3b      	ldr	r3, [r7, #32]
 8015910:	685b      	ldr	r3, [r3, #4]
 8015912:	891a      	ldrh	r2, [r3, #8]
 8015914:	6a3b      	ldr	r3, [r7, #32]
 8015916:	891b      	ldrh	r3, [r3, #8]
 8015918:	1ad3      	subs	r3, r2, r3
 801591a:	b29b      	uxth	r3, r3
 801591c:	2201      	movs	r2, #1
 801591e:	6939      	ldr	r1, [r7, #16]
 8015920:	f7f9 ff12 	bl	800f748 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015924:	6a3b      	ldr	r3, [r7, #32]
 8015926:	68db      	ldr	r3, [r3, #12]
 8015928:	685b      	ldr	r3, [r3, #4]
 801592a:	4618      	mov	r0, r3
 801592c:	f7f8 f8bf 	bl	800daae <lwip_htonl>
 8015930:	4603      	mov	r3, r0
 8015932:	3301      	adds	r3, #1
 8015934:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	1ad3      	subs	r3, r2, r3
 801593e:	2b00      	cmp	r3, #0
 8015940:	da02      	bge.n	8015948 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	68fa      	ldr	r2, [r7, #12]
 8015946:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801594c:	2200      	movs	r2, #0
 801594e:	69b9      	ldr	r1, [r7, #24]
 8015950:	6878      	ldr	r0, [r7, #4]
 8015952:	f7ff fdef 	bl	8015534 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015956:	687a      	ldr	r2, [r7, #4]
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	3304      	adds	r3, #4
 801595c:	69b9      	ldr	r1, [r7, #24]
 801595e:	6878      	ldr	r0, [r7, #4]
 8015960:	f7ff fe26 	bl	80155b0 <tcp_output_control_segment>
 8015964:	4603      	mov	r3, r0
 8015966:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015968:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801596c:	4618      	mov	r0, r3
 801596e:	372c      	adds	r7, #44	@ 0x2c
 8015970:	46bd      	mov	sp, r7
 8015972:	bd90      	pop	{r4, r7, pc}
 8015974:	080201c8 	.word	0x080201c8
 8015978:	080209c0 	.word	0x080209c0
 801597c:	0802021c 	.word	0x0802021c

08015980 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b082      	sub	sp, #8
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015988:	f7f9 ffcc 	bl	800f924 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801598c:	4b0a      	ldr	r3, [pc, #40]	@ (80159b8 <tcpip_tcp_timer+0x38>)
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d103      	bne.n	801599c <tcpip_tcp_timer+0x1c>
 8015994:	4b09      	ldr	r3, [pc, #36]	@ (80159bc <tcpip_tcp_timer+0x3c>)
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d005      	beq.n	80159a8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801599c:	2200      	movs	r2, #0
 801599e:	4908      	ldr	r1, [pc, #32]	@ (80159c0 <tcpip_tcp_timer+0x40>)
 80159a0:	20fa      	movs	r0, #250	@ 0xfa
 80159a2:	f000 f8f3 	bl	8015b8c <sys_timeout>
 80159a6:	e003      	b.n	80159b0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80159a8:	4b06      	ldr	r3, [pc, #24]	@ (80159c4 <tcpip_tcp_timer+0x44>)
 80159aa:	2200      	movs	r2, #0
 80159ac:	601a      	str	r2, [r3, #0]
  }
}
 80159ae:	bf00      	nop
 80159b0:	bf00      	nop
 80159b2:	3708      	adds	r7, #8
 80159b4:	46bd      	mov	sp, r7
 80159b6:	bd80      	pop	{r7, pc}
 80159b8:	2000d0ec 	.word	0x2000d0ec
 80159bc:	2000d0f0 	.word	0x2000d0f0
 80159c0:	08015981 	.word	0x08015981
 80159c4:	2000d138 	.word	0x2000d138

080159c8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80159cc:	4b0a      	ldr	r3, [pc, #40]	@ (80159f8 <tcp_timer_needed+0x30>)
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d10f      	bne.n	80159f4 <tcp_timer_needed+0x2c>
 80159d4:	4b09      	ldr	r3, [pc, #36]	@ (80159fc <tcp_timer_needed+0x34>)
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d103      	bne.n	80159e4 <tcp_timer_needed+0x1c>
 80159dc:	4b08      	ldr	r3, [pc, #32]	@ (8015a00 <tcp_timer_needed+0x38>)
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d007      	beq.n	80159f4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80159e4:	4b04      	ldr	r3, [pc, #16]	@ (80159f8 <tcp_timer_needed+0x30>)
 80159e6:	2201      	movs	r2, #1
 80159e8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80159ea:	2200      	movs	r2, #0
 80159ec:	4905      	ldr	r1, [pc, #20]	@ (8015a04 <tcp_timer_needed+0x3c>)
 80159ee:	20fa      	movs	r0, #250	@ 0xfa
 80159f0:	f000 f8cc 	bl	8015b8c <sys_timeout>
  }
}
 80159f4:	bf00      	nop
 80159f6:	bd80      	pop	{r7, pc}
 80159f8:	2000d138 	.word	0x2000d138
 80159fc:	2000d0ec 	.word	0x2000d0ec
 8015a00:	2000d0f0 	.word	0x2000d0f0
 8015a04:	08015981 	.word	0x08015981

08015a08 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b086      	sub	sp, #24
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	60f8      	str	r0, [r7, #12]
 8015a10:	60b9      	str	r1, [r7, #8]
 8015a12:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015a14:	200a      	movs	r0, #10
 8015a16:	f7f8 fd0d 	bl	800e434 <memp_malloc>
 8015a1a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015a1c:	693b      	ldr	r3, [r7, #16]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d109      	bne.n	8015a36 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015a22:	693b      	ldr	r3, [r7, #16]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d151      	bne.n	8015acc <sys_timeout_abs+0xc4>
 8015a28:	4b2a      	ldr	r3, [pc, #168]	@ (8015ad4 <sys_timeout_abs+0xcc>)
 8015a2a:	22be      	movs	r2, #190	@ 0xbe
 8015a2c:	492a      	ldr	r1, [pc, #168]	@ (8015ad8 <sys_timeout_abs+0xd0>)
 8015a2e:	482b      	ldr	r0, [pc, #172]	@ (8015adc <sys_timeout_abs+0xd4>)
 8015a30:	f004 fcd6 	bl	801a3e0 <iprintf>
    return;
 8015a34:	e04a      	b.n	8015acc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015a36:	693b      	ldr	r3, [r7, #16]
 8015a38:	2200      	movs	r2, #0
 8015a3a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015a3c:	693b      	ldr	r3, [r7, #16]
 8015a3e:	68ba      	ldr	r2, [r7, #8]
 8015a40:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015a42:	693b      	ldr	r3, [r7, #16]
 8015a44:	687a      	ldr	r2, [r7, #4]
 8015a46:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015a48:	693b      	ldr	r3, [r7, #16]
 8015a4a:	68fa      	ldr	r2, [r7, #12]
 8015a4c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015a4e:	4b24      	ldr	r3, [pc, #144]	@ (8015ae0 <sys_timeout_abs+0xd8>)
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d103      	bne.n	8015a5e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015a56:	4a22      	ldr	r2, [pc, #136]	@ (8015ae0 <sys_timeout_abs+0xd8>)
 8015a58:	693b      	ldr	r3, [r7, #16]
 8015a5a:	6013      	str	r3, [r2, #0]
    return;
 8015a5c:	e037      	b.n	8015ace <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015a5e:	693b      	ldr	r3, [r7, #16]
 8015a60:	685a      	ldr	r2, [r3, #4]
 8015a62:	4b1f      	ldr	r3, [pc, #124]	@ (8015ae0 <sys_timeout_abs+0xd8>)
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	685b      	ldr	r3, [r3, #4]
 8015a68:	1ad3      	subs	r3, r2, r3
 8015a6a:	0fdb      	lsrs	r3, r3, #31
 8015a6c:	f003 0301 	and.w	r3, r3, #1
 8015a70:	b2db      	uxtb	r3, r3
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d007      	beq.n	8015a86 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015a76:	4b1a      	ldr	r3, [pc, #104]	@ (8015ae0 <sys_timeout_abs+0xd8>)
 8015a78:	681a      	ldr	r2, [r3, #0]
 8015a7a:	693b      	ldr	r3, [r7, #16]
 8015a7c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015a7e:	4a18      	ldr	r2, [pc, #96]	@ (8015ae0 <sys_timeout_abs+0xd8>)
 8015a80:	693b      	ldr	r3, [r7, #16]
 8015a82:	6013      	str	r3, [r2, #0]
 8015a84:	e023      	b.n	8015ace <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015a86:	4b16      	ldr	r3, [pc, #88]	@ (8015ae0 <sys_timeout_abs+0xd8>)
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	617b      	str	r3, [r7, #20]
 8015a8c:	e01a      	b.n	8015ac4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015a8e:	697b      	ldr	r3, [r7, #20]
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d00b      	beq.n	8015aae <sys_timeout_abs+0xa6>
 8015a96:	693b      	ldr	r3, [r7, #16]
 8015a98:	685a      	ldr	r2, [r3, #4]
 8015a9a:	697b      	ldr	r3, [r7, #20]
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	685b      	ldr	r3, [r3, #4]
 8015aa0:	1ad3      	subs	r3, r2, r3
 8015aa2:	0fdb      	lsrs	r3, r3, #31
 8015aa4:	f003 0301 	and.w	r3, r3, #1
 8015aa8:	b2db      	uxtb	r3, r3
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d007      	beq.n	8015abe <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015aae:	697b      	ldr	r3, [r7, #20]
 8015ab0:	681a      	ldr	r2, [r3, #0]
 8015ab2:	693b      	ldr	r3, [r7, #16]
 8015ab4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015ab6:	697b      	ldr	r3, [r7, #20]
 8015ab8:	693a      	ldr	r2, [r7, #16]
 8015aba:	601a      	str	r2, [r3, #0]
        break;
 8015abc:	e007      	b.n	8015ace <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015abe:	697b      	ldr	r3, [r7, #20]
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	617b      	str	r3, [r7, #20]
 8015ac4:	697b      	ldr	r3, [r7, #20]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d1e1      	bne.n	8015a8e <sys_timeout_abs+0x86>
 8015aca:	e000      	b.n	8015ace <sys_timeout_abs+0xc6>
    return;
 8015acc:	bf00      	nop
      }
    }
  }
}
 8015ace:	3718      	adds	r7, #24
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	bd80      	pop	{r7, pc}
 8015ad4:	080209e4 	.word	0x080209e4
 8015ad8:	08020a18 	.word	0x08020a18
 8015adc:	08020a58 	.word	0x08020a58
 8015ae0:	2000d130 	.word	0x2000d130

08015ae4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b086      	sub	sp, #24
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015af0:	697b      	ldr	r3, [r7, #20]
 8015af2:	685b      	ldr	r3, [r3, #4]
 8015af4:	4798      	blx	r3

  now = sys_now();
 8015af6:	f7ef fe5f 	bl	80057b8 <sys_now>
 8015afa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015afc:	697b      	ldr	r3, [r7, #20]
 8015afe:	681a      	ldr	r2, [r3, #0]
 8015b00:	4b0f      	ldr	r3, [pc, #60]	@ (8015b40 <lwip_cyclic_timer+0x5c>)
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	4413      	add	r3, r2
 8015b06:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015b08:	68fa      	ldr	r2, [r7, #12]
 8015b0a:	693b      	ldr	r3, [r7, #16]
 8015b0c:	1ad3      	subs	r3, r2, r3
 8015b0e:	0fdb      	lsrs	r3, r3, #31
 8015b10:	f003 0301 	and.w	r3, r3, #1
 8015b14:	b2db      	uxtb	r3, r3
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d009      	beq.n	8015b2e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015b1a:	697b      	ldr	r3, [r7, #20]
 8015b1c:	681a      	ldr	r2, [r3, #0]
 8015b1e:	693b      	ldr	r3, [r7, #16]
 8015b20:	4413      	add	r3, r2
 8015b22:	687a      	ldr	r2, [r7, #4]
 8015b24:	4907      	ldr	r1, [pc, #28]	@ (8015b44 <lwip_cyclic_timer+0x60>)
 8015b26:	4618      	mov	r0, r3
 8015b28:	f7ff ff6e 	bl	8015a08 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015b2c:	e004      	b.n	8015b38 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015b2e:	687a      	ldr	r2, [r7, #4]
 8015b30:	4904      	ldr	r1, [pc, #16]	@ (8015b44 <lwip_cyclic_timer+0x60>)
 8015b32:	68f8      	ldr	r0, [r7, #12]
 8015b34:	f7ff ff68 	bl	8015a08 <sys_timeout_abs>
}
 8015b38:	bf00      	nop
 8015b3a:	3718      	adds	r7, #24
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	bd80      	pop	{r7, pc}
 8015b40:	2000d134 	.word	0x2000d134
 8015b44:	08015ae5 	.word	0x08015ae5

08015b48 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b082      	sub	sp, #8
 8015b4c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015b4e:	2301      	movs	r3, #1
 8015b50:	607b      	str	r3, [r7, #4]
 8015b52:	e00e      	b.n	8015b72 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015b54:	4a0b      	ldr	r2, [pc, #44]	@ (8015b84 <sys_timeouts_init+0x3c>)
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	00db      	lsls	r3, r3, #3
 8015b60:	4a08      	ldr	r2, [pc, #32]	@ (8015b84 <sys_timeouts_init+0x3c>)
 8015b62:	4413      	add	r3, r2
 8015b64:	461a      	mov	r2, r3
 8015b66:	4908      	ldr	r1, [pc, #32]	@ (8015b88 <sys_timeouts_init+0x40>)
 8015b68:	f000 f810 	bl	8015b8c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	3301      	adds	r3, #1
 8015b70:	607b      	str	r3, [r7, #4]
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	2b02      	cmp	r3, #2
 8015b76:	d9ed      	bls.n	8015b54 <sys_timeouts_init+0xc>
  }
}
 8015b78:	bf00      	nop
 8015b7a:	bf00      	nop
 8015b7c:	3708      	adds	r7, #8
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd80      	pop	{r7, pc}
 8015b82:	bf00      	nop
 8015b84:	080216f8 	.word	0x080216f8
 8015b88:	08015ae5 	.word	0x08015ae5

08015b8c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b086      	sub	sp, #24
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	60f8      	str	r0, [r7, #12]
 8015b94:	60b9      	str	r1, [r7, #8]
 8015b96:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015b9e:	d306      	bcc.n	8015bae <sys_timeout+0x22>
 8015ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8015bcc <sys_timeout+0x40>)
 8015ba2:	f240 1229 	movw	r2, #297	@ 0x129
 8015ba6:	490a      	ldr	r1, [pc, #40]	@ (8015bd0 <sys_timeout+0x44>)
 8015ba8:	480a      	ldr	r0, [pc, #40]	@ (8015bd4 <sys_timeout+0x48>)
 8015baa:	f004 fc19 	bl	801a3e0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015bae:	f7ef fe03 	bl	80057b8 <sys_now>
 8015bb2:	4602      	mov	r2, r0
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	4413      	add	r3, r2
 8015bb8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015bba:	687a      	ldr	r2, [r7, #4]
 8015bbc:	68b9      	ldr	r1, [r7, #8]
 8015bbe:	6978      	ldr	r0, [r7, #20]
 8015bc0:	f7ff ff22 	bl	8015a08 <sys_timeout_abs>
#endif
}
 8015bc4:	bf00      	nop
 8015bc6:	3718      	adds	r7, #24
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	bd80      	pop	{r7, pc}
 8015bcc:	080209e4 	.word	0x080209e4
 8015bd0:	08020a80 	.word	0x08020a80
 8015bd4:	08020a58 	.word	0x08020a58

08015bd8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b084      	sub	sp, #16
 8015bdc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8015bde:	f7ef fdeb 	bl	80057b8 <sys_now>
 8015be2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015be4:	4b17      	ldr	r3, [pc, #92]	@ (8015c44 <sys_check_timeouts+0x6c>)
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8015bea:	68bb      	ldr	r3, [r7, #8]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d022      	beq.n	8015c36 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015bf0:	68bb      	ldr	r3, [r7, #8]
 8015bf2:	685b      	ldr	r3, [r3, #4]
 8015bf4:	68fa      	ldr	r2, [r7, #12]
 8015bf6:	1ad3      	subs	r3, r2, r3
 8015bf8:	0fdb      	lsrs	r3, r3, #31
 8015bfa:	f003 0301 	and.w	r3, r3, #1
 8015bfe:	b2db      	uxtb	r3, r3
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d11a      	bne.n	8015c3a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015c04:	68bb      	ldr	r3, [r7, #8]
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	4a0e      	ldr	r2, [pc, #56]	@ (8015c44 <sys_check_timeouts+0x6c>)
 8015c0a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015c0c:	68bb      	ldr	r3, [r7, #8]
 8015c0e:	689b      	ldr	r3, [r3, #8]
 8015c10:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015c12:	68bb      	ldr	r3, [r7, #8]
 8015c14:	68db      	ldr	r3, [r3, #12]
 8015c16:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015c18:	68bb      	ldr	r3, [r7, #8]
 8015c1a:	685b      	ldr	r3, [r3, #4]
 8015c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8015c48 <sys_check_timeouts+0x70>)
 8015c1e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015c20:	68b9      	ldr	r1, [r7, #8]
 8015c22:	200a      	movs	r0, #10
 8015c24:	f7f8 fc7c 	bl	800e520 <memp_free>
    if (handler != NULL) {
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d0da      	beq.n	8015be4 <sys_check_timeouts+0xc>
      handler(arg);
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	6838      	ldr	r0, [r7, #0]
 8015c32:	4798      	blx	r3
  do {
 8015c34:	e7d6      	b.n	8015be4 <sys_check_timeouts+0xc>
      return;
 8015c36:	bf00      	nop
 8015c38:	e000      	b.n	8015c3c <sys_check_timeouts+0x64>
      return;
 8015c3a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015c3c:	3710      	adds	r7, #16
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	bd80      	pop	{r7, pc}
 8015c42:	bf00      	nop
 8015c44:	2000d130 	.word	0x2000d130
 8015c48:	2000d134 	.word	0x2000d134

08015c4c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b082      	sub	sp, #8
 8015c50:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015c52:	4b16      	ldr	r3, [pc, #88]	@ (8015cac <sys_timeouts_sleeptime+0x60>)
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d102      	bne.n	8015c60 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8015c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8015c5e:	e020      	b.n	8015ca2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015c60:	f7ef fdaa 	bl	80057b8 <sys_now>
 8015c64:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015c66:	4b11      	ldr	r3, [pc, #68]	@ (8015cac <sys_timeouts_sleeptime+0x60>)
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	685a      	ldr	r2, [r3, #4]
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	1ad3      	subs	r3, r2, r3
 8015c70:	0fdb      	lsrs	r3, r3, #31
 8015c72:	f003 0301 	and.w	r3, r3, #1
 8015c76:	b2db      	uxtb	r3, r3
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d001      	beq.n	8015c80 <sys_timeouts_sleeptime+0x34>
    return 0;
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	e010      	b.n	8015ca2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015c80:	4b0a      	ldr	r3, [pc, #40]	@ (8015cac <sys_timeouts_sleeptime+0x60>)
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	685a      	ldr	r2, [r3, #4]
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	1ad3      	subs	r3, r2, r3
 8015c8a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015c8c:	683b      	ldr	r3, [r7, #0]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	da06      	bge.n	8015ca0 <sys_timeouts_sleeptime+0x54>
 8015c92:	4b07      	ldr	r3, [pc, #28]	@ (8015cb0 <sys_timeouts_sleeptime+0x64>)
 8015c94:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8015c98:	4906      	ldr	r1, [pc, #24]	@ (8015cb4 <sys_timeouts_sleeptime+0x68>)
 8015c9a:	4807      	ldr	r0, [pc, #28]	@ (8015cb8 <sys_timeouts_sleeptime+0x6c>)
 8015c9c:	f004 fba0 	bl	801a3e0 <iprintf>
    return ret;
 8015ca0:	683b      	ldr	r3, [r7, #0]
  }
}
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	3708      	adds	r7, #8
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	bd80      	pop	{r7, pc}
 8015caa:	bf00      	nop
 8015cac:	2000d130 	.word	0x2000d130
 8015cb0:	080209e4 	.word	0x080209e4
 8015cb4:	08020ab8 	.word	0x08020ab8
 8015cb8:	08020a58 	.word	0x08020a58

08015cbc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015cc0:	f003 fb9c 	bl	80193fc <rand>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	b29b      	uxth	r3, r3
 8015cc8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015ccc:	b29b      	uxth	r3, r3
 8015cce:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8015cd2:	b29a      	uxth	r2, r3
 8015cd4:	4b01      	ldr	r3, [pc, #4]	@ (8015cdc <udp_init+0x20>)
 8015cd6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015cd8:	bf00      	nop
 8015cda:	bd80      	pop	{r7, pc}
 8015cdc:	2000002c 	.word	0x2000002c

08015ce0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015ce0:	b480      	push	{r7}
 8015ce2:	b083      	sub	sp, #12
 8015ce4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8015cea:	4b17      	ldr	r3, [pc, #92]	@ (8015d48 <udp_new_port+0x68>)
 8015cec:	881b      	ldrh	r3, [r3, #0]
 8015cee:	1c5a      	adds	r2, r3, #1
 8015cf0:	b291      	uxth	r1, r2
 8015cf2:	4a15      	ldr	r2, [pc, #84]	@ (8015d48 <udp_new_port+0x68>)
 8015cf4:	8011      	strh	r1, [r2, #0]
 8015cf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015cfa:	4293      	cmp	r3, r2
 8015cfc:	d103      	bne.n	8015d06 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8015cfe:	4b12      	ldr	r3, [pc, #72]	@ (8015d48 <udp_new_port+0x68>)
 8015d00:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8015d04:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015d06:	4b11      	ldr	r3, [pc, #68]	@ (8015d4c <udp_new_port+0x6c>)
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	603b      	str	r3, [r7, #0]
 8015d0c:	e011      	b.n	8015d32 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8015d0e:	683b      	ldr	r3, [r7, #0]
 8015d10:	8a5a      	ldrh	r2, [r3, #18]
 8015d12:	4b0d      	ldr	r3, [pc, #52]	@ (8015d48 <udp_new_port+0x68>)
 8015d14:	881b      	ldrh	r3, [r3, #0]
 8015d16:	429a      	cmp	r2, r3
 8015d18:	d108      	bne.n	8015d2c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015d1a:	88fb      	ldrh	r3, [r7, #6]
 8015d1c:	3301      	adds	r3, #1
 8015d1e:	80fb      	strh	r3, [r7, #6]
 8015d20:	88fb      	ldrh	r3, [r7, #6]
 8015d22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015d26:	d3e0      	bcc.n	8015cea <udp_new_port+0xa>
        return 0;
 8015d28:	2300      	movs	r3, #0
 8015d2a:	e007      	b.n	8015d3c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015d2c:	683b      	ldr	r3, [r7, #0]
 8015d2e:	68db      	ldr	r3, [r3, #12]
 8015d30:	603b      	str	r3, [r7, #0]
 8015d32:	683b      	ldr	r3, [r7, #0]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d1ea      	bne.n	8015d0e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015d38:	4b03      	ldr	r3, [pc, #12]	@ (8015d48 <udp_new_port+0x68>)
 8015d3a:	881b      	ldrh	r3, [r3, #0]
}
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	370c      	adds	r7, #12
 8015d40:	46bd      	mov	sp, r7
 8015d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d46:	4770      	bx	lr
 8015d48:	2000002c 	.word	0x2000002c
 8015d4c:	2000d13c 	.word	0x2000d13c

08015d50 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015d50:	b580      	push	{r7, lr}
 8015d52:	b084      	sub	sp, #16
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	60f8      	str	r0, [r7, #12]
 8015d58:	60b9      	str	r1, [r7, #8]
 8015d5a:	4613      	mov	r3, r2
 8015d5c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d105      	bne.n	8015d70 <udp_input_local_match+0x20>
 8015d64:	4b27      	ldr	r3, [pc, #156]	@ (8015e04 <udp_input_local_match+0xb4>)
 8015d66:	2287      	movs	r2, #135	@ 0x87
 8015d68:	4927      	ldr	r1, [pc, #156]	@ (8015e08 <udp_input_local_match+0xb8>)
 8015d6a:	4828      	ldr	r0, [pc, #160]	@ (8015e0c <udp_input_local_match+0xbc>)
 8015d6c:	f004 fb38 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015d70:	68bb      	ldr	r3, [r7, #8]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d105      	bne.n	8015d82 <udp_input_local_match+0x32>
 8015d76:	4b23      	ldr	r3, [pc, #140]	@ (8015e04 <udp_input_local_match+0xb4>)
 8015d78:	2288      	movs	r2, #136	@ 0x88
 8015d7a:	4925      	ldr	r1, [pc, #148]	@ (8015e10 <udp_input_local_match+0xc0>)
 8015d7c:	4823      	ldr	r0, [pc, #140]	@ (8015e0c <udp_input_local_match+0xbc>)
 8015d7e:	f004 fb2f 	bl	801a3e0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	7a1b      	ldrb	r3, [r3, #8]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d00b      	beq.n	8015da2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	7a1a      	ldrb	r2, [r3, #8]
 8015d8e:	4b21      	ldr	r3, [pc, #132]	@ (8015e14 <udp_input_local_match+0xc4>)
 8015d90:	685b      	ldr	r3, [r3, #4]
 8015d92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015d96:	3301      	adds	r3, #1
 8015d98:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015d9a:	429a      	cmp	r2, r3
 8015d9c:	d001      	beq.n	8015da2 <udp_input_local_match+0x52>
    return 0;
 8015d9e:	2300      	movs	r3, #0
 8015da0:	e02b      	b.n	8015dfa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015da2:	79fb      	ldrb	r3, [r7, #7]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d018      	beq.n	8015dda <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d013      	beq.n	8015dd6 <udp_input_local_match+0x86>
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d00f      	beq.n	8015dd6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015db6:	4b17      	ldr	r3, [pc, #92]	@ (8015e14 <udp_input_local_match+0xc4>)
 8015db8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dbe:	d00a      	beq.n	8015dd6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	681a      	ldr	r2, [r3, #0]
 8015dc4:	4b13      	ldr	r3, [pc, #76]	@ (8015e14 <udp_input_local_match+0xc4>)
 8015dc6:	695b      	ldr	r3, [r3, #20]
 8015dc8:	405a      	eors	r2, r3
 8015dca:	68bb      	ldr	r3, [r7, #8]
 8015dcc:	3308      	adds	r3, #8
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d110      	bne.n	8015df8 <udp_input_local_match+0xa8>
          return 1;
 8015dd6:	2301      	movs	r3, #1
 8015dd8:	e00f      	b.n	8015dfa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d009      	beq.n	8015df4 <udp_input_local_match+0xa4>
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d005      	beq.n	8015df4 <udp_input_local_match+0xa4>
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	681a      	ldr	r2, [r3, #0]
 8015dec:	4b09      	ldr	r3, [pc, #36]	@ (8015e14 <udp_input_local_match+0xc4>)
 8015dee:	695b      	ldr	r3, [r3, #20]
 8015df0:	429a      	cmp	r2, r3
 8015df2:	d101      	bne.n	8015df8 <udp_input_local_match+0xa8>
        return 1;
 8015df4:	2301      	movs	r3, #1
 8015df6:	e000      	b.n	8015dfa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015df8:	2300      	movs	r3, #0
}
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	3710      	adds	r7, #16
 8015dfe:	46bd      	mov	sp, r7
 8015e00:	bd80      	pop	{r7, pc}
 8015e02:	bf00      	nop
 8015e04:	08020acc 	.word	0x08020acc
 8015e08:	08020afc 	.word	0x08020afc
 8015e0c:	08020b20 	.word	0x08020b20
 8015e10:	08020b48 	.word	0x08020b48
 8015e14:	2000998c 	.word	0x2000998c

08015e18 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015e18:	b590      	push	{r4, r7, lr}
 8015e1a:	b08d      	sub	sp, #52	@ 0x34
 8015e1c:	af02      	add	r7, sp, #8
 8015e1e:	6078      	str	r0, [r7, #4]
 8015e20:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015e22:	2300      	movs	r3, #0
 8015e24:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d105      	bne.n	8015e38 <udp_input+0x20>
 8015e2c:	4b7c      	ldr	r3, [pc, #496]	@ (8016020 <udp_input+0x208>)
 8015e2e:	22cf      	movs	r2, #207	@ 0xcf
 8015e30:	497c      	ldr	r1, [pc, #496]	@ (8016024 <udp_input+0x20c>)
 8015e32:	487d      	ldr	r0, [pc, #500]	@ (8016028 <udp_input+0x210>)
 8015e34:	f004 fad4 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015e38:	683b      	ldr	r3, [r7, #0]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d105      	bne.n	8015e4a <udp_input+0x32>
 8015e3e:	4b78      	ldr	r3, [pc, #480]	@ (8016020 <udp_input+0x208>)
 8015e40:	22d0      	movs	r2, #208	@ 0xd0
 8015e42:	497a      	ldr	r1, [pc, #488]	@ (801602c <udp_input+0x214>)
 8015e44:	4878      	ldr	r0, [pc, #480]	@ (8016028 <udp_input+0x210>)
 8015e46:	f004 facb 	bl	801a3e0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	895b      	ldrh	r3, [r3, #10]
 8015e4e:	2b07      	cmp	r3, #7
 8015e50:	d803      	bhi.n	8015e5a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015e52:	6878      	ldr	r0, [r7, #4]
 8015e54:	f7f9 fa72 	bl	800f33c <pbuf_free>
    goto end;
 8015e58:	e0de      	b.n	8016018 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	685b      	ldr	r3, [r3, #4]
 8015e5e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015e60:	4b73      	ldr	r3, [pc, #460]	@ (8016030 <udp_input+0x218>)
 8015e62:	695b      	ldr	r3, [r3, #20]
 8015e64:	4a72      	ldr	r2, [pc, #456]	@ (8016030 <udp_input+0x218>)
 8015e66:	6812      	ldr	r2, [r2, #0]
 8015e68:	4611      	mov	r1, r2
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	f001 ff9a 	bl	8017da4 <ip4_addr_isbroadcast_u32>
 8015e70:	4603      	mov	r3, r0
 8015e72:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015e74:	697b      	ldr	r3, [r7, #20]
 8015e76:	881b      	ldrh	r3, [r3, #0]
 8015e78:	b29b      	uxth	r3, r3
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	f7f7 fe02 	bl	800da84 <lwip_htons>
 8015e80:	4603      	mov	r3, r0
 8015e82:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015e84:	697b      	ldr	r3, [r7, #20]
 8015e86:	885b      	ldrh	r3, [r3, #2]
 8015e88:	b29b      	uxth	r3, r3
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	f7f7 fdfa 	bl	800da84 <lwip_htons>
 8015e90:	4603      	mov	r3, r0
 8015e92:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015e94:	2300      	movs	r3, #0
 8015e96:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8015e98:	2300      	movs	r3, #0
 8015e9a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015ea0:	4b64      	ldr	r3, [pc, #400]	@ (8016034 <udp_input+0x21c>)
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8015ea6:	e054      	b.n	8015f52 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eaa:	8a5b      	ldrh	r3, [r3, #18]
 8015eac:	89fa      	ldrh	r2, [r7, #14]
 8015eae:	429a      	cmp	r2, r3
 8015eb0:	d14a      	bne.n	8015f48 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015eb2:	7cfb      	ldrb	r3, [r7, #19]
 8015eb4:	461a      	mov	r2, r3
 8015eb6:	6839      	ldr	r1, [r7, #0]
 8015eb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015eba:	f7ff ff49 	bl	8015d50 <udp_input_local_match>
 8015ebe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d041      	beq.n	8015f48 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ec6:	7c1b      	ldrb	r3, [r3, #16]
 8015ec8:	f003 0304 	and.w	r3, r3, #4
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d11d      	bne.n	8015f0c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015ed0:	69fb      	ldr	r3, [r7, #28]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d102      	bne.n	8015edc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ed8:	61fb      	str	r3, [r7, #28]
 8015eda:	e017      	b.n	8015f0c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015edc:	7cfb      	ldrb	r3, [r7, #19]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d014      	beq.n	8015f0c <udp_input+0xf4>
 8015ee2:	4b53      	ldr	r3, [pc, #332]	@ (8016030 <udp_input+0x218>)
 8015ee4:	695b      	ldr	r3, [r3, #20]
 8015ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015eea:	d10f      	bne.n	8015f0c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015eec:	69fb      	ldr	r3, [r7, #28]
 8015eee:	681a      	ldr	r2, [r3, #0]
 8015ef0:	683b      	ldr	r3, [r7, #0]
 8015ef2:	3304      	adds	r3, #4
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	429a      	cmp	r2, r3
 8015ef8:	d008      	beq.n	8015f0c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015efc:	681a      	ldr	r2, [r3, #0]
 8015efe:	683b      	ldr	r3, [r7, #0]
 8015f00:	3304      	adds	r3, #4
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	429a      	cmp	r2, r3
 8015f06:	d101      	bne.n	8015f0c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f0a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f0e:	8a9b      	ldrh	r3, [r3, #20]
 8015f10:	8a3a      	ldrh	r2, [r7, #16]
 8015f12:	429a      	cmp	r2, r3
 8015f14:	d118      	bne.n	8015f48 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f18:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d005      	beq.n	8015f2a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f20:	685a      	ldr	r2, [r3, #4]
 8015f22:	4b43      	ldr	r3, [pc, #268]	@ (8016030 <udp_input+0x218>)
 8015f24:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015f26:	429a      	cmp	r2, r3
 8015f28:	d10e      	bne.n	8015f48 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015f2a:	6a3b      	ldr	r3, [r7, #32]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d014      	beq.n	8015f5a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f32:	68da      	ldr	r2, [r3, #12]
 8015f34:	6a3b      	ldr	r3, [r7, #32]
 8015f36:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015f38:	4b3e      	ldr	r3, [pc, #248]	@ (8016034 <udp_input+0x21c>)
 8015f3a:	681a      	ldr	r2, [r3, #0]
 8015f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f3e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015f40:	4a3c      	ldr	r2, [pc, #240]	@ (8016034 <udp_input+0x21c>)
 8015f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f44:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015f46:	e008      	b.n	8015f5a <udp_input+0x142>
      }
    }

    prev = pcb;
 8015f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f4a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f4e:	68db      	ldr	r3, [r3, #12]
 8015f50:	627b      	str	r3, [r7, #36]	@ 0x24
 8015f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d1a7      	bne.n	8015ea8 <udp_input+0x90>
 8015f58:	e000      	b.n	8015f5c <udp_input+0x144>
        break;
 8015f5a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d101      	bne.n	8015f66 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015f62:	69fb      	ldr	r3, [r7, #28]
 8015f64:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d002      	beq.n	8015f72 <udp_input+0x15a>
    for_us = 1;
 8015f6c:	2301      	movs	r3, #1
 8015f6e:	76fb      	strb	r3, [r7, #27]
 8015f70:	e00a      	b.n	8015f88 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015f72:	683b      	ldr	r3, [r7, #0]
 8015f74:	3304      	adds	r3, #4
 8015f76:	681a      	ldr	r2, [r3, #0]
 8015f78:	4b2d      	ldr	r3, [pc, #180]	@ (8016030 <udp_input+0x218>)
 8015f7a:	695b      	ldr	r3, [r3, #20]
 8015f7c:	429a      	cmp	r2, r3
 8015f7e:	bf0c      	ite	eq
 8015f80:	2301      	moveq	r3, #1
 8015f82:	2300      	movne	r3, #0
 8015f84:	b2db      	uxtb	r3, r3
 8015f86:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015f88:	7efb      	ldrb	r3, [r7, #27]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d041      	beq.n	8016012 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8015f8e:	2108      	movs	r1, #8
 8015f90:	6878      	ldr	r0, [r7, #4]
 8015f92:	f7f9 f91b 	bl	800f1cc <pbuf_remove_header>
 8015f96:	4603      	mov	r3, r0
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d00a      	beq.n	8015fb2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015f9c:	4b20      	ldr	r3, [pc, #128]	@ (8016020 <udp_input+0x208>)
 8015f9e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8015fa2:	4925      	ldr	r1, [pc, #148]	@ (8016038 <udp_input+0x220>)
 8015fa4:	4820      	ldr	r0, [pc, #128]	@ (8016028 <udp_input+0x210>)
 8015fa6:	f004 fa1b 	bl	801a3e0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f7f9 f9c6 	bl	800f33c <pbuf_free>
      goto end;
 8015fb0:	e032      	b.n	8016018 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d012      	beq.n	8015fde <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fba:	699b      	ldr	r3, [r3, #24]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d00a      	beq.n	8015fd6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fc2:	699c      	ldr	r4, [r3, #24]
 8015fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fc6:	69d8      	ldr	r0, [r3, #28]
 8015fc8:	8a3b      	ldrh	r3, [r7, #16]
 8015fca:	9300      	str	r3, [sp, #0]
 8015fcc:	4b1b      	ldr	r3, [pc, #108]	@ (801603c <udp_input+0x224>)
 8015fce:	687a      	ldr	r2, [r7, #4]
 8015fd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015fd2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015fd4:	e021      	b.n	801601a <udp_input+0x202>
        pbuf_free(p);
 8015fd6:	6878      	ldr	r0, [r7, #4]
 8015fd8:	f7f9 f9b0 	bl	800f33c <pbuf_free>
        goto end;
 8015fdc:	e01c      	b.n	8016018 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015fde:	7cfb      	ldrb	r3, [r7, #19]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d112      	bne.n	801600a <udp_input+0x1f2>
 8015fe4:	4b12      	ldr	r3, [pc, #72]	@ (8016030 <udp_input+0x218>)
 8015fe6:	695b      	ldr	r3, [r3, #20]
 8015fe8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015fec:	2be0      	cmp	r3, #224	@ 0xe0
 8015fee:	d00c      	beq.n	801600a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8016030 <udp_input+0x218>)
 8015ff2:	899b      	ldrh	r3, [r3, #12]
 8015ff4:	3308      	adds	r3, #8
 8015ff6:	b29b      	uxth	r3, r3
 8015ff8:	b21b      	sxth	r3, r3
 8015ffa:	4619      	mov	r1, r3
 8015ffc:	6878      	ldr	r0, [r7, #4]
 8015ffe:	f7f9 f958 	bl	800f2b2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016002:	2103      	movs	r1, #3
 8016004:	6878      	ldr	r0, [r7, #4]
 8016006:	f001 fbad 	bl	8017764 <icmp_dest_unreach>
      pbuf_free(p);
 801600a:	6878      	ldr	r0, [r7, #4]
 801600c:	f7f9 f996 	bl	800f33c <pbuf_free>
  return;
 8016010:	e003      	b.n	801601a <udp_input+0x202>
    pbuf_free(p);
 8016012:	6878      	ldr	r0, [r7, #4]
 8016014:	f7f9 f992 	bl	800f33c <pbuf_free>
  return;
 8016018:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801601a:	372c      	adds	r7, #44	@ 0x2c
 801601c:	46bd      	mov	sp, r7
 801601e:	bd90      	pop	{r4, r7, pc}
 8016020:	08020acc 	.word	0x08020acc
 8016024:	08020b70 	.word	0x08020b70
 8016028:	08020b20 	.word	0x08020b20
 801602c:	08020b88 	.word	0x08020b88
 8016030:	2000998c 	.word	0x2000998c
 8016034:	2000d13c 	.word	0x2000d13c
 8016038:	08020ba4 	.word	0x08020ba4
 801603c:	2000999c 	.word	0x2000999c

08016040 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8016040:	b580      	push	{r7, lr}
 8016042:	b082      	sub	sp, #8
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
 8016048:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	2b00      	cmp	r3, #0
 801604e:	d109      	bne.n	8016064 <udp_send+0x24>
 8016050:	4b11      	ldr	r3, [pc, #68]	@ (8016098 <udp_send+0x58>)
 8016052:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8016056:	4911      	ldr	r1, [pc, #68]	@ (801609c <udp_send+0x5c>)
 8016058:	4811      	ldr	r0, [pc, #68]	@ (80160a0 <udp_send+0x60>)
 801605a:	f004 f9c1 	bl	801a3e0 <iprintf>
 801605e:	f06f 030f 	mvn.w	r3, #15
 8016062:	e015      	b.n	8016090 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8016064:	683b      	ldr	r3, [r7, #0]
 8016066:	2b00      	cmp	r3, #0
 8016068:	d109      	bne.n	801607e <udp_send+0x3e>
 801606a:	4b0b      	ldr	r3, [pc, #44]	@ (8016098 <udp_send+0x58>)
 801606c:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8016070:	490c      	ldr	r1, [pc, #48]	@ (80160a4 <udp_send+0x64>)
 8016072:	480b      	ldr	r0, [pc, #44]	@ (80160a0 <udp_send+0x60>)
 8016074:	f004 f9b4 	bl	801a3e0 <iprintf>
 8016078:	f06f 030f 	mvn.w	r3, #15
 801607c:	e008      	b.n	8016090 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	1d1a      	adds	r2, r3, #4
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	8a9b      	ldrh	r3, [r3, #20]
 8016086:	6839      	ldr	r1, [r7, #0]
 8016088:	6878      	ldr	r0, [r7, #4]
 801608a:	f000 f80d 	bl	80160a8 <udp_sendto>
 801608e:	4603      	mov	r3, r0
}
 8016090:	4618      	mov	r0, r3
 8016092:	3708      	adds	r7, #8
 8016094:	46bd      	mov	sp, r7
 8016096:	bd80      	pop	{r7, pc}
 8016098:	08020acc 	.word	0x08020acc
 801609c:	08020bc0 	.word	0x08020bc0
 80160a0:	08020b20 	.word	0x08020b20
 80160a4:	08020bd8 	.word	0x08020bd8

080160a8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b088      	sub	sp, #32
 80160ac:	af02      	add	r7, sp, #8
 80160ae:	60f8      	str	r0, [r7, #12]
 80160b0:	60b9      	str	r1, [r7, #8]
 80160b2:	607a      	str	r2, [r7, #4]
 80160b4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d109      	bne.n	80160d0 <udp_sendto+0x28>
 80160bc:	4b23      	ldr	r3, [pc, #140]	@ (801614c <udp_sendto+0xa4>)
 80160be:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80160c2:	4923      	ldr	r1, [pc, #140]	@ (8016150 <udp_sendto+0xa8>)
 80160c4:	4823      	ldr	r0, [pc, #140]	@ (8016154 <udp_sendto+0xac>)
 80160c6:	f004 f98b 	bl	801a3e0 <iprintf>
 80160ca:	f06f 030f 	mvn.w	r3, #15
 80160ce:	e038      	b.n	8016142 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80160d0:	68bb      	ldr	r3, [r7, #8]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d109      	bne.n	80160ea <udp_sendto+0x42>
 80160d6:	4b1d      	ldr	r3, [pc, #116]	@ (801614c <udp_sendto+0xa4>)
 80160d8:	f240 2219 	movw	r2, #537	@ 0x219
 80160dc:	491e      	ldr	r1, [pc, #120]	@ (8016158 <udp_sendto+0xb0>)
 80160de:	481d      	ldr	r0, [pc, #116]	@ (8016154 <udp_sendto+0xac>)
 80160e0:	f004 f97e 	bl	801a3e0 <iprintf>
 80160e4:	f06f 030f 	mvn.w	r3, #15
 80160e8:	e02b      	b.n	8016142 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d109      	bne.n	8016104 <udp_sendto+0x5c>
 80160f0:	4b16      	ldr	r3, [pc, #88]	@ (801614c <udp_sendto+0xa4>)
 80160f2:	f240 221a 	movw	r2, #538	@ 0x21a
 80160f6:	4919      	ldr	r1, [pc, #100]	@ (801615c <udp_sendto+0xb4>)
 80160f8:	4816      	ldr	r0, [pc, #88]	@ (8016154 <udp_sendto+0xac>)
 80160fa:	f004 f971 	bl	801a3e0 <iprintf>
 80160fe:	f06f 030f 	mvn.w	r3, #15
 8016102:	e01e      	b.n	8016142 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	7a1b      	ldrb	r3, [r3, #8]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d006      	beq.n	801611a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	7a1b      	ldrb	r3, [r3, #8]
 8016110:	4618      	mov	r0, r3
 8016112:	f7f8 fd1b 	bl	800eb4c <netif_get_by_index>
 8016116:	6178      	str	r0, [r7, #20]
 8016118:	e003      	b.n	8016122 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801611a:	6878      	ldr	r0, [r7, #4]
 801611c:	f001 fbac 	bl	8017878 <ip4_route>
 8016120:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8016122:	697b      	ldr	r3, [r7, #20]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d102      	bne.n	801612e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8016128:	f06f 0303 	mvn.w	r3, #3
 801612c:	e009      	b.n	8016142 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801612e:	887a      	ldrh	r2, [r7, #2]
 8016130:	697b      	ldr	r3, [r7, #20]
 8016132:	9300      	str	r3, [sp, #0]
 8016134:	4613      	mov	r3, r2
 8016136:	687a      	ldr	r2, [r7, #4]
 8016138:	68b9      	ldr	r1, [r7, #8]
 801613a:	68f8      	ldr	r0, [r7, #12]
 801613c:	f000 f810 	bl	8016160 <udp_sendto_if>
 8016140:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016142:	4618      	mov	r0, r3
 8016144:	3718      	adds	r7, #24
 8016146:	46bd      	mov	sp, r7
 8016148:	bd80      	pop	{r7, pc}
 801614a:	bf00      	nop
 801614c:	08020acc 	.word	0x08020acc
 8016150:	08020bf0 	.word	0x08020bf0
 8016154:	08020b20 	.word	0x08020b20
 8016158:	08020c08 	.word	0x08020c08
 801615c:	08020c24 	.word	0x08020c24

08016160 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8016160:	b580      	push	{r7, lr}
 8016162:	b088      	sub	sp, #32
 8016164:	af02      	add	r7, sp, #8
 8016166:	60f8      	str	r0, [r7, #12]
 8016168:	60b9      	str	r1, [r7, #8]
 801616a:	607a      	str	r2, [r7, #4]
 801616c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	2b00      	cmp	r3, #0
 8016172:	d109      	bne.n	8016188 <udp_sendto_if+0x28>
 8016174:	4b2e      	ldr	r3, [pc, #184]	@ (8016230 <udp_sendto_if+0xd0>)
 8016176:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801617a:	492e      	ldr	r1, [pc, #184]	@ (8016234 <udp_sendto_if+0xd4>)
 801617c:	482e      	ldr	r0, [pc, #184]	@ (8016238 <udp_sendto_if+0xd8>)
 801617e:	f004 f92f 	bl	801a3e0 <iprintf>
 8016182:	f06f 030f 	mvn.w	r3, #15
 8016186:	e04f      	b.n	8016228 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8016188:	68bb      	ldr	r3, [r7, #8]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d109      	bne.n	80161a2 <udp_sendto_if+0x42>
 801618e:	4b28      	ldr	r3, [pc, #160]	@ (8016230 <udp_sendto_if+0xd0>)
 8016190:	f240 2281 	movw	r2, #641	@ 0x281
 8016194:	4929      	ldr	r1, [pc, #164]	@ (801623c <udp_sendto_if+0xdc>)
 8016196:	4828      	ldr	r0, [pc, #160]	@ (8016238 <udp_sendto_if+0xd8>)
 8016198:	f004 f922 	bl	801a3e0 <iprintf>
 801619c:	f06f 030f 	mvn.w	r3, #15
 80161a0:	e042      	b.n	8016228 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d109      	bne.n	80161bc <udp_sendto_if+0x5c>
 80161a8:	4b21      	ldr	r3, [pc, #132]	@ (8016230 <udp_sendto_if+0xd0>)
 80161aa:	f240 2282 	movw	r2, #642	@ 0x282
 80161ae:	4924      	ldr	r1, [pc, #144]	@ (8016240 <udp_sendto_if+0xe0>)
 80161b0:	4821      	ldr	r0, [pc, #132]	@ (8016238 <udp_sendto_if+0xd8>)
 80161b2:	f004 f915 	bl	801a3e0 <iprintf>
 80161b6:	f06f 030f 	mvn.w	r3, #15
 80161ba:	e035      	b.n	8016228 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80161bc:	6a3b      	ldr	r3, [r7, #32]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d109      	bne.n	80161d6 <udp_sendto_if+0x76>
 80161c2:	4b1b      	ldr	r3, [pc, #108]	@ (8016230 <udp_sendto_if+0xd0>)
 80161c4:	f240 2283 	movw	r2, #643	@ 0x283
 80161c8:	491e      	ldr	r1, [pc, #120]	@ (8016244 <udp_sendto_if+0xe4>)
 80161ca:	481b      	ldr	r0, [pc, #108]	@ (8016238 <udp_sendto_if+0xd8>)
 80161cc:	f004 f908 	bl	801a3e0 <iprintf>
 80161d0:	f06f 030f 	mvn.w	r3, #15
 80161d4:	e028      	b.n	8016228 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d009      	beq.n	80161f0 <udp_sendto_if+0x90>
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d005      	beq.n	80161f0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80161ec:	2be0      	cmp	r3, #224	@ 0xe0
 80161ee:	d103      	bne.n	80161f8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80161f0:	6a3b      	ldr	r3, [r7, #32]
 80161f2:	3304      	adds	r3, #4
 80161f4:	617b      	str	r3, [r7, #20]
 80161f6:	e00b      	b.n	8016210 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	681a      	ldr	r2, [r3, #0]
 80161fc:	6a3b      	ldr	r3, [r7, #32]
 80161fe:	3304      	adds	r3, #4
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	429a      	cmp	r2, r3
 8016204:	d002      	beq.n	801620c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8016206:	f06f 0303 	mvn.w	r3, #3
 801620a:	e00d      	b.n	8016228 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8016210:	887a      	ldrh	r2, [r7, #2]
 8016212:	697b      	ldr	r3, [r7, #20]
 8016214:	9301      	str	r3, [sp, #4]
 8016216:	6a3b      	ldr	r3, [r7, #32]
 8016218:	9300      	str	r3, [sp, #0]
 801621a:	4613      	mov	r3, r2
 801621c:	687a      	ldr	r2, [r7, #4]
 801621e:	68b9      	ldr	r1, [r7, #8]
 8016220:	68f8      	ldr	r0, [r7, #12]
 8016222:	f000 f811 	bl	8016248 <udp_sendto_if_src>
 8016226:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016228:	4618      	mov	r0, r3
 801622a:	3718      	adds	r7, #24
 801622c:	46bd      	mov	sp, r7
 801622e:	bd80      	pop	{r7, pc}
 8016230:	08020acc 	.word	0x08020acc
 8016234:	08020c40 	.word	0x08020c40
 8016238:	08020b20 	.word	0x08020b20
 801623c:	08020c5c 	.word	0x08020c5c
 8016240:	08020c78 	.word	0x08020c78
 8016244:	08020c98 	.word	0x08020c98

08016248 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8016248:	b580      	push	{r7, lr}
 801624a:	b08c      	sub	sp, #48	@ 0x30
 801624c:	af04      	add	r7, sp, #16
 801624e:	60f8      	str	r0, [r7, #12]
 8016250:	60b9      	str	r1, [r7, #8]
 8016252:	607a      	str	r2, [r7, #4]
 8016254:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d109      	bne.n	8016270 <udp_sendto_if_src+0x28>
 801625c:	4b65      	ldr	r3, [pc, #404]	@ (80163f4 <udp_sendto_if_src+0x1ac>)
 801625e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8016262:	4965      	ldr	r1, [pc, #404]	@ (80163f8 <udp_sendto_if_src+0x1b0>)
 8016264:	4865      	ldr	r0, [pc, #404]	@ (80163fc <udp_sendto_if_src+0x1b4>)
 8016266:	f004 f8bb 	bl	801a3e0 <iprintf>
 801626a:	f06f 030f 	mvn.w	r3, #15
 801626e:	e0bc      	b.n	80163ea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8016270:	68bb      	ldr	r3, [r7, #8]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d109      	bne.n	801628a <udp_sendto_if_src+0x42>
 8016276:	4b5f      	ldr	r3, [pc, #380]	@ (80163f4 <udp_sendto_if_src+0x1ac>)
 8016278:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801627c:	4960      	ldr	r1, [pc, #384]	@ (8016400 <udp_sendto_if_src+0x1b8>)
 801627e:	485f      	ldr	r0, [pc, #380]	@ (80163fc <udp_sendto_if_src+0x1b4>)
 8016280:	f004 f8ae 	bl	801a3e0 <iprintf>
 8016284:	f06f 030f 	mvn.w	r3, #15
 8016288:	e0af      	b.n	80163ea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d109      	bne.n	80162a4 <udp_sendto_if_src+0x5c>
 8016290:	4b58      	ldr	r3, [pc, #352]	@ (80163f4 <udp_sendto_if_src+0x1ac>)
 8016292:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8016296:	495b      	ldr	r1, [pc, #364]	@ (8016404 <udp_sendto_if_src+0x1bc>)
 8016298:	4858      	ldr	r0, [pc, #352]	@ (80163fc <udp_sendto_if_src+0x1b4>)
 801629a:	f004 f8a1 	bl	801a3e0 <iprintf>
 801629e:	f06f 030f 	mvn.w	r3, #15
 80162a2:	e0a2      	b.n	80163ea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80162a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d109      	bne.n	80162be <udp_sendto_if_src+0x76>
 80162aa:	4b52      	ldr	r3, [pc, #328]	@ (80163f4 <udp_sendto_if_src+0x1ac>)
 80162ac:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80162b0:	4955      	ldr	r1, [pc, #340]	@ (8016408 <udp_sendto_if_src+0x1c0>)
 80162b2:	4852      	ldr	r0, [pc, #328]	@ (80163fc <udp_sendto_if_src+0x1b4>)
 80162b4:	f004 f894 	bl	801a3e0 <iprintf>
 80162b8:	f06f 030f 	mvn.w	r3, #15
 80162bc:	e095      	b.n	80163ea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80162be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d109      	bne.n	80162d8 <udp_sendto_if_src+0x90>
 80162c4:	4b4b      	ldr	r3, [pc, #300]	@ (80163f4 <udp_sendto_if_src+0x1ac>)
 80162c6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80162ca:	4950      	ldr	r1, [pc, #320]	@ (801640c <udp_sendto_if_src+0x1c4>)
 80162cc:	484b      	ldr	r0, [pc, #300]	@ (80163fc <udp_sendto_if_src+0x1b4>)
 80162ce:	f004 f887 	bl	801a3e0 <iprintf>
 80162d2:	f06f 030f 	mvn.w	r3, #15
 80162d6:	e088      	b.n	80163ea <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	8a5b      	ldrh	r3, [r3, #18]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d10f      	bne.n	8016300 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80162e0:	68f9      	ldr	r1, [r7, #12]
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	8a5b      	ldrh	r3, [r3, #18]
 80162e6:	461a      	mov	r2, r3
 80162e8:	68f8      	ldr	r0, [r7, #12]
 80162ea:	f000 f893 	bl	8016414 <udp_bind>
 80162ee:	4603      	mov	r3, r0
 80162f0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80162f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d002      	beq.n	8016300 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80162fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80162fe:	e074      	b.n	80163ea <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8016300:	68bb      	ldr	r3, [r7, #8]
 8016302:	891b      	ldrh	r3, [r3, #8]
 8016304:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8016308:	4293      	cmp	r3, r2
 801630a:	d902      	bls.n	8016312 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801630c:	f04f 33ff 	mov.w	r3, #4294967295
 8016310:	e06b      	b.n	80163ea <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8016312:	2108      	movs	r1, #8
 8016314:	68b8      	ldr	r0, [r7, #8]
 8016316:	f7f8 ff49 	bl	800f1ac <pbuf_add_header>
 801631a:	4603      	mov	r3, r0
 801631c:	2b00      	cmp	r3, #0
 801631e:	d015      	beq.n	801634c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8016320:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016324:	2108      	movs	r1, #8
 8016326:	2022      	movs	r0, #34	@ 0x22
 8016328:	f7f8 fcf2 	bl	800ed10 <pbuf_alloc>
 801632c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801632e:	69fb      	ldr	r3, [r7, #28]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d102      	bne.n	801633a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8016334:	f04f 33ff 	mov.w	r3, #4294967295
 8016338:	e057      	b.n	80163ea <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801633a:	68bb      	ldr	r3, [r7, #8]
 801633c:	891b      	ldrh	r3, [r3, #8]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d006      	beq.n	8016350 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8016342:	68b9      	ldr	r1, [r7, #8]
 8016344:	69f8      	ldr	r0, [r7, #28]
 8016346:	f7f9 f91d 	bl	800f584 <pbuf_chain>
 801634a:	e001      	b.n	8016350 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801634c:	68bb      	ldr	r3, [r7, #8]
 801634e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8016350:	69fb      	ldr	r3, [r7, #28]
 8016352:	895b      	ldrh	r3, [r3, #10]
 8016354:	2b07      	cmp	r3, #7
 8016356:	d806      	bhi.n	8016366 <udp_sendto_if_src+0x11e>
 8016358:	4b26      	ldr	r3, [pc, #152]	@ (80163f4 <udp_sendto_if_src+0x1ac>)
 801635a:	f240 320d 	movw	r2, #781	@ 0x30d
 801635e:	492c      	ldr	r1, [pc, #176]	@ (8016410 <udp_sendto_if_src+0x1c8>)
 8016360:	4826      	ldr	r0, [pc, #152]	@ (80163fc <udp_sendto_if_src+0x1b4>)
 8016362:	f004 f83d 	bl	801a3e0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8016366:	69fb      	ldr	r3, [r7, #28]
 8016368:	685b      	ldr	r3, [r3, #4]
 801636a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	8a5b      	ldrh	r3, [r3, #18]
 8016370:	4618      	mov	r0, r3
 8016372:	f7f7 fb87 	bl	800da84 <lwip_htons>
 8016376:	4603      	mov	r3, r0
 8016378:	461a      	mov	r2, r3
 801637a:	697b      	ldr	r3, [r7, #20]
 801637c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801637e:	887b      	ldrh	r3, [r7, #2]
 8016380:	4618      	mov	r0, r3
 8016382:	f7f7 fb7f 	bl	800da84 <lwip_htons>
 8016386:	4603      	mov	r3, r0
 8016388:	461a      	mov	r2, r3
 801638a:	697b      	ldr	r3, [r7, #20]
 801638c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801638e:	697b      	ldr	r3, [r7, #20]
 8016390:	2200      	movs	r2, #0
 8016392:	719a      	strb	r2, [r3, #6]
 8016394:	2200      	movs	r2, #0
 8016396:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016398:	69fb      	ldr	r3, [r7, #28]
 801639a:	891b      	ldrh	r3, [r3, #8]
 801639c:	4618      	mov	r0, r3
 801639e:	f7f7 fb71 	bl	800da84 <lwip_htons>
 80163a2:	4603      	mov	r3, r0
 80163a4:	461a      	mov	r2, r3
 80163a6:	697b      	ldr	r3, [r7, #20]
 80163a8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80163aa:	2311      	movs	r3, #17
 80163ac:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	7adb      	ldrb	r3, [r3, #11]
 80163b2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	7a9b      	ldrb	r3, [r3, #10]
 80163b8:	7cb9      	ldrb	r1, [r7, #18]
 80163ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80163bc:	9202      	str	r2, [sp, #8]
 80163be:	7cfa      	ldrb	r2, [r7, #19]
 80163c0:	9201      	str	r2, [sp, #4]
 80163c2:	9300      	str	r3, [sp, #0]
 80163c4:	460b      	mov	r3, r1
 80163c6:	687a      	ldr	r2, [r7, #4]
 80163c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80163ca:	69f8      	ldr	r0, [r7, #28]
 80163cc:	f001 fc3c 	bl	8017c48 <ip4_output_if_src>
 80163d0:	4603      	mov	r3, r0
 80163d2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80163d4:	69fa      	ldr	r2, [r7, #28]
 80163d6:	68bb      	ldr	r3, [r7, #8]
 80163d8:	429a      	cmp	r2, r3
 80163da:	d004      	beq.n	80163e6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80163dc:	69f8      	ldr	r0, [r7, #28]
 80163de:	f7f8 ffad 	bl	800f33c <pbuf_free>
    q = NULL;
 80163e2:	2300      	movs	r3, #0
 80163e4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80163e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80163ea:	4618      	mov	r0, r3
 80163ec:	3720      	adds	r7, #32
 80163ee:	46bd      	mov	sp, r7
 80163f0:	bd80      	pop	{r7, pc}
 80163f2:	bf00      	nop
 80163f4:	08020acc 	.word	0x08020acc
 80163f8:	08020cb8 	.word	0x08020cb8
 80163fc:	08020b20 	.word	0x08020b20
 8016400:	08020cd8 	.word	0x08020cd8
 8016404:	08020cf8 	.word	0x08020cf8
 8016408:	08020d1c 	.word	0x08020d1c
 801640c:	08020d40 	.word	0x08020d40
 8016410:	08020d64 	.word	0x08020d64

08016414 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016414:	b580      	push	{r7, lr}
 8016416:	b086      	sub	sp, #24
 8016418:	af00      	add	r7, sp, #0
 801641a:	60f8      	str	r0, [r7, #12]
 801641c:	60b9      	str	r1, [r7, #8]
 801641e:	4613      	mov	r3, r2
 8016420:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016422:	68bb      	ldr	r3, [r7, #8]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d101      	bne.n	801642c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016428:	4b39      	ldr	r3, [pc, #228]	@ (8016510 <udp_bind+0xfc>)
 801642a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d109      	bne.n	8016446 <udp_bind+0x32>
 8016432:	4b38      	ldr	r3, [pc, #224]	@ (8016514 <udp_bind+0x100>)
 8016434:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8016438:	4937      	ldr	r1, [pc, #220]	@ (8016518 <udp_bind+0x104>)
 801643a:	4838      	ldr	r0, [pc, #224]	@ (801651c <udp_bind+0x108>)
 801643c:	f003 ffd0 	bl	801a3e0 <iprintf>
 8016440:	f06f 030f 	mvn.w	r3, #15
 8016444:	e060      	b.n	8016508 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016446:	2300      	movs	r3, #0
 8016448:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801644a:	4b35      	ldr	r3, [pc, #212]	@ (8016520 <udp_bind+0x10c>)
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	617b      	str	r3, [r7, #20]
 8016450:	e009      	b.n	8016466 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8016452:	68fa      	ldr	r2, [r7, #12]
 8016454:	697b      	ldr	r3, [r7, #20]
 8016456:	429a      	cmp	r2, r3
 8016458:	d102      	bne.n	8016460 <udp_bind+0x4c>
      rebind = 1;
 801645a:	2301      	movs	r3, #1
 801645c:	74fb      	strb	r3, [r7, #19]
      break;
 801645e:	e005      	b.n	801646c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016460:	697b      	ldr	r3, [r7, #20]
 8016462:	68db      	ldr	r3, [r3, #12]
 8016464:	617b      	str	r3, [r7, #20]
 8016466:	697b      	ldr	r3, [r7, #20]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d1f2      	bne.n	8016452 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801646c:	88fb      	ldrh	r3, [r7, #6]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d109      	bne.n	8016486 <udp_bind+0x72>
    port = udp_new_port();
 8016472:	f7ff fc35 	bl	8015ce0 <udp_new_port>
 8016476:	4603      	mov	r3, r0
 8016478:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801647a:	88fb      	ldrh	r3, [r7, #6]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d12c      	bne.n	80164da <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016480:	f06f 0307 	mvn.w	r3, #7
 8016484:	e040      	b.n	8016508 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016486:	4b26      	ldr	r3, [pc, #152]	@ (8016520 <udp_bind+0x10c>)
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	617b      	str	r3, [r7, #20]
 801648c:	e022      	b.n	80164d4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801648e:	68fa      	ldr	r2, [r7, #12]
 8016490:	697b      	ldr	r3, [r7, #20]
 8016492:	429a      	cmp	r2, r3
 8016494:	d01b      	beq.n	80164ce <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016496:	697b      	ldr	r3, [r7, #20]
 8016498:	8a5b      	ldrh	r3, [r3, #18]
 801649a:	88fa      	ldrh	r2, [r7, #6]
 801649c:	429a      	cmp	r2, r3
 801649e:	d116      	bne.n	80164ce <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80164a0:	697b      	ldr	r3, [r7, #20]
 80164a2:	681a      	ldr	r2, [r3, #0]
 80164a4:	68bb      	ldr	r3, [r7, #8]
 80164a6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80164a8:	429a      	cmp	r2, r3
 80164aa:	d00d      	beq.n	80164c8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80164ac:	68bb      	ldr	r3, [r7, #8]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d00a      	beq.n	80164c8 <udp_bind+0xb4>
 80164b2:	68bb      	ldr	r3, [r7, #8]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d006      	beq.n	80164c8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80164ba:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d003      	beq.n	80164c8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80164c0:	697b      	ldr	r3, [r7, #20]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d102      	bne.n	80164ce <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80164c8:	f06f 0307 	mvn.w	r3, #7
 80164cc:	e01c      	b.n	8016508 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80164ce:	697b      	ldr	r3, [r7, #20]
 80164d0:	68db      	ldr	r3, [r3, #12]
 80164d2:	617b      	str	r3, [r7, #20]
 80164d4:	697b      	ldr	r3, [r7, #20]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d1d9      	bne.n	801648e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80164da:	68bb      	ldr	r3, [r7, #8]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d002      	beq.n	80164e6 <udp_bind+0xd2>
 80164e0:	68bb      	ldr	r3, [r7, #8]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	e000      	b.n	80164e8 <udp_bind+0xd4>
 80164e6:	2300      	movs	r3, #0
 80164e8:	68fa      	ldr	r2, [r7, #12]
 80164ea:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	88fa      	ldrh	r2, [r7, #6]
 80164f0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80164f2:	7cfb      	ldrb	r3, [r7, #19]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d106      	bne.n	8016506 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80164f8:	4b09      	ldr	r3, [pc, #36]	@ (8016520 <udp_bind+0x10c>)
 80164fa:	681a      	ldr	r2, [r3, #0]
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8016500:	4a07      	ldr	r2, [pc, #28]	@ (8016520 <udp_bind+0x10c>)
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016506:	2300      	movs	r3, #0
}
 8016508:	4618      	mov	r0, r3
 801650a:	3718      	adds	r7, #24
 801650c:	46bd      	mov	sp, r7
 801650e:	bd80      	pop	{r7, pc}
 8016510:	08021710 	.word	0x08021710
 8016514:	08020acc 	.word	0x08020acc
 8016518:	08020d94 	.word	0x08020d94
 801651c:	08020b20 	.word	0x08020b20
 8016520:	2000d13c 	.word	0x2000d13c

08016524 <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 8016524:	b480      	push	{r7}
 8016526:	b083      	sub	sp, #12
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
 801652c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 801652e:	683b      	ldr	r3, [r7, #0]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d007      	beq.n	8016544 <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 8016534:	683b      	ldr	r3, [r7, #0]
 8016536:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801653a:	3301      	adds	r3, #1
 801653c:	b2da      	uxtb	r2, r3
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 8016542:	e002      	b.n	801654a <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	2200      	movs	r2, #0
 8016548:	721a      	strb	r2, [r3, #8]
}
 801654a:	bf00      	nop
 801654c:	370c      	adds	r7, #12
 801654e:	46bd      	mov	sp, r7
 8016550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016554:	4770      	bx	lr
	...

08016558 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b084      	sub	sp, #16
 801655c:	af00      	add	r7, sp, #0
 801655e:	60f8      	str	r0, [r7, #12]
 8016560:	60b9      	str	r1, [r7, #8]
 8016562:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	2b00      	cmp	r3, #0
 8016568:	d107      	bne.n	801657a <udp_recv+0x22>
 801656a:	4b08      	ldr	r3, [pc, #32]	@ (801658c <udp_recv+0x34>)
 801656c:	f240 428a 	movw	r2, #1162	@ 0x48a
 8016570:	4907      	ldr	r1, [pc, #28]	@ (8016590 <udp_recv+0x38>)
 8016572:	4808      	ldr	r0, [pc, #32]	@ (8016594 <udp_recv+0x3c>)
 8016574:	f003 ff34 	bl	801a3e0 <iprintf>
 8016578:	e005      	b.n	8016586 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	68ba      	ldr	r2, [r7, #8]
 801657e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	687a      	ldr	r2, [r7, #4]
 8016584:	61da      	str	r2, [r3, #28]
}
 8016586:	3710      	adds	r7, #16
 8016588:	46bd      	mov	sp, r7
 801658a:	bd80      	pop	{r7, pc}
 801658c:	08020acc 	.word	0x08020acc
 8016590:	08020e00 	.word	0x08020e00
 8016594:	08020b20 	.word	0x08020b20

08016598 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8016598:	b580      	push	{r7, lr}
 801659a:	b084      	sub	sp, #16
 801659c:	af00      	add	r7, sp, #0
 801659e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d107      	bne.n	80165b6 <udp_remove+0x1e>
 80165a6:	4b19      	ldr	r3, [pc, #100]	@ (801660c <udp_remove+0x74>)
 80165a8:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 80165ac:	4918      	ldr	r1, [pc, #96]	@ (8016610 <udp_remove+0x78>)
 80165ae:	4819      	ldr	r0, [pc, #100]	@ (8016614 <udp_remove+0x7c>)
 80165b0:	f003 ff16 	bl	801a3e0 <iprintf>
 80165b4:	e026      	b.n	8016604 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80165b6:	4b18      	ldr	r3, [pc, #96]	@ (8016618 <udp_remove+0x80>)
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	687a      	ldr	r2, [r7, #4]
 80165bc:	429a      	cmp	r2, r3
 80165be:	d105      	bne.n	80165cc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80165c0:	4b15      	ldr	r3, [pc, #84]	@ (8016618 <udp_remove+0x80>)
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	68db      	ldr	r3, [r3, #12]
 80165c6:	4a14      	ldr	r2, [pc, #80]	@ (8016618 <udp_remove+0x80>)
 80165c8:	6013      	str	r3, [r2, #0]
 80165ca:	e017      	b.n	80165fc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80165cc:	4b12      	ldr	r3, [pc, #72]	@ (8016618 <udp_remove+0x80>)
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	60fb      	str	r3, [r7, #12]
 80165d2:	e010      	b.n	80165f6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	68db      	ldr	r3, [r3, #12]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d009      	beq.n	80165f0 <udp_remove+0x58>
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	68db      	ldr	r3, [r3, #12]
 80165e0:	687a      	ldr	r2, [r7, #4]
 80165e2:	429a      	cmp	r2, r3
 80165e4:	d104      	bne.n	80165f0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	68da      	ldr	r2, [r3, #12]
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	60da      	str	r2, [r3, #12]
        break;
 80165ee:	e005      	b.n	80165fc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	68db      	ldr	r3, [r3, #12]
 80165f4:	60fb      	str	r3, [r7, #12]
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d1eb      	bne.n	80165d4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80165fc:	6879      	ldr	r1, [r7, #4]
 80165fe:	2000      	movs	r0, #0
 8016600:	f7f7 ff8e 	bl	800e520 <memp_free>
}
 8016604:	3710      	adds	r7, #16
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}
 801660a:	bf00      	nop
 801660c:	08020acc 	.word	0x08020acc
 8016610:	08020e18 	.word	0x08020e18
 8016614:	08020b20 	.word	0x08020b20
 8016618:	2000d13c 	.word	0x2000d13c

0801661c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801661c:	b580      	push	{r7, lr}
 801661e:	b082      	sub	sp, #8
 8016620:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8016622:	2000      	movs	r0, #0
 8016624:	f7f7 ff06 	bl	800e434 <memp_malloc>
 8016628:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d007      	beq.n	8016640 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016630:	2220      	movs	r2, #32
 8016632:	2100      	movs	r1, #0
 8016634:	6878      	ldr	r0, [r7, #4]
 8016636:	f004 f865 	bl	801a704 <memset>
    pcb->ttl = UDP_TTL;
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	22ff      	movs	r2, #255	@ 0xff
 801663e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016640:	687b      	ldr	r3, [r7, #4]
}
 8016642:	4618      	mov	r0, r3
 8016644:	3708      	adds	r7, #8
 8016646:	46bd      	mov	sp, r7
 8016648:	bd80      	pop	{r7, pc}

0801664a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801664a:	b580      	push	{r7, lr}
 801664c:	b084      	sub	sp, #16
 801664e:	af00      	add	r7, sp, #0
 8016650:	4603      	mov	r3, r0
 8016652:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8016654:	f7ff ffe2 	bl	801661c <udp_new>
 8016658:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801665a:	68fb      	ldr	r3, [r7, #12]
}
 801665c:	4618      	mov	r0, r3
 801665e:	3710      	adds	r7, #16
 8016660:	46bd      	mov	sp, r7
 8016662:	bd80      	pop	{r7, pc}

08016664 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016664:	b480      	push	{r7}
 8016666:	b085      	sub	sp, #20
 8016668:	af00      	add	r7, sp, #0
 801666a:	6078      	str	r0, [r7, #4]
 801666c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	2b00      	cmp	r3, #0
 8016672:	d01e      	beq.n	80166b2 <udp_netif_ip_addr_changed+0x4e>
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d01a      	beq.n	80166b2 <udp_netif_ip_addr_changed+0x4e>
 801667c:	683b      	ldr	r3, [r7, #0]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d017      	beq.n	80166b2 <udp_netif_ip_addr_changed+0x4e>
 8016682:	683b      	ldr	r3, [r7, #0]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d013      	beq.n	80166b2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801668a:	4b0d      	ldr	r3, [pc, #52]	@ (80166c0 <udp_netif_ip_addr_changed+0x5c>)
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	60fb      	str	r3, [r7, #12]
 8016690:	e00c      	b.n	80166ac <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	681a      	ldr	r2, [r3, #0]
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	429a      	cmp	r2, r3
 801669c:	d103      	bne.n	80166a6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801669e:	683b      	ldr	r3, [r7, #0]
 80166a0:	681a      	ldr	r2, [r3, #0]
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	68db      	ldr	r3, [r3, #12]
 80166aa:	60fb      	str	r3, [r7, #12]
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d1ef      	bne.n	8016692 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80166b2:	bf00      	nop
 80166b4:	3714      	adds	r7, #20
 80166b6:	46bd      	mov	sp, r7
 80166b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166bc:	4770      	bx	lr
 80166be:	bf00      	nop
 80166c0:	2000d13c 	.word	0x2000d13c

080166c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80166c4:	b580      	push	{r7, lr}
 80166c6:	b082      	sub	sp, #8
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80166cc:	4915      	ldr	r1, [pc, #84]	@ (8016724 <etharp_free_entry+0x60>)
 80166ce:	687a      	ldr	r2, [r7, #4]
 80166d0:	4613      	mov	r3, r2
 80166d2:	005b      	lsls	r3, r3, #1
 80166d4:	4413      	add	r3, r2
 80166d6:	00db      	lsls	r3, r3, #3
 80166d8:	440b      	add	r3, r1
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d013      	beq.n	8016708 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80166e0:	4910      	ldr	r1, [pc, #64]	@ (8016724 <etharp_free_entry+0x60>)
 80166e2:	687a      	ldr	r2, [r7, #4]
 80166e4:	4613      	mov	r3, r2
 80166e6:	005b      	lsls	r3, r3, #1
 80166e8:	4413      	add	r3, r2
 80166ea:	00db      	lsls	r3, r3, #3
 80166ec:	440b      	add	r3, r1
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	4618      	mov	r0, r3
 80166f2:	f7f8 fe23 	bl	800f33c <pbuf_free>
    arp_table[i].q = NULL;
 80166f6:	490b      	ldr	r1, [pc, #44]	@ (8016724 <etharp_free_entry+0x60>)
 80166f8:	687a      	ldr	r2, [r7, #4]
 80166fa:	4613      	mov	r3, r2
 80166fc:	005b      	lsls	r3, r3, #1
 80166fe:	4413      	add	r3, r2
 8016700:	00db      	lsls	r3, r3, #3
 8016702:	440b      	add	r3, r1
 8016704:	2200      	movs	r2, #0
 8016706:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016708:	4906      	ldr	r1, [pc, #24]	@ (8016724 <etharp_free_entry+0x60>)
 801670a:	687a      	ldr	r2, [r7, #4]
 801670c:	4613      	mov	r3, r2
 801670e:	005b      	lsls	r3, r3, #1
 8016710:	4413      	add	r3, r2
 8016712:	00db      	lsls	r3, r3, #3
 8016714:	440b      	add	r3, r1
 8016716:	3314      	adds	r3, #20
 8016718:	2200      	movs	r2, #0
 801671a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801671c:	bf00      	nop
 801671e:	3708      	adds	r7, #8
 8016720:	46bd      	mov	sp, r7
 8016722:	bd80      	pop	{r7, pc}
 8016724:	2000d140 	.word	0x2000d140

08016728 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016728:	b580      	push	{r7, lr}
 801672a:	b082      	sub	sp, #8
 801672c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801672e:	2300      	movs	r3, #0
 8016730:	607b      	str	r3, [r7, #4]
 8016732:	e096      	b.n	8016862 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016734:	494f      	ldr	r1, [pc, #316]	@ (8016874 <etharp_tmr+0x14c>)
 8016736:	687a      	ldr	r2, [r7, #4]
 8016738:	4613      	mov	r3, r2
 801673a:	005b      	lsls	r3, r3, #1
 801673c:	4413      	add	r3, r2
 801673e:	00db      	lsls	r3, r3, #3
 8016740:	440b      	add	r3, r1
 8016742:	3314      	adds	r3, #20
 8016744:	781b      	ldrb	r3, [r3, #0]
 8016746:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016748:	78fb      	ldrb	r3, [r7, #3]
 801674a:	2b00      	cmp	r3, #0
 801674c:	f000 8086 	beq.w	801685c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016750:	4948      	ldr	r1, [pc, #288]	@ (8016874 <etharp_tmr+0x14c>)
 8016752:	687a      	ldr	r2, [r7, #4]
 8016754:	4613      	mov	r3, r2
 8016756:	005b      	lsls	r3, r3, #1
 8016758:	4413      	add	r3, r2
 801675a:	00db      	lsls	r3, r3, #3
 801675c:	440b      	add	r3, r1
 801675e:	3312      	adds	r3, #18
 8016760:	881b      	ldrh	r3, [r3, #0]
 8016762:	3301      	adds	r3, #1
 8016764:	b298      	uxth	r0, r3
 8016766:	4943      	ldr	r1, [pc, #268]	@ (8016874 <etharp_tmr+0x14c>)
 8016768:	687a      	ldr	r2, [r7, #4]
 801676a:	4613      	mov	r3, r2
 801676c:	005b      	lsls	r3, r3, #1
 801676e:	4413      	add	r3, r2
 8016770:	00db      	lsls	r3, r3, #3
 8016772:	440b      	add	r3, r1
 8016774:	3312      	adds	r3, #18
 8016776:	4602      	mov	r2, r0
 8016778:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801677a:	493e      	ldr	r1, [pc, #248]	@ (8016874 <etharp_tmr+0x14c>)
 801677c:	687a      	ldr	r2, [r7, #4]
 801677e:	4613      	mov	r3, r2
 8016780:	005b      	lsls	r3, r3, #1
 8016782:	4413      	add	r3, r2
 8016784:	00db      	lsls	r3, r3, #3
 8016786:	440b      	add	r3, r1
 8016788:	3312      	adds	r3, #18
 801678a:	881b      	ldrh	r3, [r3, #0]
 801678c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8016790:	d215      	bcs.n	80167be <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016792:	4938      	ldr	r1, [pc, #224]	@ (8016874 <etharp_tmr+0x14c>)
 8016794:	687a      	ldr	r2, [r7, #4]
 8016796:	4613      	mov	r3, r2
 8016798:	005b      	lsls	r3, r3, #1
 801679a:	4413      	add	r3, r2
 801679c:	00db      	lsls	r3, r3, #3
 801679e:	440b      	add	r3, r1
 80167a0:	3314      	adds	r3, #20
 80167a2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80167a4:	2b01      	cmp	r3, #1
 80167a6:	d10e      	bne.n	80167c6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80167a8:	4932      	ldr	r1, [pc, #200]	@ (8016874 <etharp_tmr+0x14c>)
 80167aa:	687a      	ldr	r2, [r7, #4]
 80167ac:	4613      	mov	r3, r2
 80167ae:	005b      	lsls	r3, r3, #1
 80167b0:	4413      	add	r3, r2
 80167b2:	00db      	lsls	r3, r3, #3
 80167b4:	440b      	add	r3, r1
 80167b6:	3312      	adds	r3, #18
 80167b8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80167ba:	2b04      	cmp	r3, #4
 80167bc:	d903      	bls.n	80167c6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80167be:	6878      	ldr	r0, [r7, #4]
 80167c0:	f7ff ff80 	bl	80166c4 <etharp_free_entry>
 80167c4:	e04a      	b.n	801685c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80167c6:	492b      	ldr	r1, [pc, #172]	@ (8016874 <etharp_tmr+0x14c>)
 80167c8:	687a      	ldr	r2, [r7, #4]
 80167ca:	4613      	mov	r3, r2
 80167cc:	005b      	lsls	r3, r3, #1
 80167ce:	4413      	add	r3, r2
 80167d0:	00db      	lsls	r3, r3, #3
 80167d2:	440b      	add	r3, r1
 80167d4:	3314      	adds	r3, #20
 80167d6:	781b      	ldrb	r3, [r3, #0]
 80167d8:	2b03      	cmp	r3, #3
 80167da:	d10a      	bne.n	80167f2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80167dc:	4925      	ldr	r1, [pc, #148]	@ (8016874 <etharp_tmr+0x14c>)
 80167de:	687a      	ldr	r2, [r7, #4]
 80167e0:	4613      	mov	r3, r2
 80167e2:	005b      	lsls	r3, r3, #1
 80167e4:	4413      	add	r3, r2
 80167e6:	00db      	lsls	r3, r3, #3
 80167e8:	440b      	add	r3, r1
 80167ea:	3314      	adds	r3, #20
 80167ec:	2204      	movs	r2, #4
 80167ee:	701a      	strb	r2, [r3, #0]
 80167f0:	e034      	b.n	801685c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80167f2:	4920      	ldr	r1, [pc, #128]	@ (8016874 <etharp_tmr+0x14c>)
 80167f4:	687a      	ldr	r2, [r7, #4]
 80167f6:	4613      	mov	r3, r2
 80167f8:	005b      	lsls	r3, r3, #1
 80167fa:	4413      	add	r3, r2
 80167fc:	00db      	lsls	r3, r3, #3
 80167fe:	440b      	add	r3, r1
 8016800:	3314      	adds	r3, #20
 8016802:	781b      	ldrb	r3, [r3, #0]
 8016804:	2b04      	cmp	r3, #4
 8016806:	d10a      	bne.n	801681e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016808:	491a      	ldr	r1, [pc, #104]	@ (8016874 <etharp_tmr+0x14c>)
 801680a:	687a      	ldr	r2, [r7, #4]
 801680c:	4613      	mov	r3, r2
 801680e:	005b      	lsls	r3, r3, #1
 8016810:	4413      	add	r3, r2
 8016812:	00db      	lsls	r3, r3, #3
 8016814:	440b      	add	r3, r1
 8016816:	3314      	adds	r3, #20
 8016818:	2202      	movs	r2, #2
 801681a:	701a      	strb	r2, [r3, #0]
 801681c:	e01e      	b.n	801685c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801681e:	4915      	ldr	r1, [pc, #84]	@ (8016874 <etharp_tmr+0x14c>)
 8016820:	687a      	ldr	r2, [r7, #4]
 8016822:	4613      	mov	r3, r2
 8016824:	005b      	lsls	r3, r3, #1
 8016826:	4413      	add	r3, r2
 8016828:	00db      	lsls	r3, r3, #3
 801682a:	440b      	add	r3, r1
 801682c:	3314      	adds	r3, #20
 801682e:	781b      	ldrb	r3, [r3, #0]
 8016830:	2b01      	cmp	r3, #1
 8016832:	d113      	bne.n	801685c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016834:	490f      	ldr	r1, [pc, #60]	@ (8016874 <etharp_tmr+0x14c>)
 8016836:	687a      	ldr	r2, [r7, #4]
 8016838:	4613      	mov	r3, r2
 801683a:	005b      	lsls	r3, r3, #1
 801683c:	4413      	add	r3, r2
 801683e:	00db      	lsls	r3, r3, #3
 8016840:	440b      	add	r3, r1
 8016842:	3308      	adds	r3, #8
 8016844:	6818      	ldr	r0, [r3, #0]
 8016846:	687a      	ldr	r2, [r7, #4]
 8016848:	4613      	mov	r3, r2
 801684a:	005b      	lsls	r3, r3, #1
 801684c:	4413      	add	r3, r2
 801684e:	00db      	lsls	r3, r3, #3
 8016850:	4a08      	ldr	r2, [pc, #32]	@ (8016874 <etharp_tmr+0x14c>)
 8016852:	4413      	add	r3, r2
 8016854:	3304      	adds	r3, #4
 8016856:	4619      	mov	r1, r3
 8016858:	f000 fe6e 	bl	8017538 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	3301      	adds	r3, #1
 8016860:	607b      	str	r3, [r7, #4]
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	2b09      	cmp	r3, #9
 8016866:	f77f af65 	ble.w	8016734 <etharp_tmr+0xc>
      }
    }
  }
}
 801686a:	bf00      	nop
 801686c:	bf00      	nop
 801686e:	3708      	adds	r7, #8
 8016870:	46bd      	mov	sp, r7
 8016872:	bd80      	pop	{r7, pc}
 8016874:	2000d140 	.word	0x2000d140

08016878 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016878:	b580      	push	{r7, lr}
 801687a:	b08a      	sub	sp, #40	@ 0x28
 801687c:	af00      	add	r7, sp, #0
 801687e:	60f8      	str	r0, [r7, #12]
 8016880:	460b      	mov	r3, r1
 8016882:	607a      	str	r2, [r7, #4]
 8016884:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016886:	230a      	movs	r3, #10
 8016888:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801688a:	230a      	movs	r3, #10
 801688c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801688e:	230a      	movs	r3, #10
 8016890:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8016892:	2300      	movs	r3, #0
 8016894:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016896:	230a      	movs	r3, #10
 8016898:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801689a:	2300      	movs	r3, #0
 801689c:	83bb      	strh	r3, [r7, #28]
 801689e:	2300      	movs	r3, #0
 80168a0:	837b      	strh	r3, [r7, #26]
 80168a2:	2300      	movs	r3, #0
 80168a4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80168a6:	2300      	movs	r3, #0
 80168a8:	843b      	strh	r3, [r7, #32]
 80168aa:	e0ae      	b.n	8016a0a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80168ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80168b0:	49a6      	ldr	r1, [pc, #664]	@ (8016b4c <etharp_find_entry+0x2d4>)
 80168b2:	4613      	mov	r3, r2
 80168b4:	005b      	lsls	r3, r3, #1
 80168b6:	4413      	add	r3, r2
 80168b8:	00db      	lsls	r3, r3, #3
 80168ba:	440b      	add	r3, r1
 80168bc:	3314      	adds	r3, #20
 80168be:	781b      	ldrb	r3, [r3, #0]
 80168c0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80168c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80168c6:	2b0a      	cmp	r3, #10
 80168c8:	d105      	bne.n	80168d6 <etharp_find_entry+0x5e>
 80168ca:	7dfb      	ldrb	r3, [r7, #23]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d102      	bne.n	80168d6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80168d0:	8c3b      	ldrh	r3, [r7, #32]
 80168d2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80168d4:	e095      	b.n	8016a02 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80168d6:	7dfb      	ldrb	r3, [r7, #23]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	f000 8092 	beq.w	8016a02 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80168de:	7dfb      	ldrb	r3, [r7, #23]
 80168e0:	2b01      	cmp	r3, #1
 80168e2:	d009      	beq.n	80168f8 <etharp_find_entry+0x80>
 80168e4:	7dfb      	ldrb	r3, [r7, #23]
 80168e6:	2b01      	cmp	r3, #1
 80168e8:	d806      	bhi.n	80168f8 <etharp_find_entry+0x80>
 80168ea:	4b99      	ldr	r3, [pc, #612]	@ (8016b50 <etharp_find_entry+0x2d8>)
 80168ec:	f240 1223 	movw	r2, #291	@ 0x123
 80168f0:	4998      	ldr	r1, [pc, #608]	@ (8016b54 <etharp_find_entry+0x2dc>)
 80168f2:	4899      	ldr	r0, [pc, #612]	@ (8016b58 <etharp_find_entry+0x2e0>)
 80168f4:	f003 fd74 	bl	801a3e0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d020      	beq.n	8016940 <etharp_find_entry+0xc8>
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	6819      	ldr	r1, [r3, #0]
 8016902:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016906:	4891      	ldr	r0, [pc, #580]	@ (8016b4c <etharp_find_entry+0x2d4>)
 8016908:	4613      	mov	r3, r2
 801690a:	005b      	lsls	r3, r3, #1
 801690c:	4413      	add	r3, r2
 801690e:	00db      	lsls	r3, r3, #3
 8016910:	4403      	add	r3, r0
 8016912:	3304      	adds	r3, #4
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	4299      	cmp	r1, r3
 8016918:	d112      	bne.n	8016940 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	2b00      	cmp	r3, #0
 801691e:	d00c      	beq.n	801693a <etharp_find_entry+0xc2>
 8016920:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016924:	4989      	ldr	r1, [pc, #548]	@ (8016b4c <etharp_find_entry+0x2d4>)
 8016926:	4613      	mov	r3, r2
 8016928:	005b      	lsls	r3, r3, #1
 801692a:	4413      	add	r3, r2
 801692c:	00db      	lsls	r3, r3, #3
 801692e:	440b      	add	r3, r1
 8016930:	3308      	adds	r3, #8
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	687a      	ldr	r2, [r7, #4]
 8016936:	429a      	cmp	r2, r3
 8016938:	d102      	bne.n	8016940 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801693a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801693e:	e100      	b.n	8016b42 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016940:	7dfb      	ldrb	r3, [r7, #23]
 8016942:	2b01      	cmp	r3, #1
 8016944:	d140      	bne.n	80169c8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016946:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801694a:	4980      	ldr	r1, [pc, #512]	@ (8016b4c <etharp_find_entry+0x2d4>)
 801694c:	4613      	mov	r3, r2
 801694e:	005b      	lsls	r3, r3, #1
 8016950:	4413      	add	r3, r2
 8016952:	00db      	lsls	r3, r3, #3
 8016954:	440b      	add	r3, r1
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d01a      	beq.n	8016992 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801695c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016960:	497a      	ldr	r1, [pc, #488]	@ (8016b4c <etharp_find_entry+0x2d4>)
 8016962:	4613      	mov	r3, r2
 8016964:	005b      	lsls	r3, r3, #1
 8016966:	4413      	add	r3, r2
 8016968:	00db      	lsls	r3, r3, #3
 801696a:	440b      	add	r3, r1
 801696c:	3312      	adds	r3, #18
 801696e:	881b      	ldrh	r3, [r3, #0]
 8016970:	8bba      	ldrh	r2, [r7, #28]
 8016972:	429a      	cmp	r2, r3
 8016974:	d845      	bhi.n	8016a02 <etharp_find_entry+0x18a>
            old_queue = i;
 8016976:	8c3b      	ldrh	r3, [r7, #32]
 8016978:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801697a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801697e:	4973      	ldr	r1, [pc, #460]	@ (8016b4c <etharp_find_entry+0x2d4>)
 8016980:	4613      	mov	r3, r2
 8016982:	005b      	lsls	r3, r3, #1
 8016984:	4413      	add	r3, r2
 8016986:	00db      	lsls	r3, r3, #3
 8016988:	440b      	add	r3, r1
 801698a:	3312      	adds	r3, #18
 801698c:	881b      	ldrh	r3, [r3, #0]
 801698e:	83bb      	strh	r3, [r7, #28]
 8016990:	e037      	b.n	8016a02 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016992:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016996:	496d      	ldr	r1, [pc, #436]	@ (8016b4c <etharp_find_entry+0x2d4>)
 8016998:	4613      	mov	r3, r2
 801699a:	005b      	lsls	r3, r3, #1
 801699c:	4413      	add	r3, r2
 801699e:	00db      	lsls	r3, r3, #3
 80169a0:	440b      	add	r3, r1
 80169a2:	3312      	adds	r3, #18
 80169a4:	881b      	ldrh	r3, [r3, #0]
 80169a6:	8b7a      	ldrh	r2, [r7, #26]
 80169a8:	429a      	cmp	r2, r3
 80169aa:	d82a      	bhi.n	8016a02 <etharp_find_entry+0x18a>
            old_pending = i;
 80169ac:	8c3b      	ldrh	r3, [r7, #32]
 80169ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80169b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169b4:	4965      	ldr	r1, [pc, #404]	@ (8016b4c <etharp_find_entry+0x2d4>)
 80169b6:	4613      	mov	r3, r2
 80169b8:	005b      	lsls	r3, r3, #1
 80169ba:	4413      	add	r3, r2
 80169bc:	00db      	lsls	r3, r3, #3
 80169be:	440b      	add	r3, r1
 80169c0:	3312      	adds	r3, #18
 80169c2:	881b      	ldrh	r3, [r3, #0]
 80169c4:	837b      	strh	r3, [r7, #26]
 80169c6:	e01c      	b.n	8016a02 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80169c8:	7dfb      	ldrb	r3, [r7, #23]
 80169ca:	2b01      	cmp	r3, #1
 80169cc:	d919      	bls.n	8016a02 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80169ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169d2:	495e      	ldr	r1, [pc, #376]	@ (8016b4c <etharp_find_entry+0x2d4>)
 80169d4:	4613      	mov	r3, r2
 80169d6:	005b      	lsls	r3, r3, #1
 80169d8:	4413      	add	r3, r2
 80169da:	00db      	lsls	r3, r3, #3
 80169dc:	440b      	add	r3, r1
 80169de:	3312      	adds	r3, #18
 80169e0:	881b      	ldrh	r3, [r3, #0]
 80169e2:	8b3a      	ldrh	r2, [r7, #24]
 80169e4:	429a      	cmp	r2, r3
 80169e6:	d80c      	bhi.n	8016a02 <etharp_find_entry+0x18a>
            old_stable = i;
 80169e8:	8c3b      	ldrh	r3, [r7, #32]
 80169ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80169ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169f0:	4956      	ldr	r1, [pc, #344]	@ (8016b4c <etharp_find_entry+0x2d4>)
 80169f2:	4613      	mov	r3, r2
 80169f4:	005b      	lsls	r3, r3, #1
 80169f6:	4413      	add	r3, r2
 80169f8:	00db      	lsls	r3, r3, #3
 80169fa:	440b      	add	r3, r1
 80169fc:	3312      	adds	r3, #18
 80169fe:	881b      	ldrh	r3, [r3, #0]
 8016a00:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a02:	8c3b      	ldrh	r3, [r7, #32]
 8016a04:	3301      	adds	r3, #1
 8016a06:	b29b      	uxth	r3, r3
 8016a08:	843b      	strh	r3, [r7, #32]
 8016a0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016a0e:	2b09      	cmp	r3, #9
 8016a10:	f77f af4c 	ble.w	80168ac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016a14:	7afb      	ldrb	r3, [r7, #11]
 8016a16:	f003 0302 	and.w	r3, r3, #2
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d108      	bne.n	8016a30 <etharp_find_entry+0x1b8>
 8016a1e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016a22:	2b0a      	cmp	r3, #10
 8016a24:	d107      	bne.n	8016a36 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016a26:	7afb      	ldrb	r3, [r7, #11]
 8016a28:	f003 0301 	and.w	r3, r3, #1
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d102      	bne.n	8016a36 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016a30:	f04f 33ff 	mov.w	r3, #4294967295
 8016a34:	e085      	b.n	8016b42 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016a36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016a3a:	2b09      	cmp	r3, #9
 8016a3c:	dc02      	bgt.n	8016a44 <etharp_find_entry+0x1cc>
    i = empty;
 8016a3e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016a40:	843b      	strh	r3, [r7, #32]
 8016a42:	e039      	b.n	8016ab8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016a44:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8016a48:	2b09      	cmp	r3, #9
 8016a4a:	dc14      	bgt.n	8016a76 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016a4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016a4e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016a50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a54:	493d      	ldr	r1, [pc, #244]	@ (8016b4c <etharp_find_entry+0x2d4>)
 8016a56:	4613      	mov	r3, r2
 8016a58:	005b      	lsls	r3, r3, #1
 8016a5a:	4413      	add	r3, r2
 8016a5c:	00db      	lsls	r3, r3, #3
 8016a5e:	440b      	add	r3, r1
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d018      	beq.n	8016a98 <etharp_find_entry+0x220>
 8016a66:	4b3a      	ldr	r3, [pc, #232]	@ (8016b50 <etharp_find_entry+0x2d8>)
 8016a68:	f240 126d 	movw	r2, #365	@ 0x16d
 8016a6c:	493b      	ldr	r1, [pc, #236]	@ (8016b5c <etharp_find_entry+0x2e4>)
 8016a6e:	483a      	ldr	r0, [pc, #232]	@ (8016b58 <etharp_find_entry+0x2e0>)
 8016a70:	f003 fcb6 	bl	801a3e0 <iprintf>
 8016a74:	e010      	b.n	8016a98 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016a76:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8016a7a:	2b09      	cmp	r3, #9
 8016a7c:	dc02      	bgt.n	8016a84 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016a7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016a80:	843b      	strh	r3, [r7, #32]
 8016a82:	e009      	b.n	8016a98 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016a84:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016a88:	2b09      	cmp	r3, #9
 8016a8a:	dc02      	bgt.n	8016a92 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016a8c:	8bfb      	ldrh	r3, [r7, #30]
 8016a8e:	843b      	strh	r3, [r7, #32]
 8016a90:	e002      	b.n	8016a98 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016a92:	f04f 33ff 	mov.w	r3, #4294967295
 8016a96:	e054      	b.n	8016b42 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016a98:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016a9c:	2b09      	cmp	r3, #9
 8016a9e:	dd06      	ble.n	8016aae <etharp_find_entry+0x236>
 8016aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8016b50 <etharp_find_entry+0x2d8>)
 8016aa2:	f240 127f 	movw	r2, #383	@ 0x17f
 8016aa6:	492e      	ldr	r1, [pc, #184]	@ (8016b60 <etharp_find_entry+0x2e8>)
 8016aa8:	482b      	ldr	r0, [pc, #172]	@ (8016b58 <etharp_find_entry+0x2e0>)
 8016aaa:	f003 fc99 	bl	801a3e0 <iprintf>
    etharp_free_entry(i);
 8016aae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	f7ff fe06 	bl	80166c4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016ab8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016abc:	2b09      	cmp	r3, #9
 8016abe:	dd06      	ble.n	8016ace <etharp_find_entry+0x256>
 8016ac0:	4b23      	ldr	r3, [pc, #140]	@ (8016b50 <etharp_find_entry+0x2d8>)
 8016ac2:	f240 1283 	movw	r2, #387	@ 0x183
 8016ac6:	4926      	ldr	r1, [pc, #152]	@ (8016b60 <etharp_find_entry+0x2e8>)
 8016ac8:	4823      	ldr	r0, [pc, #140]	@ (8016b58 <etharp_find_entry+0x2e0>)
 8016aca:	f003 fc89 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016ace:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ad2:	491e      	ldr	r1, [pc, #120]	@ (8016b4c <etharp_find_entry+0x2d4>)
 8016ad4:	4613      	mov	r3, r2
 8016ad6:	005b      	lsls	r3, r3, #1
 8016ad8:	4413      	add	r3, r2
 8016ada:	00db      	lsls	r3, r3, #3
 8016adc:	440b      	add	r3, r1
 8016ade:	3314      	adds	r3, #20
 8016ae0:	781b      	ldrb	r3, [r3, #0]
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d006      	beq.n	8016af4 <etharp_find_entry+0x27c>
 8016ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8016b50 <etharp_find_entry+0x2d8>)
 8016ae8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8016aec:	491d      	ldr	r1, [pc, #116]	@ (8016b64 <etharp_find_entry+0x2ec>)
 8016aee:	481a      	ldr	r0, [pc, #104]	@ (8016b58 <etharp_find_entry+0x2e0>)
 8016af0:	f003 fc76 	bl	801a3e0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d00b      	beq.n	8016b12 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016afa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	6819      	ldr	r1, [r3, #0]
 8016b02:	4812      	ldr	r0, [pc, #72]	@ (8016b4c <etharp_find_entry+0x2d4>)
 8016b04:	4613      	mov	r3, r2
 8016b06:	005b      	lsls	r3, r3, #1
 8016b08:	4413      	add	r3, r2
 8016b0a:	00db      	lsls	r3, r3, #3
 8016b0c:	4403      	add	r3, r0
 8016b0e:	3304      	adds	r3, #4
 8016b10:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016b12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b16:	490d      	ldr	r1, [pc, #52]	@ (8016b4c <etharp_find_entry+0x2d4>)
 8016b18:	4613      	mov	r3, r2
 8016b1a:	005b      	lsls	r3, r3, #1
 8016b1c:	4413      	add	r3, r2
 8016b1e:	00db      	lsls	r3, r3, #3
 8016b20:	440b      	add	r3, r1
 8016b22:	3312      	adds	r3, #18
 8016b24:	2200      	movs	r2, #0
 8016b26:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016b28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b2c:	4907      	ldr	r1, [pc, #28]	@ (8016b4c <etharp_find_entry+0x2d4>)
 8016b2e:	4613      	mov	r3, r2
 8016b30:	005b      	lsls	r3, r3, #1
 8016b32:	4413      	add	r3, r2
 8016b34:	00db      	lsls	r3, r3, #3
 8016b36:	440b      	add	r3, r1
 8016b38:	3308      	adds	r3, #8
 8016b3a:	687a      	ldr	r2, [r7, #4]
 8016b3c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016b3e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016b42:	4618      	mov	r0, r3
 8016b44:	3728      	adds	r7, #40	@ 0x28
 8016b46:	46bd      	mov	sp, r7
 8016b48:	bd80      	pop	{r7, pc}
 8016b4a:	bf00      	nop
 8016b4c:	2000d140 	.word	0x2000d140
 8016b50:	08020e30 	.word	0x08020e30
 8016b54:	08020e68 	.word	0x08020e68
 8016b58:	08020ea8 	.word	0x08020ea8
 8016b5c:	08020ed0 	.word	0x08020ed0
 8016b60:	08020ee8 	.word	0x08020ee8
 8016b64:	08020efc 	.word	0x08020efc

08016b68 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b088      	sub	sp, #32
 8016b6c:	af02      	add	r7, sp, #8
 8016b6e:	60f8      	str	r0, [r7, #12]
 8016b70:	60b9      	str	r1, [r7, #8]
 8016b72:	607a      	str	r2, [r7, #4]
 8016b74:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016b7c:	2b06      	cmp	r3, #6
 8016b7e:	d006      	beq.n	8016b8e <etharp_update_arp_entry+0x26>
 8016b80:	4b48      	ldr	r3, [pc, #288]	@ (8016ca4 <etharp_update_arp_entry+0x13c>)
 8016b82:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8016b86:	4948      	ldr	r1, [pc, #288]	@ (8016ca8 <etharp_update_arp_entry+0x140>)
 8016b88:	4848      	ldr	r0, [pc, #288]	@ (8016cac <etharp_update_arp_entry+0x144>)
 8016b8a:	f003 fc29 	bl	801a3e0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016b8e:	68bb      	ldr	r3, [r7, #8]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d012      	beq.n	8016bba <etharp_update_arp_entry+0x52>
 8016b94:	68bb      	ldr	r3, [r7, #8]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d00e      	beq.n	8016bba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016b9c:	68bb      	ldr	r3, [r7, #8]
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	68f9      	ldr	r1, [r7, #12]
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	f001 f8fe 	bl	8017da4 <ip4_addr_isbroadcast_u32>
 8016ba8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d105      	bne.n	8016bba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016bae:	68bb      	ldr	r3, [r7, #8]
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016bb6:	2be0      	cmp	r3, #224	@ 0xe0
 8016bb8:	d102      	bne.n	8016bc0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016bba:	f06f 030f 	mvn.w	r3, #15
 8016bbe:	e06c      	b.n	8016c9a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016bc0:	78fb      	ldrb	r3, [r7, #3]
 8016bc2:	68fa      	ldr	r2, [r7, #12]
 8016bc4:	4619      	mov	r1, r3
 8016bc6:	68b8      	ldr	r0, [r7, #8]
 8016bc8:	f7ff fe56 	bl	8016878 <etharp_find_entry>
 8016bcc:	4603      	mov	r3, r0
 8016bce:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016bd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	da02      	bge.n	8016bde <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016bd8:	8afb      	ldrh	r3, [r7, #22]
 8016bda:	b25b      	sxtb	r3, r3
 8016bdc:	e05d      	b.n	8016c9a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016bde:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016be2:	4933      	ldr	r1, [pc, #204]	@ (8016cb0 <etharp_update_arp_entry+0x148>)
 8016be4:	4613      	mov	r3, r2
 8016be6:	005b      	lsls	r3, r3, #1
 8016be8:	4413      	add	r3, r2
 8016bea:	00db      	lsls	r3, r3, #3
 8016bec:	440b      	add	r3, r1
 8016bee:	3314      	adds	r3, #20
 8016bf0:	2202      	movs	r2, #2
 8016bf2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016bf4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016bf8:	492d      	ldr	r1, [pc, #180]	@ (8016cb0 <etharp_update_arp_entry+0x148>)
 8016bfa:	4613      	mov	r3, r2
 8016bfc:	005b      	lsls	r3, r3, #1
 8016bfe:	4413      	add	r3, r2
 8016c00:	00db      	lsls	r3, r3, #3
 8016c02:	440b      	add	r3, r1
 8016c04:	3308      	adds	r3, #8
 8016c06:	68fa      	ldr	r2, [r7, #12]
 8016c08:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016c0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c0e:	4613      	mov	r3, r2
 8016c10:	005b      	lsls	r3, r3, #1
 8016c12:	4413      	add	r3, r2
 8016c14:	00db      	lsls	r3, r3, #3
 8016c16:	3308      	adds	r3, #8
 8016c18:	4a25      	ldr	r2, [pc, #148]	@ (8016cb0 <etharp_update_arp_entry+0x148>)
 8016c1a:	4413      	add	r3, r2
 8016c1c:	3304      	adds	r3, #4
 8016c1e:	2206      	movs	r2, #6
 8016c20:	6879      	ldr	r1, [r7, #4]
 8016c22:	4618      	mov	r0, r3
 8016c24:	f003 fe65 	bl	801a8f2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016c28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c2c:	4920      	ldr	r1, [pc, #128]	@ (8016cb0 <etharp_update_arp_entry+0x148>)
 8016c2e:	4613      	mov	r3, r2
 8016c30:	005b      	lsls	r3, r3, #1
 8016c32:	4413      	add	r3, r2
 8016c34:	00db      	lsls	r3, r3, #3
 8016c36:	440b      	add	r3, r1
 8016c38:	3312      	adds	r3, #18
 8016c3a:	2200      	movs	r2, #0
 8016c3c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016c3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c42:	491b      	ldr	r1, [pc, #108]	@ (8016cb0 <etharp_update_arp_entry+0x148>)
 8016c44:	4613      	mov	r3, r2
 8016c46:	005b      	lsls	r3, r3, #1
 8016c48:	4413      	add	r3, r2
 8016c4a:	00db      	lsls	r3, r3, #3
 8016c4c:	440b      	add	r3, r1
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d021      	beq.n	8016c98 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016c54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c58:	4915      	ldr	r1, [pc, #84]	@ (8016cb0 <etharp_update_arp_entry+0x148>)
 8016c5a:	4613      	mov	r3, r2
 8016c5c:	005b      	lsls	r3, r3, #1
 8016c5e:	4413      	add	r3, r2
 8016c60:	00db      	lsls	r3, r3, #3
 8016c62:	440b      	add	r3, r1
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016c68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c6c:	4910      	ldr	r1, [pc, #64]	@ (8016cb0 <etharp_update_arp_entry+0x148>)
 8016c6e:	4613      	mov	r3, r2
 8016c70:	005b      	lsls	r3, r3, #1
 8016c72:	4413      	add	r3, r2
 8016c74:	00db      	lsls	r3, r3, #3
 8016c76:	440b      	add	r3, r1
 8016c78:	2200      	movs	r2, #0
 8016c7a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8016c82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016c86:	9300      	str	r3, [sp, #0]
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	6939      	ldr	r1, [r7, #16]
 8016c8c:	68f8      	ldr	r0, [r7, #12]
 8016c8e:	f002 f827 	bl	8018ce0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016c92:	6938      	ldr	r0, [r7, #16]
 8016c94:	f7f8 fb52 	bl	800f33c <pbuf_free>
  }
  return ERR_OK;
 8016c98:	2300      	movs	r3, #0
}
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	3718      	adds	r7, #24
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	bd80      	pop	{r7, pc}
 8016ca2:	bf00      	nop
 8016ca4:	08020e30 	.word	0x08020e30
 8016ca8:	08020f28 	.word	0x08020f28
 8016cac:	08020ea8 	.word	0x08020ea8
 8016cb0:	2000d140 	.word	0x2000d140

08016cb4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b084      	sub	sp, #16
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	60fb      	str	r3, [r7, #12]
 8016cc0:	e01e      	b.n	8016d00 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016cc2:	4913      	ldr	r1, [pc, #76]	@ (8016d10 <etharp_cleanup_netif+0x5c>)
 8016cc4:	68fa      	ldr	r2, [r7, #12]
 8016cc6:	4613      	mov	r3, r2
 8016cc8:	005b      	lsls	r3, r3, #1
 8016cca:	4413      	add	r3, r2
 8016ccc:	00db      	lsls	r3, r3, #3
 8016cce:	440b      	add	r3, r1
 8016cd0:	3314      	adds	r3, #20
 8016cd2:	781b      	ldrb	r3, [r3, #0]
 8016cd4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016cd6:	7afb      	ldrb	r3, [r7, #11]
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d00e      	beq.n	8016cfa <etharp_cleanup_netif+0x46>
 8016cdc:	490c      	ldr	r1, [pc, #48]	@ (8016d10 <etharp_cleanup_netif+0x5c>)
 8016cde:	68fa      	ldr	r2, [r7, #12]
 8016ce0:	4613      	mov	r3, r2
 8016ce2:	005b      	lsls	r3, r3, #1
 8016ce4:	4413      	add	r3, r2
 8016ce6:	00db      	lsls	r3, r3, #3
 8016ce8:	440b      	add	r3, r1
 8016cea:	3308      	adds	r3, #8
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	687a      	ldr	r2, [r7, #4]
 8016cf0:	429a      	cmp	r2, r3
 8016cf2:	d102      	bne.n	8016cfa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016cf4:	68f8      	ldr	r0, [r7, #12]
 8016cf6:	f7ff fce5 	bl	80166c4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	3301      	adds	r3, #1
 8016cfe:	60fb      	str	r3, [r7, #12]
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	2b09      	cmp	r3, #9
 8016d04:	dddd      	ble.n	8016cc2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016d06:	bf00      	nop
 8016d08:	bf00      	nop
 8016d0a:	3710      	adds	r7, #16
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	bd80      	pop	{r7, pc}
 8016d10:	2000d140 	.word	0x2000d140

08016d14 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016d14:	b5b0      	push	{r4, r5, r7, lr}
 8016d16:	b08a      	sub	sp, #40	@ 0x28
 8016d18:	af04      	add	r7, sp, #16
 8016d1a:	6078      	str	r0, [r7, #4]
 8016d1c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016d1e:	683b      	ldr	r3, [r7, #0]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d107      	bne.n	8016d34 <etharp_input+0x20>
 8016d24:	4b3d      	ldr	r3, [pc, #244]	@ (8016e1c <etharp_input+0x108>)
 8016d26:	f240 228a 	movw	r2, #650	@ 0x28a
 8016d2a:	493d      	ldr	r1, [pc, #244]	@ (8016e20 <etharp_input+0x10c>)
 8016d2c:	483d      	ldr	r0, [pc, #244]	@ (8016e24 <etharp_input+0x110>)
 8016d2e:	f003 fb57 	bl	801a3e0 <iprintf>
 8016d32:	e06f      	b.n	8016e14 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	685b      	ldr	r3, [r3, #4]
 8016d38:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016d3a:	693b      	ldr	r3, [r7, #16]
 8016d3c:	881b      	ldrh	r3, [r3, #0]
 8016d3e:	b29b      	uxth	r3, r3
 8016d40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016d44:	d10c      	bne.n	8016d60 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016d46:	693b      	ldr	r3, [r7, #16]
 8016d48:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016d4a:	2b06      	cmp	r3, #6
 8016d4c:	d108      	bne.n	8016d60 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016d4e:	693b      	ldr	r3, [r7, #16]
 8016d50:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016d52:	2b04      	cmp	r3, #4
 8016d54:	d104      	bne.n	8016d60 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016d56:	693b      	ldr	r3, [r7, #16]
 8016d58:	885b      	ldrh	r3, [r3, #2]
 8016d5a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016d5c:	2b08      	cmp	r3, #8
 8016d5e:	d003      	beq.n	8016d68 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016d60:	6878      	ldr	r0, [r7, #4]
 8016d62:	f7f8 faeb 	bl	800f33c <pbuf_free>
    return;
 8016d66:	e055      	b.n	8016e14 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016d68:	693b      	ldr	r3, [r7, #16]
 8016d6a:	330e      	adds	r3, #14
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016d70:	693b      	ldr	r3, [r7, #16]
 8016d72:	3318      	adds	r3, #24
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016d78:	683b      	ldr	r3, [r7, #0]
 8016d7a:	3304      	adds	r3, #4
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d102      	bne.n	8016d88 <etharp_input+0x74>
    for_us = 0;
 8016d82:	2300      	movs	r3, #0
 8016d84:	75fb      	strb	r3, [r7, #23]
 8016d86:	e009      	b.n	8016d9c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016d88:	68ba      	ldr	r2, [r7, #8]
 8016d8a:	683b      	ldr	r3, [r7, #0]
 8016d8c:	3304      	adds	r3, #4
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	429a      	cmp	r2, r3
 8016d92:	bf0c      	ite	eq
 8016d94:	2301      	moveq	r3, #1
 8016d96:	2300      	movne	r3, #0
 8016d98:	b2db      	uxtb	r3, r3
 8016d9a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016d9c:	693b      	ldr	r3, [r7, #16]
 8016d9e:	f103 0208 	add.w	r2, r3, #8
 8016da2:	7dfb      	ldrb	r3, [r7, #23]
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d001      	beq.n	8016dac <etharp_input+0x98>
 8016da8:	2301      	movs	r3, #1
 8016daa:	e000      	b.n	8016dae <etharp_input+0x9a>
 8016dac:	2302      	movs	r3, #2
 8016dae:	f107 010c 	add.w	r1, r7, #12
 8016db2:	6838      	ldr	r0, [r7, #0]
 8016db4:	f7ff fed8 	bl	8016b68 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016db8:	693b      	ldr	r3, [r7, #16]
 8016dba:	88db      	ldrh	r3, [r3, #6]
 8016dbc:	b29b      	uxth	r3, r3
 8016dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016dc2:	d003      	beq.n	8016dcc <etharp_input+0xb8>
 8016dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016dc8:	d01e      	beq.n	8016e08 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016dca:	e020      	b.n	8016e0e <etharp_input+0xfa>
      if (for_us) {
 8016dcc:	7dfb      	ldrb	r3, [r7, #23]
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d01c      	beq.n	8016e0c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016dd2:	683b      	ldr	r3, [r7, #0]
 8016dd4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8016dd8:	693b      	ldr	r3, [r7, #16]
 8016dda:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016dde:	683b      	ldr	r3, [r7, #0]
 8016de0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8016de4:	683b      	ldr	r3, [r7, #0]
 8016de6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016de8:	693a      	ldr	r2, [r7, #16]
 8016dea:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016dec:	2102      	movs	r1, #2
 8016dee:	9103      	str	r1, [sp, #12]
 8016df0:	f107 010c 	add.w	r1, r7, #12
 8016df4:	9102      	str	r1, [sp, #8]
 8016df6:	9201      	str	r2, [sp, #4]
 8016df8:	9300      	str	r3, [sp, #0]
 8016dfa:	462b      	mov	r3, r5
 8016dfc:	4622      	mov	r2, r4
 8016dfe:	4601      	mov	r1, r0
 8016e00:	6838      	ldr	r0, [r7, #0]
 8016e02:	f000 faeb 	bl	80173dc <etharp_raw>
      break;
 8016e06:	e001      	b.n	8016e0c <etharp_input+0xf8>
      break;
 8016e08:	bf00      	nop
 8016e0a:	e000      	b.n	8016e0e <etharp_input+0xfa>
      break;
 8016e0c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016e0e:	6878      	ldr	r0, [r7, #4]
 8016e10:	f7f8 fa94 	bl	800f33c <pbuf_free>
}
 8016e14:	3718      	adds	r7, #24
 8016e16:	46bd      	mov	sp, r7
 8016e18:	bdb0      	pop	{r4, r5, r7, pc}
 8016e1a:	bf00      	nop
 8016e1c:	08020e30 	.word	0x08020e30
 8016e20:	08020f80 	.word	0x08020f80
 8016e24:	08020ea8 	.word	0x08020ea8

08016e28 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b086      	sub	sp, #24
 8016e2c:	af02      	add	r7, sp, #8
 8016e2e:	60f8      	str	r0, [r7, #12]
 8016e30:	60b9      	str	r1, [r7, #8]
 8016e32:	4613      	mov	r3, r2
 8016e34:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016e36:	79fa      	ldrb	r2, [r7, #7]
 8016e38:	4944      	ldr	r1, [pc, #272]	@ (8016f4c <etharp_output_to_arp_index+0x124>)
 8016e3a:	4613      	mov	r3, r2
 8016e3c:	005b      	lsls	r3, r3, #1
 8016e3e:	4413      	add	r3, r2
 8016e40:	00db      	lsls	r3, r3, #3
 8016e42:	440b      	add	r3, r1
 8016e44:	3314      	adds	r3, #20
 8016e46:	781b      	ldrb	r3, [r3, #0]
 8016e48:	2b01      	cmp	r3, #1
 8016e4a:	d806      	bhi.n	8016e5a <etharp_output_to_arp_index+0x32>
 8016e4c:	4b40      	ldr	r3, [pc, #256]	@ (8016f50 <etharp_output_to_arp_index+0x128>)
 8016e4e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8016e52:	4940      	ldr	r1, [pc, #256]	@ (8016f54 <etharp_output_to_arp_index+0x12c>)
 8016e54:	4840      	ldr	r0, [pc, #256]	@ (8016f58 <etharp_output_to_arp_index+0x130>)
 8016e56:	f003 fac3 	bl	801a3e0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016e5a:	79fa      	ldrb	r2, [r7, #7]
 8016e5c:	493b      	ldr	r1, [pc, #236]	@ (8016f4c <etharp_output_to_arp_index+0x124>)
 8016e5e:	4613      	mov	r3, r2
 8016e60:	005b      	lsls	r3, r3, #1
 8016e62:	4413      	add	r3, r2
 8016e64:	00db      	lsls	r3, r3, #3
 8016e66:	440b      	add	r3, r1
 8016e68:	3314      	adds	r3, #20
 8016e6a:	781b      	ldrb	r3, [r3, #0]
 8016e6c:	2b02      	cmp	r3, #2
 8016e6e:	d153      	bne.n	8016f18 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016e70:	79fa      	ldrb	r2, [r7, #7]
 8016e72:	4936      	ldr	r1, [pc, #216]	@ (8016f4c <etharp_output_to_arp_index+0x124>)
 8016e74:	4613      	mov	r3, r2
 8016e76:	005b      	lsls	r3, r3, #1
 8016e78:	4413      	add	r3, r2
 8016e7a:	00db      	lsls	r3, r3, #3
 8016e7c:	440b      	add	r3, r1
 8016e7e:	3312      	adds	r3, #18
 8016e80:	881b      	ldrh	r3, [r3, #0]
 8016e82:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8016e86:	d919      	bls.n	8016ebc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016e88:	79fa      	ldrb	r2, [r7, #7]
 8016e8a:	4613      	mov	r3, r2
 8016e8c:	005b      	lsls	r3, r3, #1
 8016e8e:	4413      	add	r3, r2
 8016e90:	00db      	lsls	r3, r3, #3
 8016e92:	4a2e      	ldr	r2, [pc, #184]	@ (8016f4c <etharp_output_to_arp_index+0x124>)
 8016e94:	4413      	add	r3, r2
 8016e96:	3304      	adds	r3, #4
 8016e98:	4619      	mov	r1, r3
 8016e9a:	68f8      	ldr	r0, [r7, #12]
 8016e9c:	f000 fb4c 	bl	8017538 <etharp_request>
 8016ea0:	4603      	mov	r3, r0
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d138      	bne.n	8016f18 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016ea6:	79fa      	ldrb	r2, [r7, #7]
 8016ea8:	4928      	ldr	r1, [pc, #160]	@ (8016f4c <etharp_output_to_arp_index+0x124>)
 8016eaa:	4613      	mov	r3, r2
 8016eac:	005b      	lsls	r3, r3, #1
 8016eae:	4413      	add	r3, r2
 8016eb0:	00db      	lsls	r3, r3, #3
 8016eb2:	440b      	add	r3, r1
 8016eb4:	3314      	adds	r3, #20
 8016eb6:	2203      	movs	r2, #3
 8016eb8:	701a      	strb	r2, [r3, #0]
 8016eba:	e02d      	b.n	8016f18 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016ebc:	79fa      	ldrb	r2, [r7, #7]
 8016ebe:	4923      	ldr	r1, [pc, #140]	@ (8016f4c <etharp_output_to_arp_index+0x124>)
 8016ec0:	4613      	mov	r3, r2
 8016ec2:	005b      	lsls	r3, r3, #1
 8016ec4:	4413      	add	r3, r2
 8016ec6:	00db      	lsls	r3, r3, #3
 8016ec8:	440b      	add	r3, r1
 8016eca:	3312      	adds	r3, #18
 8016ecc:	881b      	ldrh	r3, [r3, #0]
 8016ece:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8016ed2:	d321      	bcc.n	8016f18 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016ed4:	79fa      	ldrb	r2, [r7, #7]
 8016ed6:	4613      	mov	r3, r2
 8016ed8:	005b      	lsls	r3, r3, #1
 8016eda:	4413      	add	r3, r2
 8016edc:	00db      	lsls	r3, r3, #3
 8016ede:	4a1b      	ldr	r2, [pc, #108]	@ (8016f4c <etharp_output_to_arp_index+0x124>)
 8016ee0:	4413      	add	r3, r2
 8016ee2:	1d19      	adds	r1, r3, #4
 8016ee4:	79fa      	ldrb	r2, [r7, #7]
 8016ee6:	4613      	mov	r3, r2
 8016ee8:	005b      	lsls	r3, r3, #1
 8016eea:	4413      	add	r3, r2
 8016eec:	00db      	lsls	r3, r3, #3
 8016eee:	3308      	adds	r3, #8
 8016ef0:	4a16      	ldr	r2, [pc, #88]	@ (8016f4c <etharp_output_to_arp_index+0x124>)
 8016ef2:	4413      	add	r3, r2
 8016ef4:	3304      	adds	r3, #4
 8016ef6:	461a      	mov	r2, r3
 8016ef8:	68f8      	ldr	r0, [r7, #12]
 8016efa:	f000 fafb 	bl	80174f4 <etharp_request_dst>
 8016efe:	4603      	mov	r3, r0
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d109      	bne.n	8016f18 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016f04:	79fa      	ldrb	r2, [r7, #7]
 8016f06:	4911      	ldr	r1, [pc, #68]	@ (8016f4c <etharp_output_to_arp_index+0x124>)
 8016f08:	4613      	mov	r3, r2
 8016f0a:	005b      	lsls	r3, r3, #1
 8016f0c:	4413      	add	r3, r2
 8016f0e:	00db      	lsls	r3, r3, #3
 8016f10:	440b      	add	r3, r1
 8016f12:	3314      	adds	r3, #20
 8016f14:	2203      	movs	r2, #3
 8016f16:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8016f1e:	79fa      	ldrb	r2, [r7, #7]
 8016f20:	4613      	mov	r3, r2
 8016f22:	005b      	lsls	r3, r3, #1
 8016f24:	4413      	add	r3, r2
 8016f26:	00db      	lsls	r3, r3, #3
 8016f28:	3308      	adds	r3, #8
 8016f2a:	4a08      	ldr	r2, [pc, #32]	@ (8016f4c <etharp_output_to_arp_index+0x124>)
 8016f2c:	4413      	add	r3, r2
 8016f2e:	3304      	adds	r3, #4
 8016f30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016f34:	9200      	str	r2, [sp, #0]
 8016f36:	460a      	mov	r2, r1
 8016f38:	68b9      	ldr	r1, [r7, #8]
 8016f3a:	68f8      	ldr	r0, [r7, #12]
 8016f3c:	f001 fed0 	bl	8018ce0 <ethernet_output>
 8016f40:	4603      	mov	r3, r0
}
 8016f42:	4618      	mov	r0, r3
 8016f44:	3710      	adds	r7, #16
 8016f46:	46bd      	mov	sp, r7
 8016f48:	bd80      	pop	{r7, pc}
 8016f4a:	bf00      	nop
 8016f4c:	2000d140 	.word	0x2000d140
 8016f50:	08020e30 	.word	0x08020e30
 8016f54:	08020fa0 	.word	0x08020fa0
 8016f58:	08020ea8 	.word	0x08020ea8

08016f5c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b08a      	sub	sp, #40	@ 0x28
 8016f60:	af02      	add	r7, sp, #8
 8016f62:	60f8      	str	r0, [r7, #12]
 8016f64:	60b9      	str	r1, [r7, #8]
 8016f66:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d106      	bne.n	8016f80 <etharp_output+0x24>
 8016f72:	4b73      	ldr	r3, [pc, #460]	@ (8017140 <etharp_output+0x1e4>)
 8016f74:	f240 321e 	movw	r2, #798	@ 0x31e
 8016f78:	4972      	ldr	r1, [pc, #456]	@ (8017144 <etharp_output+0x1e8>)
 8016f7a:	4873      	ldr	r0, [pc, #460]	@ (8017148 <etharp_output+0x1ec>)
 8016f7c:	f003 fa30 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016f80:	68bb      	ldr	r3, [r7, #8]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d106      	bne.n	8016f94 <etharp_output+0x38>
 8016f86:	4b6e      	ldr	r3, [pc, #440]	@ (8017140 <etharp_output+0x1e4>)
 8016f88:	f240 321f 	movw	r2, #799	@ 0x31f
 8016f8c:	496f      	ldr	r1, [pc, #444]	@ (801714c <etharp_output+0x1f0>)
 8016f8e:	486e      	ldr	r0, [pc, #440]	@ (8017148 <etharp_output+0x1ec>)
 8016f90:	f003 fa26 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d106      	bne.n	8016fa8 <etharp_output+0x4c>
 8016f9a:	4b69      	ldr	r3, [pc, #420]	@ (8017140 <etharp_output+0x1e4>)
 8016f9c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8016fa0:	496b      	ldr	r1, [pc, #428]	@ (8017150 <etharp_output+0x1f4>)
 8016fa2:	4869      	ldr	r0, [pc, #420]	@ (8017148 <etharp_output+0x1ec>)
 8016fa4:	f003 fa1c 	bl	801a3e0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	68f9      	ldr	r1, [r7, #12]
 8016fae:	4618      	mov	r0, r3
 8016fb0:	f000 fef8 	bl	8017da4 <ip4_addr_isbroadcast_u32>
 8016fb4:	4603      	mov	r3, r0
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d002      	beq.n	8016fc0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016fba:	4b66      	ldr	r3, [pc, #408]	@ (8017154 <etharp_output+0x1f8>)
 8016fbc:	61fb      	str	r3, [r7, #28]
 8016fbe:	e0af      	b.n	8017120 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016fc8:	2be0      	cmp	r3, #224	@ 0xe0
 8016fca:	d118      	bne.n	8016ffe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016fcc:	2301      	movs	r3, #1
 8016fce:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016fd4:	235e      	movs	r3, #94	@ 0x5e
 8016fd6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	3301      	adds	r3, #1
 8016fdc:	781b      	ldrb	r3, [r3, #0]
 8016fde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016fe2:	b2db      	uxtb	r3, r3
 8016fe4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	3302      	adds	r3, #2
 8016fea:	781b      	ldrb	r3, [r3, #0]
 8016fec:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	3303      	adds	r3, #3
 8016ff2:	781b      	ldrb	r3, [r3, #0]
 8016ff4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016ff6:	f107 0310 	add.w	r3, r7, #16
 8016ffa:	61fb      	str	r3, [r7, #28]
 8016ffc:	e090      	b.n	8017120 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	681a      	ldr	r2, [r3, #0]
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	3304      	adds	r3, #4
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	405a      	eors	r2, r3
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	3308      	adds	r3, #8
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	4013      	ands	r3, r2
 8017012:	2b00      	cmp	r3, #0
 8017014:	d012      	beq.n	801703c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801701c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8017020:	4293      	cmp	r3, r2
 8017022:	d00b      	beq.n	801703c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	330c      	adds	r3, #12
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	2b00      	cmp	r3, #0
 801702c:	d003      	beq.n	8017036 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	330c      	adds	r3, #12
 8017032:	61bb      	str	r3, [r7, #24]
 8017034:	e002      	b.n	801703c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017036:	f06f 0303 	mvn.w	r3, #3
 801703a:	e07d      	b.n	8017138 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801703c:	4b46      	ldr	r3, [pc, #280]	@ (8017158 <etharp_output+0x1fc>)
 801703e:	781b      	ldrb	r3, [r3, #0]
 8017040:	4619      	mov	r1, r3
 8017042:	4a46      	ldr	r2, [pc, #280]	@ (801715c <etharp_output+0x200>)
 8017044:	460b      	mov	r3, r1
 8017046:	005b      	lsls	r3, r3, #1
 8017048:	440b      	add	r3, r1
 801704a:	00db      	lsls	r3, r3, #3
 801704c:	4413      	add	r3, r2
 801704e:	3314      	adds	r3, #20
 8017050:	781b      	ldrb	r3, [r3, #0]
 8017052:	2b01      	cmp	r3, #1
 8017054:	d925      	bls.n	80170a2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017056:	4b40      	ldr	r3, [pc, #256]	@ (8017158 <etharp_output+0x1fc>)
 8017058:	781b      	ldrb	r3, [r3, #0]
 801705a:	4619      	mov	r1, r3
 801705c:	4a3f      	ldr	r2, [pc, #252]	@ (801715c <etharp_output+0x200>)
 801705e:	460b      	mov	r3, r1
 8017060:	005b      	lsls	r3, r3, #1
 8017062:	440b      	add	r3, r1
 8017064:	00db      	lsls	r3, r3, #3
 8017066:	4413      	add	r3, r2
 8017068:	3308      	adds	r3, #8
 801706a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801706c:	68fa      	ldr	r2, [r7, #12]
 801706e:	429a      	cmp	r2, r3
 8017070:	d117      	bne.n	80170a2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8017072:	69bb      	ldr	r3, [r7, #24]
 8017074:	681a      	ldr	r2, [r3, #0]
 8017076:	4b38      	ldr	r3, [pc, #224]	@ (8017158 <etharp_output+0x1fc>)
 8017078:	781b      	ldrb	r3, [r3, #0]
 801707a:	4618      	mov	r0, r3
 801707c:	4937      	ldr	r1, [pc, #220]	@ (801715c <etharp_output+0x200>)
 801707e:	4603      	mov	r3, r0
 8017080:	005b      	lsls	r3, r3, #1
 8017082:	4403      	add	r3, r0
 8017084:	00db      	lsls	r3, r3, #3
 8017086:	440b      	add	r3, r1
 8017088:	3304      	adds	r3, #4
 801708a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801708c:	429a      	cmp	r2, r3
 801708e:	d108      	bne.n	80170a2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017090:	4b31      	ldr	r3, [pc, #196]	@ (8017158 <etharp_output+0x1fc>)
 8017092:	781b      	ldrb	r3, [r3, #0]
 8017094:	461a      	mov	r2, r3
 8017096:	68b9      	ldr	r1, [r7, #8]
 8017098:	68f8      	ldr	r0, [r7, #12]
 801709a:	f7ff fec5 	bl	8016e28 <etharp_output_to_arp_index>
 801709e:	4603      	mov	r3, r0
 80170a0:	e04a      	b.n	8017138 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80170a2:	2300      	movs	r3, #0
 80170a4:	75fb      	strb	r3, [r7, #23]
 80170a6:	e031      	b.n	801710c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80170a8:	7dfa      	ldrb	r2, [r7, #23]
 80170aa:	492c      	ldr	r1, [pc, #176]	@ (801715c <etharp_output+0x200>)
 80170ac:	4613      	mov	r3, r2
 80170ae:	005b      	lsls	r3, r3, #1
 80170b0:	4413      	add	r3, r2
 80170b2:	00db      	lsls	r3, r3, #3
 80170b4:	440b      	add	r3, r1
 80170b6:	3314      	adds	r3, #20
 80170b8:	781b      	ldrb	r3, [r3, #0]
 80170ba:	2b01      	cmp	r3, #1
 80170bc:	d923      	bls.n	8017106 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80170be:	7dfa      	ldrb	r2, [r7, #23]
 80170c0:	4926      	ldr	r1, [pc, #152]	@ (801715c <etharp_output+0x200>)
 80170c2:	4613      	mov	r3, r2
 80170c4:	005b      	lsls	r3, r3, #1
 80170c6:	4413      	add	r3, r2
 80170c8:	00db      	lsls	r3, r3, #3
 80170ca:	440b      	add	r3, r1
 80170cc:	3308      	adds	r3, #8
 80170ce:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80170d0:	68fa      	ldr	r2, [r7, #12]
 80170d2:	429a      	cmp	r2, r3
 80170d4:	d117      	bne.n	8017106 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80170d6:	69bb      	ldr	r3, [r7, #24]
 80170d8:	6819      	ldr	r1, [r3, #0]
 80170da:	7dfa      	ldrb	r2, [r7, #23]
 80170dc:	481f      	ldr	r0, [pc, #124]	@ (801715c <etharp_output+0x200>)
 80170de:	4613      	mov	r3, r2
 80170e0:	005b      	lsls	r3, r3, #1
 80170e2:	4413      	add	r3, r2
 80170e4:	00db      	lsls	r3, r3, #3
 80170e6:	4403      	add	r3, r0
 80170e8:	3304      	adds	r3, #4
 80170ea:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80170ec:	4299      	cmp	r1, r3
 80170ee:	d10a      	bne.n	8017106 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80170f0:	4a19      	ldr	r2, [pc, #100]	@ (8017158 <etharp_output+0x1fc>)
 80170f2:	7dfb      	ldrb	r3, [r7, #23]
 80170f4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80170f6:	7dfb      	ldrb	r3, [r7, #23]
 80170f8:	461a      	mov	r2, r3
 80170fa:	68b9      	ldr	r1, [r7, #8]
 80170fc:	68f8      	ldr	r0, [r7, #12]
 80170fe:	f7ff fe93 	bl	8016e28 <etharp_output_to_arp_index>
 8017102:	4603      	mov	r3, r0
 8017104:	e018      	b.n	8017138 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017106:	7dfb      	ldrb	r3, [r7, #23]
 8017108:	3301      	adds	r3, #1
 801710a:	75fb      	strb	r3, [r7, #23]
 801710c:	7dfb      	ldrb	r3, [r7, #23]
 801710e:	2b09      	cmp	r3, #9
 8017110:	d9ca      	bls.n	80170a8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8017112:	68ba      	ldr	r2, [r7, #8]
 8017114:	69b9      	ldr	r1, [r7, #24]
 8017116:	68f8      	ldr	r0, [r7, #12]
 8017118:	f000 f822 	bl	8017160 <etharp_query>
 801711c:	4603      	mov	r3, r0
 801711e:	e00b      	b.n	8017138 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8017126:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801712a:	9300      	str	r3, [sp, #0]
 801712c:	69fb      	ldr	r3, [r7, #28]
 801712e:	68b9      	ldr	r1, [r7, #8]
 8017130:	68f8      	ldr	r0, [r7, #12]
 8017132:	f001 fdd5 	bl	8018ce0 <ethernet_output>
 8017136:	4603      	mov	r3, r0
}
 8017138:	4618      	mov	r0, r3
 801713a:	3720      	adds	r7, #32
 801713c:	46bd      	mov	sp, r7
 801713e:	bd80      	pop	{r7, pc}
 8017140:	08020e30 	.word	0x08020e30
 8017144:	08020f80 	.word	0x08020f80
 8017148:	08020ea8 	.word	0x08020ea8
 801714c:	08020fd0 	.word	0x08020fd0
 8017150:	08020f70 	.word	0x08020f70
 8017154:	08021714 	.word	0x08021714
 8017158:	2000d230 	.word	0x2000d230
 801715c:	2000d140 	.word	0x2000d140

08017160 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017160:	b580      	push	{r7, lr}
 8017162:	b08c      	sub	sp, #48	@ 0x30
 8017164:	af02      	add	r7, sp, #8
 8017166:	60f8      	str	r0, [r7, #12]
 8017168:	60b9      	str	r1, [r7, #8]
 801716a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	3326      	adds	r3, #38	@ 0x26
 8017170:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8017172:	23ff      	movs	r3, #255	@ 0xff
 8017174:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8017178:	2300      	movs	r3, #0
 801717a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801717c:	68bb      	ldr	r3, [r7, #8]
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	68f9      	ldr	r1, [r7, #12]
 8017182:	4618      	mov	r0, r3
 8017184:	f000 fe0e 	bl	8017da4 <ip4_addr_isbroadcast_u32>
 8017188:	4603      	mov	r3, r0
 801718a:	2b00      	cmp	r3, #0
 801718c:	d10c      	bne.n	80171a8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801718e:	68bb      	ldr	r3, [r7, #8]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017196:	2be0      	cmp	r3, #224	@ 0xe0
 8017198:	d006      	beq.n	80171a8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801719a:	68bb      	ldr	r3, [r7, #8]
 801719c:	2b00      	cmp	r3, #0
 801719e:	d003      	beq.n	80171a8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80171a0:	68bb      	ldr	r3, [r7, #8]
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d102      	bne.n	80171ae <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80171a8:	f06f 030f 	mvn.w	r3, #15
 80171ac:	e101      	b.n	80173b2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80171ae:	68fa      	ldr	r2, [r7, #12]
 80171b0:	2101      	movs	r1, #1
 80171b2:	68b8      	ldr	r0, [r7, #8]
 80171b4:	f7ff fb60 	bl	8016878 <etharp_find_entry>
 80171b8:	4603      	mov	r3, r0
 80171ba:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80171bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	da02      	bge.n	80171ca <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80171c4:	8a7b      	ldrh	r3, [r7, #18]
 80171c6:	b25b      	sxtb	r3, r3
 80171c8:	e0f3      	b.n	80173b2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80171ca:	8a7b      	ldrh	r3, [r7, #18]
 80171cc:	2b7e      	cmp	r3, #126	@ 0x7e
 80171ce:	d906      	bls.n	80171de <etharp_query+0x7e>
 80171d0:	4b7a      	ldr	r3, [pc, #488]	@ (80173bc <etharp_query+0x25c>)
 80171d2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80171d6:	497a      	ldr	r1, [pc, #488]	@ (80173c0 <etharp_query+0x260>)
 80171d8:	487a      	ldr	r0, [pc, #488]	@ (80173c4 <etharp_query+0x264>)
 80171da:	f003 f901 	bl	801a3e0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80171de:	8a7b      	ldrh	r3, [r7, #18]
 80171e0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80171e2:	7c7a      	ldrb	r2, [r7, #17]
 80171e4:	4978      	ldr	r1, [pc, #480]	@ (80173c8 <etharp_query+0x268>)
 80171e6:	4613      	mov	r3, r2
 80171e8:	005b      	lsls	r3, r3, #1
 80171ea:	4413      	add	r3, r2
 80171ec:	00db      	lsls	r3, r3, #3
 80171ee:	440b      	add	r3, r1
 80171f0:	3314      	adds	r3, #20
 80171f2:	781b      	ldrb	r3, [r3, #0]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d115      	bne.n	8017224 <etharp_query+0xc4>
    is_new_entry = 1;
 80171f8:	2301      	movs	r3, #1
 80171fa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80171fc:	7c7a      	ldrb	r2, [r7, #17]
 80171fe:	4972      	ldr	r1, [pc, #456]	@ (80173c8 <etharp_query+0x268>)
 8017200:	4613      	mov	r3, r2
 8017202:	005b      	lsls	r3, r3, #1
 8017204:	4413      	add	r3, r2
 8017206:	00db      	lsls	r3, r3, #3
 8017208:	440b      	add	r3, r1
 801720a:	3314      	adds	r3, #20
 801720c:	2201      	movs	r2, #1
 801720e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017210:	7c7a      	ldrb	r2, [r7, #17]
 8017212:	496d      	ldr	r1, [pc, #436]	@ (80173c8 <etharp_query+0x268>)
 8017214:	4613      	mov	r3, r2
 8017216:	005b      	lsls	r3, r3, #1
 8017218:	4413      	add	r3, r2
 801721a:	00db      	lsls	r3, r3, #3
 801721c:	440b      	add	r3, r1
 801721e:	3308      	adds	r3, #8
 8017220:	68fa      	ldr	r2, [r7, #12]
 8017222:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017224:	7c7a      	ldrb	r2, [r7, #17]
 8017226:	4968      	ldr	r1, [pc, #416]	@ (80173c8 <etharp_query+0x268>)
 8017228:	4613      	mov	r3, r2
 801722a:	005b      	lsls	r3, r3, #1
 801722c:	4413      	add	r3, r2
 801722e:	00db      	lsls	r3, r3, #3
 8017230:	440b      	add	r3, r1
 8017232:	3314      	adds	r3, #20
 8017234:	781b      	ldrb	r3, [r3, #0]
 8017236:	2b01      	cmp	r3, #1
 8017238:	d011      	beq.n	801725e <etharp_query+0xfe>
 801723a:	7c7a      	ldrb	r2, [r7, #17]
 801723c:	4962      	ldr	r1, [pc, #392]	@ (80173c8 <etharp_query+0x268>)
 801723e:	4613      	mov	r3, r2
 8017240:	005b      	lsls	r3, r3, #1
 8017242:	4413      	add	r3, r2
 8017244:	00db      	lsls	r3, r3, #3
 8017246:	440b      	add	r3, r1
 8017248:	3314      	adds	r3, #20
 801724a:	781b      	ldrb	r3, [r3, #0]
 801724c:	2b01      	cmp	r3, #1
 801724e:	d806      	bhi.n	801725e <etharp_query+0xfe>
 8017250:	4b5a      	ldr	r3, [pc, #360]	@ (80173bc <etharp_query+0x25c>)
 8017252:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8017256:	495d      	ldr	r1, [pc, #372]	@ (80173cc <etharp_query+0x26c>)
 8017258:	485a      	ldr	r0, [pc, #360]	@ (80173c4 <etharp_query+0x264>)
 801725a:	f003 f8c1 	bl	801a3e0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801725e:	6a3b      	ldr	r3, [r7, #32]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d102      	bne.n	801726a <etharp_query+0x10a>
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d10c      	bne.n	8017284 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801726a:	68b9      	ldr	r1, [r7, #8]
 801726c:	68f8      	ldr	r0, [r7, #12]
 801726e:	f000 f963 	bl	8017538 <etharp_request>
 8017272:	4603      	mov	r3, r0
 8017274:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d102      	bne.n	8017284 <etharp_query+0x124>
      return result;
 801727e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8017282:	e096      	b.n	80173b2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d106      	bne.n	8017298 <etharp_query+0x138>
 801728a:	4b4c      	ldr	r3, [pc, #304]	@ (80173bc <etharp_query+0x25c>)
 801728c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8017290:	494f      	ldr	r1, [pc, #316]	@ (80173d0 <etharp_query+0x270>)
 8017292:	484c      	ldr	r0, [pc, #304]	@ (80173c4 <etharp_query+0x264>)
 8017294:	f003 f8a4 	bl	801a3e0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017298:	7c7a      	ldrb	r2, [r7, #17]
 801729a:	494b      	ldr	r1, [pc, #300]	@ (80173c8 <etharp_query+0x268>)
 801729c:	4613      	mov	r3, r2
 801729e:	005b      	lsls	r3, r3, #1
 80172a0:	4413      	add	r3, r2
 80172a2:	00db      	lsls	r3, r3, #3
 80172a4:	440b      	add	r3, r1
 80172a6:	3314      	adds	r3, #20
 80172a8:	781b      	ldrb	r3, [r3, #0]
 80172aa:	2b01      	cmp	r3, #1
 80172ac:	d917      	bls.n	80172de <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80172ae:	4a49      	ldr	r2, [pc, #292]	@ (80173d4 <etharp_query+0x274>)
 80172b0:	7c7b      	ldrb	r3, [r7, #17]
 80172b2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80172b4:	7c7a      	ldrb	r2, [r7, #17]
 80172b6:	4613      	mov	r3, r2
 80172b8:	005b      	lsls	r3, r3, #1
 80172ba:	4413      	add	r3, r2
 80172bc:	00db      	lsls	r3, r3, #3
 80172be:	3308      	adds	r3, #8
 80172c0:	4a41      	ldr	r2, [pc, #260]	@ (80173c8 <etharp_query+0x268>)
 80172c2:	4413      	add	r3, r2
 80172c4:	3304      	adds	r3, #4
 80172c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80172ca:	9200      	str	r2, [sp, #0]
 80172cc:	697a      	ldr	r2, [r7, #20]
 80172ce:	6879      	ldr	r1, [r7, #4]
 80172d0:	68f8      	ldr	r0, [r7, #12]
 80172d2:	f001 fd05 	bl	8018ce0 <ethernet_output>
 80172d6:	4603      	mov	r3, r0
 80172d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80172dc:	e067      	b.n	80173ae <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80172de:	7c7a      	ldrb	r2, [r7, #17]
 80172e0:	4939      	ldr	r1, [pc, #228]	@ (80173c8 <etharp_query+0x268>)
 80172e2:	4613      	mov	r3, r2
 80172e4:	005b      	lsls	r3, r3, #1
 80172e6:	4413      	add	r3, r2
 80172e8:	00db      	lsls	r3, r3, #3
 80172ea:	440b      	add	r3, r1
 80172ec:	3314      	adds	r3, #20
 80172ee:	781b      	ldrb	r3, [r3, #0]
 80172f0:	2b01      	cmp	r3, #1
 80172f2:	d15c      	bne.n	80173ae <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80172f4:	2300      	movs	r3, #0
 80172f6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80172fc:	e01c      	b.n	8017338 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80172fe:	69fb      	ldr	r3, [r7, #28]
 8017300:	895a      	ldrh	r2, [r3, #10]
 8017302:	69fb      	ldr	r3, [r7, #28]
 8017304:	891b      	ldrh	r3, [r3, #8]
 8017306:	429a      	cmp	r2, r3
 8017308:	d10a      	bne.n	8017320 <etharp_query+0x1c0>
 801730a:	69fb      	ldr	r3, [r7, #28]
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	2b00      	cmp	r3, #0
 8017310:	d006      	beq.n	8017320 <etharp_query+0x1c0>
 8017312:	4b2a      	ldr	r3, [pc, #168]	@ (80173bc <etharp_query+0x25c>)
 8017314:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8017318:	492f      	ldr	r1, [pc, #188]	@ (80173d8 <etharp_query+0x278>)
 801731a:	482a      	ldr	r0, [pc, #168]	@ (80173c4 <etharp_query+0x264>)
 801731c:	f003 f860 	bl	801a3e0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017320:	69fb      	ldr	r3, [r7, #28]
 8017322:	7b1b      	ldrb	r3, [r3, #12]
 8017324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017328:	2b00      	cmp	r3, #0
 801732a:	d002      	beq.n	8017332 <etharp_query+0x1d2>
        copy_needed = 1;
 801732c:	2301      	movs	r3, #1
 801732e:	61bb      	str	r3, [r7, #24]
        break;
 8017330:	e005      	b.n	801733e <etharp_query+0x1de>
      }
      p = p->next;
 8017332:	69fb      	ldr	r3, [r7, #28]
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017338:	69fb      	ldr	r3, [r7, #28]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d1df      	bne.n	80172fe <etharp_query+0x19e>
    }
    if (copy_needed) {
 801733e:	69bb      	ldr	r3, [r7, #24]
 8017340:	2b00      	cmp	r3, #0
 8017342:	d007      	beq.n	8017354 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017344:	687a      	ldr	r2, [r7, #4]
 8017346:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801734a:	200e      	movs	r0, #14
 801734c:	f7f8 fa6e 	bl	800f82c <pbuf_clone>
 8017350:	61f8      	str	r0, [r7, #28]
 8017352:	e004      	b.n	801735e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017358:	69f8      	ldr	r0, [r7, #28]
 801735a:	f7f8 f895 	bl	800f488 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801735e:	69fb      	ldr	r3, [r7, #28]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d021      	beq.n	80173a8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017364:	7c7a      	ldrb	r2, [r7, #17]
 8017366:	4918      	ldr	r1, [pc, #96]	@ (80173c8 <etharp_query+0x268>)
 8017368:	4613      	mov	r3, r2
 801736a:	005b      	lsls	r3, r3, #1
 801736c:	4413      	add	r3, r2
 801736e:	00db      	lsls	r3, r3, #3
 8017370:	440b      	add	r3, r1
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	2b00      	cmp	r3, #0
 8017376:	d00a      	beq.n	801738e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017378:	7c7a      	ldrb	r2, [r7, #17]
 801737a:	4913      	ldr	r1, [pc, #76]	@ (80173c8 <etharp_query+0x268>)
 801737c:	4613      	mov	r3, r2
 801737e:	005b      	lsls	r3, r3, #1
 8017380:	4413      	add	r3, r2
 8017382:	00db      	lsls	r3, r3, #3
 8017384:	440b      	add	r3, r1
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	4618      	mov	r0, r3
 801738a:	f7f7 ffd7 	bl	800f33c <pbuf_free>
      }
      arp_table[i].q = p;
 801738e:	7c7a      	ldrb	r2, [r7, #17]
 8017390:	490d      	ldr	r1, [pc, #52]	@ (80173c8 <etharp_query+0x268>)
 8017392:	4613      	mov	r3, r2
 8017394:	005b      	lsls	r3, r3, #1
 8017396:	4413      	add	r3, r2
 8017398:	00db      	lsls	r3, r3, #3
 801739a:	440b      	add	r3, r1
 801739c:	69fa      	ldr	r2, [r7, #28]
 801739e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80173a0:	2300      	movs	r3, #0
 80173a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80173a6:	e002      	b.n	80173ae <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80173a8:	23ff      	movs	r3, #255	@ 0xff
 80173aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80173ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80173b2:	4618      	mov	r0, r3
 80173b4:	3728      	adds	r7, #40	@ 0x28
 80173b6:	46bd      	mov	sp, r7
 80173b8:	bd80      	pop	{r7, pc}
 80173ba:	bf00      	nop
 80173bc:	08020e30 	.word	0x08020e30
 80173c0:	08020fdc 	.word	0x08020fdc
 80173c4:	08020ea8 	.word	0x08020ea8
 80173c8:	2000d140 	.word	0x2000d140
 80173cc:	08020fec 	.word	0x08020fec
 80173d0:	08020fd0 	.word	0x08020fd0
 80173d4:	2000d230 	.word	0x2000d230
 80173d8:	08021014 	.word	0x08021014

080173dc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80173dc:	b580      	push	{r7, lr}
 80173de:	b08a      	sub	sp, #40	@ 0x28
 80173e0:	af02      	add	r7, sp, #8
 80173e2:	60f8      	str	r0, [r7, #12]
 80173e4:	60b9      	str	r1, [r7, #8]
 80173e6:	607a      	str	r2, [r7, #4]
 80173e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80173ea:	2300      	movs	r3, #0
 80173ec:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80173ee:	68fb      	ldr	r3, [r7, #12]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d106      	bne.n	8017402 <etharp_raw+0x26>
 80173f4:	4b3a      	ldr	r3, [pc, #232]	@ (80174e0 <etharp_raw+0x104>)
 80173f6:	f240 4257 	movw	r2, #1111	@ 0x457
 80173fa:	493a      	ldr	r1, [pc, #232]	@ (80174e4 <etharp_raw+0x108>)
 80173fc:	483a      	ldr	r0, [pc, #232]	@ (80174e8 <etharp_raw+0x10c>)
 80173fe:	f002 ffef 	bl	801a3e0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017402:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017406:	211c      	movs	r1, #28
 8017408:	200e      	movs	r0, #14
 801740a:	f7f7 fc81 	bl	800ed10 <pbuf_alloc>
 801740e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017410:	69bb      	ldr	r3, [r7, #24]
 8017412:	2b00      	cmp	r3, #0
 8017414:	d102      	bne.n	801741c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017416:	f04f 33ff 	mov.w	r3, #4294967295
 801741a:	e05d      	b.n	80174d8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801741c:	69bb      	ldr	r3, [r7, #24]
 801741e:	895b      	ldrh	r3, [r3, #10]
 8017420:	2b1b      	cmp	r3, #27
 8017422:	d806      	bhi.n	8017432 <etharp_raw+0x56>
 8017424:	4b2e      	ldr	r3, [pc, #184]	@ (80174e0 <etharp_raw+0x104>)
 8017426:	f240 4262 	movw	r2, #1122	@ 0x462
 801742a:	4930      	ldr	r1, [pc, #192]	@ (80174ec <etharp_raw+0x110>)
 801742c:	482e      	ldr	r0, [pc, #184]	@ (80174e8 <etharp_raw+0x10c>)
 801742e:	f002 ffd7 	bl	801a3e0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017432:	69bb      	ldr	r3, [r7, #24]
 8017434:	685b      	ldr	r3, [r3, #4]
 8017436:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017438:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801743a:	4618      	mov	r0, r3
 801743c:	f7f6 fb22 	bl	800da84 <lwip_htons>
 8017440:	4603      	mov	r3, r0
 8017442:	461a      	mov	r2, r3
 8017444:	697b      	ldr	r3, [r7, #20]
 8017446:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801744e:	2b06      	cmp	r3, #6
 8017450:	d006      	beq.n	8017460 <etharp_raw+0x84>
 8017452:	4b23      	ldr	r3, [pc, #140]	@ (80174e0 <etharp_raw+0x104>)
 8017454:	f240 4269 	movw	r2, #1129	@ 0x469
 8017458:	4925      	ldr	r1, [pc, #148]	@ (80174f0 <etharp_raw+0x114>)
 801745a:	4823      	ldr	r0, [pc, #140]	@ (80174e8 <etharp_raw+0x10c>)
 801745c:	f002 ffc0 	bl	801a3e0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017460:	697b      	ldr	r3, [r7, #20]
 8017462:	3308      	adds	r3, #8
 8017464:	2206      	movs	r2, #6
 8017466:	6839      	ldr	r1, [r7, #0]
 8017468:	4618      	mov	r0, r3
 801746a:	f003 fa42 	bl	801a8f2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801746e:	697b      	ldr	r3, [r7, #20]
 8017470:	3312      	adds	r3, #18
 8017472:	2206      	movs	r2, #6
 8017474:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017476:	4618      	mov	r0, r3
 8017478:	f003 fa3b 	bl	801a8f2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801747c:	697b      	ldr	r3, [r7, #20]
 801747e:	330e      	adds	r3, #14
 8017480:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017482:	6812      	ldr	r2, [r2, #0]
 8017484:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017486:	697b      	ldr	r3, [r7, #20]
 8017488:	3318      	adds	r3, #24
 801748a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801748c:	6812      	ldr	r2, [r2, #0]
 801748e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017490:	697b      	ldr	r3, [r7, #20]
 8017492:	2200      	movs	r2, #0
 8017494:	701a      	strb	r2, [r3, #0]
 8017496:	2200      	movs	r2, #0
 8017498:	f042 0201 	orr.w	r2, r2, #1
 801749c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801749e:	697b      	ldr	r3, [r7, #20]
 80174a0:	2200      	movs	r2, #0
 80174a2:	f042 0208 	orr.w	r2, r2, #8
 80174a6:	709a      	strb	r2, [r3, #2]
 80174a8:	2200      	movs	r2, #0
 80174aa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80174ac:	697b      	ldr	r3, [r7, #20]
 80174ae:	2206      	movs	r2, #6
 80174b0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80174b2:	697b      	ldr	r3, [r7, #20]
 80174b4:	2204      	movs	r2, #4
 80174b6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80174b8:	f640 0306 	movw	r3, #2054	@ 0x806
 80174bc:	9300      	str	r3, [sp, #0]
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	68ba      	ldr	r2, [r7, #8]
 80174c2:	69b9      	ldr	r1, [r7, #24]
 80174c4:	68f8      	ldr	r0, [r7, #12]
 80174c6:	f001 fc0b 	bl	8018ce0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80174ca:	69b8      	ldr	r0, [r7, #24]
 80174cc:	f7f7 ff36 	bl	800f33c <pbuf_free>
  p = NULL;
 80174d0:	2300      	movs	r3, #0
 80174d2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80174d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80174d8:	4618      	mov	r0, r3
 80174da:	3720      	adds	r7, #32
 80174dc:	46bd      	mov	sp, r7
 80174de:	bd80      	pop	{r7, pc}
 80174e0:	08020e30 	.word	0x08020e30
 80174e4:	08020f80 	.word	0x08020f80
 80174e8:	08020ea8 	.word	0x08020ea8
 80174ec:	08021030 	.word	0x08021030
 80174f0:	08021064 	.word	0x08021064

080174f4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80174f4:	b580      	push	{r7, lr}
 80174f6:	b088      	sub	sp, #32
 80174f8:	af04      	add	r7, sp, #16
 80174fa:	60f8      	str	r0, [r7, #12]
 80174fc:	60b9      	str	r1, [r7, #8]
 80174fe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017510:	2201      	movs	r2, #1
 8017512:	9203      	str	r2, [sp, #12]
 8017514:	68ba      	ldr	r2, [r7, #8]
 8017516:	9202      	str	r2, [sp, #8]
 8017518:	4a06      	ldr	r2, [pc, #24]	@ (8017534 <etharp_request_dst+0x40>)
 801751a:	9201      	str	r2, [sp, #4]
 801751c:	9300      	str	r3, [sp, #0]
 801751e:	4603      	mov	r3, r0
 8017520:	687a      	ldr	r2, [r7, #4]
 8017522:	68f8      	ldr	r0, [r7, #12]
 8017524:	f7ff ff5a 	bl	80173dc <etharp_raw>
 8017528:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801752a:	4618      	mov	r0, r3
 801752c:	3710      	adds	r7, #16
 801752e:	46bd      	mov	sp, r7
 8017530:	bd80      	pop	{r7, pc}
 8017532:	bf00      	nop
 8017534:	0802171c 	.word	0x0802171c

08017538 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017538:	b580      	push	{r7, lr}
 801753a:	b082      	sub	sp, #8
 801753c:	af00      	add	r7, sp, #0
 801753e:	6078      	str	r0, [r7, #4]
 8017540:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017542:	4a05      	ldr	r2, [pc, #20]	@ (8017558 <etharp_request+0x20>)
 8017544:	6839      	ldr	r1, [r7, #0]
 8017546:	6878      	ldr	r0, [r7, #4]
 8017548:	f7ff ffd4 	bl	80174f4 <etharp_request_dst>
 801754c:	4603      	mov	r3, r0
}
 801754e:	4618      	mov	r0, r3
 8017550:	3708      	adds	r7, #8
 8017552:	46bd      	mov	sp, r7
 8017554:	bd80      	pop	{r7, pc}
 8017556:	bf00      	nop
 8017558:	08021714 	.word	0x08021714

0801755c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801755c:	b580      	push	{r7, lr}
 801755e:	b08e      	sub	sp, #56	@ 0x38
 8017560:	af04      	add	r7, sp, #16
 8017562:	6078      	str	r0, [r7, #4]
 8017564:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017566:	4b79      	ldr	r3, [pc, #484]	@ (801774c <icmp_input+0x1f0>)
 8017568:	689b      	ldr	r3, [r3, #8]
 801756a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801756c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801756e:	781b      	ldrb	r3, [r3, #0]
 8017570:	f003 030f 	and.w	r3, r3, #15
 8017574:	b2db      	uxtb	r3, r3
 8017576:	009b      	lsls	r3, r3, #2
 8017578:	b2db      	uxtb	r3, r3
 801757a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801757c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801757e:	2b13      	cmp	r3, #19
 8017580:	f240 80cd 	bls.w	801771e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	895b      	ldrh	r3, [r3, #10]
 8017588:	2b03      	cmp	r3, #3
 801758a:	f240 80ca 	bls.w	8017722 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	685b      	ldr	r3, [r3, #4]
 8017592:	781b      	ldrb	r3, [r3, #0]
 8017594:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017598:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801759c:	2b00      	cmp	r3, #0
 801759e:	f000 80b7 	beq.w	8017710 <icmp_input+0x1b4>
 80175a2:	2b08      	cmp	r3, #8
 80175a4:	f040 80b7 	bne.w	8017716 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80175a8:	4b69      	ldr	r3, [pc, #420]	@ (8017750 <icmp_input+0x1f4>)
 80175aa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80175ac:	4b67      	ldr	r3, [pc, #412]	@ (801774c <icmp_input+0x1f0>)
 80175ae:	695b      	ldr	r3, [r3, #20]
 80175b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80175b4:	2be0      	cmp	r3, #224	@ 0xe0
 80175b6:	f000 80bb 	beq.w	8017730 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80175ba:	4b64      	ldr	r3, [pc, #400]	@ (801774c <icmp_input+0x1f0>)
 80175bc:	695b      	ldr	r3, [r3, #20]
 80175be:	4a63      	ldr	r2, [pc, #396]	@ (801774c <icmp_input+0x1f0>)
 80175c0:	6812      	ldr	r2, [r2, #0]
 80175c2:	4611      	mov	r1, r2
 80175c4:	4618      	mov	r0, r3
 80175c6:	f000 fbed 	bl	8017da4 <ip4_addr_isbroadcast_u32>
 80175ca:	4603      	mov	r3, r0
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	f040 80b1 	bne.w	8017734 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	891b      	ldrh	r3, [r3, #8]
 80175d6:	2b07      	cmp	r3, #7
 80175d8:	f240 80a5 	bls.w	8017726 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80175dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80175de:	330e      	adds	r3, #14
 80175e0:	4619      	mov	r1, r3
 80175e2:	6878      	ldr	r0, [r7, #4]
 80175e4:	f7f7 fde2 	bl	800f1ac <pbuf_add_header>
 80175e8:	4603      	mov	r3, r0
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d04b      	beq.n	8017686 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	891a      	ldrh	r2, [r3, #8]
 80175f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80175f4:	4413      	add	r3, r2
 80175f6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	891b      	ldrh	r3, [r3, #8]
 80175fc:	8b7a      	ldrh	r2, [r7, #26]
 80175fe:	429a      	cmp	r2, r3
 8017600:	f0c0 809a 	bcc.w	8017738 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017604:	8b7b      	ldrh	r3, [r7, #26]
 8017606:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801760a:	4619      	mov	r1, r3
 801760c:	200e      	movs	r0, #14
 801760e:	f7f7 fb7f 	bl	800ed10 <pbuf_alloc>
 8017612:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017614:	697b      	ldr	r3, [r7, #20]
 8017616:	2b00      	cmp	r3, #0
 8017618:	f000 8090 	beq.w	801773c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801761c:	697b      	ldr	r3, [r7, #20]
 801761e:	895b      	ldrh	r3, [r3, #10]
 8017620:	461a      	mov	r2, r3
 8017622:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017624:	3308      	adds	r3, #8
 8017626:	429a      	cmp	r2, r3
 8017628:	d203      	bcs.n	8017632 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801762a:	6978      	ldr	r0, [r7, #20]
 801762c:	f7f7 fe86 	bl	800f33c <pbuf_free>
          goto icmperr;
 8017630:	e085      	b.n	801773e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017632:	697b      	ldr	r3, [r7, #20]
 8017634:	685b      	ldr	r3, [r3, #4]
 8017636:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017638:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801763a:	4618      	mov	r0, r3
 801763c:	f003 f959 	bl	801a8f2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017640:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017642:	4619      	mov	r1, r3
 8017644:	6978      	ldr	r0, [r7, #20]
 8017646:	f7f7 fdc1 	bl	800f1cc <pbuf_remove_header>
 801764a:	4603      	mov	r3, r0
 801764c:	2b00      	cmp	r3, #0
 801764e:	d009      	beq.n	8017664 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017650:	4b40      	ldr	r3, [pc, #256]	@ (8017754 <icmp_input+0x1f8>)
 8017652:	22b6      	movs	r2, #182	@ 0xb6
 8017654:	4940      	ldr	r1, [pc, #256]	@ (8017758 <icmp_input+0x1fc>)
 8017656:	4841      	ldr	r0, [pc, #260]	@ (801775c <icmp_input+0x200>)
 8017658:	f002 fec2 	bl	801a3e0 <iprintf>
          pbuf_free(r);
 801765c:	6978      	ldr	r0, [r7, #20]
 801765e:	f7f7 fe6d 	bl	800f33c <pbuf_free>
          goto icmperr;
 8017662:	e06c      	b.n	801773e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017664:	6879      	ldr	r1, [r7, #4]
 8017666:	6978      	ldr	r0, [r7, #20]
 8017668:	f7f7 ff9c 	bl	800f5a4 <pbuf_copy>
 801766c:	4603      	mov	r3, r0
 801766e:	2b00      	cmp	r3, #0
 8017670:	d003      	beq.n	801767a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017672:	6978      	ldr	r0, [r7, #20]
 8017674:	f7f7 fe62 	bl	800f33c <pbuf_free>
          goto icmperr;
 8017678:	e061      	b.n	801773e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801767a:	6878      	ldr	r0, [r7, #4]
 801767c:	f7f7 fe5e 	bl	800f33c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017680:	697b      	ldr	r3, [r7, #20]
 8017682:	607b      	str	r3, [r7, #4]
 8017684:	e00f      	b.n	80176a6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017686:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017688:	330e      	adds	r3, #14
 801768a:	4619      	mov	r1, r3
 801768c:	6878      	ldr	r0, [r7, #4]
 801768e:	f7f7 fd9d 	bl	800f1cc <pbuf_remove_header>
 8017692:	4603      	mov	r3, r0
 8017694:	2b00      	cmp	r3, #0
 8017696:	d006      	beq.n	80176a6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017698:	4b2e      	ldr	r3, [pc, #184]	@ (8017754 <icmp_input+0x1f8>)
 801769a:	22c7      	movs	r2, #199	@ 0xc7
 801769c:	4930      	ldr	r1, [pc, #192]	@ (8017760 <icmp_input+0x204>)
 801769e:	482f      	ldr	r0, [pc, #188]	@ (801775c <icmp_input+0x200>)
 80176a0:	f002 fe9e 	bl	801a3e0 <iprintf>
          goto icmperr;
 80176a4:	e04b      	b.n	801773e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	685b      	ldr	r3, [r3, #4]
 80176aa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80176ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80176ae:	4619      	mov	r1, r3
 80176b0:	6878      	ldr	r0, [r7, #4]
 80176b2:	f7f7 fd7b 	bl	800f1ac <pbuf_add_header>
 80176b6:	4603      	mov	r3, r0
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d12b      	bne.n	8017714 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	685b      	ldr	r3, [r3, #4]
 80176c0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80176c2:	69fb      	ldr	r3, [r7, #28]
 80176c4:	681a      	ldr	r2, [r3, #0]
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80176ca:	4b20      	ldr	r3, [pc, #128]	@ (801774c <icmp_input+0x1f0>)
 80176cc:	691a      	ldr	r2, [r3, #16]
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80176d2:	693b      	ldr	r3, [r7, #16]
 80176d4:	2200      	movs	r2, #0
 80176d6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80176d8:	693b      	ldr	r3, [r7, #16]
 80176da:	2200      	movs	r2, #0
 80176dc:	709a      	strb	r2, [r3, #2]
 80176de:	2200      	movs	r2, #0
 80176e0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	22ff      	movs	r2, #255	@ 0xff
 80176e6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	2200      	movs	r2, #0
 80176ec:	729a      	strb	r2, [r3, #10]
 80176ee:	2200      	movs	r2, #0
 80176f0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80176f2:	683b      	ldr	r3, [r7, #0]
 80176f4:	9302      	str	r3, [sp, #8]
 80176f6:	2301      	movs	r3, #1
 80176f8:	9301      	str	r3, [sp, #4]
 80176fa:	2300      	movs	r3, #0
 80176fc:	9300      	str	r3, [sp, #0]
 80176fe:	23ff      	movs	r3, #255	@ 0xff
 8017700:	2200      	movs	r2, #0
 8017702:	69f9      	ldr	r1, [r7, #28]
 8017704:	6878      	ldr	r0, [r7, #4]
 8017706:	f000 fa75 	bl	8017bf4 <ip4_output_if>
 801770a:	4603      	mov	r3, r0
 801770c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801770e:	e001      	b.n	8017714 <icmp_input+0x1b8>
      break;
 8017710:	bf00      	nop
 8017712:	e000      	b.n	8017716 <icmp_input+0x1ba>
      break;
 8017714:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017716:	6878      	ldr	r0, [r7, #4]
 8017718:	f7f7 fe10 	bl	800f33c <pbuf_free>
  return;
 801771c:	e013      	b.n	8017746 <icmp_input+0x1ea>
    goto lenerr;
 801771e:	bf00      	nop
 8017720:	e002      	b.n	8017728 <icmp_input+0x1cc>
    goto lenerr;
 8017722:	bf00      	nop
 8017724:	e000      	b.n	8017728 <icmp_input+0x1cc>
        goto lenerr;
 8017726:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017728:	6878      	ldr	r0, [r7, #4]
 801772a:	f7f7 fe07 	bl	800f33c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801772e:	e00a      	b.n	8017746 <icmp_input+0x1ea>
        goto icmperr;
 8017730:	bf00      	nop
 8017732:	e004      	b.n	801773e <icmp_input+0x1e2>
        goto icmperr;
 8017734:	bf00      	nop
 8017736:	e002      	b.n	801773e <icmp_input+0x1e2>
          goto icmperr;
 8017738:	bf00      	nop
 801773a:	e000      	b.n	801773e <icmp_input+0x1e2>
          goto icmperr;
 801773c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801773e:	6878      	ldr	r0, [r7, #4]
 8017740:	f7f7 fdfc 	bl	800f33c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017744:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017746:	3728      	adds	r7, #40	@ 0x28
 8017748:	46bd      	mov	sp, r7
 801774a:	bd80      	pop	{r7, pc}
 801774c:	2000998c 	.word	0x2000998c
 8017750:	200099a0 	.word	0x200099a0
 8017754:	080210a8 	.word	0x080210a8
 8017758:	080210e0 	.word	0x080210e0
 801775c:	08021118 	.word	0x08021118
 8017760:	08021140 	.word	0x08021140

08017764 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b082      	sub	sp, #8
 8017768:	af00      	add	r7, sp, #0
 801776a:	6078      	str	r0, [r7, #4]
 801776c:	460b      	mov	r3, r1
 801776e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017770:	78fb      	ldrb	r3, [r7, #3]
 8017772:	461a      	mov	r2, r3
 8017774:	2103      	movs	r1, #3
 8017776:	6878      	ldr	r0, [r7, #4]
 8017778:	f000 f814 	bl	80177a4 <icmp_send_response>
}
 801777c:	bf00      	nop
 801777e:	3708      	adds	r7, #8
 8017780:	46bd      	mov	sp, r7
 8017782:	bd80      	pop	{r7, pc}

08017784 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b082      	sub	sp, #8
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
 801778c:	460b      	mov	r3, r1
 801778e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017790:	78fb      	ldrb	r3, [r7, #3]
 8017792:	461a      	mov	r2, r3
 8017794:	210b      	movs	r1, #11
 8017796:	6878      	ldr	r0, [r7, #4]
 8017798:	f000 f804 	bl	80177a4 <icmp_send_response>
}
 801779c:	bf00      	nop
 801779e:	3708      	adds	r7, #8
 80177a0:	46bd      	mov	sp, r7
 80177a2:	bd80      	pop	{r7, pc}

080177a4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b08c      	sub	sp, #48	@ 0x30
 80177a8:	af04      	add	r7, sp, #16
 80177aa:	6078      	str	r0, [r7, #4]
 80177ac:	460b      	mov	r3, r1
 80177ae:	70fb      	strb	r3, [r7, #3]
 80177b0:	4613      	mov	r3, r2
 80177b2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80177b4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80177b8:	2124      	movs	r1, #36	@ 0x24
 80177ba:	2022      	movs	r0, #34	@ 0x22
 80177bc:	f7f7 faa8 	bl	800ed10 <pbuf_alloc>
 80177c0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80177c2:	69fb      	ldr	r3, [r7, #28]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d04c      	beq.n	8017862 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80177c8:	69fb      	ldr	r3, [r7, #28]
 80177ca:	895b      	ldrh	r3, [r3, #10]
 80177cc:	2b23      	cmp	r3, #35	@ 0x23
 80177ce:	d806      	bhi.n	80177de <icmp_send_response+0x3a>
 80177d0:	4b26      	ldr	r3, [pc, #152]	@ (801786c <icmp_send_response+0xc8>)
 80177d2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80177d6:	4926      	ldr	r1, [pc, #152]	@ (8017870 <icmp_send_response+0xcc>)
 80177d8:	4826      	ldr	r0, [pc, #152]	@ (8017874 <icmp_send_response+0xd0>)
 80177da:	f002 fe01 	bl	801a3e0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	685b      	ldr	r3, [r3, #4]
 80177e2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80177e4:	69fb      	ldr	r3, [r7, #28]
 80177e6:	685b      	ldr	r3, [r3, #4]
 80177e8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80177ea:	697b      	ldr	r3, [r7, #20]
 80177ec:	78fa      	ldrb	r2, [r7, #3]
 80177ee:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80177f0:	697b      	ldr	r3, [r7, #20]
 80177f2:	78ba      	ldrb	r2, [r7, #2]
 80177f4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80177f6:	697b      	ldr	r3, [r7, #20]
 80177f8:	2200      	movs	r2, #0
 80177fa:	711a      	strb	r2, [r3, #4]
 80177fc:	2200      	movs	r2, #0
 80177fe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017800:	697b      	ldr	r3, [r7, #20]
 8017802:	2200      	movs	r2, #0
 8017804:	719a      	strb	r2, [r3, #6]
 8017806:	2200      	movs	r2, #0
 8017808:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801780a:	69fb      	ldr	r3, [r7, #28]
 801780c:	685b      	ldr	r3, [r3, #4]
 801780e:	f103 0008 	add.w	r0, r3, #8
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	685b      	ldr	r3, [r3, #4]
 8017816:	221c      	movs	r2, #28
 8017818:	4619      	mov	r1, r3
 801781a:	f003 f86a 	bl	801a8f2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801781e:	69bb      	ldr	r3, [r7, #24]
 8017820:	68db      	ldr	r3, [r3, #12]
 8017822:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017824:	f107 030c 	add.w	r3, r7, #12
 8017828:	4618      	mov	r0, r3
 801782a:	f000 f825 	bl	8017878 <ip4_route>
 801782e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017830:	693b      	ldr	r3, [r7, #16]
 8017832:	2b00      	cmp	r3, #0
 8017834:	d011      	beq.n	801785a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017836:	697b      	ldr	r3, [r7, #20]
 8017838:	2200      	movs	r2, #0
 801783a:	709a      	strb	r2, [r3, #2]
 801783c:	2200      	movs	r2, #0
 801783e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017840:	f107 020c 	add.w	r2, r7, #12
 8017844:	693b      	ldr	r3, [r7, #16]
 8017846:	9302      	str	r3, [sp, #8]
 8017848:	2301      	movs	r3, #1
 801784a:	9301      	str	r3, [sp, #4]
 801784c:	2300      	movs	r3, #0
 801784e:	9300      	str	r3, [sp, #0]
 8017850:	23ff      	movs	r3, #255	@ 0xff
 8017852:	2100      	movs	r1, #0
 8017854:	69f8      	ldr	r0, [r7, #28]
 8017856:	f000 f9cd 	bl	8017bf4 <ip4_output_if>
  }
  pbuf_free(q);
 801785a:	69f8      	ldr	r0, [r7, #28]
 801785c:	f7f7 fd6e 	bl	800f33c <pbuf_free>
 8017860:	e000      	b.n	8017864 <icmp_send_response+0xc0>
    return;
 8017862:	bf00      	nop
}
 8017864:	3720      	adds	r7, #32
 8017866:	46bd      	mov	sp, r7
 8017868:	bd80      	pop	{r7, pc}
 801786a:	bf00      	nop
 801786c:	080210a8 	.word	0x080210a8
 8017870:	08021174 	.word	0x08021174
 8017874:	08021118 	.word	0x08021118

08017878 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017878:	b480      	push	{r7}
 801787a:	b085      	sub	sp, #20
 801787c:	af00      	add	r7, sp, #0
 801787e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017880:	4b33      	ldr	r3, [pc, #204]	@ (8017950 <ip4_route+0xd8>)
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	60fb      	str	r3, [r7, #12]
 8017886:	e036      	b.n	80178f6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801788e:	f003 0301 	and.w	r3, r3, #1
 8017892:	b2db      	uxtb	r3, r3
 8017894:	2b00      	cmp	r3, #0
 8017896:	d02b      	beq.n	80178f0 <ip4_route+0x78>
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801789e:	089b      	lsrs	r3, r3, #2
 80178a0:	f003 0301 	and.w	r3, r3, #1
 80178a4:	b2db      	uxtb	r3, r3
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d022      	beq.n	80178f0 <ip4_route+0x78>
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	3304      	adds	r3, #4
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d01d      	beq.n	80178f0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	681a      	ldr	r2, [r3, #0]
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	3304      	adds	r3, #4
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	405a      	eors	r2, r3
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	3308      	adds	r3, #8
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	4013      	ands	r3, r2
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d101      	bne.n	80178d0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	e038      	b.n	8017942 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80178d6:	f003 0302 	and.w	r3, r3, #2
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d108      	bne.n	80178f0 <ip4_route+0x78>
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	681a      	ldr	r2, [r3, #0]
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	330c      	adds	r3, #12
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	429a      	cmp	r2, r3
 80178ea:	d101      	bne.n	80178f0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	e028      	b.n	8017942 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	60fb      	str	r3, [r7, #12]
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d1c5      	bne.n	8017888 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80178fc:	4b15      	ldr	r3, [pc, #84]	@ (8017954 <ip4_route+0xdc>)
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d01a      	beq.n	801793a <ip4_route+0xc2>
 8017904:	4b13      	ldr	r3, [pc, #76]	@ (8017954 <ip4_route+0xdc>)
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801790c:	f003 0301 	and.w	r3, r3, #1
 8017910:	2b00      	cmp	r3, #0
 8017912:	d012      	beq.n	801793a <ip4_route+0xc2>
 8017914:	4b0f      	ldr	r3, [pc, #60]	@ (8017954 <ip4_route+0xdc>)
 8017916:	681b      	ldr	r3, [r3, #0]
 8017918:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801791c:	f003 0304 	and.w	r3, r3, #4
 8017920:	2b00      	cmp	r3, #0
 8017922:	d00a      	beq.n	801793a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017924:	4b0b      	ldr	r3, [pc, #44]	@ (8017954 <ip4_route+0xdc>)
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	3304      	adds	r3, #4
 801792a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801792c:	2b00      	cmp	r3, #0
 801792e:	d004      	beq.n	801793a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	b2db      	uxtb	r3, r3
 8017936:	2b7f      	cmp	r3, #127	@ 0x7f
 8017938:	d101      	bne.n	801793e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801793a:	2300      	movs	r3, #0
 801793c:	e001      	b.n	8017942 <ip4_route+0xca>
  }

  return netif_default;
 801793e:	4b05      	ldr	r3, [pc, #20]	@ (8017954 <ip4_route+0xdc>)
 8017940:	681b      	ldr	r3, [r3, #0]
}
 8017942:	4618      	mov	r0, r3
 8017944:	3714      	adds	r7, #20
 8017946:	46bd      	mov	sp, r7
 8017948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801794c:	4770      	bx	lr
 801794e:	bf00      	nop
 8017950:	2000d0d4 	.word	0x2000d0d4
 8017954:	2000d0d8 	.word	0x2000d0d8

08017958 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017958:	b580      	push	{r7, lr}
 801795a:	b082      	sub	sp, #8
 801795c:	af00      	add	r7, sp, #0
 801795e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017966:	f003 0301 	and.w	r3, r3, #1
 801796a:	b2db      	uxtb	r3, r3
 801796c:	2b00      	cmp	r3, #0
 801796e:	d016      	beq.n	801799e <ip4_input_accept+0x46>
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	3304      	adds	r3, #4
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d011      	beq.n	801799e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801797a:	4b0b      	ldr	r3, [pc, #44]	@ (80179a8 <ip4_input_accept+0x50>)
 801797c:	695a      	ldr	r2, [r3, #20]
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	3304      	adds	r3, #4
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	429a      	cmp	r2, r3
 8017986:	d008      	beq.n	801799a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017988:	4b07      	ldr	r3, [pc, #28]	@ (80179a8 <ip4_input_accept+0x50>)
 801798a:	695b      	ldr	r3, [r3, #20]
 801798c:	6879      	ldr	r1, [r7, #4]
 801798e:	4618      	mov	r0, r3
 8017990:	f000 fa08 	bl	8017da4 <ip4_addr_isbroadcast_u32>
 8017994:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017996:	2b00      	cmp	r3, #0
 8017998:	d001      	beq.n	801799e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801799a:	2301      	movs	r3, #1
 801799c:	e000      	b.n	80179a0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801799e:	2300      	movs	r3, #0
}
 80179a0:	4618      	mov	r0, r3
 80179a2:	3708      	adds	r7, #8
 80179a4:	46bd      	mov	sp, r7
 80179a6:	bd80      	pop	{r7, pc}
 80179a8:	2000998c 	.word	0x2000998c

080179ac <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80179ac:	b580      	push	{r7, lr}
 80179ae:	b086      	sub	sp, #24
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	6078      	str	r0, [r7, #4]
 80179b4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	685b      	ldr	r3, [r3, #4]
 80179ba:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80179bc:	697b      	ldr	r3, [r7, #20]
 80179be:	781b      	ldrb	r3, [r3, #0]
 80179c0:	091b      	lsrs	r3, r3, #4
 80179c2:	b2db      	uxtb	r3, r3
 80179c4:	2b04      	cmp	r3, #4
 80179c6:	d004      	beq.n	80179d2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80179c8:	6878      	ldr	r0, [r7, #4]
 80179ca:	f7f7 fcb7 	bl	800f33c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80179ce:	2300      	movs	r3, #0
 80179d0:	e107      	b.n	8017be2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80179d2:	697b      	ldr	r3, [r7, #20]
 80179d4:	781b      	ldrb	r3, [r3, #0]
 80179d6:	f003 030f 	and.w	r3, r3, #15
 80179da:	b2db      	uxtb	r3, r3
 80179dc:	009b      	lsls	r3, r3, #2
 80179de:	b2db      	uxtb	r3, r3
 80179e0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80179e2:	697b      	ldr	r3, [r7, #20]
 80179e4:	885b      	ldrh	r3, [r3, #2]
 80179e6:	b29b      	uxth	r3, r3
 80179e8:	4618      	mov	r0, r3
 80179ea:	f7f6 f84b 	bl	800da84 <lwip_htons>
 80179ee:	4603      	mov	r3, r0
 80179f0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	891b      	ldrh	r3, [r3, #8]
 80179f6:	89ba      	ldrh	r2, [r7, #12]
 80179f8:	429a      	cmp	r2, r3
 80179fa:	d204      	bcs.n	8017a06 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80179fc:	89bb      	ldrh	r3, [r7, #12]
 80179fe:	4619      	mov	r1, r3
 8017a00:	6878      	ldr	r0, [r7, #4]
 8017a02:	f7f7 fae3 	bl	800efcc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	895b      	ldrh	r3, [r3, #10]
 8017a0a:	89fa      	ldrh	r2, [r7, #14]
 8017a0c:	429a      	cmp	r2, r3
 8017a0e:	d807      	bhi.n	8017a20 <ip4_input+0x74>
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	891b      	ldrh	r3, [r3, #8]
 8017a14:	89ba      	ldrh	r2, [r7, #12]
 8017a16:	429a      	cmp	r2, r3
 8017a18:	d802      	bhi.n	8017a20 <ip4_input+0x74>
 8017a1a:	89fb      	ldrh	r3, [r7, #14]
 8017a1c:	2b13      	cmp	r3, #19
 8017a1e:	d804      	bhi.n	8017a2a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017a20:	6878      	ldr	r0, [r7, #4]
 8017a22:	f7f7 fc8b 	bl	800f33c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017a26:	2300      	movs	r3, #0
 8017a28:	e0db      	b.n	8017be2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017a2a:	697b      	ldr	r3, [r7, #20]
 8017a2c:	691b      	ldr	r3, [r3, #16]
 8017a2e:	4a6f      	ldr	r2, [pc, #444]	@ (8017bec <ip4_input+0x240>)
 8017a30:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017a32:	697b      	ldr	r3, [r7, #20]
 8017a34:	68db      	ldr	r3, [r3, #12]
 8017a36:	4a6d      	ldr	r2, [pc, #436]	@ (8017bec <ip4_input+0x240>)
 8017a38:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017a3a:	4b6c      	ldr	r3, [pc, #432]	@ (8017bec <ip4_input+0x240>)
 8017a3c:	695b      	ldr	r3, [r3, #20]
 8017a3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017a42:	2be0      	cmp	r3, #224	@ 0xe0
 8017a44:	d112      	bne.n	8017a6c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017a46:	683b      	ldr	r3, [r7, #0]
 8017a48:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017a4c:	f003 0301 	and.w	r3, r3, #1
 8017a50:	b2db      	uxtb	r3, r3
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d007      	beq.n	8017a66 <ip4_input+0xba>
 8017a56:	683b      	ldr	r3, [r7, #0]
 8017a58:	3304      	adds	r3, #4
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d002      	beq.n	8017a66 <ip4_input+0xba>
      netif = inp;
 8017a60:	683b      	ldr	r3, [r7, #0]
 8017a62:	613b      	str	r3, [r7, #16]
 8017a64:	e02a      	b.n	8017abc <ip4_input+0x110>
    } else {
      netif = NULL;
 8017a66:	2300      	movs	r3, #0
 8017a68:	613b      	str	r3, [r7, #16]
 8017a6a:	e027      	b.n	8017abc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017a6c:	6838      	ldr	r0, [r7, #0]
 8017a6e:	f7ff ff73 	bl	8017958 <ip4_input_accept>
 8017a72:	4603      	mov	r3, r0
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d002      	beq.n	8017a7e <ip4_input+0xd2>
      netif = inp;
 8017a78:	683b      	ldr	r3, [r7, #0]
 8017a7a:	613b      	str	r3, [r7, #16]
 8017a7c:	e01e      	b.n	8017abc <ip4_input+0x110>
    } else {
      netif = NULL;
 8017a7e:	2300      	movs	r3, #0
 8017a80:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017a82:	4b5a      	ldr	r3, [pc, #360]	@ (8017bec <ip4_input+0x240>)
 8017a84:	695b      	ldr	r3, [r3, #20]
 8017a86:	b2db      	uxtb	r3, r3
 8017a88:	2b7f      	cmp	r3, #127	@ 0x7f
 8017a8a:	d017      	beq.n	8017abc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017a8c:	4b58      	ldr	r3, [pc, #352]	@ (8017bf0 <ip4_input+0x244>)
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	613b      	str	r3, [r7, #16]
 8017a92:	e00e      	b.n	8017ab2 <ip4_input+0x106>
          if (netif == inp) {
 8017a94:	693a      	ldr	r2, [r7, #16]
 8017a96:	683b      	ldr	r3, [r7, #0]
 8017a98:	429a      	cmp	r2, r3
 8017a9a:	d006      	beq.n	8017aaa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017a9c:	6938      	ldr	r0, [r7, #16]
 8017a9e:	f7ff ff5b 	bl	8017958 <ip4_input_accept>
 8017aa2:	4603      	mov	r3, r0
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d108      	bne.n	8017aba <ip4_input+0x10e>
 8017aa8:	e000      	b.n	8017aac <ip4_input+0x100>
            continue;
 8017aaa:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017aac:	693b      	ldr	r3, [r7, #16]
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	613b      	str	r3, [r7, #16]
 8017ab2:	693b      	ldr	r3, [r7, #16]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d1ed      	bne.n	8017a94 <ip4_input+0xe8>
 8017ab8:	e000      	b.n	8017abc <ip4_input+0x110>
            break;
 8017aba:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017abc:	4b4b      	ldr	r3, [pc, #300]	@ (8017bec <ip4_input+0x240>)
 8017abe:	691b      	ldr	r3, [r3, #16]
 8017ac0:	6839      	ldr	r1, [r7, #0]
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	f000 f96e 	bl	8017da4 <ip4_addr_isbroadcast_u32>
 8017ac8:	4603      	mov	r3, r0
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d105      	bne.n	8017ada <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017ace:	4b47      	ldr	r3, [pc, #284]	@ (8017bec <ip4_input+0x240>)
 8017ad0:	691b      	ldr	r3, [r3, #16]
 8017ad2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017ad6:	2be0      	cmp	r3, #224	@ 0xe0
 8017ad8:	d104      	bne.n	8017ae4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017ada:	6878      	ldr	r0, [r7, #4]
 8017adc:	f7f7 fc2e 	bl	800f33c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017ae0:	2300      	movs	r3, #0
 8017ae2:	e07e      	b.n	8017be2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017ae4:	693b      	ldr	r3, [r7, #16]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d104      	bne.n	8017af4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017aea:	6878      	ldr	r0, [r7, #4]
 8017aec:	f7f7 fc26 	bl	800f33c <pbuf_free>
    return ERR_OK;
 8017af0:	2300      	movs	r3, #0
 8017af2:	e076      	b.n	8017be2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017af4:	697b      	ldr	r3, [r7, #20]
 8017af6:	88db      	ldrh	r3, [r3, #6]
 8017af8:	b29b      	uxth	r3, r3
 8017afa:	461a      	mov	r2, r3
 8017afc:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8017b00:	4013      	ands	r3, r2
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d00b      	beq.n	8017b1e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017b06:	6878      	ldr	r0, [r7, #4]
 8017b08:	f000 fd22 	bl	8018550 <ip4_reass>
 8017b0c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d101      	bne.n	8017b18 <ip4_input+0x16c>
      return ERR_OK;
 8017b14:	2300      	movs	r3, #0
 8017b16:	e064      	b.n	8017be2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	685b      	ldr	r3, [r3, #4]
 8017b1c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017b1e:	4a33      	ldr	r2, [pc, #204]	@ (8017bec <ip4_input+0x240>)
 8017b20:	693b      	ldr	r3, [r7, #16]
 8017b22:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017b24:	4a31      	ldr	r2, [pc, #196]	@ (8017bec <ip4_input+0x240>)
 8017b26:	683b      	ldr	r3, [r7, #0]
 8017b28:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017b2a:	4a30      	ldr	r2, [pc, #192]	@ (8017bec <ip4_input+0x240>)
 8017b2c:	697b      	ldr	r3, [r7, #20]
 8017b2e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017b30:	697b      	ldr	r3, [r7, #20]
 8017b32:	781b      	ldrb	r3, [r3, #0]
 8017b34:	f003 030f 	and.w	r3, r3, #15
 8017b38:	b2db      	uxtb	r3, r3
 8017b3a:	009b      	lsls	r3, r3, #2
 8017b3c:	b2db      	uxtb	r3, r3
 8017b3e:	461a      	mov	r2, r3
 8017b40:	4b2a      	ldr	r3, [pc, #168]	@ (8017bec <ip4_input+0x240>)
 8017b42:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017b44:	89fb      	ldrh	r3, [r7, #14]
 8017b46:	4619      	mov	r1, r3
 8017b48:	6878      	ldr	r0, [r7, #4]
 8017b4a:	f7f7 fb3f 	bl	800f1cc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017b4e:	697b      	ldr	r3, [r7, #20]
 8017b50:	7a5b      	ldrb	r3, [r3, #9]
 8017b52:	2b11      	cmp	r3, #17
 8017b54:	d006      	beq.n	8017b64 <ip4_input+0x1b8>
 8017b56:	2b11      	cmp	r3, #17
 8017b58:	dc13      	bgt.n	8017b82 <ip4_input+0x1d6>
 8017b5a:	2b01      	cmp	r3, #1
 8017b5c:	d00c      	beq.n	8017b78 <ip4_input+0x1cc>
 8017b5e:	2b06      	cmp	r3, #6
 8017b60:	d005      	beq.n	8017b6e <ip4_input+0x1c2>
 8017b62:	e00e      	b.n	8017b82 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017b64:	6839      	ldr	r1, [r7, #0]
 8017b66:	6878      	ldr	r0, [r7, #4]
 8017b68:	f7fe f956 	bl	8015e18 <udp_input>
        break;
 8017b6c:	e026      	b.n	8017bbc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017b6e:	6839      	ldr	r1, [r7, #0]
 8017b70:	6878      	ldr	r0, [r7, #4]
 8017b72:	f7f9 fd15 	bl	80115a0 <tcp_input>
        break;
 8017b76:	e021      	b.n	8017bbc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017b78:	6839      	ldr	r1, [r7, #0]
 8017b7a:	6878      	ldr	r0, [r7, #4]
 8017b7c:	f7ff fcee 	bl	801755c <icmp_input>
        break;
 8017b80:	e01c      	b.n	8017bbc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017b82:	4b1a      	ldr	r3, [pc, #104]	@ (8017bec <ip4_input+0x240>)
 8017b84:	695b      	ldr	r3, [r3, #20]
 8017b86:	6939      	ldr	r1, [r7, #16]
 8017b88:	4618      	mov	r0, r3
 8017b8a:	f000 f90b 	bl	8017da4 <ip4_addr_isbroadcast_u32>
 8017b8e:	4603      	mov	r3, r0
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d10f      	bne.n	8017bb4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017b94:	4b15      	ldr	r3, [pc, #84]	@ (8017bec <ip4_input+0x240>)
 8017b96:	695b      	ldr	r3, [r3, #20]
 8017b98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017b9c:	2be0      	cmp	r3, #224	@ 0xe0
 8017b9e:	d009      	beq.n	8017bb4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017ba0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017ba4:	4619      	mov	r1, r3
 8017ba6:	6878      	ldr	r0, [r7, #4]
 8017ba8:	f7f7 fb83 	bl	800f2b2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017bac:	2102      	movs	r1, #2
 8017bae:	6878      	ldr	r0, [r7, #4]
 8017bb0:	f7ff fdd8 	bl	8017764 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017bb4:	6878      	ldr	r0, [r7, #4]
 8017bb6:	f7f7 fbc1 	bl	800f33c <pbuf_free>
        break;
 8017bba:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8017bec <ip4_input+0x240>)
 8017bbe:	2200      	movs	r2, #0
 8017bc0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8017bec <ip4_input+0x240>)
 8017bc4:	2200      	movs	r2, #0
 8017bc6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017bc8:	4b08      	ldr	r3, [pc, #32]	@ (8017bec <ip4_input+0x240>)
 8017bca:	2200      	movs	r2, #0
 8017bcc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017bce:	4b07      	ldr	r3, [pc, #28]	@ (8017bec <ip4_input+0x240>)
 8017bd0:	2200      	movs	r2, #0
 8017bd2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017bd4:	4b05      	ldr	r3, [pc, #20]	@ (8017bec <ip4_input+0x240>)
 8017bd6:	2200      	movs	r2, #0
 8017bd8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017bda:	4b04      	ldr	r3, [pc, #16]	@ (8017bec <ip4_input+0x240>)
 8017bdc:	2200      	movs	r2, #0
 8017bde:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017be0:	2300      	movs	r3, #0
}
 8017be2:	4618      	mov	r0, r3
 8017be4:	3718      	adds	r7, #24
 8017be6:	46bd      	mov	sp, r7
 8017be8:	bd80      	pop	{r7, pc}
 8017bea:	bf00      	nop
 8017bec:	2000998c 	.word	0x2000998c
 8017bf0:	2000d0d4 	.word	0x2000d0d4

08017bf4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017bf4:	b580      	push	{r7, lr}
 8017bf6:	b08a      	sub	sp, #40	@ 0x28
 8017bf8:	af04      	add	r7, sp, #16
 8017bfa:	60f8      	str	r0, [r7, #12]
 8017bfc:	60b9      	str	r1, [r7, #8]
 8017bfe:	607a      	str	r2, [r7, #4]
 8017c00:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017c02:	68bb      	ldr	r3, [r7, #8]
 8017c04:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d009      	beq.n	8017c20 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017c0c:	68bb      	ldr	r3, [r7, #8]
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d003      	beq.n	8017c1a <ip4_output_if+0x26>
 8017c12:	68bb      	ldr	r3, [r7, #8]
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d102      	bne.n	8017c20 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c1c:	3304      	adds	r3, #4
 8017c1e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017c20:	78fa      	ldrb	r2, [r7, #3]
 8017c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c24:	9302      	str	r3, [sp, #8]
 8017c26:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017c2a:	9301      	str	r3, [sp, #4]
 8017c2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017c30:	9300      	str	r3, [sp, #0]
 8017c32:	4613      	mov	r3, r2
 8017c34:	687a      	ldr	r2, [r7, #4]
 8017c36:	6979      	ldr	r1, [r7, #20]
 8017c38:	68f8      	ldr	r0, [r7, #12]
 8017c3a:	f000 f805 	bl	8017c48 <ip4_output_if_src>
 8017c3e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017c40:	4618      	mov	r0, r3
 8017c42:	3718      	adds	r7, #24
 8017c44:	46bd      	mov	sp, r7
 8017c46:	bd80      	pop	{r7, pc}

08017c48 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017c48:	b580      	push	{r7, lr}
 8017c4a:	b088      	sub	sp, #32
 8017c4c:	af00      	add	r7, sp, #0
 8017c4e:	60f8      	str	r0, [r7, #12]
 8017c50:	60b9      	str	r1, [r7, #8]
 8017c52:	607a      	str	r2, [r7, #4]
 8017c54:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	7b9b      	ldrb	r3, [r3, #14]
 8017c5a:	2b01      	cmp	r3, #1
 8017c5c:	d006      	beq.n	8017c6c <ip4_output_if_src+0x24>
 8017c5e:	4b4b      	ldr	r3, [pc, #300]	@ (8017d8c <ip4_output_if_src+0x144>)
 8017c60:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8017c64:	494a      	ldr	r1, [pc, #296]	@ (8017d90 <ip4_output_if_src+0x148>)
 8017c66:	484b      	ldr	r0, [pc, #300]	@ (8017d94 <ip4_output_if_src+0x14c>)
 8017c68:	f002 fbba 	bl	801a3e0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d060      	beq.n	8017d34 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017c72:	2314      	movs	r3, #20
 8017c74:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017c76:	2114      	movs	r1, #20
 8017c78:	68f8      	ldr	r0, [r7, #12]
 8017c7a:	f7f7 fa97 	bl	800f1ac <pbuf_add_header>
 8017c7e:	4603      	mov	r3, r0
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d002      	beq.n	8017c8a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017c84:	f06f 0301 	mvn.w	r3, #1
 8017c88:	e07c      	b.n	8017d84 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	685b      	ldr	r3, [r3, #4]
 8017c8e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	895b      	ldrh	r3, [r3, #10]
 8017c94:	2b13      	cmp	r3, #19
 8017c96:	d806      	bhi.n	8017ca6 <ip4_output_if_src+0x5e>
 8017c98:	4b3c      	ldr	r3, [pc, #240]	@ (8017d8c <ip4_output_if_src+0x144>)
 8017c9a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8017c9e:	493e      	ldr	r1, [pc, #248]	@ (8017d98 <ip4_output_if_src+0x150>)
 8017ca0:	483c      	ldr	r0, [pc, #240]	@ (8017d94 <ip4_output_if_src+0x14c>)
 8017ca2:	f002 fb9d 	bl	801a3e0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017ca6:	69fb      	ldr	r3, [r7, #28]
 8017ca8:	78fa      	ldrb	r2, [r7, #3]
 8017caa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017cac:	69fb      	ldr	r3, [r7, #28]
 8017cae:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017cb2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	681a      	ldr	r2, [r3, #0]
 8017cb8:	69fb      	ldr	r3, [r7, #28]
 8017cba:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017cbc:	8b7b      	ldrh	r3, [r7, #26]
 8017cbe:	089b      	lsrs	r3, r3, #2
 8017cc0:	b29b      	uxth	r3, r3
 8017cc2:	b2db      	uxtb	r3, r3
 8017cc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017cc8:	b2da      	uxtb	r2, r3
 8017cca:	69fb      	ldr	r3, [r7, #28]
 8017ccc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017cce:	69fb      	ldr	r3, [r7, #28]
 8017cd0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017cd4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	891b      	ldrh	r3, [r3, #8]
 8017cda:	4618      	mov	r0, r3
 8017cdc:	f7f5 fed2 	bl	800da84 <lwip_htons>
 8017ce0:	4603      	mov	r3, r0
 8017ce2:	461a      	mov	r2, r3
 8017ce4:	69fb      	ldr	r3, [r7, #28]
 8017ce6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017ce8:	69fb      	ldr	r3, [r7, #28]
 8017cea:	2200      	movs	r2, #0
 8017cec:	719a      	strb	r2, [r3, #6]
 8017cee:	2200      	movs	r2, #0
 8017cf0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8017d9c <ip4_output_if_src+0x154>)
 8017cf4:	881b      	ldrh	r3, [r3, #0]
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	f7f5 fec4 	bl	800da84 <lwip_htons>
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	461a      	mov	r2, r3
 8017d00:	69fb      	ldr	r3, [r7, #28]
 8017d02:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017d04:	4b25      	ldr	r3, [pc, #148]	@ (8017d9c <ip4_output_if_src+0x154>)
 8017d06:	881b      	ldrh	r3, [r3, #0]
 8017d08:	3301      	adds	r3, #1
 8017d0a:	b29a      	uxth	r2, r3
 8017d0c:	4b23      	ldr	r3, [pc, #140]	@ (8017d9c <ip4_output_if_src+0x154>)
 8017d0e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017d10:	68bb      	ldr	r3, [r7, #8]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d104      	bne.n	8017d20 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017d16:	4b22      	ldr	r3, [pc, #136]	@ (8017da0 <ip4_output_if_src+0x158>)
 8017d18:	681a      	ldr	r2, [r3, #0]
 8017d1a:	69fb      	ldr	r3, [r7, #28]
 8017d1c:	60da      	str	r2, [r3, #12]
 8017d1e:	e003      	b.n	8017d28 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017d20:	68bb      	ldr	r3, [r7, #8]
 8017d22:	681a      	ldr	r2, [r3, #0]
 8017d24:	69fb      	ldr	r3, [r7, #28]
 8017d26:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017d28:	69fb      	ldr	r3, [r7, #28]
 8017d2a:	2200      	movs	r2, #0
 8017d2c:	729a      	strb	r2, [r3, #10]
 8017d2e:	2200      	movs	r2, #0
 8017d30:	72da      	strb	r2, [r3, #11]
 8017d32:	e00f      	b.n	8017d54 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017d34:	68fb      	ldr	r3, [r7, #12]
 8017d36:	895b      	ldrh	r3, [r3, #10]
 8017d38:	2b13      	cmp	r3, #19
 8017d3a:	d802      	bhi.n	8017d42 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017d3c:	f06f 0301 	mvn.w	r3, #1
 8017d40:	e020      	b.n	8017d84 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	685b      	ldr	r3, [r3, #4]
 8017d46:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017d48:	69fb      	ldr	r3, [r7, #28]
 8017d4a:	691b      	ldr	r3, [r3, #16]
 8017d4c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017d4e:	f107 0314 	add.w	r3, r7, #20
 8017d52:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d56:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d00c      	beq.n	8017d76 <ip4_output_if_src+0x12e>
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	891a      	ldrh	r2, [r3, #8]
 8017d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d62:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017d64:	429a      	cmp	r2, r3
 8017d66:	d906      	bls.n	8017d76 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017d68:	687a      	ldr	r2, [r7, #4]
 8017d6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017d6c:	68f8      	ldr	r0, [r7, #12]
 8017d6e:	f000 fde3 	bl	8018938 <ip4_frag>
 8017d72:	4603      	mov	r3, r0
 8017d74:	e006      	b.n	8017d84 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d78:	695b      	ldr	r3, [r3, #20]
 8017d7a:	687a      	ldr	r2, [r7, #4]
 8017d7c:	68f9      	ldr	r1, [r7, #12]
 8017d7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017d80:	4798      	blx	r3
 8017d82:	4603      	mov	r3, r0
}
 8017d84:	4618      	mov	r0, r3
 8017d86:	3720      	adds	r7, #32
 8017d88:	46bd      	mov	sp, r7
 8017d8a:	bd80      	pop	{r7, pc}
 8017d8c:	080211a0 	.word	0x080211a0
 8017d90:	080211d4 	.word	0x080211d4
 8017d94:	080211e0 	.word	0x080211e0
 8017d98:	08021208 	.word	0x08021208
 8017d9c:	2000d232 	.word	0x2000d232
 8017da0:	08021710 	.word	0x08021710

08017da4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017da4:	b480      	push	{r7}
 8017da6:	b085      	sub	sp, #20
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	6078      	str	r0, [r7, #4]
 8017dac:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017db8:	d002      	beq.n	8017dc0 <ip4_addr_isbroadcast_u32+0x1c>
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d101      	bne.n	8017dc4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017dc0:	2301      	movs	r3, #1
 8017dc2:	e02a      	b.n	8017e1a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017dc4:	683b      	ldr	r3, [r7, #0]
 8017dc6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017dca:	f003 0302 	and.w	r3, r3, #2
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d101      	bne.n	8017dd6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	e021      	b.n	8017e1a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017dd6:	683b      	ldr	r3, [r7, #0]
 8017dd8:	3304      	adds	r3, #4
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	687a      	ldr	r2, [r7, #4]
 8017dde:	429a      	cmp	r2, r3
 8017de0:	d101      	bne.n	8017de6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017de2:	2300      	movs	r3, #0
 8017de4:	e019      	b.n	8017e1a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017de6:	68fa      	ldr	r2, [r7, #12]
 8017de8:	683b      	ldr	r3, [r7, #0]
 8017dea:	3304      	adds	r3, #4
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	405a      	eors	r2, r3
 8017df0:	683b      	ldr	r3, [r7, #0]
 8017df2:	3308      	adds	r3, #8
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	4013      	ands	r3, r2
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d10d      	bne.n	8017e18 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017dfc:	683b      	ldr	r3, [r7, #0]
 8017dfe:	3308      	adds	r3, #8
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	43da      	mvns	r2, r3
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017e08:	683b      	ldr	r3, [r7, #0]
 8017e0a:	3308      	adds	r3, #8
 8017e0c:	681b      	ldr	r3, [r3, #0]
 8017e0e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017e10:	429a      	cmp	r2, r3
 8017e12:	d101      	bne.n	8017e18 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017e14:	2301      	movs	r3, #1
 8017e16:	e000      	b.n	8017e1a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017e18:	2300      	movs	r3, #0
  }
}
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	3714      	adds	r7, #20
 8017e1e:	46bd      	mov	sp, r7
 8017e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e24:	4770      	bx	lr
	...

08017e28 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	b082      	sub	sp, #8
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8017e30:	2210      	movs	r2, #16
 8017e32:	4904      	ldr	r1, [pc, #16]	@ (8017e44 <ip4addr_ntoa+0x1c>)
 8017e34:	6878      	ldr	r0, [r7, #4]
 8017e36:	f000 f807 	bl	8017e48 <ip4addr_ntoa_r>
 8017e3a:	4603      	mov	r3, r0
}
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	3708      	adds	r7, #8
 8017e40:	46bd      	mov	sp, r7
 8017e42:	bd80      	pop	{r7, pc}
 8017e44:	2000d234 	.word	0x2000d234

08017e48 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8017e48:	b480      	push	{r7}
 8017e4a:	b08d      	sub	sp, #52	@ 0x34
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	60f8      	str	r0, [r7, #12]
 8017e50:	60b9      	str	r1, [r7, #8]
 8017e52:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8017e54:	2300      	movs	r3, #0
 8017e56:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8017e5e:	68bb      	ldr	r3, [r7, #8]
 8017e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 8017e62:	f107 0318 	add.w	r3, r7, #24
 8017e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8017e68:	2300      	movs	r3, #0
 8017e6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017e6e:	e058      	b.n	8017f22 <ip4addr_ntoa_r+0xda>
    i = 0;
 8017e70:	2300      	movs	r3, #0
 8017e72:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 8017e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e78:	781a      	ldrb	r2, [r3, #0]
 8017e7a:	4b32      	ldr	r3, [pc, #200]	@ (8017f44 <ip4addr_ntoa_r+0xfc>)
 8017e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8017e80:	08d9      	lsrs	r1, r3, #3
 8017e82:	460b      	mov	r3, r1
 8017e84:	009b      	lsls	r3, r3, #2
 8017e86:	440b      	add	r3, r1
 8017e88:	005b      	lsls	r3, r3, #1
 8017e8a:	1ad3      	subs	r3, r2, r3
 8017e8c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8017e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e90:	781b      	ldrb	r3, [r3, #0]
 8017e92:	4a2c      	ldr	r2, [pc, #176]	@ (8017f44 <ip4addr_ntoa_r+0xfc>)
 8017e94:	fba2 2303 	umull	r2, r3, r2, r3
 8017e98:	08db      	lsrs	r3, r3, #3
 8017e9a:	b2da      	uxtb	r2, r3
 8017e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e9e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8017ea0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017ea4:	1c5a      	adds	r2, r3, #1
 8017ea6:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8017eaa:	4619      	mov	r1, r3
 8017eac:	7ffb      	ldrb	r3, [r7, #31]
 8017eae:	3330      	adds	r3, #48	@ 0x30
 8017eb0:	b2da      	uxtb	r2, r3
 8017eb2:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8017eb6:	443b      	add	r3, r7
 8017eb8:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8017ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ebe:	781b      	ldrb	r3, [r3, #0]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d1d8      	bne.n	8017e76 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8017ec4:	e011      	b.n	8017eea <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8017ec6:	6a3b      	ldr	r3, [r7, #32]
 8017ec8:	1c5a      	adds	r2, r3, #1
 8017eca:	623a      	str	r2, [r7, #32]
 8017ecc:	687a      	ldr	r2, [r7, #4]
 8017ece:	429a      	cmp	r2, r3
 8017ed0:	dc01      	bgt.n	8017ed6 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	e030      	b.n	8017f38 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8017ed6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8017eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017edc:	1c59      	adds	r1, r3, #1
 8017ede:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8017ee0:	3230      	adds	r2, #48	@ 0x30
 8017ee2:	443a      	add	r2, r7
 8017ee4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8017ee8:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8017eea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017eee:	1e5a      	subs	r2, r3, #1
 8017ef0:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d1e6      	bne.n	8017ec6 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8017ef8:	6a3b      	ldr	r3, [r7, #32]
 8017efa:	1c5a      	adds	r2, r3, #1
 8017efc:	623a      	str	r2, [r7, #32]
 8017efe:	687a      	ldr	r2, [r7, #4]
 8017f00:	429a      	cmp	r2, r3
 8017f02:	dc01      	bgt.n	8017f08 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8017f04:	2300      	movs	r3, #0
 8017f06:	e017      	b.n	8017f38 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8017f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f0a:	1c5a      	adds	r2, r3, #1
 8017f0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8017f0e:	222e      	movs	r2, #46	@ 0x2e
 8017f10:	701a      	strb	r2, [r3, #0]
    ap++;
 8017f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f14:	3301      	adds	r3, #1
 8017f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8017f18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017f1c:	3301      	adds	r3, #1
 8017f1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017f22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017f26:	2b03      	cmp	r3, #3
 8017f28:	d9a2      	bls.n	8017e70 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8017f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f2c:	3b01      	subs	r3, #1
 8017f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f32:	2200      	movs	r2, #0
 8017f34:	701a      	strb	r2, [r3, #0]
  return buf;
 8017f36:	68bb      	ldr	r3, [r7, #8]
}
 8017f38:	4618      	mov	r0, r3
 8017f3a:	3734      	adds	r7, #52	@ 0x34
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f42:	4770      	bx	lr
 8017f44:	cccccccd 	.word	0xcccccccd

08017f48 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017f48:	b580      	push	{r7, lr}
 8017f4a:	b084      	sub	sp, #16
 8017f4c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017f4e:	2300      	movs	r3, #0
 8017f50:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017f52:	4b12      	ldr	r3, [pc, #72]	@ (8017f9c <ip_reass_tmr+0x54>)
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017f58:	e018      	b.n	8017f8c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	7fdb      	ldrb	r3, [r3, #31]
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d00b      	beq.n	8017f7a <ip_reass_tmr+0x32>
      r->timer--;
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	7fdb      	ldrb	r3, [r3, #31]
 8017f66:	3b01      	subs	r3, #1
 8017f68:	b2da      	uxtb	r2, r3
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017f72:	68fb      	ldr	r3, [r7, #12]
 8017f74:	681b      	ldr	r3, [r3, #0]
 8017f76:	60fb      	str	r3, [r7, #12]
 8017f78:	e008      	b.n	8017f8c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017f84:	68b9      	ldr	r1, [r7, #8]
 8017f86:	6878      	ldr	r0, [r7, #4]
 8017f88:	f000 f80a 	bl	8017fa0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d1e3      	bne.n	8017f5a <ip_reass_tmr+0x12>
    }
  }
}
 8017f92:	bf00      	nop
 8017f94:	bf00      	nop
 8017f96:	3710      	adds	r7, #16
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	bd80      	pop	{r7, pc}
 8017f9c:	2000d244 	.word	0x2000d244

08017fa0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b088      	sub	sp, #32
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]
 8017fa8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017faa:	2300      	movs	r3, #0
 8017fac:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017fae:	683a      	ldr	r2, [r7, #0]
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	429a      	cmp	r2, r3
 8017fb4:	d105      	bne.n	8017fc2 <ip_reass_free_complete_datagram+0x22>
 8017fb6:	4b45      	ldr	r3, [pc, #276]	@ (80180cc <ip_reass_free_complete_datagram+0x12c>)
 8017fb8:	22ab      	movs	r2, #171	@ 0xab
 8017fba:	4945      	ldr	r1, [pc, #276]	@ (80180d0 <ip_reass_free_complete_datagram+0x130>)
 8017fbc:	4845      	ldr	r0, [pc, #276]	@ (80180d4 <ip_reass_free_complete_datagram+0x134>)
 8017fbe:	f002 fa0f 	bl	801a3e0 <iprintf>
  if (prev != NULL) {
 8017fc2:	683b      	ldr	r3, [r7, #0]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d00a      	beq.n	8017fde <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017fc8:	683b      	ldr	r3, [r7, #0]
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	687a      	ldr	r2, [r7, #4]
 8017fce:	429a      	cmp	r2, r3
 8017fd0:	d005      	beq.n	8017fde <ip_reass_free_complete_datagram+0x3e>
 8017fd2:	4b3e      	ldr	r3, [pc, #248]	@ (80180cc <ip_reass_free_complete_datagram+0x12c>)
 8017fd4:	22ad      	movs	r2, #173	@ 0xad
 8017fd6:	4940      	ldr	r1, [pc, #256]	@ (80180d8 <ip_reass_free_complete_datagram+0x138>)
 8017fd8:	483e      	ldr	r0, [pc, #248]	@ (80180d4 <ip_reass_free_complete_datagram+0x134>)
 8017fda:	f002 fa01 	bl	801a3e0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	685b      	ldr	r3, [r3, #4]
 8017fe2:	685b      	ldr	r3, [r3, #4]
 8017fe4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017fe6:	697b      	ldr	r3, [r7, #20]
 8017fe8:	889b      	ldrh	r3, [r3, #4]
 8017fea:	b29b      	uxth	r3, r3
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d12a      	bne.n	8018046 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	685b      	ldr	r3, [r3, #4]
 8017ff4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017ff6:	697b      	ldr	r3, [r7, #20]
 8017ff8:	681a      	ldr	r2, [r3, #0]
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017ffe:	69bb      	ldr	r3, [r7, #24]
 8018000:	6858      	ldr	r0, [r3, #4]
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	3308      	adds	r3, #8
 8018006:	2214      	movs	r2, #20
 8018008:	4619      	mov	r1, r3
 801800a:	f002 fc72 	bl	801a8f2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801800e:	2101      	movs	r1, #1
 8018010:	69b8      	ldr	r0, [r7, #24]
 8018012:	f7ff fbb7 	bl	8017784 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018016:	69b8      	ldr	r0, [r7, #24]
 8018018:	f7f7 fa1e 	bl	800f458 <pbuf_clen>
 801801c:	4603      	mov	r3, r0
 801801e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018020:	8bfa      	ldrh	r2, [r7, #30]
 8018022:	8a7b      	ldrh	r3, [r7, #18]
 8018024:	4413      	add	r3, r2
 8018026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801802a:	db05      	blt.n	8018038 <ip_reass_free_complete_datagram+0x98>
 801802c:	4b27      	ldr	r3, [pc, #156]	@ (80180cc <ip_reass_free_complete_datagram+0x12c>)
 801802e:	22bc      	movs	r2, #188	@ 0xbc
 8018030:	492a      	ldr	r1, [pc, #168]	@ (80180dc <ip_reass_free_complete_datagram+0x13c>)
 8018032:	4828      	ldr	r0, [pc, #160]	@ (80180d4 <ip_reass_free_complete_datagram+0x134>)
 8018034:	f002 f9d4 	bl	801a3e0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018038:	8bfa      	ldrh	r2, [r7, #30]
 801803a:	8a7b      	ldrh	r3, [r7, #18]
 801803c:	4413      	add	r3, r2
 801803e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018040:	69b8      	ldr	r0, [r7, #24]
 8018042:	f7f7 f97b 	bl	800f33c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	685b      	ldr	r3, [r3, #4]
 801804a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801804c:	e01f      	b.n	801808e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801804e:	69bb      	ldr	r3, [r7, #24]
 8018050:	685b      	ldr	r3, [r3, #4]
 8018052:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018054:	69bb      	ldr	r3, [r7, #24]
 8018056:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018058:	697b      	ldr	r3, [r7, #20]
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801805e:	68f8      	ldr	r0, [r7, #12]
 8018060:	f7f7 f9fa 	bl	800f458 <pbuf_clen>
 8018064:	4603      	mov	r3, r0
 8018066:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018068:	8bfa      	ldrh	r2, [r7, #30]
 801806a:	8a7b      	ldrh	r3, [r7, #18]
 801806c:	4413      	add	r3, r2
 801806e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018072:	db05      	blt.n	8018080 <ip_reass_free_complete_datagram+0xe0>
 8018074:	4b15      	ldr	r3, [pc, #84]	@ (80180cc <ip_reass_free_complete_datagram+0x12c>)
 8018076:	22cc      	movs	r2, #204	@ 0xcc
 8018078:	4918      	ldr	r1, [pc, #96]	@ (80180dc <ip_reass_free_complete_datagram+0x13c>)
 801807a:	4816      	ldr	r0, [pc, #88]	@ (80180d4 <ip_reass_free_complete_datagram+0x134>)
 801807c:	f002 f9b0 	bl	801a3e0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018080:	8bfa      	ldrh	r2, [r7, #30]
 8018082:	8a7b      	ldrh	r3, [r7, #18]
 8018084:	4413      	add	r3, r2
 8018086:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018088:	68f8      	ldr	r0, [r7, #12]
 801808a:	f7f7 f957 	bl	800f33c <pbuf_free>
  while (p != NULL) {
 801808e:	69bb      	ldr	r3, [r7, #24]
 8018090:	2b00      	cmp	r3, #0
 8018092:	d1dc      	bne.n	801804e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018094:	6839      	ldr	r1, [r7, #0]
 8018096:	6878      	ldr	r0, [r7, #4]
 8018098:	f000 f8c2 	bl	8018220 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801809c:	4b10      	ldr	r3, [pc, #64]	@ (80180e0 <ip_reass_free_complete_datagram+0x140>)
 801809e:	881b      	ldrh	r3, [r3, #0]
 80180a0:	8bfa      	ldrh	r2, [r7, #30]
 80180a2:	429a      	cmp	r2, r3
 80180a4:	d905      	bls.n	80180b2 <ip_reass_free_complete_datagram+0x112>
 80180a6:	4b09      	ldr	r3, [pc, #36]	@ (80180cc <ip_reass_free_complete_datagram+0x12c>)
 80180a8:	22d2      	movs	r2, #210	@ 0xd2
 80180aa:	490e      	ldr	r1, [pc, #56]	@ (80180e4 <ip_reass_free_complete_datagram+0x144>)
 80180ac:	4809      	ldr	r0, [pc, #36]	@ (80180d4 <ip_reass_free_complete_datagram+0x134>)
 80180ae:	f002 f997 	bl	801a3e0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80180b2:	4b0b      	ldr	r3, [pc, #44]	@ (80180e0 <ip_reass_free_complete_datagram+0x140>)
 80180b4:	881a      	ldrh	r2, [r3, #0]
 80180b6:	8bfb      	ldrh	r3, [r7, #30]
 80180b8:	1ad3      	subs	r3, r2, r3
 80180ba:	b29a      	uxth	r2, r3
 80180bc:	4b08      	ldr	r3, [pc, #32]	@ (80180e0 <ip_reass_free_complete_datagram+0x140>)
 80180be:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80180c0:	8bfb      	ldrh	r3, [r7, #30]
}
 80180c2:	4618      	mov	r0, r3
 80180c4:	3720      	adds	r7, #32
 80180c6:	46bd      	mov	sp, r7
 80180c8:	bd80      	pop	{r7, pc}
 80180ca:	bf00      	nop
 80180cc:	08021238 	.word	0x08021238
 80180d0:	08021274 	.word	0x08021274
 80180d4:	08021280 	.word	0x08021280
 80180d8:	080212a8 	.word	0x080212a8
 80180dc:	080212bc 	.word	0x080212bc
 80180e0:	2000d248 	.word	0x2000d248
 80180e4:	080212dc 	.word	0x080212dc

080180e8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80180e8:	b580      	push	{r7, lr}
 80180ea:	b08a      	sub	sp, #40	@ 0x28
 80180ec:	af00      	add	r7, sp, #0
 80180ee:	6078      	str	r0, [r7, #4]
 80180f0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80180f2:	2300      	movs	r3, #0
 80180f4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80180f6:	2300      	movs	r3, #0
 80180f8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80180fa:	2300      	movs	r3, #0
 80180fc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80180fe:	2300      	movs	r3, #0
 8018100:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018102:	2300      	movs	r3, #0
 8018104:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018106:	4b28      	ldr	r3, [pc, #160]	@ (80181a8 <ip_reass_remove_oldest_datagram+0xc0>)
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801810c:	e030      	b.n	8018170 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801810e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018110:	695a      	ldr	r2, [r3, #20]
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	68db      	ldr	r3, [r3, #12]
 8018116:	429a      	cmp	r2, r3
 8018118:	d10c      	bne.n	8018134 <ip_reass_remove_oldest_datagram+0x4c>
 801811a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801811c:	699a      	ldr	r2, [r3, #24]
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	691b      	ldr	r3, [r3, #16]
 8018122:	429a      	cmp	r2, r3
 8018124:	d106      	bne.n	8018134 <ip_reass_remove_oldest_datagram+0x4c>
 8018126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018128:	899a      	ldrh	r2, [r3, #12]
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	889b      	ldrh	r3, [r3, #4]
 801812e:	b29b      	uxth	r3, r3
 8018130:	429a      	cmp	r2, r3
 8018132:	d014      	beq.n	801815e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018134:	693b      	ldr	r3, [r7, #16]
 8018136:	3301      	adds	r3, #1
 8018138:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801813a:	6a3b      	ldr	r3, [r7, #32]
 801813c:	2b00      	cmp	r3, #0
 801813e:	d104      	bne.n	801814a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018142:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018144:	69fb      	ldr	r3, [r7, #28]
 8018146:	61bb      	str	r3, [r7, #24]
 8018148:	e009      	b.n	801815e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801814a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801814c:	7fda      	ldrb	r2, [r3, #31]
 801814e:	6a3b      	ldr	r3, [r7, #32]
 8018150:	7fdb      	ldrb	r3, [r3, #31]
 8018152:	429a      	cmp	r2, r3
 8018154:	d803      	bhi.n	801815e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018158:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801815a:	69fb      	ldr	r3, [r7, #28]
 801815c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801815e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	2b00      	cmp	r3, #0
 8018164:	d001      	beq.n	801816a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018168:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801816a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8018170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018172:	2b00      	cmp	r3, #0
 8018174:	d1cb      	bne.n	801810e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018176:	6a3b      	ldr	r3, [r7, #32]
 8018178:	2b00      	cmp	r3, #0
 801817a:	d008      	beq.n	801818e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801817c:	69b9      	ldr	r1, [r7, #24]
 801817e:	6a38      	ldr	r0, [r7, #32]
 8018180:	f7ff ff0e 	bl	8017fa0 <ip_reass_free_complete_datagram>
 8018184:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018186:	697a      	ldr	r2, [r7, #20]
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	4413      	add	r3, r2
 801818c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801818e:	697a      	ldr	r2, [r7, #20]
 8018190:	683b      	ldr	r3, [r7, #0]
 8018192:	429a      	cmp	r2, r3
 8018194:	da02      	bge.n	801819c <ip_reass_remove_oldest_datagram+0xb4>
 8018196:	693b      	ldr	r3, [r7, #16]
 8018198:	2b01      	cmp	r3, #1
 801819a:	dcac      	bgt.n	80180f6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801819c:	697b      	ldr	r3, [r7, #20]
}
 801819e:	4618      	mov	r0, r3
 80181a0:	3728      	adds	r7, #40	@ 0x28
 80181a2:	46bd      	mov	sp, r7
 80181a4:	bd80      	pop	{r7, pc}
 80181a6:	bf00      	nop
 80181a8:	2000d244 	.word	0x2000d244

080181ac <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80181ac:	b580      	push	{r7, lr}
 80181ae:	b084      	sub	sp, #16
 80181b0:	af00      	add	r7, sp, #0
 80181b2:	6078      	str	r0, [r7, #4]
 80181b4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80181b6:	2004      	movs	r0, #4
 80181b8:	f7f6 f93c 	bl	800e434 <memp_malloc>
 80181bc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80181be:	68fb      	ldr	r3, [r7, #12]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d110      	bne.n	80181e6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80181c4:	6839      	ldr	r1, [r7, #0]
 80181c6:	6878      	ldr	r0, [r7, #4]
 80181c8:	f7ff ff8e 	bl	80180e8 <ip_reass_remove_oldest_datagram>
 80181cc:	4602      	mov	r2, r0
 80181ce:	683b      	ldr	r3, [r7, #0]
 80181d0:	4293      	cmp	r3, r2
 80181d2:	dc03      	bgt.n	80181dc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80181d4:	2004      	movs	r0, #4
 80181d6:	f7f6 f92d 	bl	800e434 <memp_malloc>
 80181da:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80181dc:	68fb      	ldr	r3, [r7, #12]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d101      	bne.n	80181e6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80181e2:	2300      	movs	r3, #0
 80181e4:	e016      	b.n	8018214 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80181e6:	2220      	movs	r2, #32
 80181e8:	2100      	movs	r1, #0
 80181ea:	68f8      	ldr	r0, [r7, #12]
 80181ec:	f002 fa8a 	bl	801a704 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	220f      	movs	r2, #15
 80181f4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80181f6:	4b09      	ldr	r3, [pc, #36]	@ (801821c <ip_reass_enqueue_new_datagram+0x70>)
 80181f8:	681a      	ldr	r2, [r3, #0]
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80181fe:	4a07      	ldr	r2, [pc, #28]	@ (801821c <ip_reass_enqueue_new_datagram+0x70>)
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018204:	68fb      	ldr	r3, [r7, #12]
 8018206:	3308      	adds	r3, #8
 8018208:	2214      	movs	r2, #20
 801820a:	6879      	ldr	r1, [r7, #4]
 801820c:	4618      	mov	r0, r3
 801820e:	f002 fb70 	bl	801a8f2 <memcpy>
  return ipr;
 8018212:	68fb      	ldr	r3, [r7, #12]
}
 8018214:	4618      	mov	r0, r3
 8018216:	3710      	adds	r7, #16
 8018218:	46bd      	mov	sp, r7
 801821a:	bd80      	pop	{r7, pc}
 801821c:	2000d244 	.word	0x2000d244

08018220 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018220:	b580      	push	{r7, lr}
 8018222:	b082      	sub	sp, #8
 8018224:	af00      	add	r7, sp, #0
 8018226:	6078      	str	r0, [r7, #4]
 8018228:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801822a:	4b10      	ldr	r3, [pc, #64]	@ (801826c <ip_reass_dequeue_datagram+0x4c>)
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	687a      	ldr	r2, [r7, #4]
 8018230:	429a      	cmp	r2, r3
 8018232:	d104      	bne.n	801823e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	4a0c      	ldr	r2, [pc, #48]	@ (801826c <ip_reass_dequeue_datagram+0x4c>)
 801823a:	6013      	str	r3, [r2, #0]
 801823c:	e00d      	b.n	801825a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801823e:	683b      	ldr	r3, [r7, #0]
 8018240:	2b00      	cmp	r3, #0
 8018242:	d106      	bne.n	8018252 <ip_reass_dequeue_datagram+0x32>
 8018244:	4b0a      	ldr	r3, [pc, #40]	@ (8018270 <ip_reass_dequeue_datagram+0x50>)
 8018246:	f240 1245 	movw	r2, #325	@ 0x145
 801824a:	490a      	ldr	r1, [pc, #40]	@ (8018274 <ip_reass_dequeue_datagram+0x54>)
 801824c:	480a      	ldr	r0, [pc, #40]	@ (8018278 <ip_reass_dequeue_datagram+0x58>)
 801824e:	f002 f8c7 	bl	801a3e0 <iprintf>
    prev->next = ipr->next;
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	681a      	ldr	r2, [r3, #0]
 8018256:	683b      	ldr	r3, [r7, #0]
 8018258:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801825a:	6879      	ldr	r1, [r7, #4]
 801825c:	2004      	movs	r0, #4
 801825e:	f7f6 f95f 	bl	800e520 <memp_free>
}
 8018262:	bf00      	nop
 8018264:	3708      	adds	r7, #8
 8018266:	46bd      	mov	sp, r7
 8018268:	bd80      	pop	{r7, pc}
 801826a:	bf00      	nop
 801826c:	2000d244 	.word	0x2000d244
 8018270:	08021238 	.word	0x08021238
 8018274:	08021300 	.word	0x08021300
 8018278:	08021280 	.word	0x08021280

0801827c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801827c:	b580      	push	{r7, lr}
 801827e:	b08c      	sub	sp, #48	@ 0x30
 8018280:	af00      	add	r7, sp, #0
 8018282:	60f8      	str	r0, [r7, #12]
 8018284:	60b9      	str	r1, [r7, #8]
 8018286:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018288:	2300      	movs	r3, #0
 801828a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801828c:	2301      	movs	r3, #1
 801828e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018290:	68bb      	ldr	r3, [r7, #8]
 8018292:	685b      	ldr	r3, [r3, #4]
 8018294:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018296:	69fb      	ldr	r3, [r7, #28]
 8018298:	885b      	ldrh	r3, [r3, #2]
 801829a:	b29b      	uxth	r3, r3
 801829c:	4618      	mov	r0, r3
 801829e:	f7f5 fbf1 	bl	800da84 <lwip_htons>
 80182a2:	4603      	mov	r3, r0
 80182a4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80182a6:	69fb      	ldr	r3, [r7, #28]
 80182a8:	781b      	ldrb	r3, [r3, #0]
 80182aa:	f003 030f 	and.w	r3, r3, #15
 80182ae:	b2db      	uxtb	r3, r3
 80182b0:	009b      	lsls	r3, r3, #2
 80182b2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80182b4:	7e7b      	ldrb	r3, [r7, #25]
 80182b6:	b29b      	uxth	r3, r3
 80182b8:	8b7a      	ldrh	r2, [r7, #26]
 80182ba:	429a      	cmp	r2, r3
 80182bc:	d202      	bcs.n	80182c4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80182be:	f04f 33ff 	mov.w	r3, #4294967295
 80182c2:	e135      	b.n	8018530 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80182c4:	7e7b      	ldrb	r3, [r7, #25]
 80182c6:	b29b      	uxth	r3, r3
 80182c8:	8b7a      	ldrh	r2, [r7, #26]
 80182ca:	1ad3      	subs	r3, r2, r3
 80182cc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80182ce:	69fb      	ldr	r3, [r7, #28]
 80182d0:	88db      	ldrh	r3, [r3, #6]
 80182d2:	b29b      	uxth	r3, r3
 80182d4:	4618      	mov	r0, r3
 80182d6:	f7f5 fbd5 	bl	800da84 <lwip_htons>
 80182da:	4603      	mov	r3, r0
 80182dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80182e0:	b29b      	uxth	r3, r3
 80182e2:	00db      	lsls	r3, r3, #3
 80182e4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80182e6:	68bb      	ldr	r3, [r7, #8]
 80182e8:	685b      	ldr	r3, [r3, #4]
 80182ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80182ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182ee:	2200      	movs	r2, #0
 80182f0:	701a      	strb	r2, [r3, #0]
 80182f2:	2200      	movs	r2, #0
 80182f4:	705a      	strb	r2, [r3, #1]
 80182f6:	2200      	movs	r2, #0
 80182f8:	709a      	strb	r2, [r3, #2]
 80182fa:	2200      	movs	r2, #0
 80182fc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80182fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018300:	8afa      	ldrh	r2, [r7, #22]
 8018302:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018304:	8afa      	ldrh	r2, [r7, #22]
 8018306:	8b7b      	ldrh	r3, [r7, #26]
 8018308:	4413      	add	r3, r2
 801830a:	b29a      	uxth	r2, r3
 801830c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801830e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018312:	88db      	ldrh	r3, [r3, #6]
 8018314:	b29b      	uxth	r3, r3
 8018316:	8afa      	ldrh	r2, [r7, #22]
 8018318:	429a      	cmp	r2, r3
 801831a:	d902      	bls.n	8018322 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801831c:	f04f 33ff 	mov.w	r3, #4294967295
 8018320:	e106      	b.n	8018530 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	685b      	ldr	r3, [r3, #4]
 8018326:	627b      	str	r3, [r7, #36]	@ 0x24
 8018328:	e068      	b.n	80183fc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801832a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801832c:	685b      	ldr	r3, [r3, #4]
 801832e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018332:	889b      	ldrh	r3, [r3, #4]
 8018334:	b29a      	uxth	r2, r3
 8018336:	693b      	ldr	r3, [r7, #16]
 8018338:	889b      	ldrh	r3, [r3, #4]
 801833a:	b29b      	uxth	r3, r3
 801833c:	429a      	cmp	r2, r3
 801833e:	d235      	bcs.n	80183ac <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018344:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8018346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018348:	2b00      	cmp	r3, #0
 801834a:	d020      	beq.n	801838e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801834c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801834e:	889b      	ldrh	r3, [r3, #4]
 8018350:	b29a      	uxth	r2, r3
 8018352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018354:	88db      	ldrh	r3, [r3, #6]
 8018356:	b29b      	uxth	r3, r3
 8018358:	429a      	cmp	r2, r3
 801835a:	d307      	bcc.n	801836c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801835c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801835e:	88db      	ldrh	r3, [r3, #6]
 8018360:	b29a      	uxth	r2, r3
 8018362:	693b      	ldr	r3, [r7, #16]
 8018364:	889b      	ldrh	r3, [r3, #4]
 8018366:	b29b      	uxth	r3, r3
 8018368:	429a      	cmp	r2, r3
 801836a:	d902      	bls.n	8018372 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801836c:	f04f 33ff 	mov.w	r3, #4294967295
 8018370:	e0de      	b.n	8018530 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018374:	68ba      	ldr	r2, [r7, #8]
 8018376:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801837a:	88db      	ldrh	r3, [r3, #6]
 801837c:	b29a      	uxth	r2, r3
 801837e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018380:	889b      	ldrh	r3, [r3, #4]
 8018382:	b29b      	uxth	r3, r3
 8018384:	429a      	cmp	r2, r3
 8018386:	d03d      	beq.n	8018404 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018388:	2300      	movs	r3, #0
 801838a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801838c:	e03a      	b.n	8018404 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801838e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018390:	88db      	ldrh	r3, [r3, #6]
 8018392:	b29a      	uxth	r2, r3
 8018394:	693b      	ldr	r3, [r7, #16]
 8018396:	889b      	ldrh	r3, [r3, #4]
 8018398:	b29b      	uxth	r3, r3
 801839a:	429a      	cmp	r2, r3
 801839c:	d902      	bls.n	80183a4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801839e:	f04f 33ff 	mov.w	r3, #4294967295
 80183a2:	e0c5      	b.n	8018530 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	68ba      	ldr	r2, [r7, #8]
 80183a8:	605a      	str	r2, [r3, #4]
      break;
 80183aa:	e02b      	b.n	8018404 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80183ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183ae:	889b      	ldrh	r3, [r3, #4]
 80183b0:	b29a      	uxth	r2, r3
 80183b2:	693b      	ldr	r3, [r7, #16]
 80183b4:	889b      	ldrh	r3, [r3, #4]
 80183b6:	b29b      	uxth	r3, r3
 80183b8:	429a      	cmp	r2, r3
 80183ba:	d102      	bne.n	80183c2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80183bc:	f04f 33ff 	mov.w	r3, #4294967295
 80183c0:	e0b6      	b.n	8018530 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80183c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183c4:	889b      	ldrh	r3, [r3, #4]
 80183c6:	b29a      	uxth	r2, r3
 80183c8:	693b      	ldr	r3, [r7, #16]
 80183ca:	88db      	ldrh	r3, [r3, #6]
 80183cc:	b29b      	uxth	r3, r3
 80183ce:	429a      	cmp	r2, r3
 80183d0:	d202      	bcs.n	80183d8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80183d2:	f04f 33ff 	mov.w	r3, #4294967295
 80183d6:	e0ab      	b.n	8018530 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80183d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d009      	beq.n	80183f2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80183de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183e0:	88db      	ldrh	r3, [r3, #6]
 80183e2:	b29a      	uxth	r2, r3
 80183e4:	693b      	ldr	r3, [r7, #16]
 80183e6:	889b      	ldrh	r3, [r3, #4]
 80183e8:	b29b      	uxth	r3, r3
 80183ea:	429a      	cmp	r2, r3
 80183ec:	d001      	beq.n	80183f2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80183ee:	2300      	movs	r3, #0
 80183f0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80183f2:	693b      	ldr	r3, [r7, #16]
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80183f8:	693b      	ldr	r3, [r7, #16]
 80183fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80183fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d193      	bne.n	801832a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018402:	e000      	b.n	8018406 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018404:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018408:	2b00      	cmp	r3, #0
 801840a:	d12d      	bne.n	8018468 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801840c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801840e:	2b00      	cmp	r3, #0
 8018410:	d01c      	beq.n	801844c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018414:	88db      	ldrh	r3, [r3, #6]
 8018416:	b29a      	uxth	r2, r3
 8018418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801841a:	889b      	ldrh	r3, [r3, #4]
 801841c:	b29b      	uxth	r3, r3
 801841e:	429a      	cmp	r2, r3
 8018420:	d906      	bls.n	8018430 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018422:	4b45      	ldr	r3, [pc, #276]	@ (8018538 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018424:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8018428:	4944      	ldr	r1, [pc, #272]	@ (801853c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801842a:	4845      	ldr	r0, [pc, #276]	@ (8018540 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801842c:	f001 ffd8 	bl	801a3e0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018432:	68ba      	ldr	r2, [r7, #8]
 8018434:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018438:	88db      	ldrh	r3, [r3, #6]
 801843a:	b29a      	uxth	r2, r3
 801843c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801843e:	889b      	ldrh	r3, [r3, #4]
 8018440:	b29b      	uxth	r3, r3
 8018442:	429a      	cmp	r2, r3
 8018444:	d010      	beq.n	8018468 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018446:	2300      	movs	r3, #0
 8018448:	623b      	str	r3, [r7, #32]
 801844a:	e00d      	b.n	8018468 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	685b      	ldr	r3, [r3, #4]
 8018450:	2b00      	cmp	r3, #0
 8018452:	d006      	beq.n	8018462 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018454:	4b38      	ldr	r3, [pc, #224]	@ (8018538 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018456:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801845a:	493a      	ldr	r1, [pc, #232]	@ (8018544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801845c:	4838      	ldr	r0, [pc, #224]	@ (8018540 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801845e:	f001 ffbf 	bl	801a3e0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	68ba      	ldr	r2, [r7, #8]
 8018466:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	2b00      	cmp	r3, #0
 801846c:	d105      	bne.n	801847a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	7f9b      	ldrb	r3, [r3, #30]
 8018472:	f003 0301 	and.w	r3, r3, #1
 8018476:	2b00      	cmp	r3, #0
 8018478:	d059      	beq.n	801852e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801847a:	6a3b      	ldr	r3, [r7, #32]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d04f      	beq.n	8018520 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	685b      	ldr	r3, [r3, #4]
 8018484:	2b00      	cmp	r3, #0
 8018486:	d006      	beq.n	8018496 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018488:	68fb      	ldr	r3, [r7, #12]
 801848a:	685b      	ldr	r3, [r3, #4]
 801848c:	685b      	ldr	r3, [r3, #4]
 801848e:	889b      	ldrh	r3, [r3, #4]
 8018490:	b29b      	uxth	r3, r3
 8018492:	2b00      	cmp	r3, #0
 8018494:	d002      	beq.n	801849c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018496:	2300      	movs	r3, #0
 8018498:	623b      	str	r3, [r7, #32]
 801849a:	e041      	b.n	8018520 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801849c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801849e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80184a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80184a6:	e012      	b.n	80184ce <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80184a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184aa:	685b      	ldr	r3, [r3, #4]
 80184ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80184ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184b0:	88db      	ldrh	r3, [r3, #6]
 80184b2:	b29a      	uxth	r2, r3
 80184b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184b6:	889b      	ldrh	r3, [r3, #4]
 80184b8:	b29b      	uxth	r3, r3
 80184ba:	429a      	cmp	r2, r3
 80184bc:	d002      	beq.n	80184c4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80184be:	2300      	movs	r3, #0
 80184c0:	623b      	str	r3, [r7, #32]
            break;
 80184c2:	e007      	b.n	80184d4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80184c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184c6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80184c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80184ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d1e9      	bne.n	80184a8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80184d4:	6a3b      	ldr	r3, [r7, #32]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d022      	beq.n	8018520 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80184da:	68fb      	ldr	r3, [r7, #12]
 80184dc:	685b      	ldr	r3, [r3, #4]
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d106      	bne.n	80184f0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80184e2:	4b15      	ldr	r3, [pc, #84]	@ (8018538 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80184e4:	f240 12df 	movw	r2, #479	@ 0x1df
 80184e8:	4917      	ldr	r1, [pc, #92]	@ (8018548 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80184ea:	4815      	ldr	r0, [pc, #84]	@ (8018540 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80184ec:	f001 ff78 	bl	801a3e0 <iprintf>
          LWIP_ASSERT("sanity check",
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	685b      	ldr	r3, [r3, #4]
 80184f4:	685b      	ldr	r3, [r3, #4]
 80184f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80184f8:	429a      	cmp	r2, r3
 80184fa:	d106      	bne.n	801850a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80184fc:	4b0e      	ldr	r3, [pc, #56]	@ (8018538 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80184fe:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8018502:	4911      	ldr	r1, [pc, #68]	@ (8018548 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018504:	480e      	ldr	r0, [pc, #56]	@ (8018540 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018506:	f001 ff6b 	bl	801a3e0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801850a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	2b00      	cmp	r3, #0
 8018510:	d006      	beq.n	8018520 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018512:	4b09      	ldr	r3, [pc, #36]	@ (8018538 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018514:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8018518:	490c      	ldr	r1, [pc, #48]	@ (801854c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801851a:	4809      	ldr	r0, [pc, #36]	@ (8018540 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801851c:	f001 ff60 	bl	801a3e0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018520:	6a3b      	ldr	r3, [r7, #32]
 8018522:	2b00      	cmp	r3, #0
 8018524:	bf14      	ite	ne
 8018526:	2301      	movne	r3, #1
 8018528:	2300      	moveq	r3, #0
 801852a:	b2db      	uxtb	r3, r3
 801852c:	e000      	b.n	8018530 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801852e:	2300      	movs	r3, #0
}
 8018530:	4618      	mov	r0, r3
 8018532:	3730      	adds	r7, #48	@ 0x30
 8018534:	46bd      	mov	sp, r7
 8018536:	bd80      	pop	{r7, pc}
 8018538:	08021238 	.word	0x08021238
 801853c:	0802131c 	.word	0x0802131c
 8018540:	08021280 	.word	0x08021280
 8018544:	0802133c 	.word	0x0802133c
 8018548:	08021374 	.word	0x08021374
 801854c:	08021384 	.word	0x08021384

08018550 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018550:	b580      	push	{r7, lr}
 8018552:	b08e      	sub	sp, #56	@ 0x38
 8018554:	af00      	add	r7, sp, #0
 8018556:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	685b      	ldr	r3, [r3, #4]
 801855c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801855e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018560:	781b      	ldrb	r3, [r3, #0]
 8018562:	f003 030f 	and.w	r3, r3, #15
 8018566:	b2db      	uxtb	r3, r3
 8018568:	009b      	lsls	r3, r3, #2
 801856a:	b2db      	uxtb	r3, r3
 801856c:	2b14      	cmp	r3, #20
 801856e:	f040 8171 	bne.w	8018854 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018574:	88db      	ldrh	r3, [r3, #6]
 8018576:	b29b      	uxth	r3, r3
 8018578:	4618      	mov	r0, r3
 801857a:	f7f5 fa83 	bl	800da84 <lwip_htons>
 801857e:	4603      	mov	r3, r0
 8018580:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018584:	b29b      	uxth	r3, r3
 8018586:	00db      	lsls	r3, r3, #3
 8018588:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801858a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801858c:	885b      	ldrh	r3, [r3, #2]
 801858e:	b29b      	uxth	r3, r3
 8018590:	4618      	mov	r0, r3
 8018592:	f7f5 fa77 	bl	800da84 <lwip_htons>
 8018596:	4603      	mov	r3, r0
 8018598:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801859a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801859c:	781b      	ldrb	r3, [r3, #0]
 801859e:	f003 030f 	and.w	r3, r3, #15
 80185a2:	b2db      	uxtb	r3, r3
 80185a4:	009b      	lsls	r3, r3, #2
 80185a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80185aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80185ae:	b29b      	uxth	r3, r3
 80185b0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80185b2:	429a      	cmp	r2, r3
 80185b4:	f0c0 8150 	bcc.w	8018858 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80185b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80185bc:	b29b      	uxth	r3, r3
 80185be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80185c0:	1ad3      	subs	r3, r2, r3
 80185c2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80185c4:	6878      	ldr	r0, [r7, #4]
 80185c6:	f7f6 ff47 	bl	800f458 <pbuf_clen>
 80185ca:	4603      	mov	r3, r0
 80185cc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80185ce:	4b8c      	ldr	r3, [pc, #560]	@ (8018800 <ip4_reass+0x2b0>)
 80185d0:	881b      	ldrh	r3, [r3, #0]
 80185d2:	461a      	mov	r2, r3
 80185d4:	8c3b      	ldrh	r3, [r7, #32]
 80185d6:	4413      	add	r3, r2
 80185d8:	2b0a      	cmp	r3, #10
 80185da:	dd10      	ble.n	80185fe <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80185dc:	8c3b      	ldrh	r3, [r7, #32]
 80185de:	4619      	mov	r1, r3
 80185e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80185e2:	f7ff fd81 	bl	80180e8 <ip_reass_remove_oldest_datagram>
 80185e6:	4603      	mov	r3, r0
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	f000 8137 	beq.w	801885c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80185ee:	4b84      	ldr	r3, [pc, #528]	@ (8018800 <ip4_reass+0x2b0>)
 80185f0:	881b      	ldrh	r3, [r3, #0]
 80185f2:	461a      	mov	r2, r3
 80185f4:	8c3b      	ldrh	r3, [r7, #32]
 80185f6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80185f8:	2b0a      	cmp	r3, #10
 80185fa:	f300 812f 	bgt.w	801885c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80185fe:	4b81      	ldr	r3, [pc, #516]	@ (8018804 <ip4_reass+0x2b4>)
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	633b      	str	r3, [r7, #48]	@ 0x30
 8018604:	e015      	b.n	8018632 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018608:	695a      	ldr	r2, [r3, #20]
 801860a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801860c:	68db      	ldr	r3, [r3, #12]
 801860e:	429a      	cmp	r2, r3
 8018610:	d10c      	bne.n	801862c <ip4_reass+0xdc>
 8018612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018614:	699a      	ldr	r2, [r3, #24]
 8018616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018618:	691b      	ldr	r3, [r3, #16]
 801861a:	429a      	cmp	r2, r3
 801861c:	d106      	bne.n	801862c <ip4_reass+0xdc>
 801861e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018620:	899a      	ldrh	r2, [r3, #12]
 8018622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018624:	889b      	ldrh	r3, [r3, #4]
 8018626:	b29b      	uxth	r3, r3
 8018628:	429a      	cmp	r2, r3
 801862a:	d006      	beq.n	801863a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801862c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	633b      	str	r3, [r7, #48]	@ 0x30
 8018632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018634:	2b00      	cmp	r3, #0
 8018636:	d1e6      	bne.n	8018606 <ip4_reass+0xb6>
 8018638:	e000      	b.n	801863c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801863a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801863c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801863e:	2b00      	cmp	r3, #0
 8018640:	d109      	bne.n	8018656 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018642:	8c3b      	ldrh	r3, [r7, #32]
 8018644:	4619      	mov	r1, r3
 8018646:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018648:	f7ff fdb0 	bl	80181ac <ip_reass_enqueue_new_datagram>
 801864c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801864e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018650:	2b00      	cmp	r3, #0
 8018652:	d11c      	bne.n	801868e <ip4_reass+0x13e>
      goto nullreturn;
 8018654:	e105      	b.n	8018862 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018658:	88db      	ldrh	r3, [r3, #6]
 801865a:	b29b      	uxth	r3, r3
 801865c:	4618      	mov	r0, r3
 801865e:	f7f5 fa11 	bl	800da84 <lwip_htons>
 8018662:	4603      	mov	r3, r0
 8018664:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018668:	2b00      	cmp	r3, #0
 801866a:	d110      	bne.n	801868e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801866c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801866e:	89db      	ldrh	r3, [r3, #14]
 8018670:	4618      	mov	r0, r3
 8018672:	f7f5 fa07 	bl	800da84 <lwip_htons>
 8018676:	4603      	mov	r3, r0
 8018678:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801867c:	2b00      	cmp	r3, #0
 801867e:	d006      	beq.n	801868e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018682:	3308      	adds	r3, #8
 8018684:	2214      	movs	r2, #20
 8018686:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018688:	4618      	mov	r0, r3
 801868a:	f002 f932 	bl	801a8f2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801868e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018690:	88db      	ldrh	r3, [r3, #6]
 8018692:	b29b      	uxth	r3, r3
 8018694:	f003 0320 	and.w	r3, r3, #32
 8018698:	2b00      	cmp	r3, #0
 801869a:	bf0c      	ite	eq
 801869c:	2301      	moveq	r3, #1
 801869e:	2300      	movne	r3, #0
 80186a0:	b2db      	uxtb	r3, r3
 80186a2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80186a4:	69fb      	ldr	r3, [r7, #28]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d00e      	beq.n	80186c8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80186aa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80186ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80186ae:	4413      	add	r3, r2
 80186b0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80186b2:	8b7a      	ldrh	r2, [r7, #26]
 80186b4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80186b6:	429a      	cmp	r2, r3
 80186b8:	f0c0 80a0 	bcc.w	80187fc <ip4_reass+0x2ac>
 80186bc:	8b7b      	ldrh	r3, [r7, #26]
 80186be:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80186c2:	4293      	cmp	r3, r2
 80186c4:	f200 809a 	bhi.w	80187fc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80186c8:	69fa      	ldr	r2, [r7, #28]
 80186ca:	6879      	ldr	r1, [r7, #4]
 80186cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80186ce:	f7ff fdd5 	bl	801827c <ip_reass_chain_frag_into_datagram_and_validate>
 80186d2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80186d4:	697b      	ldr	r3, [r7, #20]
 80186d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186da:	f000 809b 	beq.w	8018814 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80186de:	4b48      	ldr	r3, [pc, #288]	@ (8018800 <ip4_reass+0x2b0>)
 80186e0:	881a      	ldrh	r2, [r3, #0]
 80186e2:	8c3b      	ldrh	r3, [r7, #32]
 80186e4:	4413      	add	r3, r2
 80186e6:	b29a      	uxth	r2, r3
 80186e8:	4b45      	ldr	r3, [pc, #276]	@ (8018800 <ip4_reass+0x2b0>)
 80186ea:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80186ec:	69fb      	ldr	r3, [r7, #28]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d00d      	beq.n	801870e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80186f2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80186f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80186f6:	4413      	add	r3, r2
 80186f8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80186fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186fc:	8a7a      	ldrh	r2, [r7, #18]
 80186fe:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018702:	7f9b      	ldrb	r3, [r3, #30]
 8018704:	f043 0301 	orr.w	r3, r3, #1
 8018708:	b2da      	uxtb	r2, r3
 801870a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801870c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801870e:	697b      	ldr	r3, [r7, #20]
 8018710:	2b01      	cmp	r3, #1
 8018712:	d171      	bne.n	80187f8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018716:	8b9b      	ldrh	r3, [r3, #28]
 8018718:	3314      	adds	r3, #20
 801871a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801871c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801871e:	685b      	ldr	r3, [r3, #4]
 8018720:	685b      	ldr	r3, [r3, #4]
 8018722:	681b      	ldr	r3, [r3, #0]
 8018724:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018728:	685b      	ldr	r3, [r3, #4]
 801872a:	685b      	ldr	r3, [r3, #4]
 801872c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801872e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018730:	3308      	adds	r3, #8
 8018732:	2214      	movs	r2, #20
 8018734:	4619      	mov	r1, r3
 8018736:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018738:	f002 f8db 	bl	801a8f2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801873c:	8a3b      	ldrh	r3, [r7, #16]
 801873e:	4618      	mov	r0, r3
 8018740:	f7f5 f9a0 	bl	800da84 <lwip_htons>
 8018744:	4603      	mov	r3, r0
 8018746:	461a      	mov	r2, r3
 8018748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801874a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801874c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801874e:	2200      	movs	r2, #0
 8018750:	719a      	strb	r2, [r3, #6]
 8018752:	2200      	movs	r2, #0
 8018754:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018758:	2200      	movs	r2, #0
 801875a:	729a      	strb	r2, [r3, #10]
 801875c:	2200      	movs	r2, #0
 801875e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018762:	685b      	ldr	r3, [r3, #4]
 8018764:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018766:	e00d      	b.n	8018784 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801876a:	685b      	ldr	r3, [r3, #4]
 801876c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801876e:	2114      	movs	r1, #20
 8018770:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8018772:	f7f6 fd2b 	bl	800f1cc <pbuf_remove_header>
      pbuf_cat(p, r);
 8018776:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018778:	6878      	ldr	r0, [r7, #4]
 801877a:	f7f6 fead 	bl	800f4d8 <pbuf_cat>
      r = iprh->next_pbuf;
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8018784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018786:	2b00      	cmp	r3, #0
 8018788:	d1ee      	bne.n	8018768 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801878a:	4b1e      	ldr	r3, [pc, #120]	@ (8018804 <ip4_reass+0x2b4>)
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018790:	429a      	cmp	r2, r3
 8018792:	d102      	bne.n	801879a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018794:	2300      	movs	r3, #0
 8018796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018798:	e010      	b.n	80187bc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801879a:	4b1a      	ldr	r3, [pc, #104]	@ (8018804 <ip4_reass+0x2b4>)
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80187a0:	e007      	b.n	80187b2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80187a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80187a8:	429a      	cmp	r2, r3
 80187aa:	d006      	beq.n	80187ba <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80187ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187ae:	681b      	ldr	r3, [r3, #0]
 80187b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80187b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d1f4      	bne.n	80187a2 <ip4_reass+0x252>
 80187b8:	e000      	b.n	80187bc <ip4_reass+0x26c>
          break;
 80187ba:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80187bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80187be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80187c0:	f7ff fd2e 	bl	8018220 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80187c4:	6878      	ldr	r0, [r7, #4]
 80187c6:	f7f6 fe47 	bl	800f458 <pbuf_clen>
 80187ca:	4603      	mov	r3, r0
 80187cc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80187ce:	4b0c      	ldr	r3, [pc, #48]	@ (8018800 <ip4_reass+0x2b0>)
 80187d0:	881b      	ldrh	r3, [r3, #0]
 80187d2:	8c3a      	ldrh	r2, [r7, #32]
 80187d4:	429a      	cmp	r2, r3
 80187d6:	d906      	bls.n	80187e6 <ip4_reass+0x296>
 80187d8:	4b0b      	ldr	r3, [pc, #44]	@ (8018808 <ip4_reass+0x2b8>)
 80187da:	f240 229b 	movw	r2, #667	@ 0x29b
 80187de:	490b      	ldr	r1, [pc, #44]	@ (801880c <ip4_reass+0x2bc>)
 80187e0:	480b      	ldr	r0, [pc, #44]	@ (8018810 <ip4_reass+0x2c0>)
 80187e2:	f001 fdfd 	bl	801a3e0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80187e6:	4b06      	ldr	r3, [pc, #24]	@ (8018800 <ip4_reass+0x2b0>)
 80187e8:	881a      	ldrh	r2, [r3, #0]
 80187ea:	8c3b      	ldrh	r3, [r7, #32]
 80187ec:	1ad3      	subs	r3, r2, r3
 80187ee:	b29a      	uxth	r2, r3
 80187f0:	4b03      	ldr	r3, [pc, #12]	@ (8018800 <ip4_reass+0x2b0>)
 80187f2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	e038      	b.n	801886a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80187f8:	2300      	movs	r3, #0
 80187fa:	e036      	b.n	801886a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80187fc:	bf00      	nop
 80187fe:	e00a      	b.n	8018816 <ip4_reass+0x2c6>
 8018800:	2000d248 	.word	0x2000d248
 8018804:	2000d244 	.word	0x2000d244
 8018808:	08021238 	.word	0x08021238
 801880c:	080213a8 	.word	0x080213a8
 8018810:	08021280 	.word	0x08021280
    goto nullreturn_ipr;
 8018814:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018818:	2b00      	cmp	r3, #0
 801881a:	d106      	bne.n	801882a <ip4_reass+0x2da>
 801881c:	4b15      	ldr	r3, [pc, #84]	@ (8018874 <ip4_reass+0x324>)
 801881e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8018822:	4915      	ldr	r1, [pc, #84]	@ (8018878 <ip4_reass+0x328>)
 8018824:	4815      	ldr	r0, [pc, #84]	@ (801887c <ip4_reass+0x32c>)
 8018826:	f001 fddb 	bl	801a3e0 <iprintf>
  if (ipr->p == NULL) {
 801882a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801882c:	685b      	ldr	r3, [r3, #4]
 801882e:	2b00      	cmp	r3, #0
 8018830:	d116      	bne.n	8018860 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018832:	4b13      	ldr	r3, [pc, #76]	@ (8018880 <ip4_reass+0x330>)
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018838:	429a      	cmp	r2, r3
 801883a:	d006      	beq.n	801884a <ip4_reass+0x2fa>
 801883c:	4b0d      	ldr	r3, [pc, #52]	@ (8018874 <ip4_reass+0x324>)
 801883e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8018842:	4910      	ldr	r1, [pc, #64]	@ (8018884 <ip4_reass+0x334>)
 8018844:	480d      	ldr	r0, [pc, #52]	@ (801887c <ip4_reass+0x32c>)
 8018846:	f001 fdcb 	bl	801a3e0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801884a:	2100      	movs	r1, #0
 801884c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801884e:	f7ff fce7 	bl	8018220 <ip_reass_dequeue_datagram>
 8018852:	e006      	b.n	8018862 <ip4_reass+0x312>
    goto nullreturn;
 8018854:	bf00      	nop
 8018856:	e004      	b.n	8018862 <ip4_reass+0x312>
    goto nullreturn;
 8018858:	bf00      	nop
 801885a:	e002      	b.n	8018862 <ip4_reass+0x312>
      goto nullreturn;
 801885c:	bf00      	nop
 801885e:	e000      	b.n	8018862 <ip4_reass+0x312>
  }

nullreturn:
 8018860:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018862:	6878      	ldr	r0, [r7, #4]
 8018864:	f7f6 fd6a 	bl	800f33c <pbuf_free>
  return NULL;
 8018868:	2300      	movs	r3, #0
}
 801886a:	4618      	mov	r0, r3
 801886c:	3738      	adds	r7, #56	@ 0x38
 801886e:	46bd      	mov	sp, r7
 8018870:	bd80      	pop	{r7, pc}
 8018872:	bf00      	nop
 8018874:	08021238 	.word	0x08021238
 8018878:	080213c4 	.word	0x080213c4
 801887c:	08021280 	.word	0x08021280
 8018880:	2000d244 	.word	0x2000d244
 8018884:	080213d0 	.word	0x080213d0

08018888 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018888:	b580      	push	{r7, lr}
 801888a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801888c:	2005      	movs	r0, #5
 801888e:	f7f5 fdd1 	bl	800e434 <memp_malloc>
 8018892:	4603      	mov	r3, r0
}
 8018894:	4618      	mov	r0, r3
 8018896:	bd80      	pop	{r7, pc}

08018898 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018898:	b580      	push	{r7, lr}
 801889a:	b082      	sub	sp, #8
 801889c:	af00      	add	r7, sp, #0
 801889e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d106      	bne.n	80188b4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80188a6:	4b07      	ldr	r3, [pc, #28]	@ (80188c4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80188a8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80188ac:	4906      	ldr	r1, [pc, #24]	@ (80188c8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80188ae:	4807      	ldr	r0, [pc, #28]	@ (80188cc <ip_frag_free_pbuf_custom_ref+0x34>)
 80188b0:	f001 fd96 	bl	801a3e0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80188b4:	6879      	ldr	r1, [r7, #4]
 80188b6:	2005      	movs	r0, #5
 80188b8:	f7f5 fe32 	bl	800e520 <memp_free>
}
 80188bc:	bf00      	nop
 80188be:	3708      	adds	r7, #8
 80188c0:	46bd      	mov	sp, r7
 80188c2:	bd80      	pop	{r7, pc}
 80188c4:	08021238 	.word	0x08021238
 80188c8:	080213f0 	.word	0x080213f0
 80188cc:	08021280 	.word	0x08021280

080188d0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80188d0:	b580      	push	{r7, lr}
 80188d2:	b084      	sub	sp, #16
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	2b00      	cmp	r3, #0
 80188e0:	d106      	bne.n	80188f0 <ipfrag_free_pbuf_custom+0x20>
 80188e2:	4b11      	ldr	r3, [pc, #68]	@ (8018928 <ipfrag_free_pbuf_custom+0x58>)
 80188e4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80188e8:	4910      	ldr	r1, [pc, #64]	@ (801892c <ipfrag_free_pbuf_custom+0x5c>)
 80188ea:	4811      	ldr	r0, [pc, #68]	@ (8018930 <ipfrag_free_pbuf_custom+0x60>)
 80188ec:	f001 fd78 	bl	801a3e0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80188f0:	68fa      	ldr	r2, [r7, #12]
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	429a      	cmp	r2, r3
 80188f6:	d006      	beq.n	8018906 <ipfrag_free_pbuf_custom+0x36>
 80188f8:	4b0b      	ldr	r3, [pc, #44]	@ (8018928 <ipfrag_free_pbuf_custom+0x58>)
 80188fa:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80188fe:	490d      	ldr	r1, [pc, #52]	@ (8018934 <ipfrag_free_pbuf_custom+0x64>)
 8018900:	480b      	ldr	r0, [pc, #44]	@ (8018930 <ipfrag_free_pbuf_custom+0x60>)
 8018902:	f001 fd6d 	bl	801a3e0 <iprintf>
  if (pcr->original != NULL) {
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	695b      	ldr	r3, [r3, #20]
 801890a:	2b00      	cmp	r3, #0
 801890c:	d004      	beq.n	8018918 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	695b      	ldr	r3, [r3, #20]
 8018912:	4618      	mov	r0, r3
 8018914:	f7f6 fd12 	bl	800f33c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018918:	68f8      	ldr	r0, [r7, #12]
 801891a:	f7ff ffbd 	bl	8018898 <ip_frag_free_pbuf_custom_ref>
}
 801891e:	bf00      	nop
 8018920:	3710      	adds	r7, #16
 8018922:	46bd      	mov	sp, r7
 8018924:	bd80      	pop	{r7, pc}
 8018926:	bf00      	nop
 8018928:	08021238 	.word	0x08021238
 801892c:	080213fc 	.word	0x080213fc
 8018930:	08021280 	.word	0x08021280
 8018934:	08021408 	.word	0x08021408

08018938 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018938:	b580      	push	{r7, lr}
 801893a:	b094      	sub	sp, #80	@ 0x50
 801893c:	af02      	add	r7, sp, #8
 801893e:	60f8      	str	r0, [r7, #12]
 8018940:	60b9      	str	r1, [r7, #8]
 8018942:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018944:	2300      	movs	r3, #0
 8018946:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801894a:	68bb      	ldr	r3, [r7, #8]
 801894c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801894e:	3b14      	subs	r3, #20
 8018950:	2b00      	cmp	r3, #0
 8018952:	da00      	bge.n	8018956 <ip4_frag+0x1e>
 8018954:	3307      	adds	r3, #7
 8018956:	10db      	asrs	r3, r3, #3
 8018958:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801895a:	2314      	movs	r3, #20
 801895c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	685b      	ldr	r3, [r3, #4]
 8018962:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8018964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018966:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801896a:	781b      	ldrb	r3, [r3, #0]
 801896c:	f003 030f 	and.w	r3, r3, #15
 8018970:	b2db      	uxtb	r3, r3
 8018972:	009b      	lsls	r3, r3, #2
 8018974:	b2db      	uxtb	r3, r3
 8018976:	2b14      	cmp	r3, #20
 8018978:	d002      	beq.n	8018980 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801897a:	f06f 0305 	mvn.w	r3, #5
 801897e:	e110      	b.n	8018ba2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018980:	68fb      	ldr	r3, [r7, #12]
 8018982:	895b      	ldrh	r3, [r3, #10]
 8018984:	2b13      	cmp	r3, #19
 8018986:	d809      	bhi.n	801899c <ip4_frag+0x64>
 8018988:	4b88      	ldr	r3, [pc, #544]	@ (8018bac <ip4_frag+0x274>)
 801898a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801898e:	4988      	ldr	r1, [pc, #544]	@ (8018bb0 <ip4_frag+0x278>)
 8018990:	4888      	ldr	r0, [pc, #544]	@ (8018bb4 <ip4_frag+0x27c>)
 8018992:	f001 fd25 	bl	801a3e0 <iprintf>
 8018996:	f06f 0305 	mvn.w	r3, #5
 801899a:	e102      	b.n	8018ba2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801899c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801899e:	88db      	ldrh	r3, [r3, #6]
 80189a0:	b29b      	uxth	r3, r3
 80189a2:	4618      	mov	r0, r3
 80189a4:	f7f5 f86e 	bl	800da84 <lwip_htons>
 80189a8:	4603      	mov	r3, r0
 80189aa:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80189ac:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80189ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80189b2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80189b6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80189b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80189bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80189be:	68fb      	ldr	r3, [r7, #12]
 80189c0:	891b      	ldrh	r3, [r3, #8]
 80189c2:	3b14      	subs	r3, #20
 80189c4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80189c8:	e0e1      	b.n	8018b8e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80189ca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80189cc:	00db      	lsls	r3, r3, #3
 80189ce:	b29b      	uxth	r3, r3
 80189d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80189d4:	4293      	cmp	r3, r2
 80189d6:	bf28      	it	cs
 80189d8:	4613      	movcs	r3, r2
 80189da:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80189dc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80189e0:	2114      	movs	r1, #20
 80189e2:	200e      	movs	r0, #14
 80189e4:	f7f6 f994 	bl	800ed10 <pbuf_alloc>
 80189e8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80189ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	f000 80d5 	beq.w	8018b9c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80189f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189f4:	895b      	ldrh	r3, [r3, #10]
 80189f6:	2b13      	cmp	r3, #19
 80189f8:	d806      	bhi.n	8018a08 <ip4_frag+0xd0>
 80189fa:	4b6c      	ldr	r3, [pc, #432]	@ (8018bac <ip4_frag+0x274>)
 80189fc:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8018a00:	496d      	ldr	r1, [pc, #436]	@ (8018bb8 <ip4_frag+0x280>)
 8018a02:	486c      	ldr	r0, [pc, #432]	@ (8018bb4 <ip4_frag+0x27c>)
 8018a04:	f001 fcec 	bl	801a3e0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a0a:	685b      	ldr	r3, [r3, #4]
 8018a0c:	2214      	movs	r2, #20
 8018a0e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018a10:	4618      	mov	r0, r3
 8018a12:	f001 ff6e 	bl	801a8f2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a18:	685b      	ldr	r3, [r3, #4]
 8018a1a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8018a1c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018a1e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8018a22:	e064      	b.n	8018aee <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018a24:	68fb      	ldr	r3, [r7, #12]
 8018a26:	895a      	ldrh	r2, [r3, #10]
 8018a28:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018a2a:	1ad3      	subs	r3, r2, r3
 8018a2c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018a2e:	68fb      	ldr	r3, [r7, #12]
 8018a30:	895b      	ldrh	r3, [r3, #10]
 8018a32:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018a34:	429a      	cmp	r2, r3
 8018a36:	d906      	bls.n	8018a46 <ip4_frag+0x10e>
 8018a38:	4b5c      	ldr	r3, [pc, #368]	@ (8018bac <ip4_frag+0x274>)
 8018a3a:	f240 322d 	movw	r2, #813	@ 0x32d
 8018a3e:	495f      	ldr	r1, [pc, #380]	@ (8018bbc <ip4_frag+0x284>)
 8018a40:	485c      	ldr	r0, [pc, #368]	@ (8018bb4 <ip4_frag+0x27c>)
 8018a42:	f001 fccd 	bl	801a3e0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018a46:	8bfa      	ldrh	r2, [r7, #30]
 8018a48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018a4c:	4293      	cmp	r3, r2
 8018a4e:	bf28      	it	cs
 8018a50:	4613      	movcs	r3, r2
 8018a52:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018a56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d105      	bne.n	8018a6a <ip4_frag+0x132>
        poff = 0;
 8018a5e:	2300      	movs	r3, #0
 8018a60:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8018a62:	68fb      	ldr	r3, [r7, #12]
 8018a64:	681b      	ldr	r3, [r3, #0]
 8018a66:	60fb      	str	r3, [r7, #12]
        continue;
 8018a68:	e041      	b.n	8018aee <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018a6a:	f7ff ff0d 	bl	8018888 <ip_frag_alloc_pbuf_custom_ref>
 8018a6e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018a70:	69bb      	ldr	r3, [r7, #24]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d103      	bne.n	8018a7e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018a76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018a78:	f7f6 fc60 	bl	800f33c <pbuf_free>
        goto memerr;
 8018a7c:	e08f      	b.n	8018b9e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018a7e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018a84:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018a86:	4413      	add	r3, r2
 8018a88:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8018a8c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8018a90:	9201      	str	r2, [sp, #4]
 8018a92:	9300      	str	r3, [sp, #0]
 8018a94:	4603      	mov	r3, r0
 8018a96:	2241      	movs	r2, #65	@ 0x41
 8018a98:	2000      	movs	r0, #0
 8018a9a:	f7f6 fa63 	bl	800ef64 <pbuf_alloced_custom>
 8018a9e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018aa0:	697b      	ldr	r3, [r7, #20]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d106      	bne.n	8018ab4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018aa6:	69b8      	ldr	r0, [r7, #24]
 8018aa8:	f7ff fef6 	bl	8018898 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018aac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018aae:	f7f6 fc45 	bl	800f33c <pbuf_free>
        goto memerr;
 8018ab2:	e074      	b.n	8018b9e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018ab4:	68f8      	ldr	r0, [r7, #12]
 8018ab6:	f7f6 fce7 	bl	800f488 <pbuf_ref>
      pcr->original = p;
 8018aba:	69bb      	ldr	r3, [r7, #24]
 8018abc:	68fa      	ldr	r2, [r7, #12]
 8018abe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018ac0:	69bb      	ldr	r3, [r7, #24]
 8018ac2:	4a3f      	ldr	r2, [pc, #252]	@ (8018bc0 <ip4_frag+0x288>)
 8018ac4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018ac6:	6979      	ldr	r1, [r7, #20]
 8018ac8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018aca:	f7f6 fd05 	bl	800f4d8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018ace:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8018ad2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018ad6:	1ad3      	subs	r3, r2, r3
 8018ad8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8018adc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	d004      	beq.n	8018aee <ip4_frag+0x1b6>
        poff = 0;
 8018ae4:	2300      	movs	r3, #0
 8018ae6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018aee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d196      	bne.n	8018a24 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018af6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018af8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018afc:	4413      	add	r3, r2
 8018afe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018b00:	68bb      	ldr	r3, [r7, #8]
 8018b02:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8018b04:	f1a3 0213 	sub.w	r2, r3, #19
 8018b08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018b0c:	429a      	cmp	r2, r3
 8018b0e:	bfcc      	ite	gt
 8018b10:	2301      	movgt	r3, #1
 8018b12:	2300      	movle	r3, #0
 8018b14:	b2db      	uxtb	r3, r3
 8018b16:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018b18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018b1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018b20:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8018b22:	6a3b      	ldr	r3, [r7, #32]
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d002      	beq.n	8018b2e <ip4_frag+0x1f6>
 8018b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d003      	beq.n	8018b36 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018b2e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018b30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8018b34:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018b36:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018b38:	4618      	mov	r0, r3
 8018b3a:	f7f4 ffa3 	bl	800da84 <lwip_htons>
 8018b3e:	4603      	mov	r3, r0
 8018b40:	461a      	mov	r2, r3
 8018b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b44:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018b46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018b48:	3314      	adds	r3, #20
 8018b4a:	b29b      	uxth	r3, r3
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	f7f4 ff99 	bl	800da84 <lwip_htons>
 8018b52:	4603      	mov	r3, r0
 8018b54:	461a      	mov	r2, r3
 8018b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b58:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b5c:	2200      	movs	r2, #0
 8018b5e:	729a      	strb	r2, [r3, #10]
 8018b60:	2200      	movs	r2, #0
 8018b62:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018b64:	68bb      	ldr	r3, [r7, #8]
 8018b66:	695b      	ldr	r3, [r3, #20]
 8018b68:	687a      	ldr	r2, [r7, #4]
 8018b6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018b6c:	68b8      	ldr	r0, [r7, #8]
 8018b6e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018b70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018b72:	f7f6 fbe3 	bl	800f33c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018b76:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018b7a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018b7c:	1ad3      	subs	r3, r2, r3
 8018b7e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8018b82:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8018b86:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018b88:	4413      	add	r3, r2
 8018b8a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8018b8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	f47f af19 	bne.w	80189ca <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018b98:	2300      	movs	r3, #0
 8018b9a:	e002      	b.n	8018ba2 <ip4_frag+0x26a>
      goto memerr;
 8018b9c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	3748      	adds	r7, #72	@ 0x48
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}
 8018baa:	bf00      	nop
 8018bac:	08021238 	.word	0x08021238
 8018bb0:	08021414 	.word	0x08021414
 8018bb4:	08021280 	.word	0x08021280
 8018bb8:	08021430 	.word	0x08021430
 8018bbc:	08021450 	.word	0x08021450
 8018bc0:	080188d1 	.word	0x080188d1

08018bc4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018bc4:	b580      	push	{r7, lr}
 8018bc6:	b086      	sub	sp, #24
 8018bc8:	af00      	add	r7, sp, #0
 8018bca:	6078      	str	r0, [r7, #4]
 8018bcc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018bce:	230e      	movs	r3, #14
 8018bd0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	895b      	ldrh	r3, [r3, #10]
 8018bd6:	2b0e      	cmp	r3, #14
 8018bd8:	d96e      	bls.n	8018cb8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	7bdb      	ldrb	r3, [r3, #15]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d106      	bne.n	8018bf0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018be2:	683b      	ldr	r3, [r7, #0]
 8018be4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018be8:	3301      	adds	r3, #1
 8018bea:	b2da      	uxtb	r2, r3
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	685b      	ldr	r3, [r3, #4]
 8018bf4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018bf6:	693b      	ldr	r3, [r7, #16]
 8018bf8:	7b1a      	ldrb	r2, [r3, #12]
 8018bfa:	7b5b      	ldrb	r3, [r3, #13]
 8018bfc:	021b      	lsls	r3, r3, #8
 8018bfe:	4313      	orrs	r3, r2
 8018c00:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018c02:	693b      	ldr	r3, [r7, #16]
 8018c04:	781b      	ldrb	r3, [r3, #0]
 8018c06:	f003 0301 	and.w	r3, r3, #1
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d023      	beq.n	8018c56 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018c0e:	693b      	ldr	r3, [r7, #16]
 8018c10:	781b      	ldrb	r3, [r3, #0]
 8018c12:	2b01      	cmp	r3, #1
 8018c14:	d10f      	bne.n	8018c36 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018c16:	693b      	ldr	r3, [r7, #16]
 8018c18:	785b      	ldrb	r3, [r3, #1]
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	d11b      	bne.n	8018c56 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018c1e:	693b      	ldr	r3, [r7, #16]
 8018c20:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018c22:	2b5e      	cmp	r3, #94	@ 0x5e
 8018c24:	d117      	bne.n	8018c56 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	7b5b      	ldrb	r3, [r3, #13]
 8018c2a:	f043 0310 	orr.w	r3, r3, #16
 8018c2e:	b2da      	uxtb	r2, r3
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	735a      	strb	r2, [r3, #13]
 8018c34:	e00f      	b.n	8018c56 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018c36:	693b      	ldr	r3, [r7, #16]
 8018c38:	2206      	movs	r2, #6
 8018c3a:	4928      	ldr	r1, [pc, #160]	@ (8018cdc <ethernet_input+0x118>)
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	f001 fd37 	bl	801a6b0 <memcmp>
 8018c42:	4603      	mov	r3, r0
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d106      	bne.n	8018c56 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	7b5b      	ldrb	r3, [r3, #13]
 8018c4c:	f043 0308 	orr.w	r3, r3, #8
 8018c50:	b2da      	uxtb	r2, r3
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018c56:	89fb      	ldrh	r3, [r7, #14]
 8018c58:	2b08      	cmp	r3, #8
 8018c5a:	d003      	beq.n	8018c64 <ethernet_input+0xa0>
 8018c5c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8018c60:	d014      	beq.n	8018c8c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018c62:	e032      	b.n	8018cca <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018c64:	683b      	ldr	r3, [r7, #0]
 8018c66:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018c6a:	f003 0308 	and.w	r3, r3, #8
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d024      	beq.n	8018cbc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018c72:	8afb      	ldrh	r3, [r7, #22]
 8018c74:	4619      	mov	r1, r3
 8018c76:	6878      	ldr	r0, [r7, #4]
 8018c78:	f7f6 faa8 	bl	800f1cc <pbuf_remove_header>
 8018c7c:	4603      	mov	r3, r0
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	d11e      	bne.n	8018cc0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018c82:	6839      	ldr	r1, [r7, #0]
 8018c84:	6878      	ldr	r0, [r7, #4]
 8018c86:	f7fe fe91 	bl	80179ac <ip4_input>
      break;
 8018c8a:	e013      	b.n	8018cb4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018c8c:	683b      	ldr	r3, [r7, #0]
 8018c8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018c92:	f003 0308 	and.w	r3, r3, #8
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d014      	beq.n	8018cc4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018c9a:	8afb      	ldrh	r3, [r7, #22]
 8018c9c:	4619      	mov	r1, r3
 8018c9e:	6878      	ldr	r0, [r7, #4]
 8018ca0:	f7f6 fa94 	bl	800f1cc <pbuf_remove_header>
 8018ca4:	4603      	mov	r3, r0
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d10e      	bne.n	8018cc8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018caa:	6839      	ldr	r1, [r7, #0]
 8018cac:	6878      	ldr	r0, [r7, #4]
 8018cae:	f7fe f831 	bl	8016d14 <etharp_input>
      break;
 8018cb2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018cb4:	2300      	movs	r3, #0
 8018cb6:	e00c      	b.n	8018cd2 <ethernet_input+0x10e>
    goto free_and_return;
 8018cb8:	bf00      	nop
 8018cba:	e006      	b.n	8018cca <ethernet_input+0x106>
        goto free_and_return;
 8018cbc:	bf00      	nop
 8018cbe:	e004      	b.n	8018cca <ethernet_input+0x106>
        goto free_and_return;
 8018cc0:	bf00      	nop
 8018cc2:	e002      	b.n	8018cca <ethernet_input+0x106>
        goto free_and_return;
 8018cc4:	bf00      	nop
 8018cc6:	e000      	b.n	8018cca <ethernet_input+0x106>
        goto free_and_return;
 8018cc8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018cca:	6878      	ldr	r0, [r7, #4]
 8018ccc:	f7f6 fb36 	bl	800f33c <pbuf_free>
  return ERR_OK;
 8018cd0:	2300      	movs	r3, #0
}
 8018cd2:	4618      	mov	r0, r3
 8018cd4:	3718      	adds	r7, #24
 8018cd6:	46bd      	mov	sp, r7
 8018cd8:	bd80      	pop	{r7, pc}
 8018cda:	bf00      	nop
 8018cdc:	08021714 	.word	0x08021714

08018ce0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018ce0:	b580      	push	{r7, lr}
 8018ce2:	b086      	sub	sp, #24
 8018ce4:	af00      	add	r7, sp, #0
 8018ce6:	60f8      	str	r0, [r7, #12]
 8018ce8:	60b9      	str	r1, [r7, #8]
 8018cea:	607a      	str	r2, [r7, #4]
 8018cec:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018cee:	8c3b      	ldrh	r3, [r7, #32]
 8018cf0:	4618      	mov	r0, r3
 8018cf2:	f7f4 fec7 	bl	800da84 <lwip_htons>
 8018cf6:	4603      	mov	r3, r0
 8018cf8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018cfa:	210e      	movs	r1, #14
 8018cfc:	68b8      	ldr	r0, [r7, #8]
 8018cfe:	f7f6 fa55 	bl	800f1ac <pbuf_add_header>
 8018d02:	4603      	mov	r3, r0
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d125      	bne.n	8018d54 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018d08:	68bb      	ldr	r3, [r7, #8]
 8018d0a:	685b      	ldr	r3, [r3, #4]
 8018d0c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018d0e:	693b      	ldr	r3, [r7, #16]
 8018d10:	8afa      	ldrh	r2, [r7, #22]
 8018d12:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018d14:	693b      	ldr	r3, [r7, #16]
 8018d16:	2206      	movs	r2, #6
 8018d18:	6839      	ldr	r1, [r7, #0]
 8018d1a:	4618      	mov	r0, r3
 8018d1c:	f001 fde9 	bl	801a8f2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018d20:	693b      	ldr	r3, [r7, #16]
 8018d22:	3306      	adds	r3, #6
 8018d24:	2206      	movs	r2, #6
 8018d26:	6879      	ldr	r1, [r7, #4]
 8018d28:	4618      	mov	r0, r3
 8018d2a:	f001 fde2 	bl	801a8f2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018d34:	2b06      	cmp	r3, #6
 8018d36:	d006      	beq.n	8018d46 <ethernet_output+0x66>
 8018d38:	4b0a      	ldr	r3, [pc, #40]	@ (8018d64 <ethernet_output+0x84>)
 8018d3a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8018d3e:	490a      	ldr	r1, [pc, #40]	@ (8018d68 <ethernet_output+0x88>)
 8018d40:	480a      	ldr	r0, [pc, #40]	@ (8018d6c <ethernet_output+0x8c>)
 8018d42:	f001 fb4d 	bl	801a3e0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018d46:	68fb      	ldr	r3, [r7, #12]
 8018d48:	699b      	ldr	r3, [r3, #24]
 8018d4a:	68b9      	ldr	r1, [r7, #8]
 8018d4c:	68f8      	ldr	r0, [r7, #12]
 8018d4e:	4798      	blx	r3
 8018d50:	4603      	mov	r3, r0
 8018d52:	e002      	b.n	8018d5a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018d54:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018d56:	f06f 0301 	mvn.w	r3, #1
}
 8018d5a:	4618      	mov	r0, r3
 8018d5c:	3718      	adds	r7, #24
 8018d5e:	46bd      	mov	sp, r7
 8018d60:	bd80      	pop	{r7, pc}
 8018d62:	bf00      	nop
 8018d64:	08021460 	.word	0x08021460
 8018d68:	08021498 	.word	0x08021498
 8018d6c:	080214cc 	.word	0x080214cc

08018d70 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018d70:	b580      	push	{r7, lr}
 8018d72:	b082      	sub	sp, #8
 8018d74:	af00      	add	r7, sp, #0
 8018d76:	6078      	str	r0, [r7, #4]
 8018d78:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8018d7a:	683b      	ldr	r3, [r7, #0]
 8018d7c:	2200      	movs	r2, #0
 8018d7e:	2104      	movs	r1, #4
 8018d80:	4618      	mov	r0, r3
 8018d82:	f7ed fae9 	bl	8006358 <osMessageQueueNew>
 8018d86:	4602      	mov	r2, r0
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	681b      	ldr	r3, [r3, #0]
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d102      	bne.n	8018d9a <sys_mbox_new+0x2a>
    return ERR_MEM;
 8018d94:	f04f 33ff 	mov.w	r3, #4294967295
 8018d98:	e000      	b.n	8018d9c <sys_mbox_new+0x2c>

  return ERR_OK;
 8018d9a:	2300      	movs	r3, #0
}
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	3708      	adds	r7, #8
 8018da0:	46bd      	mov	sp, r7
 8018da2:	bd80      	pop	{r7, pc}

08018da4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b082      	sub	sp, #8
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	4618      	mov	r0, r3
 8018db2:	f7ed fc03 	bl	80065bc <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	4618      	mov	r0, r3
 8018dbc:	f7ed fc1e 	bl	80065fc <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018dc0:	bf00      	nop
 8018dc2:	3708      	adds	r7, #8
 8018dc4:	46bd      	mov	sp, r7
 8018dc6:	bd80      	pop	{r7, pc}

08018dc8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018dc8:	b580      	push	{r7, lr}
 8018dca:	b084      	sub	sp, #16
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	6078      	str	r0, [r7, #4]
 8018dd0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	6818      	ldr	r0, [r3, #0]
 8018dd6:	4639      	mov	r1, r7
 8018dd8:	2300      	movs	r3, #0
 8018dda:	2200      	movs	r2, #0
 8018ddc:	f7ed fb30 	bl	8006440 <osMessageQueuePut>
 8018de0:	4603      	mov	r3, r0
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d102      	bne.n	8018dec <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8018de6:	2300      	movs	r3, #0
 8018de8:	73fb      	strb	r3, [r7, #15]
 8018dea:	e001      	b.n	8018df0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018dec:	23ff      	movs	r3, #255	@ 0xff
 8018dee:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018df4:	4618      	mov	r0, r3
 8018df6:	3710      	adds	r7, #16
 8018df8:	46bd      	mov	sp, r7
 8018dfa:	bd80      	pop	{r7, pc}

08018dfc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	b086      	sub	sp, #24
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	60f8      	str	r0, [r7, #12]
 8018e04:	60b9      	str	r1, [r7, #8]
 8018e06:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8018e08:	f7ec ff92 	bl	8005d30 <osKernelGetTickCount>
 8018e0c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d013      	beq.n	8018e3c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	6818      	ldr	r0, [r3, #0]
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	2200      	movs	r2, #0
 8018e1c:	68b9      	ldr	r1, [r7, #8]
 8018e1e:	f7ed fb6f 	bl	8006500 <osMessageQueueGet>
 8018e22:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8018e24:	693b      	ldr	r3, [r7, #16]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d105      	bne.n	8018e36 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8018e2a:	f7ec ff81 	bl	8005d30 <osKernelGetTickCount>
 8018e2e:	4602      	mov	r2, r0
 8018e30:	697b      	ldr	r3, [r7, #20]
 8018e32:	1ad3      	subs	r3, r2, r3
 8018e34:	e00f      	b.n	8018e56 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018e36:	f04f 33ff 	mov.w	r3, #4294967295
 8018e3a:	e00c      	b.n	8018e56 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	6818      	ldr	r0, [r3, #0]
 8018e40:	f04f 33ff 	mov.w	r3, #4294967295
 8018e44:	2200      	movs	r2, #0
 8018e46:	68b9      	ldr	r1, [r7, #8]
 8018e48:	f7ed fb5a 	bl	8006500 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8018e4c:	f7ec ff70 	bl	8005d30 <osKernelGetTickCount>
 8018e50:	4602      	mov	r2, r0
 8018e52:	697b      	ldr	r3, [r7, #20]
 8018e54:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018e56:	4618      	mov	r0, r3
 8018e58:	3718      	adds	r7, #24
 8018e5a:	46bd      	mov	sp, r7
 8018e5c:	bd80      	pop	{r7, pc}

08018e5e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018e5e:	b580      	push	{r7, lr}
 8018e60:	b082      	sub	sp, #8
 8018e62:	af00      	add	r7, sp, #0
 8018e64:	6078      	str	r0, [r7, #4]
 8018e66:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	6818      	ldr	r0, [r3, #0]
 8018e6c:	2300      	movs	r3, #0
 8018e6e:	2200      	movs	r2, #0
 8018e70:	6839      	ldr	r1, [r7, #0]
 8018e72:	f7ed fb45 	bl	8006500 <osMessageQueueGet>
 8018e76:	4603      	mov	r3, r0
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d101      	bne.n	8018e80 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8018e7c:	2300      	movs	r3, #0
 8018e7e:	e001      	b.n	8018e84 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018e80:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018e84:	4618      	mov	r0, r3
 8018e86:	3708      	adds	r7, #8
 8018e88:	46bd      	mov	sp, r7
 8018e8a:	bd80      	pop	{r7, pc}

08018e8c <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018e8c:	b480      	push	{r7}
 8018e8e:	b083      	sub	sp, #12
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d101      	bne.n	8018ea0 <sys_mbox_valid+0x14>
    return 0;
 8018e9c:	2300      	movs	r3, #0
 8018e9e:	e000      	b.n	8018ea2 <sys_mbox_valid+0x16>
  else
    return 1;
 8018ea0:	2301      	movs	r3, #1
}
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	370c      	adds	r7, #12
 8018ea6:	46bd      	mov	sp, r7
 8018ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eac:	4770      	bx	lr

08018eae <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018eae:	b480      	push	{r7}
 8018eb0:	b083      	sub	sp, #12
 8018eb2:	af00      	add	r7, sp, #0
 8018eb4:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	2200      	movs	r2, #0
 8018eba:	601a      	str	r2, [r3, #0]
}
 8018ebc:	bf00      	nop
 8018ebe:	370c      	adds	r7, #12
 8018ec0:	46bd      	mov	sp, r7
 8018ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ec6:	4770      	bx	lr

08018ec8 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	b082      	sub	sp, #8
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	6078      	str	r0, [r7, #4]
 8018ed0:	460b      	mov	r3, r1
 8018ed2:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8018ed4:	78fb      	ldrb	r3, [r7, #3]
 8018ed6:	2200      	movs	r2, #0
 8018ed8:	4619      	mov	r1, r3
 8018eda:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018ede:	f7ed f8f7 	bl	80060d0 <osSemaphoreNew>
 8018ee2:	4602      	mov	r2, r0
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d102      	bne.n	8018ef6 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8018ef4:	e009      	b.n	8018f0a <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8018ef6:	78fb      	ldrb	r3, [r7, #3]
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d105      	bne.n	8018f08 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	2100      	movs	r1, #0
 8018f02:	4618      	mov	r0, r3
 8018f04:	f7ed f96e 	bl	80061e4 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018f08:	2300      	movs	r3, #0
}
 8018f0a:	4618      	mov	r0, r3
 8018f0c:	3708      	adds	r7, #8
 8018f0e:	46bd      	mov	sp, r7
 8018f10:	bd80      	pop	{r7, pc}

08018f12 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018f12:	b580      	push	{r7, lr}
 8018f14:	b084      	sub	sp, #16
 8018f16:	af00      	add	r7, sp, #0
 8018f18:	6078      	str	r0, [r7, #4]
 8018f1a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8018f1c:	f7ec ff08 	bl	8005d30 <osKernelGetTickCount>
 8018f20:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8018f22:	683b      	ldr	r3, [r7, #0]
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d011      	beq.n	8018f4c <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	6839      	ldr	r1, [r7, #0]
 8018f2e:	4618      	mov	r0, r3
 8018f30:	f7ed f958 	bl	80061e4 <osSemaphoreAcquire>
 8018f34:	4603      	mov	r3, r0
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d105      	bne.n	8018f46 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8018f3a:	f7ec fef9 	bl	8005d30 <osKernelGetTickCount>
 8018f3e:	4602      	mov	r2, r0
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	1ad3      	subs	r3, r2, r3
 8018f44:	e012      	b.n	8018f6c <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018f46:	f04f 33ff 	mov.w	r3, #4294967295
 8018f4a:	e00f      	b.n	8018f6c <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8018f4c:	bf00      	nop
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	f04f 31ff 	mov.w	r1, #4294967295
 8018f56:	4618      	mov	r0, r3
 8018f58:	f7ed f944 	bl	80061e4 <osSemaphoreAcquire>
 8018f5c:	4603      	mov	r3, r0
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d1f5      	bne.n	8018f4e <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8018f62:	f7ec fee5 	bl	8005d30 <osKernelGetTickCount>
 8018f66:	4602      	mov	r2, r0
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018f6c:	4618      	mov	r0, r3
 8018f6e:	3710      	adds	r7, #16
 8018f70:	46bd      	mov	sp, r7
 8018f72:	bd80      	pop	{r7, pc}

08018f74 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018f74:	b580      	push	{r7, lr}
 8018f76:	b082      	sub	sp, #8
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	4618      	mov	r0, r3
 8018f82:	f7ed f981 	bl	8006288 <osSemaphoreRelease>
}
 8018f86:	bf00      	nop
 8018f88:	3708      	adds	r7, #8
 8018f8a:	46bd      	mov	sp, r7
 8018f8c:	bd80      	pop	{r7, pc}

08018f8e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018f8e:	b580      	push	{r7, lr}
 8018f90:	b082      	sub	sp, #8
 8018f92:	af00      	add	r7, sp, #0
 8018f94:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	4618      	mov	r0, r3
 8018f9c:	f7ed f9b8 	bl	8006310 <osSemaphoreDelete>
}
 8018fa0:	bf00      	nop
 8018fa2:	3708      	adds	r7, #8
 8018fa4:	46bd      	mov	sp, r7
 8018fa6:	bd80      	pop	{r7, pc}

08018fa8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018fa8:	b480      	push	{r7}
 8018faa:	b083      	sub	sp, #12
 8018fac:	af00      	add	r7, sp, #0
 8018fae:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	681b      	ldr	r3, [r3, #0]
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d101      	bne.n	8018fbc <sys_sem_valid+0x14>
    return 0;
 8018fb8:	2300      	movs	r3, #0
 8018fba:	e000      	b.n	8018fbe <sys_sem_valid+0x16>
  else
    return 1;
 8018fbc:	2301      	movs	r3, #1
}
 8018fbe:	4618      	mov	r0, r3
 8018fc0:	370c      	adds	r7, #12
 8018fc2:	46bd      	mov	sp, r7
 8018fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fc8:	4770      	bx	lr

08018fca <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018fca:	b480      	push	{r7}
 8018fcc:	b083      	sub	sp, #12
 8018fce:	af00      	add	r7, sp, #0
 8018fd0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	2200      	movs	r2, #0
 8018fd6:	601a      	str	r2, [r3, #0]
}
 8018fd8:	bf00      	nop
 8018fda:	370c      	adds	r7, #12
 8018fdc:	46bd      	mov	sp, r7
 8018fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fe2:	4770      	bx	lr

08018fe4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018fe4:	b580      	push	{r7, lr}
 8018fe6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8018fe8:	2000      	movs	r0, #0
 8018fea:	f7ec ff63 	bl	8005eb4 <osMutexNew>
 8018fee:	4603      	mov	r3, r0
 8018ff0:	4a01      	ldr	r2, [pc, #4]	@ (8018ff8 <sys_init+0x14>)
 8018ff2:	6013      	str	r3, [r2, #0]
#endif
}
 8018ff4:	bf00      	nop
 8018ff6:	bd80      	pop	{r7, pc}
 8018ff8:	2000d24c 	.word	0x2000d24c

08018ffc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018ffc:	b580      	push	{r7, lr}
 8018ffe:	b082      	sub	sp, #8
 8019000:	af00      	add	r7, sp, #0
 8019002:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8019004:	2000      	movs	r0, #0
 8019006:	f7ec ff55 	bl	8005eb4 <osMutexNew>
 801900a:	4602      	mov	r2, r0
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	2b00      	cmp	r3, #0
 8019016:	d102      	bne.n	801901e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019018:	f04f 33ff 	mov.w	r3, #4294967295
 801901c:	e000      	b.n	8019020 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801901e:	2300      	movs	r3, #0
}
 8019020:	4618      	mov	r0, r3
 8019022:	3708      	adds	r7, #8
 8019024:	46bd      	mov	sp, r7
 8019026:	bd80      	pop	{r7, pc}

08019028 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019028:	b580      	push	{r7, lr}
 801902a:	b082      	sub	sp, #8
 801902c:	af00      	add	r7, sp, #0
 801902e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	f04f 31ff 	mov.w	r1, #4294967295
 8019038:	4618      	mov	r0, r3
 801903a:	f7ec ffc1 	bl	8005fc0 <osMutexAcquire>
#endif
}
 801903e:	bf00      	nop
 8019040:	3708      	adds	r7, #8
 8019042:	46bd      	mov	sp, r7
 8019044:	bd80      	pop	{r7, pc}

08019046 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019046:	b580      	push	{r7, lr}
 8019048:	b082      	sub	sp, #8
 801904a:	af00      	add	r7, sp, #0
 801904c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	681b      	ldr	r3, [r3, #0]
 8019052:	4618      	mov	r0, r3
 8019054:	f7ec ffff 	bl	8006056 <osMutexRelease>
}
 8019058:	bf00      	nop
 801905a:	3708      	adds	r7, #8
 801905c:	46bd      	mov	sp, r7
 801905e:	bd80      	pop	{r7, pc}

08019060 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019060:	b580      	push	{r7, lr}
 8019062:	b08e      	sub	sp, #56	@ 0x38
 8019064:	af00      	add	r7, sp, #0
 8019066:	60f8      	str	r0, [r7, #12]
 8019068:	60b9      	str	r1, [r7, #8]
 801906a:	607a      	str	r2, [r7, #4]
 801906c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801906e:	f107 0314 	add.w	r3, r7, #20
 8019072:	2224      	movs	r2, #36	@ 0x24
 8019074:	2100      	movs	r1, #0
 8019076:	4618      	mov	r0, r3
 8019078:	f001 fb44 	bl	801a704 <memset>
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	617b      	str	r3, [r7, #20]
 8019080:	683b      	ldr	r3, [r7, #0]
 8019082:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019086:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8019088:	f107 0314 	add.w	r3, r7, #20
 801908c:	461a      	mov	r2, r3
 801908e:	6879      	ldr	r1, [r7, #4]
 8019090:	68b8      	ldr	r0, [r7, #8]
 8019092:	f7ec fe62 	bl	8005d5a <osThreadNew>
 8019096:	4603      	mov	r3, r0
#endif
}
 8019098:	4618      	mov	r0, r3
 801909a:	3738      	adds	r7, #56	@ 0x38
 801909c:	46bd      	mov	sp, r7
 801909e:	bd80      	pop	{r7, pc}

080190a0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80190a0:	b580      	push	{r7, lr}
 80190a2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80190a4:	4b04      	ldr	r3, [pc, #16]	@ (80190b8 <sys_arch_protect+0x18>)
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	f04f 31ff 	mov.w	r1, #4294967295
 80190ac:	4618      	mov	r0, r3
 80190ae:	f7ec ff87 	bl	8005fc0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80190b2:	2301      	movs	r3, #1
}
 80190b4:	4618      	mov	r0, r3
 80190b6:	bd80      	pop	{r7, pc}
 80190b8:	2000d24c 	.word	0x2000d24c

080190bc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80190bc:	b580      	push	{r7, lr}
 80190be:	b082      	sub	sp, #8
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80190c4:	4b04      	ldr	r3, [pc, #16]	@ (80190d8 <sys_arch_unprotect+0x1c>)
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	4618      	mov	r0, r3
 80190ca:	f7ec ffc4 	bl	8006056 <osMutexRelease>
}
 80190ce:	bf00      	nop
 80190d0:	3708      	adds	r7, #8
 80190d2:	46bd      	mov	sp, r7
 80190d4:	bd80      	pop	{r7, pc}
 80190d6:	bf00      	nop
 80190d8:	2000d24c 	.word	0x2000d24c

080190dc <server_socket_thread>:

#define PORT          (8088)
#define RECV_DATA     (1024)

static void server_socket_thread(void *arg)
{
 80190dc:	b590      	push	{r4, r7, lr}
 80190de:	b093      	sub	sp, #76	@ 0x4c
 80190e0:	af02      	add	r7, sp, #8
 80190e2:	6078      	str	r0, [r7, #4]
  struct sockaddr_in address,client_addr;
  char *recv_data;
  socklen_t sin_size;
  int recv_data_len;

  recv_data = (char *)pvPortMalloc(RECV_DATA);
 80190e4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80190e8:	f7f0 fac0 	bl	800966c <pvPortMalloc>
 80190ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (recv_data == NULL)
 80190ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d103      	bne.n	80190fc <server_socket_thread+0x20>
  {
      printf("No memory\n");
 80190f4:	4850      	ldr	r0, [pc, #320]	@ (8019238 <server_socket_thread+0x15c>)
 80190f6:	f001 f9db 	bl	801a4b0 <puts>
      return;
 80190fa:	e099      	b.n	8019230 <server_socket_thread+0x154>
  }
  if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0)
 80190fc:	2200      	movs	r2, #0
 80190fe:	2101      	movs	r1, #1
 8019100:	2002      	movs	r0, #2
 8019102:	f7f3 fef5 	bl	800cef0 <lwip_socket>
 8019106:	63b8      	str	r0, [r7, #56]	@ 0x38
 8019108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801910a:	2b00      	cmp	r3, #0
 801910c:	da0a      	bge.n	8019124 <server_socket_thread+0x48>
  {
      printf("Socket error\n");
 801910e:	484b      	ldr	r0, [pc, #300]	@ (801923c <server_socket_thread+0x160>)
 8019110:	f001 f9ce 	bl	801a4b0 <puts>
      if (recv_data) free(recv_data);
 8019114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019116:	2b00      	cmp	r3, #0
 8019118:	f000 8085 	beq.w	8019226 <server_socket_thread+0x14a>
 801911c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801911e:	f000 f8b7 	bl	8019290 <free>
      return;
 8019122:	e080      	b.n	8019226 <server_socket_thread+0x14a>
  }

  /* bind to port 80 at any interface */
  address.sin_family = AF_INET;
 8019124:	2302      	movs	r3, #2
 8019126:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  address.sin_port = htons(PORT);
 801912a:	f641 7098 	movw	r0, #8088	@ 0x1f98
 801912e:	f7f4 fca9 	bl	800da84 <lwip_htons>
 8019132:	4603      	mov	r3, r0
 8019134:	847b      	strh	r3, [r7, #34]	@ 0x22
  address.sin_addr.s_addr = INADDR_ANY;
 8019136:	2300      	movs	r3, #0
 8019138:	627b      	str	r3, [r7, #36]	@ 0x24
  memset(&(address.sin_zero), 0, sizeof(address.sin_zero));
 801913a:	f107 0320 	add.w	r3, r7, #32
 801913e:	3308      	adds	r3, #8
 8019140:	2208      	movs	r2, #8
 8019142:	2100      	movs	r1, #0
 8019144:	4618      	mov	r0, r3
 8019146:	f001 fadd 	bl	801a704 <memset>
  if (bind(sock, (struct sockaddr *)&address, sizeof (address)) < 0)
 801914a:	f107 0320 	add.w	r3, r7, #32
 801914e:	2210      	movs	r2, #16
 8019150:	4619      	mov	r1, r3
 8019152:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019154:	f7f3 f978 	bl	800c448 <lwip_bind>
 8019158:	4603      	mov	r3, r0
 801915a:	2b00      	cmp	r3, #0
 801915c:	da09      	bge.n	8019172 <server_socket_thread+0x96>
  {
      printf("unable to bind\r\n");
 801915e:	4838      	ldr	r0, [pc, #224]	@ (8019240 <server_socket_thread+0x164>)
 8019160:	f001 f9a6 	bl	801a4b0 <puts>
      if (recv_data) free(recv_data);
 8019164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019166:	2b00      	cmp	r3, #0
 8019168:	d05f      	beq.n	801922a <server_socket_thread+0x14e>
 801916a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801916c:	f000 f890 	bl	8019290 <free>
      return;
 8019170:	e05b      	b.n	801922a <server_socket_thread+0x14e>
  }

  /* listen for incoming connections (TCP listen backlog = 5) */
  if(listen(sock, 5) == -1)
 8019172:	2105      	movs	r1, #5
 8019174:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019176:	f7f3 fa2b 	bl	800c5d0 <lwip_listen>
 801917a:	4603      	mov	r3, r0
 801917c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019180:	d109      	bne.n	8019196 <server_socket_thread+0xba>
  {
      printf("listen error\r\n");
 8019182:	4830      	ldr	r0, [pc, #192]	@ (8019244 <server_socket_thread+0x168>)
 8019184:	f001 f994 	bl	801a4b0 <puts>
      if (recv_data) free(recv_data);
 8019188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801918a:	2b00      	cmp	r3, #0
 801918c:	d04f      	beq.n	801922e <server_socket_thread+0x152>
 801918e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8019190:	f000 f87e 	bl	8019290 <free>
      return;
 8019194:	e04b      	b.n	801922e <server_socket_thread+0x152>
  }

  while (1)
  {
      sin_size = sizeof(struct sockaddr_in);
 8019196:	2310      	movs	r3, #16
 8019198:	60fb      	str	r3, [r7, #12]
      connected = accept(sock, (struct sockaddr *)&client_addr, &sin_size);
 801919a:	f107 020c 	add.w	r2, r7, #12
 801919e:	f107 0310 	add.w	r3, r7, #16
 80191a2:	4619      	mov	r1, r3
 80191a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80191a6:	f7f3 f831 	bl	800c20c <lwip_accept>
 80191aa:	6378      	str	r0, [r7, #52]	@ 0x34
      printf("new client connected from (%s, %d)\n",inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));
 80191ac:	f107 0310 	add.w	r3, r7, #16
 80191b0:	3304      	adds	r3, #4
 80191b2:	4618      	mov	r0, r3
 80191b4:	f7fe fe38 	bl	8017e28 <ip4addr_ntoa>
 80191b8:	4604      	mov	r4, r0
 80191ba:	8a7b      	ldrh	r3, [r7, #18]
 80191bc:	4618      	mov	r0, r3
 80191be:	f7f4 fc61 	bl	800da84 <lwip_htons>
 80191c2:	4603      	mov	r3, r0
 80191c4:	461a      	mov	r2, r3
 80191c6:	4621      	mov	r1, r4
 80191c8:	481f      	ldr	r0, [pc, #124]	@ (8019248 <server_socket_thread+0x16c>)
 80191ca:	f001 f909 	bl	801a3e0 <iprintf>
      {
          int flag = 1;
 80191ce:	2301      	movs	r3, #1
 80191d0:	60bb      	str	r3, [r7, #8]
          setsockopt(connected,IPPROTO_TCP,     /* set option at TCP level */
 80191d2:	f107 0308 	add.w	r3, r7, #8
 80191d6:	2204      	movs	r2, #4
 80191d8:	9200      	str	r2, [sp, #0]
 80191da:	2201      	movs	r2, #1
 80191dc:	2106      	movs	r1, #6
 80191de:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80191e0:	f7f4 f8ac 	bl	800d33c <lwip_setsockopt>
                     (void *) &flag, /* the cast is historical cruft */
                     sizeof(int));    /* length of option value */
      }
      while (1)
      {
          recv_data_len = recv(connected, recv_data, RECV_DATA, 0);
 80191e4:	2300      	movs	r3, #0
 80191e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80191ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80191ec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80191ee:	f7f3 fd59 	bl	800cca4 <lwip_recv>
 80191f2:	6338      	str	r0, [r7, #48]	@ 0x30
          if(recv_data_len <= 0)
 80191f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	dd0a      	ble.n	8019210 <server_socket_thread+0x134>
              break;
          printf("recv %d len data\n",recv_data_len);
 80191fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80191fc:	4813      	ldr	r0, [pc, #76]	@ (801924c <server_socket_thread+0x170>)
 80191fe:	f001 f8ef 	bl	801a3e0 <iprintf>
          write(connected,recv_data,recv_data_len);
 8019202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019204:	461a      	mov	r2, r3
 8019206:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019208:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801920a:	f7f3 fecf 	bl	800cfac <lwip_write>
          recv_data_len = recv(connected, recv_data, RECV_DATA, 0);
 801920e:	e7e9      	b.n	80191e4 <server_socket_thread+0x108>
              break;
 8019210:	bf00      	nop
      }
      if(connected >= 0)
 8019212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019214:	2b00      	cmp	r3, #0
 8019216:	db02      	blt.n	801921e <server_socket_thread+0x142>
          closesocket(connected);
 8019218:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801921a:	f7f3 f983 	bl	800c524 <lwip_close>
       connected = -1;
 801921e:	f04f 33ff 	mov.w	r3, #4294967295
 8019222:	637b      	str	r3, [r7, #52]	@ 0x34
      sin_size = sizeof(struct sockaddr_in);
 8019224:	e7b7      	b.n	8019196 <server_socket_thread+0xba>
      return;
 8019226:	bf00      	nop
 8019228:	e002      	b.n	8019230 <server_socket_thread+0x154>
      return;
 801922a:	bf00      	nop
 801922c:	e000      	b.n	8019230 <server_socket_thread+0x154>
      return;
 801922e:	bf00      	nop
  }
  if(recv_data) free(recv_data);
}
 8019230:	3744      	adds	r7, #68	@ 0x44
 8019232:	46bd      	mov	sp, r7
 8019234:	bd90      	pop	{r4, r7, pc}
 8019236:	bf00      	nop
 8019238:	080214f4 	.word	0x080214f4
 801923c:	08021500 	.word	0x08021500
 8019240:	08021510 	.word	0x08021510
 8019244:	08021520 	.word	0x08021520
 8019248:	08021530 	.word	0x08021530
 801924c:	08021554 	.word	0x08021554

08019250 <server_socket_init>:

void server_socket_init()
{
 8019250:	b580      	push	{r7, lr}
 8019252:	b082      	sub	sp, #8
 8019254:	af02      	add	r7, sp, #8
  sys_thread_new("HTTP", server_socket_thread, NULL, DEFAULT_THREAD_STACKSIZE * 4, osPriorityAboveNormal);
 8019256:	2320      	movs	r3, #32
 8019258:	9300      	str	r3, [sp, #0]
 801925a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801925e:	2200      	movs	r2, #0
 8019260:	4903      	ldr	r1, [pc, #12]	@ (8019270 <server_socket_init+0x20>)
 8019262:	4804      	ldr	r0, [pc, #16]	@ (8019274 <server_socket_init+0x24>)
 8019264:	f7ff fefc 	bl	8019060 <sys_thread_new>
}
 8019268:	bf00      	nop
 801926a:	46bd      	mov	sp, r7
 801926c:	bd80      	pop	{r7, pc}
 801926e:	bf00      	nop
 8019270:	080190dd 	.word	0x080190dd
 8019274:	08021568 	.word	0x08021568

08019278 <atoi>:
 8019278:	220a      	movs	r2, #10
 801927a:	2100      	movs	r1, #0
 801927c:	f000 b978 	b.w	8019570 <strtol>

08019280 <malloc>:
 8019280:	4b02      	ldr	r3, [pc, #8]	@ (801928c <malloc+0xc>)
 8019282:	4601      	mov	r1, r0
 8019284:	6818      	ldr	r0, [r3, #0]
 8019286:	f000 b82d 	b.w	80192e4 <_malloc_r>
 801928a:	bf00      	nop
 801928c:	2000003c 	.word	0x2000003c

08019290 <free>:
 8019290:	4b02      	ldr	r3, [pc, #8]	@ (801929c <free+0xc>)
 8019292:	4601      	mov	r1, r0
 8019294:	6818      	ldr	r0, [r3, #0]
 8019296:	f002 b9ab 	b.w	801b5f0 <_free_r>
 801929a:	bf00      	nop
 801929c:	2000003c 	.word	0x2000003c

080192a0 <sbrk_aligned>:
 80192a0:	b570      	push	{r4, r5, r6, lr}
 80192a2:	4e0f      	ldr	r6, [pc, #60]	@ (80192e0 <sbrk_aligned+0x40>)
 80192a4:	460c      	mov	r4, r1
 80192a6:	6831      	ldr	r1, [r6, #0]
 80192a8:	4605      	mov	r5, r0
 80192aa:	b911      	cbnz	r1, 80192b2 <sbrk_aligned+0x12>
 80192ac:	f001 fad2 	bl	801a854 <_sbrk_r>
 80192b0:	6030      	str	r0, [r6, #0]
 80192b2:	4621      	mov	r1, r4
 80192b4:	4628      	mov	r0, r5
 80192b6:	f001 facd 	bl	801a854 <_sbrk_r>
 80192ba:	1c43      	adds	r3, r0, #1
 80192bc:	d103      	bne.n	80192c6 <sbrk_aligned+0x26>
 80192be:	f04f 34ff 	mov.w	r4, #4294967295
 80192c2:	4620      	mov	r0, r4
 80192c4:	bd70      	pop	{r4, r5, r6, pc}
 80192c6:	1cc4      	adds	r4, r0, #3
 80192c8:	f024 0403 	bic.w	r4, r4, #3
 80192cc:	42a0      	cmp	r0, r4
 80192ce:	d0f8      	beq.n	80192c2 <sbrk_aligned+0x22>
 80192d0:	1a21      	subs	r1, r4, r0
 80192d2:	4628      	mov	r0, r5
 80192d4:	f001 fabe 	bl	801a854 <_sbrk_r>
 80192d8:	3001      	adds	r0, #1
 80192da:	d1f2      	bne.n	80192c2 <sbrk_aligned+0x22>
 80192dc:	e7ef      	b.n	80192be <sbrk_aligned+0x1e>
 80192de:	bf00      	nop
 80192e0:	2000d250 	.word	0x2000d250

080192e4 <_malloc_r>:
 80192e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80192e8:	1ccd      	adds	r5, r1, #3
 80192ea:	f025 0503 	bic.w	r5, r5, #3
 80192ee:	3508      	adds	r5, #8
 80192f0:	2d0c      	cmp	r5, #12
 80192f2:	bf38      	it	cc
 80192f4:	250c      	movcc	r5, #12
 80192f6:	2d00      	cmp	r5, #0
 80192f8:	4606      	mov	r6, r0
 80192fa:	db01      	blt.n	8019300 <_malloc_r+0x1c>
 80192fc:	42a9      	cmp	r1, r5
 80192fe:	d904      	bls.n	801930a <_malloc_r+0x26>
 8019300:	230c      	movs	r3, #12
 8019302:	6033      	str	r3, [r6, #0]
 8019304:	2000      	movs	r0, #0
 8019306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801930a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80193e0 <_malloc_r+0xfc>
 801930e:	f000 f869 	bl	80193e4 <__malloc_lock>
 8019312:	f8d8 3000 	ldr.w	r3, [r8]
 8019316:	461c      	mov	r4, r3
 8019318:	bb44      	cbnz	r4, 801936c <_malloc_r+0x88>
 801931a:	4629      	mov	r1, r5
 801931c:	4630      	mov	r0, r6
 801931e:	f7ff ffbf 	bl	80192a0 <sbrk_aligned>
 8019322:	1c43      	adds	r3, r0, #1
 8019324:	4604      	mov	r4, r0
 8019326:	d158      	bne.n	80193da <_malloc_r+0xf6>
 8019328:	f8d8 4000 	ldr.w	r4, [r8]
 801932c:	4627      	mov	r7, r4
 801932e:	2f00      	cmp	r7, #0
 8019330:	d143      	bne.n	80193ba <_malloc_r+0xd6>
 8019332:	2c00      	cmp	r4, #0
 8019334:	d04b      	beq.n	80193ce <_malloc_r+0xea>
 8019336:	6823      	ldr	r3, [r4, #0]
 8019338:	4639      	mov	r1, r7
 801933a:	4630      	mov	r0, r6
 801933c:	eb04 0903 	add.w	r9, r4, r3
 8019340:	f001 fa88 	bl	801a854 <_sbrk_r>
 8019344:	4581      	cmp	r9, r0
 8019346:	d142      	bne.n	80193ce <_malloc_r+0xea>
 8019348:	6821      	ldr	r1, [r4, #0]
 801934a:	1a6d      	subs	r5, r5, r1
 801934c:	4629      	mov	r1, r5
 801934e:	4630      	mov	r0, r6
 8019350:	f7ff ffa6 	bl	80192a0 <sbrk_aligned>
 8019354:	3001      	adds	r0, #1
 8019356:	d03a      	beq.n	80193ce <_malloc_r+0xea>
 8019358:	6823      	ldr	r3, [r4, #0]
 801935a:	442b      	add	r3, r5
 801935c:	6023      	str	r3, [r4, #0]
 801935e:	f8d8 3000 	ldr.w	r3, [r8]
 8019362:	685a      	ldr	r2, [r3, #4]
 8019364:	bb62      	cbnz	r2, 80193c0 <_malloc_r+0xdc>
 8019366:	f8c8 7000 	str.w	r7, [r8]
 801936a:	e00f      	b.n	801938c <_malloc_r+0xa8>
 801936c:	6822      	ldr	r2, [r4, #0]
 801936e:	1b52      	subs	r2, r2, r5
 8019370:	d420      	bmi.n	80193b4 <_malloc_r+0xd0>
 8019372:	2a0b      	cmp	r2, #11
 8019374:	d917      	bls.n	80193a6 <_malloc_r+0xc2>
 8019376:	1961      	adds	r1, r4, r5
 8019378:	42a3      	cmp	r3, r4
 801937a:	6025      	str	r5, [r4, #0]
 801937c:	bf18      	it	ne
 801937e:	6059      	strne	r1, [r3, #4]
 8019380:	6863      	ldr	r3, [r4, #4]
 8019382:	bf08      	it	eq
 8019384:	f8c8 1000 	streq.w	r1, [r8]
 8019388:	5162      	str	r2, [r4, r5]
 801938a:	604b      	str	r3, [r1, #4]
 801938c:	4630      	mov	r0, r6
 801938e:	f000 f82f 	bl	80193f0 <__malloc_unlock>
 8019392:	f104 000b 	add.w	r0, r4, #11
 8019396:	1d23      	adds	r3, r4, #4
 8019398:	f020 0007 	bic.w	r0, r0, #7
 801939c:	1ac2      	subs	r2, r0, r3
 801939e:	bf1c      	itt	ne
 80193a0:	1a1b      	subne	r3, r3, r0
 80193a2:	50a3      	strne	r3, [r4, r2]
 80193a4:	e7af      	b.n	8019306 <_malloc_r+0x22>
 80193a6:	6862      	ldr	r2, [r4, #4]
 80193a8:	42a3      	cmp	r3, r4
 80193aa:	bf0c      	ite	eq
 80193ac:	f8c8 2000 	streq.w	r2, [r8]
 80193b0:	605a      	strne	r2, [r3, #4]
 80193b2:	e7eb      	b.n	801938c <_malloc_r+0xa8>
 80193b4:	4623      	mov	r3, r4
 80193b6:	6864      	ldr	r4, [r4, #4]
 80193b8:	e7ae      	b.n	8019318 <_malloc_r+0x34>
 80193ba:	463c      	mov	r4, r7
 80193bc:	687f      	ldr	r7, [r7, #4]
 80193be:	e7b6      	b.n	801932e <_malloc_r+0x4a>
 80193c0:	461a      	mov	r2, r3
 80193c2:	685b      	ldr	r3, [r3, #4]
 80193c4:	42a3      	cmp	r3, r4
 80193c6:	d1fb      	bne.n	80193c0 <_malloc_r+0xdc>
 80193c8:	2300      	movs	r3, #0
 80193ca:	6053      	str	r3, [r2, #4]
 80193cc:	e7de      	b.n	801938c <_malloc_r+0xa8>
 80193ce:	230c      	movs	r3, #12
 80193d0:	6033      	str	r3, [r6, #0]
 80193d2:	4630      	mov	r0, r6
 80193d4:	f000 f80c 	bl	80193f0 <__malloc_unlock>
 80193d8:	e794      	b.n	8019304 <_malloc_r+0x20>
 80193da:	6005      	str	r5, [r0, #0]
 80193dc:	e7d6      	b.n	801938c <_malloc_r+0xa8>
 80193de:	bf00      	nop
 80193e0:	2000d254 	.word	0x2000d254

080193e4 <__malloc_lock>:
 80193e4:	4801      	ldr	r0, [pc, #4]	@ (80193ec <__malloc_lock+0x8>)
 80193e6:	f001 ba82 	b.w	801a8ee <__retarget_lock_acquire_recursive>
 80193ea:	bf00      	nop
 80193ec:	2000d398 	.word	0x2000d398

080193f0 <__malloc_unlock>:
 80193f0:	4801      	ldr	r0, [pc, #4]	@ (80193f8 <__malloc_unlock+0x8>)
 80193f2:	f001 ba7d 	b.w	801a8f0 <__retarget_lock_release_recursive>
 80193f6:	bf00      	nop
 80193f8:	2000d398 	.word	0x2000d398

080193fc <rand>:
 80193fc:	4b16      	ldr	r3, [pc, #88]	@ (8019458 <rand+0x5c>)
 80193fe:	b510      	push	{r4, lr}
 8019400:	681c      	ldr	r4, [r3, #0]
 8019402:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019404:	b9b3      	cbnz	r3, 8019434 <rand+0x38>
 8019406:	2018      	movs	r0, #24
 8019408:	f7ff ff3a 	bl	8019280 <malloc>
 801940c:	4602      	mov	r2, r0
 801940e:	6320      	str	r0, [r4, #48]	@ 0x30
 8019410:	b920      	cbnz	r0, 801941c <rand+0x20>
 8019412:	4b12      	ldr	r3, [pc, #72]	@ (801945c <rand+0x60>)
 8019414:	4812      	ldr	r0, [pc, #72]	@ (8019460 <rand+0x64>)
 8019416:	2152      	movs	r1, #82	@ 0x52
 8019418:	f001 fa80 	bl	801a91c <__assert_func>
 801941c:	4911      	ldr	r1, [pc, #68]	@ (8019464 <rand+0x68>)
 801941e:	4b12      	ldr	r3, [pc, #72]	@ (8019468 <rand+0x6c>)
 8019420:	e9c0 1300 	strd	r1, r3, [r0]
 8019424:	4b11      	ldr	r3, [pc, #68]	@ (801946c <rand+0x70>)
 8019426:	6083      	str	r3, [r0, #8]
 8019428:	230b      	movs	r3, #11
 801942a:	8183      	strh	r3, [r0, #12]
 801942c:	2100      	movs	r1, #0
 801942e:	2001      	movs	r0, #1
 8019430:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019434:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019436:	480e      	ldr	r0, [pc, #56]	@ (8019470 <rand+0x74>)
 8019438:	690b      	ldr	r3, [r1, #16]
 801943a:	694c      	ldr	r4, [r1, #20]
 801943c:	4a0d      	ldr	r2, [pc, #52]	@ (8019474 <rand+0x78>)
 801943e:	4358      	muls	r0, r3
 8019440:	fb02 0004 	mla	r0, r2, r4, r0
 8019444:	fba3 3202 	umull	r3, r2, r3, r2
 8019448:	3301      	adds	r3, #1
 801944a:	eb40 0002 	adc.w	r0, r0, r2
 801944e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019452:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8019456:	bd10      	pop	{r4, pc}
 8019458:	2000003c 	.word	0x2000003c
 801945c:	08021722 	.word	0x08021722
 8019460:	08021739 	.word	0x08021739
 8019464:	abcd330e 	.word	0xabcd330e
 8019468:	e66d1234 	.word	0xe66d1234
 801946c:	0005deec 	.word	0x0005deec
 8019470:	5851f42d 	.word	0x5851f42d
 8019474:	4c957f2d 	.word	0x4c957f2d

08019478 <_strtol_l.constprop.0>:
 8019478:	2b24      	cmp	r3, #36	@ 0x24
 801947a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801947e:	4686      	mov	lr, r0
 8019480:	4690      	mov	r8, r2
 8019482:	d801      	bhi.n	8019488 <_strtol_l.constprop.0+0x10>
 8019484:	2b01      	cmp	r3, #1
 8019486:	d106      	bne.n	8019496 <_strtol_l.constprop.0+0x1e>
 8019488:	f001 fa06 	bl	801a898 <__errno>
 801948c:	2316      	movs	r3, #22
 801948e:	6003      	str	r3, [r0, #0]
 8019490:	2000      	movs	r0, #0
 8019492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019496:	4834      	ldr	r0, [pc, #208]	@ (8019568 <_strtol_l.constprop.0+0xf0>)
 8019498:	460d      	mov	r5, r1
 801949a:	462a      	mov	r2, r5
 801949c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80194a0:	5d06      	ldrb	r6, [r0, r4]
 80194a2:	f016 0608 	ands.w	r6, r6, #8
 80194a6:	d1f8      	bne.n	801949a <_strtol_l.constprop.0+0x22>
 80194a8:	2c2d      	cmp	r4, #45	@ 0x2d
 80194aa:	d12d      	bne.n	8019508 <_strtol_l.constprop.0+0x90>
 80194ac:	782c      	ldrb	r4, [r5, #0]
 80194ae:	2601      	movs	r6, #1
 80194b0:	1c95      	adds	r5, r2, #2
 80194b2:	f033 0210 	bics.w	r2, r3, #16
 80194b6:	d109      	bne.n	80194cc <_strtol_l.constprop.0+0x54>
 80194b8:	2c30      	cmp	r4, #48	@ 0x30
 80194ba:	d12a      	bne.n	8019512 <_strtol_l.constprop.0+0x9a>
 80194bc:	782a      	ldrb	r2, [r5, #0]
 80194be:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80194c2:	2a58      	cmp	r2, #88	@ 0x58
 80194c4:	d125      	bne.n	8019512 <_strtol_l.constprop.0+0x9a>
 80194c6:	786c      	ldrb	r4, [r5, #1]
 80194c8:	2310      	movs	r3, #16
 80194ca:	3502      	adds	r5, #2
 80194cc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80194d0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80194d4:	2200      	movs	r2, #0
 80194d6:	fbbc f9f3 	udiv	r9, ip, r3
 80194da:	4610      	mov	r0, r2
 80194dc:	fb03 ca19 	mls	sl, r3, r9, ip
 80194e0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80194e4:	2f09      	cmp	r7, #9
 80194e6:	d81b      	bhi.n	8019520 <_strtol_l.constprop.0+0xa8>
 80194e8:	463c      	mov	r4, r7
 80194ea:	42a3      	cmp	r3, r4
 80194ec:	dd27      	ble.n	801953e <_strtol_l.constprop.0+0xc6>
 80194ee:	1c57      	adds	r7, r2, #1
 80194f0:	d007      	beq.n	8019502 <_strtol_l.constprop.0+0x8a>
 80194f2:	4581      	cmp	r9, r0
 80194f4:	d320      	bcc.n	8019538 <_strtol_l.constprop.0+0xc0>
 80194f6:	d101      	bne.n	80194fc <_strtol_l.constprop.0+0x84>
 80194f8:	45a2      	cmp	sl, r4
 80194fa:	db1d      	blt.n	8019538 <_strtol_l.constprop.0+0xc0>
 80194fc:	fb00 4003 	mla	r0, r0, r3, r4
 8019500:	2201      	movs	r2, #1
 8019502:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019506:	e7eb      	b.n	80194e0 <_strtol_l.constprop.0+0x68>
 8019508:	2c2b      	cmp	r4, #43	@ 0x2b
 801950a:	bf04      	itt	eq
 801950c:	782c      	ldrbeq	r4, [r5, #0]
 801950e:	1c95      	addeq	r5, r2, #2
 8019510:	e7cf      	b.n	80194b2 <_strtol_l.constprop.0+0x3a>
 8019512:	2b00      	cmp	r3, #0
 8019514:	d1da      	bne.n	80194cc <_strtol_l.constprop.0+0x54>
 8019516:	2c30      	cmp	r4, #48	@ 0x30
 8019518:	bf0c      	ite	eq
 801951a:	2308      	moveq	r3, #8
 801951c:	230a      	movne	r3, #10
 801951e:	e7d5      	b.n	80194cc <_strtol_l.constprop.0+0x54>
 8019520:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8019524:	2f19      	cmp	r7, #25
 8019526:	d801      	bhi.n	801952c <_strtol_l.constprop.0+0xb4>
 8019528:	3c37      	subs	r4, #55	@ 0x37
 801952a:	e7de      	b.n	80194ea <_strtol_l.constprop.0+0x72>
 801952c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8019530:	2f19      	cmp	r7, #25
 8019532:	d804      	bhi.n	801953e <_strtol_l.constprop.0+0xc6>
 8019534:	3c57      	subs	r4, #87	@ 0x57
 8019536:	e7d8      	b.n	80194ea <_strtol_l.constprop.0+0x72>
 8019538:	f04f 32ff 	mov.w	r2, #4294967295
 801953c:	e7e1      	b.n	8019502 <_strtol_l.constprop.0+0x8a>
 801953e:	1c53      	adds	r3, r2, #1
 8019540:	d108      	bne.n	8019554 <_strtol_l.constprop.0+0xdc>
 8019542:	2322      	movs	r3, #34	@ 0x22
 8019544:	f8ce 3000 	str.w	r3, [lr]
 8019548:	4660      	mov	r0, ip
 801954a:	f1b8 0f00 	cmp.w	r8, #0
 801954e:	d0a0      	beq.n	8019492 <_strtol_l.constprop.0+0x1a>
 8019550:	1e69      	subs	r1, r5, #1
 8019552:	e006      	b.n	8019562 <_strtol_l.constprop.0+0xea>
 8019554:	b106      	cbz	r6, 8019558 <_strtol_l.constprop.0+0xe0>
 8019556:	4240      	negs	r0, r0
 8019558:	f1b8 0f00 	cmp.w	r8, #0
 801955c:	d099      	beq.n	8019492 <_strtol_l.constprop.0+0x1a>
 801955e:	2a00      	cmp	r2, #0
 8019560:	d1f6      	bne.n	8019550 <_strtol_l.constprop.0+0xd8>
 8019562:	f8c8 1000 	str.w	r1, [r8]
 8019566:	e794      	b.n	8019492 <_strtol_l.constprop.0+0x1a>
 8019568:	08021792 	.word	0x08021792

0801956c <_strtol_r>:
 801956c:	f7ff bf84 	b.w	8019478 <_strtol_l.constprop.0>

08019570 <strtol>:
 8019570:	4613      	mov	r3, r2
 8019572:	460a      	mov	r2, r1
 8019574:	4601      	mov	r1, r0
 8019576:	4802      	ldr	r0, [pc, #8]	@ (8019580 <strtol+0x10>)
 8019578:	6800      	ldr	r0, [r0, #0]
 801957a:	f7ff bf7d 	b.w	8019478 <_strtol_l.constprop.0>
 801957e:	bf00      	nop
 8019580:	2000003c 	.word	0x2000003c

08019584 <__cvt>:
 8019584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019588:	ec57 6b10 	vmov	r6, r7, d0
 801958c:	2f00      	cmp	r7, #0
 801958e:	460c      	mov	r4, r1
 8019590:	4619      	mov	r1, r3
 8019592:	463b      	mov	r3, r7
 8019594:	bfbb      	ittet	lt
 8019596:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801959a:	461f      	movlt	r7, r3
 801959c:	2300      	movge	r3, #0
 801959e:	232d      	movlt	r3, #45	@ 0x2d
 80195a0:	700b      	strb	r3, [r1, #0]
 80195a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80195a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80195a8:	4691      	mov	r9, r2
 80195aa:	f023 0820 	bic.w	r8, r3, #32
 80195ae:	bfbc      	itt	lt
 80195b0:	4632      	movlt	r2, r6
 80195b2:	4616      	movlt	r6, r2
 80195b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80195b8:	d005      	beq.n	80195c6 <__cvt+0x42>
 80195ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80195be:	d100      	bne.n	80195c2 <__cvt+0x3e>
 80195c0:	3401      	adds	r4, #1
 80195c2:	2102      	movs	r1, #2
 80195c4:	e000      	b.n	80195c8 <__cvt+0x44>
 80195c6:	2103      	movs	r1, #3
 80195c8:	ab03      	add	r3, sp, #12
 80195ca:	9301      	str	r3, [sp, #4]
 80195cc:	ab02      	add	r3, sp, #8
 80195ce:	9300      	str	r3, [sp, #0]
 80195d0:	ec47 6b10 	vmov	d0, r6, r7
 80195d4:	4653      	mov	r3, sl
 80195d6:	4622      	mov	r2, r4
 80195d8:	f001 fa46 	bl	801aa68 <_dtoa_r>
 80195dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80195e0:	4605      	mov	r5, r0
 80195e2:	d119      	bne.n	8019618 <__cvt+0x94>
 80195e4:	f019 0f01 	tst.w	r9, #1
 80195e8:	d00e      	beq.n	8019608 <__cvt+0x84>
 80195ea:	eb00 0904 	add.w	r9, r0, r4
 80195ee:	2200      	movs	r2, #0
 80195f0:	2300      	movs	r3, #0
 80195f2:	4630      	mov	r0, r6
 80195f4:	4639      	mov	r1, r7
 80195f6:	f7e7 fa77 	bl	8000ae8 <__aeabi_dcmpeq>
 80195fa:	b108      	cbz	r0, 8019600 <__cvt+0x7c>
 80195fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8019600:	2230      	movs	r2, #48	@ 0x30
 8019602:	9b03      	ldr	r3, [sp, #12]
 8019604:	454b      	cmp	r3, r9
 8019606:	d31e      	bcc.n	8019646 <__cvt+0xc2>
 8019608:	9b03      	ldr	r3, [sp, #12]
 801960a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801960c:	1b5b      	subs	r3, r3, r5
 801960e:	4628      	mov	r0, r5
 8019610:	6013      	str	r3, [r2, #0]
 8019612:	b004      	add	sp, #16
 8019614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019618:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801961c:	eb00 0904 	add.w	r9, r0, r4
 8019620:	d1e5      	bne.n	80195ee <__cvt+0x6a>
 8019622:	7803      	ldrb	r3, [r0, #0]
 8019624:	2b30      	cmp	r3, #48	@ 0x30
 8019626:	d10a      	bne.n	801963e <__cvt+0xba>
 8019628:	2200      	movs	r2, #0
 801962a:	2300      	movs	r3, #0
 801962c:	4630      	mov	r0, r6
 801962e:	4639      	mov	r1, r7
 8019630:	f7e7 fa5a 	bl	8000ae8 <__aeabi_dcmpeq>
 8019634:	b918      	cbnz	r0, 801963e <__cvt+0xba>
 8019636:	f1c4 0401 	rsb	r4, r4, #1
 801963a:	f8ca 4000 	str.w	r4, [sl]
 801963e:	f8da 3000 	ldr.w	r3, [sl]
 8019642:	4499      	add	r9, r3
 8019644:	e7d3      	b.n	80195ee <__cvt+0x6a>
 8019646:	1c59      	adds	r1, r3, #1
 8019648:	9103      	str	r1, [sp, #12]
 801964a:	701a      	strb	r2, [r3, #0]
 801964c:	e7d9      	b.n	8019602 <__cvt+0x7e>

0801964e <__exponent>:
 801964e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019650:	2900      	cmp	r1, #0
 8019652:	bfba      	itte	lt
 8019654:	4249      	neglt	r1, r1
 8019656:	232d      	movlt	r3, #45	@ 0x2d
 8019658:	232b      	movge	r3, #43	@ 0x2b
 801965a:	2909      	cmp	r1, #9
 801965c:	7002      	strb	r2, [r0, #0]
 801965e:	7043      	strb	r3, [r0, #1]
 8019660:	dd29      	ble.n	80196b6 <__exponent+0x68>
 8019662:	f10d 0307 	add.w	r3, sp, #7
 8019666:	461d      	mov	r5, r3
 8019668:	270a      	movs	r7, #10
 801966a:	461a      	mov	r2, r3
 801966c:	fbb1 f6f7 	udiv	r6, r1, r7
 8019670:	fb07 1416 	mls	r4, r7, r6, r1
 8019674:	3430      	adds	r4, #48	@ 0x30
 8019676:	f802 4c01 	strb.w	r4, [r2, #-1]
 801967a:	460c      	mov	r4, r1
 801967c:	2c63      	cmp	r4, #99	@ 0x63
 801967e:	f103 33ff 	add.w	r3, r3, #4294967295
 8019682:	4631      	mov	r1, r6
 8019684:	dcf1      	bgt.n	801966a <__exponent+0x1c>
 8019686:	3130      	adds	r1, #48	@ 0x30
 8019688:	1e94      	subs	r4, r2, #2
 801968a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801968e:	1c41      	adds	r1, r0, #1
 8019690:	4623      	mov	r3, r4
 8019692:	42ab      	cmp	r3, r5
 8019694:	d30a      	bcc.n	80196ac <__exponent+0x5e>
 8019696:	f10d 0309 	add.w	r3, sp, #9
 801969a:	1a9b      	subs	r3, r3, r2
 801969c:	42ac      	cmp	r4, r5
 801969e:	bf88      	it	hi
 80196a0:	2300      	movhi	r3, #0
 80196a2:	3302      	adds	r3, #2
 80196a4:	4403      	add	r3, r0
 80196a6:	1a18      	subs	r0, r3, r0
 80196a8:	b003      	add	sp, #12
 80196aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 80196b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80196b4:	e7ed      	b.n	8019692 <__exponent+0x44>
 80196b6:	2330      	movs	r3, #48	@ 0x30
 80196b8:	3130      	adds	r1, #48	@ 0x30
 80196ba:	7083      	strb	r3, [r0, #2]
 80196bc:	70c1      	strb	r1, [r0, #3]
 80196be:	1d03      	adds	r3, r0, #4
 80196c0:	e7f1      	b.n	80196a6 <__exponent+0x58>
	...

080196c4 <_printf_float>:
 80196c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196c8:	b08d      	sub	sp, #52	@ 0x34
 80196ca:	460c      	mov	r4, r1
 80196cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80196d0:	4616      	mov	r6, r2
 80196d2:	461f      	mov	r7, r3
 80196d4:	4605      	mov	r5, r0
 80196d6:	f001 f82f 	bl	801a738 <_localeconv_r>
 80196da:	6803      	ldr	r3, [r0, #0]
 80196dc:	9304      	str	r3, [sp, #16]
 80196de:	4618      	mov	r0, r3
 80196e0:	f7e6 fdd6 	bl	8000290 <strlen>
 80196e4:	2300      	movs	r3, #0
 80196e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80196e8:	f8d8 3000 	ldr.w	r3, [r8]
 80196ec:	9005      	str	r0, [sp, #20]
 80196ee:	3307      	adds	r3, #7
 80196f0:	f023 0307 	bic.w	r3, r3, #7
 80196f4:	f103 0208 	add.w	r2, r3, #8
 80196f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80196fc:	f8d4 b000 	ldr.w	fp, [r4]
 8019700:	f8c8 2000 	str.w	r2, [r8]
 8019704:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019708:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801970c:	9307      	str	r3, [sp, #28]
 801970e:	f8cd 8018 	str.w	r8, [sp, #24]
 8019712:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8019716:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801971a:	4b9c      	ldr	r3, [pc, #624]	@ (801998c <_printf_float+0x2c8>)
 801971c:	f04f 32ff 	mov.w	r2, #4294967295
 8019720:	f7e7 fa14 	bl	8000b4c <__aeabi_dcmpun>
 8019724:	bb70      	cbnz	r0, 8019784 <_printf_float+0xc0>
 8019726:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801972a:	4b98      	ldr	r3, [pc, #608]	@ (801998c <_printf_float+0x2c8>)
 801972c:	f04f 32ff 	mov.w	r2, #4294967295
 8019730:	f7e7 f9ee 	bl	8000b10 <__aeabi_dcmple>
 8019734:	bb30      	cbnz	r0, 8019784 <_printf_float+0xc0>
 8019736:	2200      	movs	r2, #0
 8019738:	2300      	movs	r3, #0
 801973a:	4640      	mov	r0, r8
 801973c:	4649      	mov	r1, r9
 801973e:	f7e7 f9dd 	bl	8000afc <__aeabi_dcmplt>
 8019742:	b110      	cbz	r0, 801974a <_printf_float+0x86>
 8019744:	232d      	movs	r3, #45	@ 0x2d
 8019746:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801974a:	4a91      	ldr	r2, [pc, #580]	@ (8019990 <_printf_float+0x2cc>)
 801974c:	4b91      	ldr	r3, [pc, #580]	@ (8019994 <_printf_float+0x2d0>)
 801974e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8019752:	bf94      	ite	ls
 8019754:	4690      	movls	r8, r2
 8019756:	4698      	movhi	r8, r3
 8019758:	2303      	movs	r3, #3
 801975a:	6123      	str	r3, [r4, #16]
 801975c:	f02b 0304 	bic.w	r3, fp, #4
 8019760:	6023      	str	r3, [r4, #0]
 8019762:	f04f 0900 	mov.w	r9, #0
 8019766:	9700      	str	r7, [sp, #0]
 8019768:	4633      	mov	r3, r6
 801976a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801976c:	4621      	mov	r1, r4
 801976e:	4628      	mov	r0, r5
 8019770:	f000 f9d2 	bl	8019b18 <_printf_common>
 8019774:	3001      	adds	r0, #1
 8019776:	f040 808d 	bne.w	8019894 <_printf_float+0x1d0>
 801977a:	f04f 30ff 	mov.w	r0, #4294967295
 801977e:	b00d      	add	sp, #52	@ 0x34
 8019780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019784:	4642      	mov	r2, r8
 8019786:	464b      	mov	r3, r9
 8019788:	4640      	mov	r0, r8
 801978a:	4649      	mov	r1, r9
 801978c:	f7e7 f9de 	bl	8000b4c <__aeabi_dcmpun>
 8019790:	b140      	cbz	r0, 80197a4 <_printf_float+0xe0>
 8019792:	464b      	mov	r3, r9
 8019794:	2b00      	cmp	r3, #0
 8019796:	bfbc      	itt	lt
 8019798:	232d      	movlt	r3, #45	@ 0x2d
 801979a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801979e:	4a7e      	ldr	r2, [pc, #504]	@ (8019998 <_printf_float+0x2d4>)
 80197a0:	4b7e      	ldr	r3, [pc, #504]	@ (801999c <_printf_float+0x2d8>)
 80197a2:	e7d4      	b.n	801974e <_printf_float+0x8a>
 80197a4:	6863      	ldr	r3, [r4, #4]
 80197a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80197aa:	9206      	str	r2, [sp, #24]
 80197ac:	1c5a      	adds	r2, r3, #1
 80197ae:	d13b      	bne.n	8019828 <_printf_float+0x164>
 80197b0:	2306      	movs	r3, #6
 80197b2:	6063      	str	r3, [r4, #4]
 80197b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80197b8:	2300      	movs	r3, #0
 80197ba:	6022      	str	r2, [r4, #0]
 80197bc:	9303      	str	r3, [sp, #12]
 80197be:	ab0a      	add	r3, sp, #40	@ 0x28
 80197c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80197c4:	ab09      	add	r3, sp, #36	@ 0x24
 80197c6:	9300      	str	r3, [sp, #0]
 80197c8:	6861      	ldr	r1, [r4, #4]
 80197ca:	ec49 8b10 	vmov	d0, r8, r9
 80197ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80197d2:	4628      	mov	r0, r5
 80197d4:	f7ff fed6 	bl	8019584 <__cvt>
 80197d8:	9b06      	ldr	r3, [sp, #24]
 80197da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80197dc:	2b47      	cmp	r3, #71	@ 0x47
 80197de:	4680      	mov	r8, r0
 80197e0:	d129      	bne.n	8019836 <_printf_float+0x172>
 80197e2:	1cc8      	adds	r0, r1, #3
 80197e4:	db02      	blt.n	80197ec <_printf_float+0x128>
 80197e6:	6863      	ldr	r3, [r4, #4]
 80197e8:	4299      	cmp	r1, r3
 80197ea:	dd41      	ble.n	8019870 <_printf_float+0x1ac>
 80197ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80197f0:	fa5f fa8a 	uxtb.w	sl, sl
 80197f4:	3901      	subs	r1, #1
 80197f6:	4652      	mov	r2, sl
 80197f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80197fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80197fe:	f7ff ff26 	bl	801964e <__exponent>
 8019802:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019804:	1813      	adds	r3, r2, r0
 8019806:	2a01      	cmp	r2, #1
 8019808:	4681      	mov	r9, r0
 801980a:	6123      	str	r3, [r4, #16]
 801980c:	dc02      	bgt.n	8019814 <_printf_float+0x150>
 801980e:	6822      	ldr	r2, [r4, #0]
 8019810:	07d2      	lsls	r2, r2, #31
 8019812:	d501      	bpl.n	8019818 <_printf_float+0x154>
 8019814:	3301      	adds	r3, #1
 8019816:	6123      	str	r3, [r4, #16]
 8019818:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801981c:	2b00      	cmp	r3, #0
 801981e:	d0a2      	beq.n	8019766 <_printf_float+0xa2>
 8019820:	232d      	movs	r3, #45	@ 0x2d
 8019822:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019826:	e79e      	b.n	8019766 <_printf_float+0xa2>
 8019828:	9a06      	ldr	r2, [sp, #24]
 801982a:	2a47      	cmp	r2, #71	@ 0x47
 801982c:	d1c2      	bne.n	80197b4 <_printf_float+0xf0>
 801982e:	2b00      	cmp	r3, #0
 8019830:	d1c0      	bne.n	80197b4 <_printf_float+0xf0>
 8019832:	2301      	movs	r3, #1
 8019834:	e7bd      	b.n	80197b2 <_printf_float+0xee>
 8019836:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801983a:	d9db      	bls.n	80197f4 <_printf_float+0x130>
 801983c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8019840:	d118      	bne.n	8019874 <_printf_float+0x1b0>
 8019842:	2900      	cmp	r1, #0
 8019844:	6863      	ldr	r3, [r4, #4]
 8019846:	dd0b      	ble.n	8019860 <_printf_float+0x19c>
 8019848:	6121      	str	r1, [r4, #16]
 801984a:	b913      	cbnz	r3, 8019852 <_printf_float+0x18e>
 801984c:	6822      	ldr	r2, [r4, #0]
 801984e:	07d0      	lsls	r0, r2, #31
 8019850:	d502      	bpl.n	8019858 <_printf_float+0x194>
 8019852:	3301      	adds	r3, #1
 8019854:	440b      	add	r3, r1
 8019856:	6123      	str	r3, [r4, #16]
 8019858:	65a1      	str	r1, [r4, #88]	@ 0x58
 801985a:	f04f 0900 	mov.w	r9, #0
 801985e:	e7db      	b.n	8019818 <_printf_float+0x154>
 8019860:	b913      	cbnz	r3, 8019868 <_printf_float+0x1a4>
 8019862:	6822      	ldr	r2, [r4, #0]
 8019864:	07d2      	lsls	r2, r2, #31
 8019866:	d501      	bpl.n	801986c <_printf_float+0x1a8>
 8019868:	3302      	adds	r3, #2
 801986a:	e7f4      	b.n	8019856 <_printf_float+0x192>
 801986c:	2301      	movs	r3, #1
 801986e:	e7f2      	b.n	8019856 <_printf_float+0x192>
 8019870:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8019874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019876:	4299      	cmp	r1, r3
 8019878:	db05      	blt.n	8019886 <_printf_float+0x1c2>
 801987a:	6823      	ldr	r3, [r4, #0]
 801987c:	6121      	str	r1, [r4, #16]
 801987e:	07d8      	lsls	r0, r3, #31
 8019880:	d5ea      	bpl.n	8019858 <_printf_float+0x194>
 8019882:	1c4b      	adds	r3, r1, #1
 8019884:	e7e7      	b.n	8019856 <_printf_float+0x192>
 8019886:	2900      	cmp	r1, #0
 8019888:	bfd4      	ite	le
 801988a:	f1c1 0202 	rsble	r2, r1, #2
 801988e:	2201      	movgt	r2, #1
 8019890:	4413      	add	r3, r2
 8019892:	e7e0      	b.n	8019856 <_printf_float+0x192>
 8019894:	6823      	ldr	r3, [r4, #0]
 8019896:	055a      	lsls	r2, r3, #21
 8019898:	d407      	bmi.n	80198aa <_printf_float+0x1e6>
 801989a:	6923      	ldr	r3, [r4, #16]
 801989c:	4642      	mov	r2, r8
 801989e:	4631      	mov	r1, r6
 80198a0:	4628      	mov	r0, r5
 80198a2:	47b8      	blx	r7
 80198a4:	3001      	adds	r0, #1
 80198a6:	d12b      	bne.n	8019900 <_printf_float+0x23c>
 80198a8:	e767      	b.n	801977a <_printf_float+0xb6>
 80198aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80198ae:	f240 80dd 	bls.w	8019a6c <_printf_float+0x3a8>
 80198b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80198b6:	2200      	movs	r2, #0
 80198b8:	2300      	movs	r3, #0
 80198ba:	f7e7 f915 	bl	8000ae8 <__aeabi_dcmpeq>
 80198be:	2800      	cmp	r0, #0
 80198c0:	d033      	beq.n	801992a <_printf_float+0x266>
 80198c2:	4a37      	ldr	r2, [pc, #220]	@ (80199a0 <_printf_float+0x2dc>)
 80198c4:	2301      	movs	r3, #1
 80198c6:	4631      	mov	r1, r6
 80198c8:	4628      	mov	r0, r5
 80198ca:	47b8      	blx	r7
 80198cc:	3001      	adds	r0, #1
 80198ce:	f43f af54 	beq.w	801977a <_printf_float+0xb6>
 80198d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80198d6:	4543      	cmp	r3, r8
 80198d8:	db02      	blt.n	80198e0 <_printf_float+0x21c>
 80198da:	6823      	ldr	r3, [r4, #0]
 80198dc:	07d8      	lsls	r0, r3, #31
 80198de:	d50f      	bpl.n	8019900 <_printf_float+0x23c>
 80198e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80198e4:	4631      	mov	r1, r6
 80198e6:	4628      	mov	r0, r5
 80198e8:	47b8      	blx	r7
 80198ea:	3001      	adds	r0, #1
 80198ec:	f43f af45 	beq.w	801977a <_printf_float+0xb6>
 80198f0:	f04f 0900 	mov.w	r9, #0
 80198f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80198f8:	f104 0a1a 	add.w	sl, r4, #26
 80198fc:	45c8      	cmp	r8, r9
 80198fe:	dc09      	bgt.n	8019914 <_printf_float+0x250>
 8019900:	6823      	ldr	r3, [r4, #0]
 8019902:	079b      	lsls	r3, r3, #30
 8019904:	f100 8103 	bmi.w	8019b0e <_printf_float+0x44a>
 8019908:	68e0      	ldr	r0, [r4, #12]
 801990a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801990c:	4298      	cmp	r0, r3
 801990e:	bfb8      	it	lt
 8019910:	4618      	movlt	r0, r3
 8019912:	e734      	b.n	801977e <_printf_float+0xba>
 8019914:	2301      	movs	r3, #1
 8019916:	4652      	mov	r2, sl
 8019918:	4631      	mov	r1, r6
 801991a:	4628      	mov	r0, r5
 801991c:	47b8      	blx	r7
 801991e:	3001      	adds	r0, #1
 8019920:	f43f af2b 	beq.w	801977a <_printf_float+0xb6>
 8019924:	f109 0901 	add.w	r9, r9, #1
 8019928:	e7e8      	b.n	80198fc <_printf_float+0x238>
 801992a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801992c:	2b00      	cmp	r3, #0
 801992e:	dc39      	bgt.n	80199a4 <_printf_float+0x2e0>
 8019930:	4a1b      	ldr	r2, [pc, #108]	@ (80199a0 <_printf_float+0x2dc>)
 8019932:	2301      	movs	r3, #1
 8019934:	4631      	mov	r1, r6
 8019936:	4628      	mov	r0, r5
 8019938:	47b8      	blx	r7
 801993a:	3001      	adds	r0, #1
 801993c:	f43f af1d 	beq.w	801977a <_printf_float+0xb6>
 8019940:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8019944:	ea59 0303 	orrs.w	r3, r9, r3
 8019948:	d102      	bne.n	8019950 <_printf_float+0x28c>
 801994a:	6823      	ldr	r3, [r4, #0]
 801994c:	07d9      	lsls	r1, r3, #31
 801994e:	d5d7      	bpl.n	8019900 <_printf_float+0x23c>
 8019950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019954:	4631      	mov	r1, r6
 8019956:	4628      	mov	r0, r5
 8019958:	47b8      	blx	r7
 801995a:	3001      	adds	r0, #1
 801995c:	f43f af0d 	beq.w	801977a <_printf_float+0xb6>
 8019960:	f04f 0a00 	mov.w	sl, #0
 8019964:	f104 0b1a 	add.w	fp, r4, #26
 8019968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801996a:	425b      	negs	r3, r3
 801996c:	4553      	cmp	r3, sl
 801996e:	dc01      	bgt.n	8019974 <_printf_float+0x2b0>
 8019970:	464b      	mov	r3, r9
 8019972:	e793      	b.n	801989c <_printf_float+0x1d8>
 8019974:	2301      	movs	r3, #1
 8019976:	465a      	mov	r2, fp
 8019978:	4631      	mov	r1, r6
 801997a:	4628      	mov	r0, r5
 801997c:	47b8      	blx	r7
 801997e:	3001      	adds	r0, #1
 8019980:	f43f aefb 	beq.w	801977a <_printf_float+0xb6>
 8019984:	f10a 0a01 	add.w	sl, sl, #1
 8019988:	e7ee      	b.n	8019968 <_printf_float+0x2a4>
 801998a:	bf00      	nop
 801998c:	7fefffff 	.word	0x7fefffff
 8019990:	08021892 	.word	0x08021892
 8019994:	08021896 	.word	0x08021896
 8019998:	0802189a 	.word	0x0802189a
 801999c:	0802189e 	.word	0x0802189e
 80199a0:	080218a2 	.word	0x080218a2
 80199a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80199a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80199aa:	4553      	cmp	r3, sl
 80199ac:	bfa8      	it	ge
 80199ae:	4653      	movge	r3, sl
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	4699      	mov	r9, r3
 80199b4:	dc36      	bgt.n	8019a24 <_printf_float+0x360>
 80199b6:	f04f 0b00 	mov.w	fp, #0
 80199ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80199be:	f104 021a 	add.w	r2, r4, #26
 80199c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80199c4:	9306      	str	r3, [sp, #24]
 80199c6:	eba3 0309 	sub.w	r3, r3, r9
 80199ca:	455b      	cmp	r3, fp
 80199cc:	dc31      	bgt.n	8019a32 <_printf_float+0x36e>
 80199ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199d0:	459a      	cmp	sl, r3
 80199d2:	dc3a      	bgt.n	8019a4a <_printf_float+0x386>
 80199d4:	6823      	ldr	r3, [r4, #0]
 80199d6:	07da      	lsls	r2, r3, #31
 80199d8:	d437      	bmi.n	8019a4a <_printf_float+0x386>
 80199da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199dc:	ebaa 0903 	sub.w	r9, sl, r3
 80199e0:	9b06      	ldr	r3, [sp, #24]
 80199e2:	ebaa 0303 	sub.w	r3, sl, r3
 80199e6:	4599      	cmp	r9, r3
 80199e8:	bfa8      	it	ge
 80199ea:	4699      	movge	r9, r3
 80199ec:	f1b9 0f00 	cmp.w	r9, #0
 80199f0:	dc33      	bgt.n	8019a5a <_printf_float+0x396>
 80199f2:	f04f 0800 	mov.w	r8, #0
 80199f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80199fa:	f104 0b1a 	add.w	fp, r4, #26
 80199fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a00:	ebaa 0303 	sub.w	r3, sl, r3
 8019a04:	eba3 0309 	sub.w	r3, r3, r9
 8019a08:	4543      	cmp	r3, r8
 8019a0a:	f77f af79 	ble.w	8019900 <_printf_float+0x23c>
 8019a0e:	2301      	movs	r3, #1
 8019a10:	465a      	mov	r2, fp
 8019a12:	4631      	mov	r1, r6
 8019a14:	4628      	mov	r0, r5
 8019a16:	47b8      	blx	r7
 8019a18:	3001      	adds	r0, #1
 8019a1a:	f43f aeae 	beq.w	801977a <_printf_float+0xb6>
 8019a1e:	f108 0801 	add.w	r8, r8, #1
 8019a22:	e7ec      	b.n	80199fe <_printf_float+0x33a>
 8019a24:	4642      	mov	r2, r8
 8019a26:	4631      	mov	r1, r6
 8019a28:	4628      	mov	r0, r5
 8019a2a:	47b8      	blx	r7
 8019a2c:	3001      	adds	r0, #1
 8019a2e:	d1c2      	bne.n	80199b6 <_printf_float+0x2f2>
 8019a30:	e6a3      	b.n	801977a <_printf_float+0xb6>
 8019a32:	2301      	movs	r3, #1
 8019a34:	4631      	mov	r1, r6
 8019a36:	4628      	mov	r0, r5
 8019a38:	9206      	str	r2, [sp, #24]
 8019a3a:	47b8      	blx	r7
 8019a3c:	3001      	adds	r0, #1
 8019a3e:	f43f ae9c 	beq.w	801977a <_printf_float+0xb6>
 8019a42:	9a06      	ldr	r2, [sp, #24]
 8019a44:	f10b 0b01 	add.w	fp, fp, #1
 8019a48:	e7bb      	b.n	80199c2 <_printf_float+0x2fe>
 8019a4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019a4e:	4631      	mov	r1, r6
 8019a50:	4628      	mov	r0, r5
 8019a52:	47b8      	blx	r7
 8019a54:	3001      	adds	r0, #1
 8019a56:	d1c0      	bne.n	80199da <_printf_float+0x316>
 8019a58:	e68f      	b.n	801977a <_printf_float+0xb6>
 8019a5a:	9a06      	ldr	r2, [sp, #24]
 8019a5c:	464b      	mov	r3, r9
 8019a5e:	4442      	add	r2, r8
 8019a60:	4631      	mov	r1, r6
 8019a62:	4628      	mov	r0, r5
 8019a64:	47b8      	blx	r7
 8019a66:	3001      	adds	r0, #1
 8019a68:	d1c3      	bne.n	80199f2 <_printf_float+0x32e>
 8019a6a:	e686      	b.n	801977a <_printf_float+0xb6>
 8019a6c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8019a70:	f1ba 0f01 	cmp.w	sl, #1
 8019a74:	dc01      	bgt.n	8019a7a <_printf_float+0x3b6>
 8019a76:	07db      	lsls	r3, r3, #31
 8019a78:	d536      	bpl.n	8019ae8 <_printf_float+0x424>
 8019a7a:	2301      	movs	r3, #1
 8019a7c:	4642      	mov	r2, r8
 8019a7e:	4631      	mov	r1, r6
 8019a80:	4628      	mov	r0, r5
 8019a82:	47b8      	blx	r7
 8019a84:	3001      	adds	r0, #1
 8019a86:	f43f ae78 	beq.w	801977a <_printf_float+0xb6>
 8019a8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019a8e:	4631      	mov	r1, r6
 8019a90:	4628      	mov	r0, r5
 8019a92:	47b8      	blx	r7
 8019a94:	3001      	adds	r0, #1
 8019a96:	f43f ae70 	beq.w	801977a <_printf_float+0xb6>
 8019a9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8019a9e:	2200      	movs	r2, #0
 8019aa0:	2300      	movs	r3, #0
 8019aa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019aa6:	f7e7 f81f 	bl	8000ae8 <__aeabi_dcmpeq>
 8019aaa:	b9c0      	cbnz	r0, 8019ade <_printf_float+0x41a>
 8019aac:	4653      	mov	r3, sl
 8019aae:	f108 0201 	add.w	r2, r8, #1
 8019ab2:	4631      	mov	r1, r6
 8019ab4:	4628      	mov	r0, r5
 8019ab6:	47b8      	blx	r7
 8019ab8:	3001      	adds	r0, #1
 8019aba:	d10c      	bne.n	8019ad6 <_printf_float+0x412>
 8019abc:	e65d      	b.n	801977a <_printf_float+0xb6>
 8019abe:	2301      	movs	r3, #1
 8019ac0:	465a      	mov	r2, fp
 8019ac2:	4631      	mov	r1, r6
 8019ac4:	4628      	mov	r0, r5
 8019ac6:	47b8      	blx	r7
 8019ac8:	3001      	adds	r0, #1
 8019aca:	f43f ae56 	beq.w	801977a <_printf_float+0xb6>
 8019ace:	f108 0801 	add.w	r8, r8, #1
 8019ad2:	45d0      	cmp	r8, sl
 8019ad4:	dbf3      	blt.n	8019abe <_printf_float+0x3fa>
 8019ad6:	464b      	mov	r3, r9
 8019ad8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8019adc:	e6df      	b.n	801989e <_printf_float+0x1da>
 8019ade:	f04f 0800 	mov.w	r8, #0
 8019ae2:	f104 0b1a 	add.w	fp, r4, #26
 8019ae6:	e7f4      	b.n	8019ad2 <_printf_float+0x40e>
 8019ae8:	2301      	movs	r3, #1
 8019aea:	4642      	mov	r2, r8
 8019aec:	e7e1      	b.n	8019ab2 <_printf_float+0x3ee>
 8019aee:	2301      	movs	r3, #1
 8019af0:	464a      	mov	r2, r9
 8019af2:	4631      	mov	r1, r6
 8019af4:	4628      	mov	r0, r5
 8019af6:	47b8      	blx	r7
 8019af8:	3001      	adds	r0, #1
 8019afa:	f43f ae3e 	beq.w	801977a <_printf_float+0xb6>
 8019afe:	f108 0801 	add.w	r8, r8, #1
 8019b02:	68e3      	ldr	r3, [r4, #12]
 8019b04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019b06:	1a5b      	subs	r3, r3, r1
 8019b08:	4543      	cmp	r3, r8
 8019b0a:	dcf0      	bgt.n	8019aee <_printf_float+0x42a>
 8019b0c:	e6fc      	b.n	8019908 <_printf_float+0x244>
 8019b0e:	f04f 0800 	mov.w	r8, #0
 8019b12:	f104 0919 	add.w	r9, r4, #25
 8019b16:	e7f4      	b.n	8019b02 <_printf_float+0x43e>

08019b18 <_printf_common>:
 8019b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b1c:	4616      	mov	r6, r2
 8019b1e:	4698      	mov	r8, r3
 8019b20:	688a      	ldr	r2, [r1, #8]
 8019b22:	690b      	ldr	r3, [r1, #16]
 8019b24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019b28:	4293      	cmp	r3, r2
 8019b2a:	bfb8      	it	lt
 8019b2c:	4613      	movlt	r3, r2
 8019b2e:	6033      	str	r3, [r6, #0]
 8019b30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019b34:	4607      	mov	r7, r0
 8019b36:	460c      	mov	r4, r1
 8019b38:	b10a      	cbz	r2, 8019b3e <_printf_common+0x26>
 8019b3a:	3301      	adds	r3, #1
 8019b3c:	6033      	str	r3, [r6, #0]
 8019b3e:	6823      	ldr	r3, [r4, #0]
 8019b40:	0699      	lsls	r1, r3, #26
 8019b42:	bf42      	ittt	mi
 8019b44:	6833      	ldrmi	r3, [r6, #0]
 8019b46:	3302      	addmi	r3, #2
 8019b48:	6033      	strmi	r3, [r6, #0]
 8019b4a:	6825      	ldr	r5, [r4, #0]
 8019b4c:	f015 0506 	ands.w	r5, r5, #6
 8019b50:	d106      	bne.n	8019b60 <_printf_common+0x48>
 8019b52:	f104 0a19 	add.w	sl, r4, #25
 8019b56:	68e3      	ldr	r3, [r4, #12]
 8019b58:	6832      	ldr	r2, [r6, #0]
 8019b5a:	1a9b      	subs	r3, r3, r2
 8019b5c:	42ab      	cmp	r3, r5
 8019b5e:	dc26      	bgt.n	8019bae <_printf_common+0x96>
 8019b60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019b64:	6822      	ldr	r2, [r4, #0]
 8019b66:	3b00      	subs	r3, #0
 8019b68:	bf18      	it	ne
 8019b6a:	2301      	movne	r3, #1
 8019b6c:	0692      	lsls	r2, r2, #26
 8019b6e:	d42b      	bmi.n	8019bc8 <_printf_common+0xb0>
 8019b70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019b74:	4641      	mov	r1, r8
 8019b76:	4638      	mov	r0, r7
 8019b78:	47c8      	blx	r9
 8019b7a:	3001      	adds	r0, #1
 8019b7c:	d01e      	beq.n	8019bbc <_printf_common+0xa4>
 8019b7e:	6823      	ldr	r3, [r4, #0]
 8019b80:	6922      	ldr	r2, [r4, #16]
 8019b82:	f003 0306 	and.w	r3, r3, #6
 8019b86:	2b04      	cmp	r3, #4
 8019b88:	bf02      	ittt	eq
 8019b8a:	68e5      	ldreq	r5, [r4, #12]
 8019b8c:	6833      	ldreq	r3, [r6, #0]
 8019b8e:	1aed      	subeq	r5, r5, r3
 8019b90:	68a3      	ldr	r3, [r4, #8]
 8019b92:	bf0c      	ite	eq
 8019b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019b98:	2500      	movne	r5, #0
 8019b9a:	4293      	cmp	r3, r2
 8019b9c:	bfc4      	itt	gt
 8019b9e:	1a9b      	subgt	r3, r3, r2
 8019ba0:	18ed      	addgt	r5, r5, r3
 8019ba2:	2600      	movs	r6, #0
 8019ba4:	341a      	adds	r4, #26
 8019ba6:	42b5      	cmp	r5, r6
 8019ba8:	d11a      	bne.n	8019be0 <_printf_common+0xc8>
 8019baa:	2000      	movs	r0, #0
 8019bac:	e008      	b.n	8019bc0 <_printf_common+0xa8>
 8019bae:	2301      	movs	r3, #1
 8019bb0:	4652      	mov	r2, sl
 8019bb2:	4641      	mov	r1, r8
 8019bb4:	4638      	mov	r0, r7
 8019bb6:	47c8      	blx	r9
 8019bb8:	3001      	adds	r0, #1
 8019bba:	d103      	bne.n	8019bc4 <_printf_common+0xac>
 8019bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8019bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bc4:	3501      	adds	r5, #1
 8019bc6:	e7c6      	b.n	8019b56 <_printf_common+0x3e>
 8019bc8:	18e1      	adds	r1, r4, r3
 8019bca:	1c5a      	adds	r2, r3, #1
 8019bcc:	2030      	movs	r0, #48	@ 0x30
 8019bce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019bd2:	4422      	add	r2, r4
 8019bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019bd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019bdc:	3302      	adds	r3, #2
 8019bde:	e7c7      	b.n	8019b70 <_printf_common+0x58>
 8019be0:	2301      	movs	r3, #1
 8019be2:	4622      	mov	r2, r4
 8019be4:	4641      	mov	r1, r8
 8019be6:	4638      	mov	r0, r7
 8019be8:	47c8      	blx	r9
 8019bea:	3001      	adds	r0, #1
 8019bec:	d0e6      	beq.n	8019bbc <_printf_common+0xa4>
 8019bee:	3601      	adds	r6, #1
 8019bf0:	e7d9      	b.n	8019ba6 <_printf_common+0x8e>
	...

08019bf4 <_printf_i>:
 8019bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019bf8:	7e0f      	ldrb	r7, [r1, #24]
 8019bfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019bfc:	2f78      	cmp	r7, #120	@ 0x78
 8019bfe:	4691      	mov	r9, r2
 8019c00:	4680      	mov	r8, r0
 8019c02:	460c      	mov	r4, r1
 8019c04:	469a      	mov	sl, r3
 8019c06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019c0a:	d807      	bhi.n	8019c1c <_printf_i+0x28>
 8019c0c:	2f62      	cmp	r7, #98	@ 0x62
 8019c0e:	d80a      	bhi.n	8019c26 <_printf_i+0x32>
 8019c10:	2f00      	cmp	r7, #0
 8019c12:	f000 80d2 	beq.w	8019dba <_printf_i+0x1c6>
 8019c16:	2f58      	cmp	r7, #88	@ 0x58
 8019c18:	f000 80b9 	beq.w	8019d8e <_printf_i+0x19a>
 8019c1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019c20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019c24:	e03a      	b.n	8019c9c <_printf_i+0xa8>
 8019c26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019c2a:	2b15      	cmp	r3, #21
 8019c2c:	d8f6      	bhi.n	8019c1c <_printf_i+0x28>
 8019c2e:	a101      	add	r1, pc, #4	@ (adr r1, 8019c34 <_printf_i+0x40>)
 8019c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019c34:	08019c8d 	.word	0x08019c8d
 8019c38:	08019ca1 	.word	0x08019ca1
 8019c3c:	08019c1d 	.word	0x08019c1d
 8019c40:	08019c1d 	.word	0x08019c1d
 8019c44:	08019c1d 	.word	0x08019c1d
 8019c48:	08019c1d 	.word	0x08019c1d
 8019c4c:	08019ca1 	.word	0x08019ca1
 8019c50:	08019c1d 	.word	0x08019c1d
 8019c54:	08019c1d 	.word	0x08019c1d
 8019c58:	08019c1d 	.word	0x08019c1d
 8019c5c:	08019c1d 	.word	0x08019c1d
 8019c60:	08019da1 	.word	0x08019da1
 8019c64:	08019ccb 	.word	0x08019ccb
 8019c68:	08019d5b 	.word	0x08019d5b
 8019c6c:	08019c1d 	.word	0x08019c1d
 8019c70:	08019c1d 	.word	0x08019c1d
 8019c74:	08019dc3 	.word	0x08019dc3
 8019c78:	08019c1d 	.word	0x08019c1d
 8019c7c:	08019ccb 	.word	0x08019ccb
 8019c80:	08019c1d 	.word	0x08019c1d
 8019c84:	08019c1d 	.word	0x08019c1d
 8019c88:	08019d63 	.word	0x08019d63
 8019c8c:	6833      	ldr	r3, [r6, #0]
 8019c8e:	1d1a      	adds	r2, r3, #4
 8019c90:	681b      	ldr	r3, [r3, #0]
 8019c92:	6032      	str	r2, [r6, #0]
 8019c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019c98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019c9c:	2301      	movs	r3, #1
 8019c9e:	e09d      	b.n	8019ddc <_printf_i+0x1e8>
 8019ca0:	6833      	ldr	r3, [r6, #0]
 8019ca2:	6820      	ldr	r0, [r4, #0]
 8019ca4:	1d19      	adds	r1, r3, #4
 8019ca6:	6031      	str	r1, [r6, #0]
 8019ca8:	0606      	lsls	r6, r0, #24
 8019caa:	d501      	bpl.n	8019cb0 <_printf_i+0xbc>
 8019cac:	681d      	ldr	r5, [r3, #0]
 8019cae:	e003      	b.n	8019cb8 <_printf_i+0xc4>
 8019cb0:	0645      	lsls	r5, r0, #25
 8019cb2:	d5fb      	bpl.n	8019cac <_printf_i+0xb8>
 8019cb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019cb8:	2d00      	cmp	r5, #0
 8019cba:	da03      	bge.n	8019cc4 <_printf_i+0xd0>
 8019cbc:	232d      	movs	r3, #45	@ 0x2d
 8019cbe:	426d      	negs	r5, r5
 8019cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019cc4:	4859      	ldr	r0, [pc, #356]	@ (8019e2c <_printf_i+0x238>)
 8019cc6:	230a      	movs	r3, #10
 8019cc8:	e011      	b.n	8019cee <_printf_i+0xfa>
 8019cca:	6821      	ldr	r1, [r4, #0]
 8019ccc:	6833      	ldr	r3, [r6, #0]
 8019cce:	0608      	lsls	r0, r1, #24
 8019cd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8019cd4:	d402      	bmi.n	8019cdc <_printf_i+0xe8>
 8019cd6:	0649      	lsls	r1, r1, #25
 8019cd8:	bf48      	it	mi
 8019cda:	b2ad      	uxthmi	r5, r5
 8019cdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8019cde:	4853      	ldr	r0, [pc, #332]	@ (8019e2c <_printf_i+0x238>)
 8019ce0:	6033      	str	r3, [r6, #0]
 8019ce2:	bf14      	ite	ne
 8019ce4:	230a      	movne	r3, #10
 8019ce6:	2308      	moveq	r3, #8
 8019ce8:	2100      	movs	r1, #0
 8019cea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019cee:	6866      	ldr	r6, [r4, #4]
 8019cf0:	60a6      	str	r6, [r4, #8]
 8019cf2:	2e00      	cmp	r6, #0
 8019cf4:	bfa2      	ittt	ge
 8019cf6:	6821      	ldrge	r1, [r4, #0]
 8019cf8:	f021 0104 	bicge.w	r1, r1, #4
 8019cfc:	6021      	strge	r1, [r4, #0]
 8019cfe:	b90d      	cbnz	r5, 8019d04 <_printf_i+0x110>
 8019d00:	2e00      	cmp	r6, #0
 8019d02:	d04b      	beq.n	8019d9c <_printf_i+0x1a8>
 8019d04:	4616      	mov	r6, r2
 8019d06:	fbb5 f1f3 	udiv	r1, r5, r3
 8019d0a:	fb03 5711 	mls	r7, r3, r1, r5
 8019d0e:	5dc7      	ldrb	r7, [r0, r7]
 8019d10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019d14:	462f      	mov	r7, r5
 8019d16:	42bb      	cmp	r3, r7
 8019d18:	460d      	mov	r5, r1
 8019d1a:	d9f4      	bls.n	8019d06 <_printf_i+0x112>
 8019d1c:	2b08      	cmp	r3, #8
 8019d1e:	d10b      	bne.n	8019d38 <_printf_i+0x144>
 8019d20:	6823      	ldr	r3, [r4, #0]
 8019d22:	07df      	lsls	r7, r3, #31
 8019d24:	d508      	bpl.n	8019d38 <_printf_i+0x144>
 8019d26:	6923      	ldr	r3, [r4, #16]
 8019d28:	6861      	ldr	r1, [r4, #4]
 8019d2a:	4299      	cmp	r1, r3
 8019d2c:	bfde      	ittt	le
 8019d2e:	2330      	movle	r3, #48	@ 0x30
 8019d30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019d34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019d38:	1b92      	subs	r2, r2, r6
 8019d3a:	6122      	str	r2, [r4, #16]
 8019d3c:	f8cd a000 	str.w	sl, [sp]
 8019d40:	464b      	mov	r3, r9
 8019d42:	aa03      	add	r2, sp, #12
 8019d44:	4621      	mov	r1, r4
 8019d46:	4640      	mov	r0, r8
 8019d48:	f7ff fee6 	bl	8019b18 <_printf_common>
 8019d4c:	3001      	adds	r0, #1
 8019d4e:	d14a      	bne.n	8019de6 <_printf_i+0x1f2>
 8019d50:	f04f 30ff 	mov.w	r0, #4294967295
 8019d54:	b004      	add	sp, #16
 8019d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d5a:	6823      	ldr	r3, [r4, #0]
 8019d5c:	f043 0320 	orr.w	r3, r3, #32
 8019d60:	6023      	str	r3, [r4, #0]
 8019d62:	4833      	ldr	r0, [pc, #204]	@ (8019e30 <_printf_i+0x23c>)
 8019d64:	2778      	movs	r7, #120	@ 0x78
 8019d66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019d6a:	6823      	ldr	r3, [r4, #0]
 8019d6c:	6831      	ldr	r1, [r6, #0]
 8019d6e:	061f      	lsls	r7, r3, #24
 8019d70:	f851 5b04 	ldr.w	r5, [r1], #4
 8019d74:	d402      	bmi.n	8019d7c <_printf_i+0x188>
 8019d76:	065f      	lsls	r7, r3, #25
 8019d78:	bf48      	it	mi
 8019d7a:	b2ad      	uxthmi	r5, r5
 8019d7c:	6031      	str	r1, [r6, #0]
 8019d7e:	07d9      	lsls	r1, r3, #31
 8019d80:	bf44      	itt	mi
 8019d82:	f043 0320 	orrmi.w	r3, r3, #32
 8019d86:	6023      	strmi	r3, [r4, #0]
 8019d88:	b11d      	cbz	r5, 8019d92 <_printf_i+0x19e>
 8019d8a:	2310      	movs	r3, #16
 8019d8c:	e7ac      	b.n	8019ce8 <_printf_i+0xf4>
 8019d8e:	4827      	ldr	r0, [pc, #156]	@ (8019e2c <_printf_i+0x238>)
 8019d90:	e7e9      	b.n	8019d66 <_printf_i+0x172>
 8019d92:	6823      	ldr	r3, [r4, #0]
 8019d94:	f023 0320 	bic.w	r3, r3, #32
 8019d98:	6023      	str	r3, [r4, #0]
 8019d9a:	e7f6      	b.n	8019d8a <_printf_i+0x196>
 8019d9c:	4616      	mov	r6, r2
 8019d9e:	e7bd      	b.n	8019d1c <_printf_i+0x128>
 8019da0:	6833      	ldr	r3, [r6, #0]
 8019da2:	6825      	ldr	r5, [r4, #0]
 8019da4:	6961      	ldr	r1, [r4, #20]
 8019da6:	1d18      	adds	r0, r3, #4
 8019da8:	6030      	str	r0, [r6, #0]
 8019daa:	062e      	lsls	r6, r5, #24
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	d501      	bpl.n	8019db4 <_printf_i+0x1c0>
 8019db0:	6019      	str	r1, [r3, #0]
 8019db2:	e002      	b.n	8019dba <_printf_i+0x1c6>
 8019db4:	0668      	lsls	r0, r5, #25
 8019db6:	d5fb      	bpl.n	8019db0 <_printf_i+0x1bc>
 8019db8:	8019      	strh	r1, [r3, #0]
 8019dba:	2300      	movs	r3, #0
 8019dbc:	6123      	str	r3, [r4, #16]
 8019dbe:	4616      	mov	r6, r2
 8019dc0:	e7bc      	b.n	8019d3c <_printf_i+0x148>
 8019dc2:	6833      	ldr	r3, [r6, #0]
 8019dc4:	1d1a      	adds	r2, r3, #4
 8019dc6:	6032      	str	r2, [r6, #0]
 8019dc8:	681e      	ldr	r6, [r3, #0]
 8019dca:	6862      	ldr	r2, [r4, #4]
 8019dcc:	2100      	movs	r1, #0
 8019dce:	4630      	mov	r0, r6
 8019dd0:	f7e6 fa0e 	bl	80001f0 <memchr>
 8019dd4:	b108      	cbz	r0, 8019dda <_printf_i+0x1e6>
 8019dd6:	1b80      	subs	r0, r0, r6
 8019dd8:	6060      	str	r0, [r4, #4]
 8019dda:	6863      	ldr	r3, [r4, #4]
 8019ddc:	6123      	str	r3, [r4, #16]
 8019dde:	2300      	movs	r3, #0
 8019de0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019de4:	e7aa      	b.n	8019d3c <_printf_i+0x148>
 8019de6:	6923      	ldr	r3, [r4, #16]
 8019de8:	4632      	mov	r2, r6
 8019dea:	4649      	mov	r1, r9
 8019dec:	4640      	mov	r0, r8
 8019dee:	47d0      	blx	sl
 8019df0:	3001      	adds	r0, #1
 8019df2:	d0ad      	beq.n	8019d50 <_printf_i+0x15c>
 8019df4:	6823      	ldr	r3, [r4, #0]
 8019df6:	079b      	lsls	r3, r3, #30
 8019df8:	d413      	bmi.n	8019e22 <_printf_i+0x22e>
 8019dfa:	68e0      	ldr	r0, [r4, #12]
 8019dfc:	9b03      	ldr	r3, [sp, #12]
 8019dfe:	4298      	cmp	r0, r3
 8019e00:	bfb8      	it	lt
 8019e02:	4618      	movlt	r0, r3
 8019e04:	e7a6      	b.n	8019d54 <_printf_i+0x160>
 8019e06:	2301      	movs	r3, #1
 8019e08:	4632      	mov	r2, r6
 8019e0a:	4649      	mov	r1, r9
 8019e0c:	4640      	mov	r0, r8
 8019e0e:	47d0      	blx	sl
 8019e10:	3001      	adds	r0, #1
 8019e12:	d09d      	beq.n	8019d50 <_printf_i+0x15c>
 8019e14:	3501      	adds	r5, #1
 8019e16:	68e3      	ldr	r3, [r4, #12]
 8019e18:	9903      	ldr	r1, [sp, #12]
 8019e1a:	1a5b      	subs	r3, r3, r1
 8019e1c:	42ab      	cmp	r3, r5
 8019e1e:	dcf2      	bgt.n	8019e06 <_printf_i+0x212>
 8019e20:	e7eb      	b.n	8019dfa <_printf_i+0x206>
 8019e22:	2500      	movs	r5, #0
 8019e24:	f104 0619 	add.w	r6, r4, #25
 8019e28:	e7f5      	b.n	8019e16 <_printf_i+0x222>
 8019e2a:	bf00      	nop
 8019e2c:	080218a4 	.word	0x080218a4
 8019e30:	080218b5 	.word	0x080218b5

08019e34 <_scanf_float>:
 8019e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e38:	b087      	sub	sp, #28
 8019e3a:	4617      	mov	r7, r2
 8019e3c:	9303      	str	r3, [sp, #12]
 8019e3e:	688b      	ldr	r3, [r1, #8]
 8019e40:	1e5a      	subs	r2, r3, #1
 8019e42:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8019e46:	bf81      	itttt	hi
 8019e48:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8019e4c:	eb03 0b05 	addhi.w	fp, r3, r5
 8019e50:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8019e54:	608b      	strhi	r3, [r1, #8]
 8019e56:	680b      	ldr	r3, [r1, #0]
 8019e58:	460a      	mov	r2, r1
 8019e5a:	f04f 0500 	mov.w	r5, #0
 8019e5e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8019e62:	f842 3b1c 	str.w	r3, [r2], #28
 8019e66:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019e6a:	4680      	mov	r8, r0
 8019e6c:	460c      	mov	r4, r1
 8019e6e:	bf98      	it	ls
 8019e70:	f04f 0b00 	movls.w	fp, #0
 8019e74:	9201      	str	r2, [sp, #4]
 8019e76:	4616      	mov	r6, r2
 8019e78:	46aa      	mov	sl, r5
 8019e7a:	46a9      	mov	r9, r5
 8019e7c:	9502      	str	r5, [sp, #8]
 8019e7e:	68a2      	ldr	r2, [r4, #8]
 8019e80:	b152      	cbz	r2, 8019e98 <_scanf_float+0x64>
 8019e82:	683b      	ldr	r3, [r7, #0]
 8019e84:	781b      	ldrb	r3, [r3, #0]
 8019e86:	2b4e      	cmp	r3, #78	@ 0x4e
 8019e88:	d864      	bhi.n	8019f54 <_scanf_float+0x120>
 8019e8a:	2b40      	cmp	r3, #64	@ 0x40
 8019e8c:	d83c      	bhi.n	8019f08 <_scanf_float+0xd4>
 8019e8e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8019e92:	b2c8      	uxtb	r0, r1
 8019e94:	280e      	cmp	r0, #14
 8019e96:	d93a      	bls.n	8019f0e <_scanf_float+0xda>
 8019e98:	f1b9 0f00 	cmp.w	r9, #0
 8019e9c:	d003      	beq.n	8019ea6 <_scanf_float+0x72>
 8019e9e:	6823      	ldr	r3, [r4, #0]
 8019ea0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019ea4:	6023      	str	r3, [r4, #0]
 8019ea6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019eaa:	f1ba 0f01 	cmp.w	sl, #1
 8019eae:	f200 8117 	bhi.w	801a0e0 <_scanf_float+0x2ac>
 8019eb2:	9b01      	ldr	r3, [sp, #4]
 8019eb4:	429e      	cmp	r6, r3
 8019eb6:	f200 8108 	bhi.w	801a0ca <_scanf_float+0x296>
 8019eba:	2001      	movs	r0, #1
 8019ebc:	b007      	add	sp, #28
 8019ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ec2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8019ec6:	2a0d      	cmp	r2, #13
 8019ec8:	d8e6      	bhi.n	8019e98 <_scanf_float+0x64>
 8019eca:	a101      	add	r1, pc, #4	@ (adr r1, 8019ed0 <_scanf_float+0x9c>)
 8019ecc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019ed0:	0801a017 	.word	0x0801a017
 8019ed4:	08019e99 	.word	0x08019e99
 8019ed8:	08019e99 	.word	0x08019e99
 8019edc:	08019e99 	.word	0x08019e99
 8019ee0:	0801a077 	.word	0x0801a077
 8019ee4:	0801a04f 	.word	0x0801a04f
 8019ee8:	08019e99 	.word	0x08019e99
 8019eec:	08019e99 	.word	0x08019e99
 8019ef0:	0801a025 	.word	0x0801a025
 8019ef4:	08019e99 	.word	0x08019e99
 8019ef8:	08019e99 	.word	0x08019e99
 8019efc:	08019e99 	.word	0x08019e99
 8019f00:	08019e99 	.word	0x08019e99
 8019f04:	08019fdd 	.word	0x08019fdd
 8019f08:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8019f0c:	e7db      	b.n	8019ec6 <_scanf_float+0x92>
 8019f0e:	290e      	cmp	r1, #14
 8019f10:	d8c2      	bhi.n	8019e98 <_scanf_float+0x64>
 8019f12:	a001      	add	r0, pc, #4	@ (adr r0, 8019f18 <_scanf_float+0xe4>)
 8019f14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019f18:	08019fcd 	.word	0x08019fcd
 8019f1c:	08019e99 	.word	0x08019e99
 8019f20:	08019fcd 	.word	0x08019fcd
 8019f24:	0801a063 	.word	0x0801a063
 8019f28:	08019e99 	.word	0x08019e99
 8019f2c:	08019f75 	.word	0x08019f75
 8019f30:	08019fb3 	.word	0x08019fb3
 8019f34:	08019fb3 	.word	0x08019fb3
 8019f38:	08019fb3 	.word	0x08019fb3
 8019f3c:	08019fb3 	.word	0x08019fb3
 8019f40:	08019fb3 	.word	0x08019fb3
 8019f44:	08019fb3 	.word	0x08019fb3
 8019f48:	08019fb3 	.word	0x08019fb3
 8019f4c:	08019fb3 	.word	0x08019fb3
 8019f50:	08019fb3 	.word	0x08019fb3
 8019f54:	2b6e      	cmp	r3, #110	@ 0x6e
 8019f56:	d809      	bhi.n	8019f6c <_scanf_float+0x138>
 8019f58:	2b60      	cmp	r3, #96	@ 0x60
 8019f5a:	d8b2      	bhi.n	8019ec2 <_scanf_float+0x8e>
 8019f5c:	2b54      	cmp	r3, #84	@ 0x54
 8019f5e:	d07b      	beq.n	801a058 <_scanf_float+0x224>
 8019f60:	2b59      	cmp	r3, #89	@ 0x59
 8019f62:	d199      	bne.n	8019e98 <_scanf_float+0x64>
 8019f64:	2d07      	cmp	r5, #7
 8019f66:	d197      	bne.n	8019e98 <_scanf_float+0x64>
 8019f68:	2508      	movs	r5, #8
 8019f6a:	e02c      	b.n	8019fc6 <_scanf_float+0x192>
 8019f6c:	2b74      	cmp	r3, #116	@ 0x74
 8019f6e:	d073      	beq.n	801a058 <_scanf_float+0x224>
 8019f70:	2b79      	cmp	r3, #121	@ 0x79
 8019f72:	e7f6      	b.n	8019f62 <_scanf_float+0x12e>
 8019f74:	6821      	ldr	r1, [r4, #0]
 8019f76:	05c8      	lsls	r0, r1, #23
 8019f78:	d51b      	bpl.n	8019fb2 <_scanf_float+0x17e>
 8019f7a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8019f7e:	6021      	str	r1, [r4, #0]
 8019f80:	f109 0901 	add.w	r9, r9, #1
 8019f84:	f1bb 0f00 	cmp.w	fp, #0
 8019f88:	d003      	beq.n	8019f92 <_scanf_float+0x15e>
 8019f8a:	3201      	adds	r2, #1
 8019f8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019f90:	60a2      	str	r2, [r4, #8]
 8019f92:	68a3      	ldr	r3, [r4, #8]
 8019f94:	3b01      	subs	r3, #1
 8019f96:	60a3      	str	r3, [r4, #8]
 8019f98:	6923      	ldr	r3, [r4, #16]
 8019f9a:	3301      	adds	r3, #1
 8019f9c:	6123      	str	r3, [r4, #16]
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	3b01      	subs	r3, #1
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	607b      	str	r3, [r7, #4]
 8019fa6:	f340 8087 	ble.w	801a0b8 <_scanf_float+0x284>
 8019faa:	683b      	ldr	r3, [r7, #0]
 8019fac:	3301      	adds	r3, #1
 8019fae:	603b      	str	r3, [r7, #0]
 8019fb0:	e765      	b.n	8019e7e <_scanf_float+0x4a>
 8019fb2:	eb1a 0105 	adds.w	r1, sl, r5
 8019fb6:	f47f af6f 	bne.w	8019e98 <_scanf_float+0x64>
 8019fba:	6822      	ldr	r2, [r4, #0]
 8019fbc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8019fc0:	6022      	str	r2, [r4, #0]
 8019fc2:	460d      	mov	r5, r1
 8019fc4:	468a      	mov	sl, r1
 8019fc6:	f806 3b01 	strb.w	r3, [r6], #1
 8019fca:	e7e2      	b.n	8019f92 <_scanf_float+0x15e>
 8019fcc:	6822      	ldr	r2, [r4, #0]
 8019fce:	0610      	lsls	r0, r2, #24
 8019fd0:	f57f af62 	bpl.w	8019e98 <_scanf_float+0x64>
 8019fd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8019fd8:	6022      	str	r2, [r4, #0]
 8019fda:	e7f4      	b.n	8019fc6 <_scanf_float+0x192>
 8019fdc:	f1ba 0f00 	cmp.w	sl, #0
 8019fe0:	d10e      	bne.n	801a000 <_scanf_float+0x1cc>
 8019fe2:	f1b9 0f00 	cmp.w	r9, #0
 8019fe6:	d10e      	bne.n	801a006 <_scanf_float+0x1d2>
 8019fe8:	6822      	ldr	r2, [r4, #0]
 8019fea:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8019fee:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8019ff2:	d108      	bne.n	801a006 <_scanf_float+0x1d2>
 8019ff4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8019ff8:	6022      	str	r2, [r4, #0]
 8019ffa:	f04f 0a01 	mov.w	sl, #1
 8019ffe:	e7e2      	b.n	8019fc6 <_scanf_float+0x192>
 801a000:	f1ba 0f02 	cmp.w	sl, #2
 801a004:	d055      	beq.n	801a0b2 <_scanf_float+0x27e>
 801a006:	2d01      	cmp	r5, #1
 801a008:	d002      	beq.n	801a010 <_scanf_float+0x1dc>
 801a00a:	2d04      	cmp	r5, #4
 801a00c:	f47f af44 	bne.w	8019e98 <_scanf_float+0x64>
 801a010:	3501      	adds	r5, #1
 801a012:	b2ed      	uxtb	r5, r5
 801a014:	e7d7      	b.n	8019fc6 <_scanf_float+0x192>
 801a016:	f1ba 0f01 	cmp.w	sl, #1
 801a01a:	f47f af3d 	bne.w	8019e98 <_scanf_float+0x64>
 801a01e:	f04f 0a02 	mov.w	sl, #2
 801a022:	e7d0      	b.n	8019fc6 <_scanf_float+0x192>
 801a024:	b97d      	cbnz	r5, 801a046 <_scanf_float+0x212>
 801a026:	f1b9 0f00 	cmp.w	r9, #0
 801a02a:	f47f af38 	bne.w	8019e9e <_scanf_float+0x6a>
 801a02e:	6822      	ldr	r2, [r4, #0]
 801a030:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801a034:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801a038:	f040 8108 	bne.w	801a24c <_scanf_float+0x418>
 801a03c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801a040:	6022      	str	r2, [r4, #0]
 801a042:	2501      	movs	r5, #1
 801a044:	e7bf      	b.n	8019fc6 <_scanf_float+0x192>
 801a046:	2d03      	cmp	r5, #3
 801a048:	d0e2      	beq.n	801a010 <_scanf_float+0x1dc>
 801a04a:	2d05      	cmp	r5, #5
 801a04c:	e7de      	b.n	801a00c <_scanf_float+0x1d8>
 801a04e:	2d02      	cmp	r5, #2
 801a050:	f47f af22 	bne.w	8019e98 <_scanf_float+0x64>
 801a054:	2503      	movs	r5, #3
 801a056:	e7b6      	b.n	8019fc6 <_scanf_float+0x192>
 801a058:	2d06      	cmp	r5, #6
 801a05a:	f47f af1d 	bne.w	8019e98 <_scanf_float+0x64>
 801a05e:	2507      	movs	r5, #7
 801a060:	e7b1      	b.n	8019fc6 <_scanf_float+0x192>
 801a062:	6822      	ldr	r2, [r4, #0]
 801a064:	0591      	lsls	r1, r2, #22
 801a066:	f57f af17 	bpl.w	8019e98 <_scanf_float+0x64>
 801a06a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801a06e:	6022      	str	r2, [r4, #0]
 801a070:	f8cd 9008 	str.w	r9, [sp, #8]
 801a074:	e7a7      	b.n	8019fc6 <_scanf_float+0x192>
 801a076:	6822      	ldr	r2, [r4, #0]
 801a078:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801a07c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801a080:	d006      	beq.n	801a090 <_scanf_float+0x25c>
 801a082:	0550      	lsls	r0, r2, #21
 801a084:	f57f af08 	bpl.w	8019e98 <_scanf_float+0x64>
 801a088:	f1b9 0f00 	cmp.w	r9, #0
 801a08c:	f000 80de 	beq.w	801a24c <_scanf_float+0x418>
 801a090:	0591      	lsls	r1, r2, #22
 801a092:	bf58      	it	pl
 801a094:	9902      	ldrpl	r1, [sp, #8]
 801a096:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801a09a:	bf58      	it	pl
 801a09c:	eba9 0101 	subpl.w	r1, r9, r1
 801a0a0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801a0a4:	bf58      	it	pl
 801a0a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a0aa:	6022      	str	r2, [r4, #0]
 801a0ac:	f04f 0900 	mov.w	r9, #0
 801a0b0:	e789      	b.n	8019fc6 <_scanf_float+0x192>
 801a0b2:	f04f 0a03 	mov.w	sl, #3
 801a0b6:	e786      	b.n	8019fc6 <_scanf_float+0x192>
 801a0b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801a0bc:	4639      	mov	r1, r7
 801a0be:	4640      	mov	r0, r8
 801a0c0:	4798      	blx	r3
 801a0c2:	2800      	cmp	r0, #0
 801a0c4:	f43f aedb 	beq.w	8019e7e <_scanf_float+0x4a>
 801a0c8:	e6e6      	b.n	8019e98 <_scanf_float+0x64>
 801a0ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a0ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a0d2:	463a      	mov	r2, r7
 801a0d4:	4640      	mov	r0, r8
 801a0d6:	4798      	blx	r3
 801a0d8:	6923      	ldr	r3, [r4, #16]
 801a0da:	3b01      	subs	r3, #1
 801a0dc:	6123      	str	r3, [r4, #16]
 801a0de:	e6e8      	b.n	8019eb2 <_scanf_float+0x7e>
 801a0e0:	1e6b      	subs	r3, r5, #1
 801a0e2:	2b06      	cmp	r3, #6
 801a0e4:	d824      	bhi.n	801a130 <_scanf_float+0x2fc>
 801a0e6:	2d02      	cmp	r5, #2
 801a0e8:	d836      	bhi.n	801a158 <_scanf_float+0x324>
 801a0ea:	9b01      	ldr	r3, [sp, #4]
 801a0ec:	429e      	cmp	r6, r3
 801a0ee:	f67f aee4 	bls.w	8019eba <_scanf_float+0x86>
 801a0f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a0f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a0fa:	463a      	mov	r2, r7
 801a0fc:	4640      	mov	r0, r8
 801a0fe:	4798      	blx	r3
 801a100:	6923      	ldr	r3, [r4, #16]
 801a102:	3b01      	subs	r3, #1
 801a104:	6123      	str	r3, [r4, #16]
 801a106:	e7f0      	b.n	801a0ea <_scanf_float+0x2b6>
 801a108:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a10c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801a110:	463a      	mov	r2, r7
 801a112:	4640      	mov	r0, r8
 801a114:	4798      	blx	r3
 801a116:	6923      	ldr	r3, [r4, #16]
 801a118:	3b01      	subs	r3, #1
 801a11a:	6123      	str	r3, [r4, #16]
 801a11c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a120:	fa5f fa8a 	uxtb.w	sl, sl
 801a124:	f1ba 0f02 	cmp.w	sl, #2
 801a128:	d1ee      	bne.n	801a108 <_scanf_float+0x2d4>
 801a12a:	3d03      	subs	r5, #3
 801a12c:	b2ed      	uxtb	r5, r5
 801a12e:	1b76      	subs	r6, r6, r5
 801a130:	6823      	ldr	r3, [r4, #0]
 801a132:	05da      	lsls	r2, r3, #23
 801a134:	d530      	bpl.n	801a198 <_scanf_float+0x364>
 801a136:	055b      	lsls	r3, r3, #21
 801a138:	d511      	bpl.n	801a15e <_scanf_float+0x32a>
 801a13a:	9b01      	ldr	r3, [sp, #4]
 801a13c:	429e      	cmp	r6, r3
 801a13e:	f67f aebc 	bls.w	8019eba <_scanf_float+0x86>
 801a142:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a146:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a14a:	463a      	mov	r2, r7
 801a14c:	4640      	mov	r0, r8
 801a14e:	4798      	blx	r3
 801a150:	6923      	ldr	r3, [r4, #16]
 801a152:	3b01      	subs	r3, #1
 801a154:	6123      	str	r3, [r4, #16]
 801a156:	e7f0      	b.n	801a13a <_scanf_float+0x306>
 801a158:	46aa      	mov	sl, r5
 801a15a:	46b3      	mov	fp, r6
 801a15c:	e7de      	b.n	801a11c <_scanf_float+0x2e8>
 801a15e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a162:	6923      	ldr	r3, [r4, #16]
 801a164:	2965      	cmp	r1, #101	@ 0x65
 801a166:	f103 33ff 	add.w	r3, r3, #4294967295
 801a16a:	f106 35ff 	add.w	r5, r6, #4294967295
 801a16e:	6123      	str	r3, [r4, #16]
 801a170:	d00c      	beq.n	801a18c <_scanf_float+0x358>
 801a172:	2945      	cmp	r1, #69	@ 0x45
 801a174:	d00a      	beq.n	801a18c <_scanf_float+0x358>
 801a176:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a17a:	463a      	mov	r2, r7
 801a17c:	4640      	mov	r0, r8
 801a17e:	4798      	blx	r3
 801a180:	6923      	ldr	r3, [r4, #16]
 801a182:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a186:	3b01      	subs	r3, #1
 801a188:	1eb5      	subs	r5, r6, #2
 801a18a:	6123      	str	r3, [r4, #16]
 801a18c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a190:	463a      	mov	r2, r7
 801a192:	4640      	mov	r0, r8
 801a194:	4798      	blx	r3
 801a196:	462e      	mov	r6, r5
 801a198:	6822      	ldr	r2, [r4, #0]
 801a19a:	f012 0210 	ands.w	r2, r2, #16
 801a19e:	d001      	beq.n	801a1a4 <_scanf_float+0x370>
 801a1a0:	2000      	movs	r0, #0
 801a1a2:	e68b      	b.n	8019ebc <_scanf_float+0x88>
 801a1a4:	7032      	strb	r2, [r6, #0]
 801a1a6:	6823      	ldr	r3, [r4, #0]
 801a1a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801a1ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801a1b0:	d11c      	bne.n	801a1ec <_scanf_float+0x3b8>
 801a1b2:	9b02      	ldr	r3, [sp, #8]
 801a1b4:	454b      	cmp	r3, r9
 801a1b6:	eba3 0209 	sub.w	r2, r3, r9
 801a1ba:	d123      	bne.n	801a204 <_scanf_float+0x3d0>
 801a1bc:	9901      	ldr	r1, [sp, #4]
 801a1be:	2200      	movs	r2, #0
 801a1c0:	4640      	mov	r0, r8
 801a1c2:	f002 fd15 	bl	801cbf0 <_strtod_r>
 801a1c6:	9b03      	ldr	r3, [sp, #12]
 801a1c8:	6821      	ldr	r1, [r4, #0]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	f011 0f02 	tst.w	r1, #2
 801a1d0:	ec57 6b10 	vmov	r6, r7, d0
 801a1d4:	f103 0204 	add.w	r2, r3, #4
 801a1d8:	d01f      	beq.n	801a21a <_scanf_float+0x3e6>
 801a1da:	9903      	ldr	r1, [sp, #12]
 801a1dc:	600a      	str	r2, [r1, #0]
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	e9c3 6700 	strd	r6, r7, [r3]
 801a1e4:	68e3      	ldr	r3, [r4, #12]
 801a1e6:	3301      	adds	r3, #1
 801a1e8:	60e3      	str	r3, [r4, #12]
 801a1ea:	e7d9      	b.n	801a1a0 <_scanf_float+0x36c>
 801a1ec:	9b04      	ldr	r3, [sp, #16]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d0e4      	beq.n	801a1bc <_scanf_float+0x388>
 801a1f2:	9905      	ldr	r1, [sp, #20]
 801a1f4:	230a      	movs	r3, #10
 801a1f6:	3101      	adds	r1, #1
 801a1f8:	4640      	mov	r0, r8
 801a1fa:	f7ff f9b7 	bl	801956c <_strtol_r>
 801a1fe:	9b04      	ldr	r3, [sp, #16]
 801a200:	9e05      	ldr	r6, [sp, #20]
 801a202:	1ac2      	subs	r2, r0, r3
 801a204:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801a208:	429e      	cmp	r6, r3
 801a20a:	bf28      	it	cs
 801a20c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801a210:	4910      	ldr	r1, [pc, #64]	@ (801a254 <_scanf_float+0x420>)
 801a212:	4630      	mov	r0, r6
 801a214:	f000 f954 	bl	801a4c0 <siprintf>
 801a218:	e7d0      	b.n	801a1bc <_scanf_float+0x388>
 801a21a:	f011 0f04 	tst.w	r1, #4
 801a21e:	9903      	ldr	r1, [sp, #12]
 801a220:	600a      	str	r2, [r1, #0]
 801a222:	d1dc      	bne.n	801a1de <_scanf_float+0x3aa>
 801a224:	681d      	ldr	r5, [r3, #0]
 801a226:	4632      	mov	r2, r6
 801a228:	463b      	mov	r3, r7
 801a22a:	4630      	mov	r0, r6
 801a22c:	4639      	mov	r1, r7
 801a22e:	f7e6 fc8d 	bl	8000b4c <__aeabi_dcmpun>
 801a232:	b128      	cbz	r0, 801a240 <_scanf_float+0x40c>
 801a234:	4808      	ldr	r0, [pc, #32]	@ (801a258 <_scanf_float+0x424>)
 801a236:	f000 fb6b 	bl	801a910 <nanf>
 801a23a:	ed85 0a00 	vstr	s0, [r5]
 801a23e:	e7d1      	b.n	801a1e4 <_scanf_float+0x3b0>
 801a240:	4630      	mov	r0, r6
 801a242:	4639      	mov	r1, r7
 801a244:	f7e6 fce0 	bl	8000c08 <__aeabi_d2f>
 801a248:	6028      	str	r0, [r5, #0]
 801a24a:	e7cb      	b.n	801a1e4 <_scanf_float+0x3b0>
 801a24c:	f04f 0900 	mov.w	r9, #0
 801a250:	e629      	b.n	8019ea6 <_scanf_float+0x72>
 801a252:	bf00      	nop
 801a254:	080218c6 	.word	0x080218c6
 801a258:	08021906 	.word	0x08021906

0801a25c <std>:
 801a25c:	2300      	movs	r3, #0
 801a25e:	b510      	push	{r4, lr}
 801a260:	4604      	mov	r4, r0
 801a262:	e9c0 3300 	strd	r3, r3, [r0]
 801a266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a26a:	6083      	str	r3, [r0, #8]
 801a26c:	8181      	strh	r1, [r0, #12]
 801a26e:	6643      	str	r3, [r0, #100]	@ 0x64
 801a270:	81c2      	strh	r2, [r0, #14]
 801a272:	6183      	str	r3, [r0, #24]
 801a274:	4619      	mov	r1, r3
 801a276:	2208      	movs	r2, #8
 801a278:	305c      	adds	r0, #92	@ 0x5c
 801a27a:	f000 fa43 	bl	801a704 <memset>
 801a27e:	4b0d      	ldr	r3, [pc, #52]	@ (801a2b4 <std+0x58>)
 801a280:	6263      	str	r3, [r4, #36]	@ 0x24
 801a282:	4b0d      	ldr	r3, [pc, #52]	@ (801a2b8 <std+0x5c>)
 801a284:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a286:	4b0d      	ldr	r3, [pc, #52]	@ (801a2bc <std+0x60>)
 801a288:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a28a:	4b0d      	ldr	r3, [pc, #52]	@ (801a2c0 <std+0x64>)
 801a28c:	6323      	str	r3, [r4, #48]	@ 0x30
 801a28e:	4b0d      	ldr	r3, [pc, #52]	@ (801a2c4 <std+0x68>)
 801a290:	6224      	str	r4, [r4, #32]
 801a292:	429c      	cmp	r4, r3
 801a294:	d006      	beq.n	801a2a4 <std+0x48>
 801a296:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a29a:	4294      	cmp	r4, r2
 801a29c:	d002      	beq.n	801a2a4 <std+0x48>
 801a29e:	33d0      	adds	r3, #208	@ 0xd0
 801a2a0:	429c      	cmp	r4, r3
 801a2a2:	d105      	bne.n	801a2b0 <std+0x54>
 801a2a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2ac:	f000 bb1e 	b.w	801a8ec <__retarget_lock_init_recursive>
 801a2b0:	bd10      	pop	{r4, pc}
 801a2b2:	bf00      	nop
 801a2b4:	0801a501 	.word	0x0801a501
 801a2b8:	0801a523 	.word	0x0801a523
 801a2bc:	0801a55b 	.word	0x0801a55b
 801a2c0:	0801a57f 	.word	0x0801a57f
 801a2c4:	2000d258 	.word	0x2000d258

0801a2c8 <stdio_exit_handler>:
 801a2c8:	4a02      	ldr	r2, [pc, #8]	@ (801a2d4 <stdio_exit_handler+0xc>)
 801a2ca:	4903      	ldr	r1, [pc, #12]	@ (801a2d8 <stdio_exit_handler+0x10>)
 801a2cc:	4803      	ldr	r0, [pc, #12]	@ (801a2dc <stdio_exit_handler+0x14>)
 801a2ce:	f000 b869 	b.w	801a3a4 <_fwalk_sglue>
 801a2d2:	bf00      	nop
 801a2d4:	20000030 	.word	0x20000030
 801a2d8:	0801d239 	.word	0x0801d239
 801a2dc:	20000040 	.word	0x20000040

0801a2e0 <cleanup_stdio>:
 801a2e0:	6841      	ldr	r1, [r0, #4]
 801a2e2:	4b0c      	ldr	r3, [pc, #48]	@ (801a314 <cleanup_stdio+0x34>)
 801a2e4:	4299      	cmp	r1, r3
 801a2e6:	b510      	push	{r4, lr}
 801a2e8:	4604      	mov	r4, r0
 801a2ea:	d001      	beq.n	801a2f0 <cleanup_stdio+0x10>
 801a2ec:	f002 ffa4 	bl	801d238 <_fflush_r>
 801a2f0:	68a1      	ldr	r1, [r4, #8]
 801a2f2:	4b09      	ldr	r3, [pc, #36]	@ (801a318 <cleanup_stdio+0x38>)
 801a2f4:	4299      	cmp	r1, r3
 801a2f6:	d002      	beq.n	801a2fe <cleanup_stdio+0x1e>
 801a2f8:	4620      	mov	r0, r4
 801a2fa:	f002 ff9d 	bl	801d238 <_fflush_r>
 801a2fe:	68e1      	ldr	r1, [r4, #12]
 801a300:	4b06      	ldr	r3, [pc, #24]	@ (801a31c <cleanup_stdio+0x3c>)
 801a302:	4299      	cmp	r1, r3
 801a304:	d004      	beq.n	801a310 <cleanup_stdio+0x30>
 801a306:	4620      	mov	r0, r4
 801a308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a30c:	f002 bf94 	b.w	801d238 <_fflush_r>
 801a310:	bd10      	pop	{r4, pc}
 801a312:	bf00      	nop
 801a314:	2000d258 	.word	0x2000d258
 801a318:	2000d2c0 	.word	0x2000d2c0
 801a31c:	2000d328 	.word	0x2000d328

0801a320 <global_stdio_init.part.0>:
 801a320:	b510      	push	{r4, lr}
 801a322:	4b0b      	ldr	r3, [pc, #44]	@ (801a350 <global_stdio_init.part.0+0x30>)
 801a324:	4c0b      	ldr	r4, [pc, #44]	@ (801a354 <global_stdio_init.part.0+0x34>)
 801a326:	4a0c      	ldr	r2, [pc, #48]	@ (801a358 <global_stdio_init.part.0+0x38>)
 801a328:	601a      	str	r2, [r3, #0]
 801a32a:	4620      	mov	r0, r4
 801a32c:	2200      	movs	r2, #0
 801a32e:	2104      	movs	r1, #4
 801a330:	f7ff ff94 	bl	801a25c <std>
 801a334:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a338:	2201      	movs	r2, #1
 801a33a:	2109      	movs	r1, #9
 801a33c:	f7ff ff8e 	bl	801a25c <std>
 801a340:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a344:	2202      	movs	r2, #2
 801a346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a34a:	2112      	movs	r1, #18
 801a34c:	f7ff bf86 	b.w	801a25c <std>
 801a350:	2000d390 	.word	0x2000d390
 801a354:	2000d258 	.word	0x2000d258
 801a358:	0801a2c9 	.word	0x0801a2c9

0801a35c <__sfp_lock_acquire>:
 801a35c:	4801      	ldr	r0, [pc, #4]	@ (801a364 <__sfp_lock_acquire+0x8>)
 801a35e:	f000 bac6 	b.w	801a8ee <__retarget_lock_acquire_recursive>
 801a362:	bf00      	nop
 801a364:	2000d399 	.word	0x2000d399

0801a368 <__sfp_lock_release>:
 801a368:	4801      	ldr	r0, [pc, #4]	@ (801a370 <__sfp_lock_release+0x8>)
 801a36a:	f000 bac1 	b.w	801a8f0 <__retarget_lock_release_recursive>
 801a36e:	bf00      	nop
 801a370:	2000d399 	.word	0x2000d399

0801a374 <__sinit>:
 801a374:	b510      	push	{r4, lr}
 801a376:	4604      	mov	r4, r0
 801a378:	f7ff fff0 	bl	801a35c <__sfp_lock_acquire>
 801a37c:	6a23      	ldr	r3, [r4, #32]
 801a37e:	b11b      	cbz	r3, 801a388 <__sinit+0x14>
 801a380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a384:	f7ff bff0 	b.w	801a368 <__sfp_lock_release>
 801a388:	4b04      	ldr	r3, [pc, #16]	@ (801a39c <__sinit+0x28>)
 801a38a:	6223      	str	r3, [r4, #32]
 801a38c:	4b04      	ldr	r3, [pc, #16]	@ (801a3a0 <__sinit+0x2c>)
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	2b00      	cmp	r3, #0
 801a392:	d1f5      	bne.n	801a380 <__sinit+0xc>
 801a394:	f7ff ffc4 	bl	801a320 <global_stdio_init.part.0>
 801a398:	e7f2      	b.n	801a380 <__sinit+0xc>
 801a39a:	bf00      	nop
 801a39c:	0801a2e1 	.word	0x0801a2e1
 801a3a0:	2000d390 	.word	0x2000d390

0801a3a4 <_fwalk_sglue>:
 801a3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3a8:	4607      	mov	r7, r0
 801a3aa:	4688      	mov	r8, r1
 801a3ac:	4614      	mov	r4, r2
 801a3ae:	2600      	movs	r6, #0
 801a3b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a3b4:	f1b9 0901 	subs.w	r9, r9, #1
 801a3b8:	d505      	bpl.n	801a3c6 <_fwalk_sglue+0x22>
 801a3ba:	6824      	ldr	r4, [r4, #0]
 801a3bc:	2c00      	cmp	r4, #0
 801a3be:	d1f7      	bne.n	801a3b0 <_fwalk_sglue+0xc>
 801a3c0:	4630      	mov	r0, r6
 801a3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a3c6:	89ab      	ldrh	r3, [r5, #12]
 801a3c8:	2b01      	cmp	r3, #1
 801a3ca:	d907      	bls.n	801a3dc <_fwalk_sglue+0x38>
 801a3cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a3d0:	3301      	adds	r3, #1
 801a3d2:	d003      	beq.n	801a3dc <_fwalk_sglue+0x38>
 801a3d4:	4629      	mov	r1, r5
 801a3d6:	4638      	mov	r0, r7
 801a3d8:	47c0      	blx	r8
 801a3da:	4306      	orrs	r6, r0
 801a3dc:	3568      	adds	r5, #104	@ 0x68
 801a3de:	e7e9      	b.n	801a3b4 <_fwalk_sglue+0x10>

0801a3e0 <iprintf>:
 801a3e0:	b40f      	push	{r0, r1, r2, r3}
 801a3e2:	b507      	push	{r0, r1, r2, lr}
 801a3e4:	4906      	ldr	r1, [pc, #24]	@ (801a400 <iprintf+0x20>)
 801a3e6:	ab04      	add	r3, sp, #16
 801a3e8:	6808      	ldr	r0, [r1, #0]
 801a3ea:	f853 2b04 	ldr.w	r2, [r3], #4
 801a3ee:	6881      	ldr	r1, [r0, #8]
 801a3f0:	9301      	str	r3, [sp, #4]
 801a3f2:	f002 fd85 	bl	801cf00 <_vfiprintf_r>
 801a3f6:	b003      	add	sp, #12
 801a3f8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a3fc:	b004      	add	sp, #16
 801a3fe:	4770      	bx	lr
 801a400:	2000003c 	.word	0x2000003c

0801a404 <_puts_r>:
 801a404:	6a03      	ldr	r3, [r0, #32]
 801a406:	b570      	push	{r4, r5, r6, lr}
 801a408:	6884      	ldr	r4, [r0, #8]
 801a40a:	4605      	mov	r5, r0
 801a40c:	460e      	mov	r6, r1
 801a40e:	b90b      	cbnz	r3, 801a414 <_puts_r+0x10>
 801a410:	f7ff ffb0 	bl	801a374 <__sinit>
 801a414:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a416:	07db      	lsls	r3, r3, #31
 801a418:	d405      	bmi.n	801a426 <_puts_r+0x22>
 801a41a:	89a3      	ldrh	r3, [r4, #12]
 801a41c:	0598      	lsls	r0, r3, #22
 801a41e:	d402      	bmi.n	801a426 <_puts_r+0x22>
 801a420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a422:	f000 fa64 	bl	801a8ee <__retarget_lock_acquire_recursive>
 801a426:	89a3      	ldrh	r3, [r4, #12]
 801a428:	0719      	lsls	r1, r3, #28
 801a42a:	d502      	bpl.n	801a432 <_puts_r+0x2e>
 801a42c:	6923      	ldr	r3, [r4, #16]
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d135      	bne.n	801a49e <_puts_r+0x9a>
 801a432:	4621      	mov	r1, r4
 801a434:	4628      	mov	r0, r5
 801a436:	f000 f8e5 	bl	801a604 <__swsetup_r>
 801a43a:	b380      	cbz	r0, 801a49e <_puts_r+0x9a>
 801a43c:	f04f 35ff 	mov.w	r5, #4294967295
 801a440:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a442:	07da      	lsls	r2, r3, #31
 801a444:	d405      	bmi.n	801a452 <_puts_r+0x4e>
 801a446:	89a3      	ldrh	r3, [r4, #12]
 801a448:	059b      	lsls	r3, r3, #22
 801a44a:	d402      	bmi.n	801a452 <_puts_r+0x4e>
 801a44c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a44e:	f000 fa4f 	bl	801a8f0 <__retarget_lock_release_recursive>
 801a452:	4628      	mov	r0, r5
 801a454:	bd70      	pop	{r4, r5, r6, pc}
 801a456:	2b00      	cmp	r3, #0
 801a458:	da04      	bge.n	801a464 <_puts_r+0x60>
 801a45a:	69a2      	ldr	r2, [r4, #24]
 801a45c:	429a      	cmp	r2, r3
 801a45e:	dc17      	bgt.n	801a490 <_puts_r+0x8c>
 801a460:	290a      	cmp	r1, #10
 801a462:	d015      	beq.n	801a490 <_puts_r+0x8c>
 801a464:	6823      	ldr	r3, [r4, #0]
 801a466:	1c5a      	adds	r2, r3, #1
 801a468:	6022      	str	r2, [r4, #0]
 801a46a:	7019      	strb	r1, [r3, #0]
 801a46c:	68a3      	ldr	r3, [r4, #8]
 801a46e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a472:	3b01      	subs	r3, #1
 801a474:	60a3      	str	r3, [r4, #8]
 801a476:	2900      	cmp	r1, #0
 801a478:	d1ed      	bne.n	801a456 <_puts_r+0x52>
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	da11      	bge.n	801a4a2 <_puts_r+0x9e>
 801a47e:	4622      	mov	r2, r4
 801a480:	210a      	movs	r1, #10
 801a482:	4628      	mov	r0, r5
 801a484:	f000 f87f 	bl	801a586 <__swbuf_r>
 801a488:	3001      	adds	r0, #1
 801a48a:	d0d7      	beq.n	801a43c <_puts_r+0x38>
 801a48c:	250a      	movs	r5, #10
 801a48e:	e7d7      	b.n	801a440 <_puts_r+0x3c>
 801a490:	4622      	mov	r2, r4
 801a492:	4628      	mov	r0, r5
 801a494:	f000 f877 	bl	801a586 <__swbuf_r>
 801a498:	3001      	adds	r0, #1
 801a49a:	d1e7      	bne.n	801a46c <_puts_r+0x68>
 801a49c:	e7ce      	b.n	801a43c <_puts_r+0x38>
 801a49e:	3e01      	subs	r6, #1
 801a4a0:	e7e4      	b.n	801a46c <_puts_r+0x68>
 801a4a2:	6823      	ldr	r3, [r4, #0]
 801a4a4:	1c5a      	adds	r2, r3, #1
 801a4a6:	6022      	str	r2, [r4, #0]
 801a4a8:	220a      	movs	r2, #10
 801a4aa:	701a      	strb	r2, [r3, #0]
 801a4ac:	e7ee      	b.n	801a48c <_puts_r+0x88>
	...

0801a4b0 <puts>:
 801a4b0:	4b02      	ldr	r3, [pc, #8]	@ (801a4bc <puts+0xc>)
 801a4b2:	4601      	mov	r1, r0
 801a4b4:	6818      	ldr	r0, [r3, #0]
 801a4b6:	f7ff bfa5 	b.w	801a404 <_puts_r>
 801a4ba:	bf00      	nop
 801a4bc:	2000003c 	.word	0x2000003c

0801a4c0 <siprintf>:
 801a4c0:	b40e      	push	{r1, r2, r3}
 801a4c2:	b500      	push	{lr}
 801a4c4:	b09c      	sub	sp, #112	@ 0x70
 801a4c6:	ab1d      	add	r3, sp, #116	@ 0x74
 801a4c8:	9002      	str	r0, [sp, #8]
 801a4ca:	9006      	str	r0, [sp, #24]
 801a4cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a4d0:	4809      	ldr	r0, [pc, #36]	@ (801a4f8 <siprintf+0x38>)
 801a4d2:	9107      	str	r1, [sp, #28]
 801a4d4:	9104      	str	r1, [sp, #16]
 801a4d6:	4909      	ldr	r1, [pc, #36]	@ (801a4fc <siprintf+0x3c>)
 801a4d8:	f853 2b04 	ldr.w	r2, [r3], #4
 801a4dc:	9105      	str	r1, [sp, #20]
 801a4de:	6800      	ldr	r0, [r0, #0]
 801a4e0:	9301      	str	r3, [sp, #4]
 801a4e2:	a902      	add	r1, sp, #8
 801a4e4:	f002 fbe6 	bl	801ccb4 <_svfiprintf_r>
 801a4e8:	9b02      	ldr	r3, [sp, #8]
 801a4ea:	2200      	movs	r2, #0
 801a4ec:	701a      	strb	r2, [r3, #0]
 801a4ee:	b01c      	add	sp, #112	@ 0x70
 801a4f0:	f85d eb04 	ldr.w	lr, [sp], #4
 801a4f4:	b003      	add	sp, #12
 801a4f6:	4770      	bx	lr
 801a4f8:	2000003c 	.word	0x2000003c
 801a4fc:	ffff0208 	.word	0xffff0208

0801a500 <__sread>:
 801a500:	b510      	push	{r4, lr}
 801a502:	460c      	mov	r4, r1
 801a504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a508:	f000 f992 	bl	801a830 <_read_r>
 801a50c:	2800      	cmp	r0, #0
 801a50e:	bfab      	itete	ge
 801a510:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a512:	89a3      	ldrhlt	r3, [r4, #12]
 801a514:	181b      	addge	r3, r3, r0
 801a516:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a51a:	bfac      	ite	ge
 801a51c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a51e:	81a3      	strhlt	r3, [r4, #12]
 801a520:	bd10      	pop	{r4, pc}

0801a522 <__swrite>:
 801a522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a526:	461f      	mov	r7, r3
 801a528:	898b      	ldrh	r3, [r1, #12]
 801a52a:	05db      	lsls	r3, r3, #23
 801a52c:	4605      	mov	r5, r0
 801a52e:	460c      	mov	r4, r1
 801a530:	4616      	mov	r6, r2
 801a532:	d505      	bpl.n	801a540 <__swrite+0x1e>
 801a534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a538:	2302      	movs	r3, #2
 801a53a:	2200      	movs	r2, #0
 801a53c:	f000 f966 	bl	801a80c <_lseek_r>
 801a540:	89a3      	ldrh	r3, [r4, #12]
 801a542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a546:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a54a:	81a3      	strh	r3, [r4, #12]
 801a54c:	4632      	mov	r2, r6
 801a54e:	463b      	mov	r3, r7
 801a550:	4628      	mov	r0, r5
 801a552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a556:	f000 b98d 	b.w	801a874 <_write_r>

0801a55a <__sseek>:
 801a55a:	b510      	push	{r4, lr}
 801a55c:	460c      	mov	r4, r1
 801a55e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a562:	f000 f953 	bl	801a80c <_lseek_r>
 801a566:	1c43      	adds	r3, r0, #1
 801a568:	89a3      	ldrh	r3, [r4, #12]
 801a56a:	bf15      	itete	ne
 801a56c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a56e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a572:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a576:	81a3      	strheq	r3, [r4, #12]
 801a578:	bf18      	it	ne
 801a57a:	81a3      	strhne	r3, [r4, #12]
 801a57c:	bd10      	pop	{r4, pc}

0801a57e <__sclose>:
 801a57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a582:	f000 b8dd 	b.w	801a740 <_close_r>

0801a586 <__swbuf_r>:
 801a586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a588:	460e      	mov	r6, r1
 801a58a:	4614      	mov	r4, r2
 801a58c:	4605      	mov	r5, r0
 801a58e:	b118      	cbz	r0, 801a598 <__swbuf_r+0x12>
 801a590:	6a03      	ldr	r3, [r0, #32]
 801a592:	b90b      	cbnz	r3, 801a598 <__swbuf_r+0x12>
 801a594:	f7ff feee 	bl	801a374 <__sinit>
 801a598:	69a3      	ldr	r3, [r4, #24]
 801a59a:	60a3      	str	r3, [r4, #8]
 801a59c:	89a3      	ldrh	r3, [r4, #12]
 801a59e:	071a      	lsls	r2, r3, #28
 801a5a0:	d501      	bpl.n	801a5a6 <__swbuf_r+0x20>
 801a5a2:	6923      	ldr	r3, [r4, #16]
 801a5a4:	b943      	cbnz	r3, 801a5b8 <__swbuf_r+0x32>
 801a5a6:	4621      	mov	r1, r4
 801a5a8:	4628      	mov	r0, r5
 801a5aa:	f000 f82b 	bl	801a604 <__swsetup_r>
 801a5ae:	b118      	cbz	r0, 801a5b8 <__swbuf_r+0x32>
 801a5b0:	f04f 37ff 	mov.w	r7, #4294967295
 801a5b4:	4638      	mov	r0, r7
 801a5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5b8:	6823      	ldr	r3, [r4, #0]
 801a5ba:	6922      	ldr	r2, [r4, #16]
 801a5bc:	1a98      	subs	r0, r3, r2
 801a5be:	6963      	ldr	r3, [r4, #20]
 801a5c0:	b2f6      	uxtb	r6, r6
 801a5c2:	4283      	cmp	r3, r0
 801a5c4:	4637      	mov	r7, r6
 801a5c6:	dc05      	bgt.n	801a5d4 <__swbuf_r+0x4e>
 801a5c8:	4621      	mov	r1, r4
 801a5ca:	4628      	mov	r0, r5
 801a5cc:	f002 fe34 	bl	801d238 <_fflush_r>
 801a5d0:	2800      	cmp	r0, #0
 801a5d2:	d1ed      	bne.n	801a5b0 <__swbuf_r+0x2a>
 801a5d4:	68a3      	ldr	r3, [r4, #8]
 801a5d6:	3b01      	subs	r3, #1
 801a5d8:	60a3      	str	r3, [r4, #8]
 801a5da:	6823      	ldr	r3, [r4, #0]
 801a5dc:	1c5a      	adds	r2, r3, #1
 801a5de:	6022      	str	r2, [r4, #0]
 801a5e0:	701e      	strb	r6, [r3, #0]
 801a5e2:	6962      	ldr	r2, [r4, #20]
 801a5e4:	1c43      	adds	r3, r0, #1
 801a5e6:	429a      	cmp	r2, r3
 801a5e8:	d004      	beq.n	801a5f4 <__swbuf_r+0x6e>
 801a5ea:	89a3      	ldrh	r3, [r4, #12]
 801a5ec:	07db      	lsls	r3, r3, #31
 801a5ee:	d5e1      	bpl.n	801a5b4 <__swbuf_r+0x2e>
 801a5f0:	2e0a      	cmp	r6, #10
 801a5f2:	d1df      	bne.n	801a5b4 <__swbuf_r+0x2e>
 801a5f4:	4621      	mov	r1, r4
 801a5f6:	4628      	mov	r0, r5
 801a5f8:	f002 fe1e 	bl	801d238 <_fflush_r>
 801a5fc:	2800      	cmp	r0, #0
 801a5fe:	d0d9      	beq.n	801a5b4 <__swbuf_r+0x2e>
 801a600:	e7d6      	b.n	801a5b0 <__swbuf_r+0x2a>
	...

0801a604 <__swsetup_r>:
 801a604:	b538      	push	{r3, r4, r5, lr}
 801a606:	4b29      	ldr	r3, [pc, #164]	@ (801a6ac <__swsetup_r+0xa8>)
 801a608:	4605      	mov	r5, r0
 801a60a:	6818      	ldr	r0, [r3, #0]
 801a60c:	460c      	mov	r4, r1
 801a60e:	b118      	cbz	r0, 801a618 <__swsetup_r+0x14>
 801a610:	6a03      	ldr	r3, [r0, #32]
 801a612:	b90b      	cbnz	r3, 801a618 <__swsetup_r+0x14>
 801a614:	f7ff feae 	bl	801a374 <__sinit>
 801a618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a61c:	0719      	lsls	r1, r3, #28
 801a61e:	d422      	bmi.n	801a666 <__swsetup_r+0x62>
 801a620:	06da      	lsls	r2, r3, #27
 801a622:	d407      	bmi.n	801a634 <__swsetup_r+0x30>
 801a624:	2209      	movs	r2, #9
 801a626:	602a      	str	r2, [r5, #0]
 801a628:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a62c:	81a3      	strh	r3, [r4, #12]
 801a62e:	f04f 30ff 	mov.w	r0, #4294967295
 801a632:	e033      	b.n	801a69c <__swsetup_r+0x98>
 801a634:	0758      	lsls	r0, r3, #29
 801a636:	d512      	bpl.n	801a65e <__swsetup_r+0x5a>
 801a638:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a63a:	b141      	cbz	r1, 801a64e <__swsetup_r+0x4a>
 801a63c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a640:	4299      	cmp	r1, r3
 801a642:	d002      	beq.n	801a64a <__swsetup_r+0x46>
 801a644:	4628      	mov	r0, r5
 801a646:	f000 ffd3 	bl	801b5f0 <_free_r>
 801a64a:	2300      	movs	r3, #0
 801a64c:	6363      	str	r3, [r4, #52]	@ 0x34
 801a64e:	89a3      	ldrh	r3, [r4, #12]
 801a650:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a654:	81a3      	strh	r3, [r4, #12]
 801a656:	2300      	movs	r3, #0
 801a658:	6063      	str	r3, [r4, #4]
 801a65a:	6923      	ldr	r3, [r4, #16]
 801a65c:	6023      	str	r3, [r4, #0]
 801a65e:	89a3      	ldrh	r3, [r4, #12]
 801a660:	f043 0308 	orr.w	r3, r3, #8
 801a664:	81a3      	strh	r3, [r4, #12]
 801a666:	6923      	ldr	r3, [r4, #16]
 801a668:	b94b      	cbnz	r3, 801a67e <__swsetup_r+0x7a>
 801a66a:	89a3      	ldrh	r3, [r4, #12]
 801a66c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a674:	d003      	beq.n	801a67e <__swsetup_r+0x7a>
 801a676:	4621      	mov	r1, r4
 801a678:	4628      	mov	r0, r5
 801a67a:	f002 fe3d 	bl	801d2f8 <__smakebuf_r>
 801a67e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a682:	f013 0201 	ands.w	r2, r3, #1
 801a686:	d00a      	beq.n	801a69e <__swsetup_r+0x9a>
 801a688:	2200      	movs	r2, #0
 801a68a:	60a2      	str	r2, [r4, #8]
 801a68c:	6962      	ldr	r2, [r4, #20]
 801a68e:	4252      	negs	r2, r2
 801a690:	61a2      	str	r2, [r4, #24]
 801a692:	6922      	ldr	r2, [r4, #16]
 801a694:	b942      	cbnz	r2, 801a6a8 <__swsetup_r+0xa4>
 801a696:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a69a:	d1c5      	bne.n	801a628 <__swsetup_r+0x24>
 801a69c:	bd38      	pop	{r3, r4, r5, pc}
 801a69e:	0799      	lsls	r1, r3, #30
 801a6a0:	bf58      	it	pl
 801a6a2:	6962      	ldrpl	r2, [r4, #20]
 801a6a4:	60a2      	str	r2, [r4, #8]
 801a6a6:	e7f4      	b.n	801a692 <__swsetup_r+0x8e>
 801a6a8:	2000      	movs	r0, #0
 801a6aa:	e7f7      	b.n	801a69c <__swsetup_r+0x98>
 801a6ac:	2000003c 	.word	0x2000003c

0801a6b0 <memcmp>:
 801a6b0:	b510      	push	{r4, lr}
 801a6b2:	3901      	subs	r1, #1
 801a6b4:	4402      	add	r2, r0
 801a6b6:	4290      	cmp	r0, r2
 801a6b8:	d101      	bne.n	801a6be <memcmp+0xe>
 801a6ba:	2000      	movs	r0, #0
 801a6bc:	e005      	b.n	801a6ca <memcmp+0x1a>
 801a6be:	7803      	ldrb	r3, [r0, #0]
 801a6c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a6c4:	42a3      	cmp	r3, r4
 801a6c6:	d001      	beq.n	801a6cc <memcmp+0x1c>
 801a6c8:	1b18      	subs	r0, r3, r4
 801a6ca:	bd10      	pop	{r4, pc}
 801a6cc:	3001      	adds	r0, #1
 801a6ce:	e7f2      	b.n	801a6b6 <memcmp+0x6>

0801a6d0 <memmove>:
 801a6d0:	4288      	cmp	r0, r1
 801a6d2:	b510      	push	{r4, lr}
 801a6d4:	eb01 0402 	add.w	r4, r1, r2
 801a6d8:	d902      	bls.n	801a6e0 <memmove+0x10>
 801a6da:	4284      	cmp	r4, r0
 801a6dc:	4623      	mov	r3, r4
 801a6de:	d807      	bhi.n	801a6f0 <memmove+0x20>
 801a6e0:	1e43      	subs	r3, r0, #1
 801a6e2:	42a1      	cmp	r1, r4
 801a6e4:	d008      	beq.n	801a6f8 <memmove+0x28>
 801a6e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a6ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a6ee:	e7f8      	b.n	801a6e2 <memmove+0x12>
 801a6f0:	4402      	add	r2, r0
 801a6f2:	4601      	mov	r1, r0
 801a6f4:	428a      	cmp	r2, r1
 801a6f6:	d100      	bne.n	801a6fa <memmove+0x2a>
 801a6f8:	bd10      	pop	{r4, pc}
 801a6fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a6fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a702:	e7f7      	b.n	801a6f4 <memmove+0x24>

0801a704 <memset>:
 801a704:	4402      	add	r2, r0
 801a706:	4603      	mov	r3, r0
 801a708:	4293      	cmp	r3, r2
 801a70a:	d100      	bne.n	801a70e <memset+0xa>
 801a70c:	4770      	bx	lr
 801a70e:	f803 1b01 	strb.w	r1, [r3], #1
 801a712:	e7f9      	b.n	801a708 <memset+0x4>

0801a714 <strncmp>:
 801a714:	b510      	push	{r4, lr}
 801a716:	b16a      	cbz	r2, 801a734 <strncmp+0x20>
 801a718:	3901      	subs	r1, #1
 801a71a:	1884      	adds	r4, r0, r2
 801a71c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a720:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a724:	429a      	cmp	r2, r3
 801a726:	d103      	bne.n	801a730 <strncmp+0x1c>
 801a728:	42a0      	cmp	r0, r4
 801a72a:	d001      	beq.n	801a730 <strncmp+0x1c>
 801a72c:	2a00      	cmp	r2, #0
 801a72e:	d1f5      	bne.n	801a71c <strncmp+0x8>
 801a730:	1ad0      	subs	r0, r2, r3
 801a732:	bd10      	pop	{r4, pc}
 801a734:	4610      	mov	r0, r2
 801a736:	e7fc      	b.n	801a732 <strncmp+0x1e>

0801a738 <_localeconv_r>:
 801a738:	4800      	ldr	r0, [pc, #0]	@ (801a73c <_localeconv_r+0x4>)
 801a73a:	4770      	bx	lr
 801a73c:	2000017c 	.word	0x2000017c

0801a740 <_close_r>:
 801a740:	b538      	push	{r3, r4, r5, lr}
 801a742:	4d06      	ldr	r5, [pc, #24]	@ (801a75c <_close_r+0x1c>)
 801a744:	2300      	movs	r3, #0
 801a746:	4604      	mov	r4, r0
 801a748:	4608      	mov	r0, r1
 801a74a:	602b      	str	r3, [r5, #0]
 801a74c:	f7e6 ffa4 	bl	8001698 <_close>
 801a750:	1c43      	adds	r3, r0, #1
 801a752:	d102      	bne.n	801a75a <_close_r+0x1a>
 801a754:	682b      	ldr	r3, [r5, #0]
 801a756:	b103      	cbz	r3, 801a75a <_close_r+0x1a>
 801a758:	6023      	str	r3, [r4, #0]
 801a75a:	bd38      	pop	{r3, r4, r5, pc}
 801a75c:	2000d394 	.word	0x2000d394

0801a760 <_reclaim_reent>:
 801a760:	4b29      	ldr	r3, [pc, #164]	@ (801a808 <_reclaim_reent+0xa8>)
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	4283      	cmp	r3, r0
 801a766:	b570      	push	{r4, r5, r6, lr}
 801a768:	4604      	mov	r4, r0
 801a76a:	d04b      	beq.n	801a804 <_reclaim_reent+0xa4>
 801a76c:	69c3      	ldr	r3, [r0, #28]
 801a76e:	b1ab      	cbz	r3, 801a79c <_reclaim_reent+0x3c>
 801a770:	68db      	ldr	r3, [r3, #12]
 801a772:	b16b      	cbz	r3, 801a790 <_reclaim_reent+0x30>
 801a774:	2500      	movs	r5, #0
 801a776:	69e3      	ldr	r3, [r4, #28]
 801a778:	68db      	ldr	r3, [r3, #12]
 801a77a:	5959      	ldr	r1, [r3, r5]
 801a77c:	2900      	cmp	r1, #0
 801a77e:	d13b      	bne.n	801a7f8 <_reclaim_reent+0x98>
 801a780:	3504      	adds	r5, #4
 801a782:	2d80      	cmp	r5, #128	@ 0x80
 801a784:	d1f7      	bne.n	801a776 <_reclaim_reent+0x16>
 801a786:	69e3      	ldr	r3, [r4, #28]
 801a788:	4620      	mov	r0, r4
 801a78a:	68d9      	ldr	r1, [r3, #12]
 801a78c:	f000 ff30 	bl	801b5f0 <_free_r>
 801a790:	69e3      	ldr	r3, [r4, #28]
 801a792:	6819      	ldr	r1, [r3, #0]
 801a794:	b111      	cbz	r1, 801a79c <_reclaim_reent+0x3c>
 801a796:	4620      	mov	r0, r4
 801a798:	f000 ff2a 	bl	801b5f0 <_free_r>
 801a79c:	6961      	ldr	r1, [r4, #20]
 801a79e:	b111      	cbz	r1, 801a7a6 <_reclaim_reent+0x46>
 801a7a0:	4620      	mov	r0, r4
 801a7a2:	f000 ff25 	bl	801b5f0 <_free_r>
 801a7a6:	69e1      	ldr	r1, [r4, #28]
 801a7a8:	b111      	cbz	r1, 801a7b0 <_reclaim_reent+0x50>
 801a7aa:	4620      	mov	r0, r4
 801a7ac:	f000 ff20 	bl	801b5f0 <_free_r>
 801a7b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a7b2:	b111      	cbz	r1, 801a7ba <_reclaim_reent+0x5a>
 801a7b4:	4620      	mov	r0, r4
 801a7b6:	f000 ff1b 	bl	801b5f0 <_free_r>
 801a7ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a7bc:	b111      	cbz	r1, 801a7c4 <_reclaim_reent+0x64>
 801a7be:	4620      	mov	r0, r4
 801a7c0:	f000 ff16 	bl	801b5f0 <_free_r>
 801a7c4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801a7c6:	b111      	cbz	r1, 801a7ce <_reclaim_reent+0x6e>
 801a7c8:	4620      	mov	r0, r4
 801a7ca:	f000 ff11 	bl	801b5f0 <_free_r>
 801a7ce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801a7d0:	b111      	cbz	r1, 801a7d8 <_reclaim_reent+0x78>
 801a7d2:	4620      	mov	r0, r4
 801a7d4:	f000 ff0c 	bl	801b5f0 <_free_r>
 801a7d8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801a7da:	b111      	cbz	r1, 801a7e2 <_reclaim_reent+0x82>
 801a7dc:	4620      	mov	r0, r4
 801a7de:	f000 ff07 	bl	801b5f0 <_free_r>
 801a7e2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801a7e4:	b111      	cbz	r1, 801a7ec <_reclaim_reent+0x8c>
 801a7e6:	4620      	mov	r0, r4
 801a7e8:	f000 ff02 	bl	801b5f0 <_free_r>
 801a7ec:	6a23      	ldr	r3, [r4, #32]
 801a7ee:	b14b      	cbz	r3, 801a804 <_reclaim_reent+0xa4>
 801a7f0:	4620      	mov	r0, r4
 801a7f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a7f6:	4718      	bx	r3
 801a7f8:	680e      	ldr	r6, [r1, #0]
 801a7fa:	4620      	mov	r0, r4
 801a7fc:	f000 fef8 	bl	801b5f0 <_free_r>
 801a800:	4631      	mov	r1, r6
 801a802:	e7bb      	b.n	801a77c <_reclaim_reent+0x1c>
 801a804:	bd70      	pop	{r4, r5, r6, pc}
 801a806:	bf00      	nop
 801a808:	2000003c 	.word	0x2000003c

0801a80c <_lseek_r>:
 801a80c:	b538      	push	{r3, r4, r5, lr}
 801a80e:	4d07      	ldr	r5, [pc, #28]	@ (801a82c <_lseek_r+0x20>)
 801a810:	4604      	mov	r4, r0
 801a812:	4608      	mov	r0, r1
 801a814:	4611      	mov	r1, r2
 801a816:	2200      	movs	r2, #0
 801a818:	602a      	str	r2, [r5, #0]
 801a81a:	461a      	mov	r2, r3
 801a81c:	f7e6 ff63 	bl	80016e6 <_lseek>
 801a820:	1c43      	adds	r3, r0, #1
 801a822:	d102      	bne.n	801a82a <_lseek_r+0x1e>
 801a824:	682b      	ldr	r3, [r5, #0]
 801a826:	b103      	cbz	r3, 801a82a <_lseek_r+0x1e>
 801a828:	6023      	str	r3, [r4, #0]
 801a82a:	bd38      	pop	{r3, r4, r5, pc}
 801a82c:	2000d394 	.word	0x2000d394

0801a830 <_read_r>:
 801a830:	b538      	push	{r3, r4, r5, lr}
 801a832:	4d07      	ldr	r5, [pc, #28]	@ (801a850 <_read_r+0x20>)
 801a834:	4604      	mov	r4, r0
 801a836:	4608      	mov	r0, r1
 801a838:	4611      	mov	r1, r2
 801a83a:	2200      	movs	r2, #0
 801a83c:	602a      	str	r2, [r5, #0]
 801a83e:	461a      	mov	r2, r3
 801a840:	f7e6 fef1 	bl	8001626 <_read>
 801a844:	1c43      	adds	r3, r0, #1
 801a846:	d102      	bne.n	801a84e <_read_r+0x1e>
 801a848:	682b      	ldr	r3, [r5, #0]
 801a84a:	b103      	cbz	r3, 801a84e <_read_r+0x1e>
 801a84c:	6023      	str	r3, [r4, #0]
 801a84e:	bd38      	pop	{r3, r4, r5, pc}
 801a850:	2000d394 	.word	0x2000d394

0801a854 <_sbrk_r>:
 801a854:	b538      	push	{r3, r4, r5, lr}
 801a856:	4d06      	ldr	r5, [pc, #24]	@ (801a870 <_sbrk_r+0x1c>)
 801a858:	2300      	movs	r3, #0
 801a85a:	4604      	mov	r4, r0
 801a85c:	4608      	mov	r0, r1
 801a85e:	602b      	str	r3, [r5, #0]
 801a860:	f7e6 ff4e 	bl	8001700 <_sbrk>
 801a864:	1c43      	adds	r3, r0, #1
 801a866:	d102      	bne.n	801a86e <_sbrk_r+0x1a>
 801a868:	682b      	ldr	r3, [r5, #0]
 801a86a:	b103      	cbz	r3, 801a86e <_sbrk_r+0x1a>
 801a86c:	6023      	str	r3, [r4, #0]
 801a86e:	bd38      	pop	{r3, r4, r5, pc}
 801a870:	2000d394 	.word	0x2000d394

0801a874 <_write_r>:
 801a874:	b538      	push	{r3, r4, r5, lr}
 801a876:	4d07      	ldr	r5, [pc, #28]	@ (801a894 <_write_r+0x20>)
 801a878:	4604      	mov	r4, r0
 801a87a:	4608      	mov	r0, r1
 801a87c:	4611      	mov	r1, r2
 801a87e:	2200      	movs	r2, #0
 801a880:	602a      	str	r2, [r5, #0]
 801a882:	461a      	mov	r2, r3
 801a884:	f7e6 feec 	bl	8001660 <_write>
 801a888:	1c43      	adds	r3, r0, #1
 801a88a:	d102      	bne.n	801a892 <_write_r+0x1e>
 801a88c:	682b      	ldr	r3, [r5, #0]
 801a88e:	b103      	cbz	r3, 801a892 <_write_r+0x1e>
 801a890:	6023      	str	r3, [r4, #0]
 801a892:	bd38      	pop	{r3, r4, r5, pc}
 801a894:	2000d394 	.word	0x2000d394

0801a898 <__errno>:
 801a898:	4b01      	ldr	r3, [pc, #4]	@ (801a8a0 <__errno+0x8>)
 801a89a:	6818      	ldr	r0, [r3, #0]
 801a89c:	4770      	bx	lr
 801a89e:	bf00      	nop
 801a8a0:	2000003c 	.word	0x2000003c

0801a8a4 <__libc_init_array>:
 801a8a4:	b570      	push	{r4, r5, r6, lr}
 801a8a6:	4d0d      	ldr	r5, [pc, #52]	@ (801a8dc <__libc_init_array+0x38>)
 801a8a8:	4c0d      	ldr	r4, [pc, #52]	@ (801a8e0 <__libc_init_array+0x3c>)
 801a8aa:	1b64      	subs	r4, r4, r5
 801a8ac:	10a4      	asrs	r4, r4, #2
 801a8ae:	2600      	movs	r6, #0
 801a8b0:	42a6      	cmp	r6, r4
 801a8b2:	d109      	bne.n	801a8c8 <__libc_init_array+0x24>
 801a8b4:	4d0b      	ldr	r5, [pc, #44]	@ (801a8e4 <__libc_init_array+0x40>)
 801a8b6:	4c0c      	ldr	r4, [pc, #48]	@ (801a8e8 <__libc_init_array+0x44>)
 801a8b8:	f003 f972 	bl	801dba0 <_init>
 801a8bc:	1b64      	subs	r4, r4, r5
 801a8be:	10a4      	asrs	r4, r4, #2
 801a8c0:	2600      	movs	r6, #0
 801a8c2:	42a6      	cmp	r6, r4
 801a8c4:	d105      	bne.n	801a8d2 <__libc_init_array+0x2e>
 801a8c6:	bd70      	pop	{r4, r5, r6, pc}
 801a8c8:	f855 3b04 	ldr.w	r3, [r5], #4
 801a8cc:	4798      	blx	r3
 801a8ce:	3601      	adds	r6, #1
 801a8d0:	e7ee      	b.n	801a8b0 <__libc_init_array+0xc>
 801a8d2:	f855 3b04 	ldr.w	r3, [r5], #4
 801a8d6:	4798      	blx	r3
 801a8d8:	3601      	adds	r6, #1
 801a8da:	e7f2      	b.n	801a8c2 <__libc_init_array+0x1e>
 801a8dc:	08021bb4 	.word	0x08021bb4
 801a8e0:	08021bb4 	.word	0x08021bb4
 801a8e4:	08021bb4 	.word	0x08021bb4
 801a8e8:	08021bb8 	.word	0x08021bb8

0801a8ec <__retarget_lock_init_recursive>:
 801a8ec:	4770      	bx	lr

0801a8ee <__retarget_lock_acquire_recursive>:
 801a8ee:	4770      	bx	lr

0801a8f0 <__retarget_lock_release_recursive>:
 801a8f0:	4770      	bx	lr

0801a8f2 <memcpy>:
 801a8f2:	440a      	add	r2, r1
 801a8f4:	4291      	cmp	r1, r2
 801a8f6:	f100 33ff 	add.w	r3, r0, #4294967295
 801a8fa:	d100      	bne.n	801a8fe <memcpy+0xc>
 801a8fc:	4770      	bx	lr
 801a8fe:	b510      	push	{r4, lr}
 801a900:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a904:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a908:	4291      	cmp	r1, r2
 801a90a:	d1f9      	bne.n	801a900 <memcpy+0xe>
 801a90c:	bd10      	pop	{r4, pc}
	...

0801a910 <nanf>:
 801a910:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801a918 <nanf+0x8>
 801a914:	4770      	bx	lr
 801a916:	bf00      	nop
 801a918:	7fc00000 	.word	0x7fc00000

0801a91c <__assert_func>:
 801a91c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a91e:	4614      	mov	r4, r2
 801a920:	461a      	mov	r2, r3
 801a922:	4b09      	ldr	r3, [pc, #36]	@ (801a948 <__assert_func+0x2c>)
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	4605      	mov	r5, r0
 801a928:	68d8      	ldr	r0, [r3, #12]
 801a92a:	b954      	cbnz	r4, 801a942 <__assert_func+0x26>
 801a92c:	4b07      	ldr	r3, [pc, #28]	@ (801a94c <__assert_func+0x30>)
 801a92e:	461c      	mov	r4, r3
 801a930:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a934:	9100      	str	r1, [sp, #0]
 801a936:	462b      	mov	r3, r5
 801a938:	4905      	ldr	r1, [pc, #20]	@ (801a950 <__assert_func+0x34>)
 801a93a:	f002 fca5 	bl	801d288 <fiprintf>
 801a93e:	f002 fd43 	bl	801d3c8 <abort>
 801a942:	4b04      	ldr	r3, [pc, #16]	@ (801a954 <__assert_func+0x38>)
 801a944:	e7f4      	b.n	801a930 <__assert_func+0x14>
 801a946:	bf00      	nop
 801a948:	2000003c 	.word	0x2000003c
 801a94c:	08021906 	.word	0x08021906
 801a950:	080218d8 	.word	0x080218d8
 801a954:	080218cb 	.word	0x080218cb

0801a958 <quorem>:
 801a958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a95c:	6903      	ldr	r3, [r0, #16]
 801a95e:	690c      	ldr	r4, [r1, #16]
 801a960:	42a3      	cmp	r3, r4
 801a962:	4607      	mov	r7, r0
 801a964:	db7e      	blt.n	801aa64 <quorem+0x10c>
 801a966:	3c01      	subs	r4, #1
 801a968:	f101 0814 	add.w	r8, r1, #20
 801a96c:	00a3      	lsls	r3, r4, #2
 801a96e:	f100 0514 	add.w	r5, r0, #20
 801a972:	9300      	str	r3, [sp, #0]
 801a974:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a978:	9301      	str	r3, [sp, #4]
 801a97a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a97e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a982:	3301      	adds	r3, #1
 801a984:	429a      	cmp	r2, r3
 801a986:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a98a:	fbb2 f6f3 	udiv	r6, r2, r3
 801a98e:	d32e      	bcc.n	801a9ee <quorem+0x96>
 801a990:	f04f 0a00 	mov.w	sl, #0
 801a994:	46c4      	mov	ip, r8
 801a996:	46ae      	mov	lr, r5
 801a998:	46d3      	mov	fp, sl
 801a99a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a99e:	b298      	uxth	r0, r3
 801a9a0:	fb06 a000 	mla	r0, r6, r0, sl
 801a9a4:	0c02      	lsrs	r2, r0, #16
 801a9a6:	0c1b      	lsrs	r3, r3, #16
 801a9a8:	fb06 2303 	mla	r3, r6, r3, r2
 801a9ac:	f8de 2000 	ldr.w	r2, [lr]
 801a9b0:	b280      	uxth	r0, r0
 801a9b2:	b292      	uxth	r2, r2
 801a9b4:	1a12      	subs	r2, r2, r0
 801a9b6:	445a      	add	r2, fp
 801a9b8:	f8de 0000 	ldr.w	r0, [lr]
 801a9bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a9c0:	b29b      	uxth	r3, r3
 801a9c2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801a9c6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801a9ca:	b292      	uxth	r2, r2
 801a9cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801a9d0:	45e1      	cmp	r9, ip
 801a9d2:	f84e 2b04 	str.w	r2, [lr], #4
 801a9d6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801a9da:	d2de      	bcs.n	801a99a <quorem+0x42>
 801a9dc:	9b00      	ldr	r3, [sp, #0]
 801a9de:	58eb      	ldr	r3, [r5, r3]
 801a9e0:	b92b      	cbnz	r3, 801a9ee <quorem+0x96>
 801a9e2:	9b01      	ldr	r3, [sp, #4]
 801a9e4:	3b04      	subs	r3, #4
 801a9e6:	429d      	cmp	r5, r3
 801a9e8:	461a      	mov	r2, r3
 801a9ea:	d32f      	bcc.n	801aa4c <quorem+0xf4>
 801a9ec:	613c      	str	r4, [r7, #16]
 801a9ee:	4638      	mov	r0, r7
 801a9f0:	f001 f90c 	bl	801bc0c <__mcmp>
 801a9f4:	2800      	cmp	r0, #0
 801a9f6:	db25      	blt.n	801aa44 <quorem+0xec>
 801a9f8:	4629      	mov	r1, r5
 801a9fa:	2000      	movs	r0, #0
 801a9fc:	f858 2b04 	ldr.w	r2, [r8], #4
 801aa00:	f8d1 c000 	ldr.w	ip, [r1]
 801aa04:	fa1f fe82 	uxth.w	lr, r2
 801aa08:	fa1f f38c 	uxth.w	r3, ip
 801aa0c:	eba3 030e 	sub.w	r3, r3, lr
 801aa10:	4403      	add	r3, r0
 801aa12:	0c12      	lsrs	r2, r2, #16
 801aa14:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801aa18:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801aa1c:	b29b      	uxth	r3, r3
 801aa1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801aa22:	45c1      	cmp	r9, r8
 801aa24:	f841 3b04 	str.w	r3, [r1], #4
 801aa28:	ea4f 4022 	mov.w	r0, r2, asr #16
 801aa2c:	d2e6      	bcs.n	801a9fc <quorem+0xa4>
 801aa2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801aa32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801aa36:	b922      	cbnz	r2, 801aa42 <quorem+0xea>
 801aa38:	3b04      	subs	r3, #4
 801aa3a:	429d      	cmp	r5, r3
 801aa3c:	461a      	mov	r2, r3
 801aa3e:	d30b      	bcc.n	801aa58 <quorem+0x100>
 801aa40:	613c      	str	r4, [r7, #16]
 801aa42:	3601      	adds	r6, #1
 801aa44:	4630      	mov	r0, r6
 801aa46:	b003      	add	sp, #12
 801aa48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa4c:	6812      	ldr	r2, [r2, #0]
 801aa4e:	3b04      	subs	r3, #4
 801aa50:	2a00      	cmp	r2, #0
 801aa52:	d1cb      	bne.n	801a9ec <quorem+0x94>
 801aa54:	3c01      	subs	r4, #1
 801aa56:	e7c6      	b.n	801a9e6 <quorem+0x8e>
 801aa58:	6812      	ldr	r2, [r2, #0]
 801aa5a:	3b04      	subs	r3, #4
 801aa5c:	2a00      	cmp	r2, #0
 801aa5e:	d1ef      	bne.n	801aa40 <quorem+0xe8>
 801aa60:	3c01      	subs	r4, #1
 801aa62:	e7ea      	b.n	801aa3a <quorem+0xe2>
 801aa64:	2000      	movs	r0, #0
 801aa66:	e7ee      	b.n	801aa46 <quorem+0xee>

0801aa68 <_dtoa_r>:
 801aa68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa6c:	69c7      	ldr	r7, [r0, #28]
 801aa6e:	b099      	sub	sp, #100	@ 0x64
 801aa70:	ed8d 0b02 	vstr	d0, [sp, #8]
 801aa74:	ec55 4b10 	vmov	r4, r5, d0
 801aa78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801aa7a:	9109      	str	r1, [sp, #36]	@ 0x24
 801aa7c:	4683      	mov	fp, r0
 801aa7e:	920e      	str	r2, [sp, #56]	@ 0x38
 801aa80:	9313      	str	r3, [sp, #76]	@ 0x4c
 801aa82:	b97f      	cbnz	r7, 801aaa4 <_dtoa_r+0x3c>
 801aa84:	2010      	movs	r0, #16
 801aa86:	f7fe fbfb 	bl	8019280 <malloc>
 801aa8a:	4602      	mov	r2, r0
 801aa8c:	f8cb 001c 	str.w	r0, [fp, #28]
 801aa90:	b920      	cbnz	r0, 801aa9c <_dtoa_r+0x34>
 801aa92:	4ba7      	ldr	r3, [pc, #668]	@ (801ad30 <_dtoa_r+0x2c8>)
 801aa94:	21ef      	movs	r1, #239	@ 0xef
 801aa96:	48a7      	ldr	r0, [pc, #668]	@ (801ad34 <_dtoa_r+0x2cc>)
 801aa98:	f7ff ff40 	bl	801a91c <__assert_func>
 801aa9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801aaa0:	6007      	str	r7, [r0, #0]
 801aaa2:	60c7      	str	r7, [r0, #12]
 801aaa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801aaa8:	6819      	ldr	r1, [r3, #0]
 801aaaa:	b159      	cbz	r1, 801aac4 <_dtoa_r+0x5c>
 801aaac:	685a      	ldr	r2, [r3, #4]
 801aaae:	604a      	str	r2, [r1, #4]
 801aab0:	2301      	movs	r3, #1
 801aab2:	4093      	lsls	r3, r2
 801aab4:	608b      	str	r3, [r1, #8]
 801aab6:	4658      	mov	r0, fp
 801aab8:	f000 fe24 	bl	801b704 <_Bfree>
 801aabc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801aac0:	2200      	movs	r2, #0
 801aac2:	601a      	str	r2, [r3, #0]
 801aac4:	1e2b      	subs	r3, r5, #0
 801aac6:	bfb9      	ittee	lt
 801aac8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801aacc:	9303      	strlt	r3, [sp, #12]
 801aace:	2300      	movge	r3, #0
 801aad0:	6033      	strge	r3, [r6, #0]
 801aad2:	9f03      	ldr	r7, [sp, #12]
 801aad4:	4b98      	ldr	r3, [pc, #608]	@ (801ad38 <_dtoa_r+0x2d0>)
 801aad6:	bfbc      	itt	lt
 801aad8:	2201      	movlt	r2, #1
 801aada:	6032      	strlt	r2, [r6, #0]
 801aadc:	43bb      	bics	r3, r7
 801aade:	d112      	bne.n	801ab06 <_dtoa_r+0x9e>
 801aae0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801aae2:	f242 730f 	movw	r3, #9999	@ 0x270f
 801aae6:	6013      	str	r3, [r2, #0]
 801aae8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801aaec:	4323      	orrs	r3, r4
 801aaee:	f000 854d 	beq.w	801b58c <_dtoa_r+0xb24>
 801aaf2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801aaf4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801ad4c <_dtoa_r+0x2e4>
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	f000 854f 	beq.w	801b59c <_dtoa_r+0xb34>
 801aafe:	f10a 0303 	add.w	r3, sl, #3
 801ab02:	f000 bd49 	b.w	801b598 <_dtoa_r+0xb30>
 801ab06:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ab0a:	2200      	movs	r2, #0
 801ab0c:	ec51 0b17 	vmov	r0, r1, d7
 801ab10:	2300      	movs	r3, #0
 801ab12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801ab16:	f7e5 ffe7 	bl	8000ae8 <__aeabi_dcmpeq>
 801ab1a:	4680      	mov	r8, r0
 801ab1c:	b158      	cbz	r0, 801ab36 <_dtoa_r+0xce>
 801ab1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ab20:	2301      	movs	r3, #1
 801ab22:	6013      	str	r3, [r2, #0]
 801ab24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ab26:	b113      	cbz	r3, 801ab2e <_dtoa_r+0xc6>
 801ab28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801ab2a:	4b84      	ldr	r3, [pc, #528]	@ (801ad3c <_dtoa_r+0x2d4>)
 801ab2c:	6013      	str	r3, [r2, #0]
 801ab2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801ad50 <_dtoa_r+0x2e8>
 801ab32:	f000 bd33 	b.w	801b59c <_dtoa_r+0xb34>
 801ab36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801ab3a:	aa16      	add	r2, sp, #88	@ 0x58
 801ab3c:	a917      	add	r1, sp, #92	@ 0x5c
 801ab3e:	4658      	mov	r0, fp
 801ab40:	f001 f984 	bl	801be4c <__d2b>
 801ab44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801ab48:	4681      	mov	r9, r0
 801ab4a:	2e00      	cmp	r6, #0
 801ab4c:	d077      	beq.n	801ac3e <_dtoa_r+0x1d6>
 801ab4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ab50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801ab54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ab58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ab5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801ab60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801ab64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801ab68:	4619      	mov	r1, r3
 801ab6a:	2200      	movs	r2, #0
 801ab6c:	4b74      	ldr	r3, [pc, #464]	@ (801ad40 <_dtoa_r+0x2d8>)
 801ab6e:	f7e5 fb9b 	bl	80002a8 <__aeabi_dsub>
 801ab72:	a369      	add	r3, pc, #420	@ (adr r3, 801ad18 <_dtoa_r+0x2b0>)
 801ab74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab78:	f7e5 fd4e 	bl	8000618 <__aeabi_dmul>
 801ab7c:	a368      	add	r3, pc, #416	@ (adr r3, 801ad20 <_dtoa_r+0x2b8>)
 801ab7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab82:	f7e5 fb93 	bl	80002ac <__adddf3>
 801ab86:	4604      	mov	r4, r0
 801ab88:	4630      	mov	r0, r6
 801ab8a:	460d      	mov	r5, r1
 801ab8c:	f7e5 fcda 	bl	8000544 <__aeabi_i2d>
 801ab90:	a365      	add	r3, pc, #404	@ (adr r3, 801ad28 <_dtoa_r+0x2c0>)
 801ab92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab96:	f7e5 fd3f 	bl	8000618 <__aeabi_dmul>
 801ab9a:	4602      	mov	r2, r0
 801ab9c:	460b      	mov	r3, r1
 801ab9e:	4620      	mov	r0, r4
 801aba0:	4629      	mov	r1, r5
 801aba2:	f7e5 fb83 	bl	80002ac <__adddf3>
 801aba6:	4604      	mov	r4, r0
 801aba8:	460d      	mov	r5, r1
 801abaa:	f7e5 ffe5 	bl	8000b78 <__aeabi_d2iz>
 801abae:	2200      	movs	r2, #0
 801abb0:	4607      	mov	r7, r0
 801abb2:	2300      	movs	r3, #0
 801abb4:	4620      	mov	r0, r4
 801abb6:	4629      	mov	r1, r5
 801abb8:	f7e5 ffa0 	bl	8000afc <__aeabi_dcmplt>
 801abbc:	b140      	cbz	r0, 801abd0 <_dtoa_r+0x168>
 801abbe:	4638      	mov	r0, r7
 801abc0:	f7e5 fcc0 	bl	8000544 <__aeabi_i2d>
 801abc4:	4622      	mov	r2, r4
 801abc6:	462b      	mov	r3, r5
 801abc8:	f7e5 ff8e 	bl	8000ae8 <__aeabi_dcmpeq>
 801abcc:	b900      	cbnz	r0, 801abd0 <_dtoa_r+0x168>
 801abce:	3f01      	subs	r7, #1
 801abd0:	2f16      	cmp	r7, #22
 801abd2:	d851      	bhi.n	801ac78 <_dtoa_r+0x210>
 801abd4:	4b5b      	ldr	r3, [pc, #364]	@ (801ad44 <_dtoa_r+0x2dc>)
 801abd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801abda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801abe2:	f7e5 ff8b 	bl	8000afc <__aeabi_dcmplt>
 801abe6:	2800      	cmp	r0, #0
 801abe8:	d048      	beq.n	801ac7c <_dtoa_r+0x214>
 801abea:	3f01      	subs	r7, #1
 801abec:	2300      	movs	r3, #0
 801abee:	9312      	str	r3, [sp, #72]	@ 0x48
 801abf0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801abf2:	1b9b      	subs	r3, r3, r6
 801abf4:	1e5a      	subs	r2, r3, #1
 801abf6:	bf44      	itt	mi
 801abf8:	f1c3 0801 	rsbmi	r8, r3, #1
 801abfc:	2300      	movmi	r3, #0
 801abfe:	9208      	str	r2, [sp, #32]
 801ac00:	bf54      	ite	pl
 801ac02:	f04f 0800 	movpl.w	r8, #0
 801ac06:	9308      	strmi	r3, [sp, #32]
 801ac08:	2f00      	cmp	r7, #0
 801ac0a:	db39      	blt.n	801ac80 <_dtoa_r+0x218>
 801ac0c:	9b08      	ldr	r3, [sp, #32]
 801ac0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801ac10:	443b      	add	r3, r7
 801ac12:	9308      	str	r3, [sp, #32]
 801ac14:	2300      	movs	r3, #0
 801ac16:	930a      	str	r3, [sp, #40]	@ 0x28
 801ac18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac1a:	2b09      	cmp	r3, #9
 801ac1c:	d864      	bhi.n	801ace8 <_dtoa_r+0x280>
 801ac1e:	2b05      	cmp	r3, #5
 801ac20:	bfc4      	itt	gt
 801ac22:	3b04      	subgt	r3, #4
 801ac24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801ac26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac28:	f1a3 0302 	sub.w	r3, r3, #2
 801ac2c:	bfcc      	ite	gt
 801ac2e:	2400      	movgt	r4, #0
 801ac30:	2401      	movle	r4, #1
 801ac32:	2b03      	cmp	r3, #3
 801ac34:	d863      	bhi.n	801acfe <_dtoa_r+0x296>
 801ac36:	e8df f003 	tbb	[pc, r3]
 801ac3a:	372a      	.short	0x372a
 801ac3c:	5535      	.short	0x5535
 801ac3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801ac42:	441e      	add	r6, r3
 801ac44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801ac48:	2b20      	cmp	r3, #32
 801ac4a:	bfc1      	itttt	gt
 801ac4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801ac50:	409f      	lslgt	r7, r3
 801ac52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801ac56:	fa24 f303 	lsrgt.w	r3, r4, r3
 801ac5a:	bfd6      	itet	le
 801ac5c:	f1c3 0320 	rsble	r3, r3, #32
 801ac60:	ea47 0003 	orrgt.w	r0, r7, r3
 801ac64:	fa04 f003 	lslle.w	r0, r4, r3
 801ac68:	f7e5 fc5c 	bl	8000524 <__aeabi_ui2d>
 801ac6c:	2201      	movs	r2, #1
 801ac6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801ac72:	3e01      	subs	r6, #1
 801ac74:	9214      	str	r2, [sp, #80]	@ 0x50
 801ac76:	e777      	b.n	801ab68 <_dtoa_r+0x100>
 801ac78:	2301      	movs	r3, #1
 801ac7a:	e7b8      	b.n	801abee <_dtoa_r+0x186>
 801ac7c:	9012      	str	r0, [sp, #72]	@ 0x48
 801ac7e:	e7b7      	b.n	801abf0 <_dtoa_r+0x188>
 801ac80:	427b      	negs	r3, r7
 801ac82:	930a      	str	r3, [sp, #40]	@ 0x28
 801ac84:	2300      	movs	r3, #0
 801ac86:	eba8 0807 	sub.w	r8, r8, r7
 801ac8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ac8c:	e7c4      	b.n	801ac18 <_dtoa_r+0x1b0>
 801ac8e:	2300      	movs	r3, #0
 801ac90:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ac92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	dc35      	bgt.n	801ad04 <_dtoa_r+0x29c>
 801ac98:	2301      	movs	r3, #1
 801ac9a:	9300      	str	r3, [sp, #0]
 801ac9c:	9307      	str	r3, [sp, #28]
 801ac9e:	461a      	mov	r2, r3
 801aca0:	920e      	str	r2, [sp, #56]	@ 0x38
 801aca2:	e00b      	b.n	801acbc <_dtoa_r+0x254>
 801aca4:	2301      	movs	r3, #1
 801aca6:	e7f3      	b.n	801ac90 <_dtoa_r+0x228>
 801aca8:	2300      	movs	r3, #0
 801acaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 801acac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801acae:	18fb      	adds	r3, r7, r3
 801acb0:	9300      	str	r3, [sp, #0]
 801acb2:	3301      	adds	r3, #1
 801acb4:	2b01      	cmp	r3, #1
 801acb6:	9307      	str	r3, [sp, #28]
 801acb8:	bfb8      	it	lt
 801acba:	2301      	movlt	r3, #1
 801acbc:	f8db 001c 	ldr.w	r0, [fp, #28]
 801acc0:	2100      	movs	r1, #0
 801acc2:	2204      	movs	r2, #4
 801acc4:	f102 0514 	add.w	r5, r2, #20
 801acc8:	429d      	cmp	r5, r3
 801acca:	d91f      	bls.n	801ad0c <_dtoa_r+0x2a4>
 801accc:	6041      	str	r1, [r0, #4]
 801acce:	4658      	mov	r0, fp
 801acd0:	f000 fcd8 	bl	801b684 <_Balloc>
 801acd4:	4682      	mov	sl, r0
 801acd6:	2800      	cmp	r0, #0
 801acd8:	d13c      	bne.n	801ad54 <_dtoa_r+0x2ec>
 801acda:	4b1b      	ldr	r3, [pc, #108]	@ (801ad48 <_dtoa_r+0x2e0>)
 801acdc:	4602      	mov	r2, r0
 801acde:	f240 11af 	movw	r1, #431	@ 0x1af
 801ace2:	e6d8      	b.n	801aa96 <_dtoa_r+0x2e>
 801ace4:	2301      	movs	r3, #1
 801ace6:	e7e0      	b.n	801acaa <_dtoa_r+0x242>
 801ace8:	2401      	movs	r4, #1
 801acea:	2300      	movs	r3, #0
 801acec:	9309      	str	r3, [sp, #36]	@ 0x24
 801acee:	940b      	str	r4, [sp, #44]	@ 0x2c
 801acf0:	f04f 33ff 	mov.w	r3, #4294967295
 801acf4:	9300      	str	r3, [sp, #0]
 801acf6:	9307      	str	r3, [sp, #28]
 801acf8:	2200      	movs	r2, #0
 801acfa:	2312      	movs	r3, #18
 801acfc:	e7d0      	b.n	801aca0 <_dtoa_r+0x238>
 801acfe:	2301      	movs	r3, #1
 801ad00:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ad02:	e7f5      	b.n	801acf0 <_dtoa_r+0x288>
 801ad04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ad06:	9300      	str	r3, [sp, #0]
 801ad08:	9307      	str	r3, [sp, #28]
 801ad0a:	e7d7      	b.n	801acbc <_dtoa_r+0x254>
 801ad0c:	3101      	adds	r1, #1
 801ad0e:	0052      	lsls	r2, r2, #1
 801ad10:	e7d8      	b.n	801acc4 <_dtoa_r+0x25c>
 801ad12:	bf00      	nop
 801ad14:	f3af 8000 	nop.w
 801ad18:	636f4361 	.word	0x636f4361
 801ad1c:	3fd287a7 	.word	0x3fd287a7
 801ad20:	8b60c8b3 	.word	0x8b60c8b3
 801ad24:	3fc68a28 	.word	0x3fc68a28
 801ad28:	509f79fb 	.word	0x509f79fb
 801ad2c:	3fd34413 	.word	0x3fd34413
 801ad30:	08021722 	.word	0x08021722
 801ad34:	08021914 	.word	0x08021914
 801ad38:	7ff00000 	.word	0x7ff00000
 801ad3c:	080218a3 	.word	0x080218a3
 801ad40:	3ff80000 	.word	0x3ff80000
 801ad44:	08021a10 	.word	0x08021a10
 801ad48:	0802196c 	.word	0x0802196c
 801ad4c:	08021910 	.word	0x08021910
 801ad50:	080218a2 	.word	0x080218a2
 801ad54:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ad58:	6018      	str	r0, [r3, #0]
 801ad5a:	9b07      	ldr	r3, [sp, #28]
 801ad5c:	2b0e      	cmp	r3, #14
 801ad5e:	f200 80a4 	bhi.w	801aeaa <_dtoa_r+0x442>
 801ad62:	2c00      	cmp	r4, #0
 801ad64:	f000 80a1 	beq.w	801aeaa <_dtoa_r+0x442>
 801ad68:	2f00      	cmp	r7, #0
 801ad6a:	dd33      	ble.n	801add4 <_dtoa_r+0x36c>
 801ad6c:	4bad      	ldr	r3, [pc, #692]	@ (801b024 <_dtoa_r+0x5bc>)
 801ad6e:	f007 020f 	and.w	r2, r7, #15
 801ad72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ad76:	ed93 7b00 	vldr	d7, [r3]
 801ad7a:	05f8      	lsls	r0, r7, #23
 801ad7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ad80:	ea4f 1427 	mov.w	r4, r7, asr #4
 801ad84:	d516      	bpl.n	801adb4 <_dtoa_r+0x34c>
 801ad86:	4ba8      	ldr	r3, [pc, #672]	@ (801b028 <_dtoa_r+0x5c0>)
 801ad88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ad8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ad90:	f7e5 fd6c 	bl	800086c <__aeabi_ddiv>
 801ad94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ad98:	f004 040f 	and.w	r4, r4, #15
 801ad9c:	2603      	movs	r6, #3
 801ad9e:	4da2      	ldr	r5, [pc, #648]	@ (801b028 <_dtoa_r+0x5c0>)
 801ada0:	b954      	cbnz	r4, 801adb8 <_dtoa_r+0x350>
 801ada2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ada6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801adaa:	f7e5 fd5f 	bl	800086c <__aeabi_ddiv>
 801adae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801adb2:	e028      	b.n	801ae06 <_dtoa_r+0x39e>
 801adb4:	2602      	movs	r6, #2
 801adb6:	e7f2      	b.n	801ad9e <_dtoa_r+0x336>
 801adb8:	07e1      	lsls	r1, r4, #31
 801adba:	d508      	bpl.n	801adce <_dtoa_r+0x366>
 801adbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801adc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 801adc4:	f7e5 fc28 	bl	8000618 <__aeabi_dmul>
 801adc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801adcc:	3601      	adds	r6, #1
 801adce:	1064      	asrs	r4, r4, #1
 801add0:	3508      	adds	r5, #8
 801add2:	e7e5      	b.n	801ada0 <_dtoa_r+0x338>
 801add4:	f000 80d2 	beq.w	801af7c <_dtoa_r+0x514>
 801add8:	427c      	negs	r4, r7
 801adda:	4b92      	ldr	r3, [pc, #584]	@ (801b024 <_dtoa_r+0x5bc>)
 801addc:	4d92      	ldr	r5, [pc, #584]	@ (801b028 <_dtoa_r+0x5c0>)
 801adde:	f004 020f 	and.w	r2, r4, #15
 801ade2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801adee:	f7e5 fc13 	bl	8000618 <__aeabi_dmul>
 801adf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801adf6:	1124      	asrs	r4, r4, #4
 801adf8:	2300      	movs	r3, #0
 801adfa:	2602      	movs	r6, #2
 801adfc:	2c00      	cmp	r4, #0
 801adfe:	f040 80b2 	bne.w	801af66 <_dtoa_r+0x4fe>
 801ae02:	2b00      	cmp	r3, #0
 801ae04:	d1d3      	bne.n	801adae <_dtoa_r+0x346>
 801ae06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ae08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	f000 80b7 	beq.w	801af80 <_dtoa_r+0x518>
 801ae12:	4b86      	ldr	r3, [pc, #536]	@ (801b02c <_dtoa_r+0x5c4>)
 801ae14:	2200      	movs	r2, #0
 801ae16:	4620      	mov	r0, r4
 801ae18:	4629      	mov	r1, r5
 801ae1a:	f7e5 fe6f 	bl	8000afc <__aeabi_dcmplt>
 801ae1e:	2800      	cmp	r0, #0
 801ae20:	f000 80ae 	beq.w	801af80 <_dtoa_r+0x518>
 801ae24:	9b07      	ldr	r3, [sp, #28]
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	f000 80aa 	beq.w	801af80 <_dtoa_r+0x518>
 801ae2c:	9b00      	ldr	r3, [sp, #0]
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	dd37      	ble.n	801aea2 <_dtoa_r+0x43a>
 801ae32:	1e7b      	subs	r3, r7, #1
 801ae34:	9304      	str	r3, [sp, #16]
 801ae36:	4620      	mov	r0, r4
 801ae38:	4b7d      	ldr	r3, [pc, #500]	@ (801b030 <_dtoa_r+0x5c8>)
 801ae3a:	2200      	movs	r2, #0
 801ae3c:	4629      	mov	r1, r5
 801ae3e:	f7e5 fbeb 	bl	8000618 <__aeabi_dmul>
 801ae42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ae46:	9c00      	ldr	r4, [sp, #0]
 801ae48:	3601      	adds	r6, #1
 801ae4a:	4630      	mov	r0, r6
 801ae4c:	f7e5 fb7a 	bl	8000544 <__aeabi_i2d>
 801ae50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ae54:	f7e5 fbe0 	bl	8000618 <__aeabi_dmul>
 801ae58:	4b76      	ldr	r3, [pc, #472]	@ (801b034 <_dtoa_r+0x5cc>)
 801ae5a:	2200      	movs	r2, #0
 801ae5c:	f7e5 fa26 	bl	80002ac <__adddf3>
 801ae60:	4605      	mov	r5, r0
 801ae62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801ae66:	2c00      	cmp	r4, #0
 801ae68:	f040 808d 	bne.w	801af86 <_dtoa_r+0x51e>
 801ae6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ae70:	4b71      	ldr	r3, [pc, #452]	@ (801b038 <_dtoa_r+0x5d0>)
 801ae72:	2200      	movs	r2, #0
 801ae74:	f7e5 fa18 	bl	80002a8 <__aeabi_dsub>
 801ae78:	4602      	mov	r2, r0
 801ae7a:	460b      	mov	r3, r1
 801ae7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ae80:	462a      	mov	r2, r5
 801ae82:	4633      	mov	r3, r6
 801ae84:	f7e5 fe58 	bl	8000b38 <__aeabi_dcmpgt>
 801ae88:	2800      	cmp	r0, #0
 801ae8a:	f040 828b 	bne.w	801b3a4 <_dtoa_r+0x93c>
 801ae8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ae92:	462a      	mov	r2, r5
 801ae94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801ae98:	f7e5 fe30 	bl	8000afc <__aeabi_dcmplt>
 801ae9c:	2800      	cmp	r0, #0
 801ae9e:	f040 8128 	bne.w	801b0f2 <_dtoa_r+0x68a>
 801aea2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801aea6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801aeaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	f2c0 815a 	blt.w	801b166 <_dtoa_r+0x6fe>
 801aeb2:	2f0e      	cmp	r7, #14
 801aeb4:	f300 8157 	bgt.w	801b166 <_dtoa_r+0x6fe>
 801aeb8:	4b5a      	ldr	r3, [pc, #360]	@ (801b024 <_dtoa_r+0x5bc>)
 801aeba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801aebe:	ed93 7b00 	vldr	d7, [r3]
 801aec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	ed8d 7b00 	vstr	d7, [sp]
 801aeca:	da03      	bge.n	801aed4 <_dtoa_r+0x46c>
 801aecc:	9b07      	ldr	r3, [sp, #28]
 801aece:	2b00      	cmp	r3, #0
 801aed0:	f340 8101 	ble.w	801b0d6 <_dtoa_r+0x66e>
 801aed4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801aed8:	4656      	mov	r6, sl
 801aeda:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aede:	4620      	mov	r0, r4
 801aee0:	4629      	mov	r1, r5
 801aee2:	f7e5 fcc3 	bl	800086c <__aeabi_ddiv>
 801aee6:	f7e5 fe47 	bl	8000b78 <__aeabi_d2iz>
 801aeea:	4680      	mov	r8, r0
 801aeec:	f7e5 fb2a 	bl	8000544 <__aeabi_i2d>
 801aef0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aef4:	f7e5 fb90 	bl	8000618 <__aeabi_dmul>
 801aef8:	4602      	mov	r2, r0
 801aefa:	460b      	mov	r3, r1
 801aefc:	4620      	mov	r0, r4
 801aefe:	4629      	mov	r1, r5
 801af00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801af04:	f7e5 f9d0 	bl	80002a8 <__aeabi_dsub>
 801af08:	f806 4b01 	strb.w	r4, [r6], #1
 801af0c:	9d07      	ldr	r5, [sp, #28]
 801af0e:	eba6 040a 	sub.w	r4, r6, sl
 801af12:	42a5      	cmp	r5, r4
 801af14:	4602      	mov	r2, r0
 801af16:	460b      	mov	r3, r1
 801af18:	f040 8117 	bne.w	801b14a <_dtoa_r+0x6e2>
 801af1c:	f7e5 f9c6 	bl	80002ac <__adddf3>
 801af20:	e9dd 2300 	ldrd	r2, r3, [sp]
 801af24:	4604      	mov	r4, r0
 801af26:	460d      	mov	r5, r1
 801af28:	f7e5 fe06 	bl	8000b38 <__aeabi_dcmpgt>
 801af2c:	2800      	cmp	r0, #0
 801af2e:	f040 80f9 	bne.w	801b124 <_dtoa_r+0x6bc>
 801af32:	e9dd 2300 	ldrd	r2, r3, [sp]
 801af36:	4620      	mov	r0, r4
 801af38:	4629      	mov	r1, r5
 801af3a:	f7e5 fdd5 	bl	8000ae8 <__aeabi_dcmpeq>
 801af3e:	b118      	cbz	r0, 801af48 <_dtoa_r+0x4e0>
 801af40:	f018 0f01 	tst.w	r8, #1
 801af44:	f040 80ee 	bne.w	801b124 <_dtoa_r+0x6bc>
 801af48:	4649      	mov	r1, r9
 801af4a:	4658      	mov	r0, fp
 801af4c:	f000 fbda 	bl	801b704 <_Bfree>
 801af50:	2300      	movs	r3, #0
 801af52:	7033      	strb	r3, [r6, #0]
 801af54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801af56:	3701      	adds	r7, #1
 801af58:	601f      	str	r7, [r3, #0]
 801af5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	f000 831d 	beq.w	801b59c <_dtoa_r+0xb34>
 801af62:	601e      	str	r6, [r3, #0]
 801af64:	e31a      	b.n	801b59c <_dtoa_r+0xb34>
 801af66:	07e2      	lsls	r2, r4, #31
 801af68:	d505      	bpl.n	801af76 <_dtoa_r+0x50e>
 801af6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801af6e:	f7e5 fb53 	bl	8000618 <__aeabi_dmul>
 801af72:	3601      	adds	r6, #1
 801af74:	2301      	movs	r3, #1
 801af76:	1064      	asrs	r4, r4, #1
 801af78:	3508      	adds	r5, #8
 801af7a:	e73f      	b.n	801adfc <_dtoa_r+0x394>
 801af7c:	2602      	movs	r6, #2
 801af7e:	e742      	b.n	801ae06 <_dtoa_r+0x39e>
 801af80:	9c07      	ldr	r4, [sp, #28]
 801af82:	9704      	str	r7, [sp, #16]
 801af84:	e761      	b.n	801ae4a <_dtoa_r+0x3e2>
 801af86:	4b27      	ldr	r3, [pc, #156]	@ (801b024 <_dtoa_r+0x5bc>)
 801af88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801af8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801af8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801af92:	4454      	add	r4, sl
 801af94:	2900      	cmp	r1, #0
 801af96:	d053      	beq.n	801b040 <_dtoa_r+0x5d8>
 801af98:	4928      	ldr	r1, [pc, #160]	@ (801b03c <_dtoa_r+0x5d4>)
 801af9a:	2000      	movs	r0, #0
 801af9c:	f7e5 fc66 	bl	800086c <__aeabi_ddiv>
 801afa0:	4633      	mov	r3, r6
 801afa2:	462a      	mov	r2, r5
 801afa4:	f7e5 f980 	bl	80002a8 <__aeabi_dsub>
 801afa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801afac:	4656      	mov	r6, sl
 801afae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801afb2:	f7e5 fde1 	bl	8000b78 <__aeabi_d2iz>
 801afb6:	4605      	mov	r5, r0
 801afb8:	f7e5 fac4 	bl	8000544 <__aeabi_i2d>
 801afbc:	4602      	mov	r2, r0
 801afbe:	460b      	mov	r3, r1
 801afc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801afc4:	f7e5 f970 	bl	80002a8 <__aeabi_dsub>
 801afc8:	3530      	adds	r5, #48	@ 0x30
 801afca:	4602      	mov	r2, r0
 801afcc:	460b      	mov	r3, r1
 801afce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801afd2:	f806 5b01 	strb.w	r5, [r6], #1
 801afd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801afda:	f7e5 fd8f 	bl	8000afc <__aeabi_dcmplt>
 801afde:	2800      	cmp	r0, #0
 801afe0:	d171      	bne.n	801b0c6 <_dtoa_r+0x65e>
 801afe2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801afe6:	4911      	ldr	r1, [pc, #68]	@ (801b02c <_dtoa_r+0x5c4>)
 801afe8:	2000      	movs	r0, #0
 801afea:	f7e5 f95d 	bl	80002a8 <__aeabi_dsub>
 801afee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801aff2:	f7e5 fd83 	bl	8000afc <__aeabi_dcmplt>
 801aff6:	2800      	cmp	r0, #0
 801aff8:	f040 8095 	bne.w	801b126 <_dtoa_r+0x6be>
 801affc:	42a6      	cmp	r6, r4
 801affe:	f43f af50 	beq.w	801aea2 <_dtoa_r+0x43a>
 801b002:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801b006:	4b0a      	ldr	r3, [pc, #40]	@ (801b030 <_dtoa_r+0x5c8>)
 801b008:	2200      	movs	r2, #0
 801b00a:	f7e5 fb05 	bl	8000618 <__aeabi_dmul>
 801b00e:	4b08      	ldr	r3, [pc, #32]	@ (801b030 <_dtoa_r+0x5c8>)
 801b010:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801b014:	2200      	movs	r2, #0
 801b016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b01a:	f7e5 fafd 	bl	8000618 <__aeabi_dmul>
 801b01e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b022:	e7c4      	b.n	801afae <_dtoa_r+0x546>
 801b024:	08021a10 	.word	0x08021a10
 801b028:	080219e8 	.word	0x080219e8
 801b02c:	3ff00000 	.word	0x3ff00000
 801b030:	40240000 	.word	0x40240000
 801b034:	401c0000 	.word	0x401c0000
 801b038:	40140000 	.word	0x40140000
 801b03c:	3fe00000 	.word	0x3fe00000
 801b040:	4631      	mov	r1, r6
 801b042:	4628      	mov	r0, r5
 801b044:	f7e5 fae8 	bl	8000618 <__aeabi_dmul>
 801b048:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801b04c:	9415      	str	r4, [sp, #84]	@ 0x54
 801b04e:	4656      	mov	r6, sl
 801b050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b054:	f7e5 fd90 	bl	8000b78 <__aeabi_d2iz>
 801b058:	4605      	mov	r5, r0
 801b05a:	f7e5 fa73 	bl	8000544 <__aeabi_i2d>
 801b05e:	4602      	mov	r2, r0
 801b060:	460b      	mov	r3, r1
 801b062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b066:	f7e5 f91f 	bl	80002a8 <__aeabi_dsub>
 801b06a:	3530      	adds	r5, #48	@ 0x30
 801b06c:	f806 5b01 	strb.w	r5, [r6], #1
 801b070:	4602      	mov	r2, r0
 801b072:	460b      	mov	r3, r1
 801b074:	42a6      	cmp	r6, r4
 801b076:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b07a:	f04f 0200 	mov.w	r2, #0
 801b07e:	d124      	bne.n	801b0ca <_dtoa_r+0x662>
 801b080:	4bac      	ldr	r3, [pc, #688]	@ (801b334 <_dtoa_r+0x8cc>)
 801b082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801b086:	f7e5 f911 	bl	80002ac <__adddf3>
 801b08a:	4602      	mov	r2, r0
 801b08c:	460b      	mov	r3, r1
 801b08e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b092:	f7e5 fd51 	bl	8000b38 <__aeabi_dcmpgt>
 801b096:	2800      	cmp	r0, #0
 801b098:	d145      	bne.n	801b126 <_dtoa_r+0x6be>
 801b09a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801b09e:	49a5      	ldr	r1, [pc, #660]	@ (801b334 <_dtoa_r+0x8cc>)
 801b0a0:	2000      	movs	r0, #0
 801b0a2:	f7e5 f901 	bl	80002a8 <__aeabi_dsub>
 801b0a6:	4602      	mov	r2, r0
 801b0a8:	460b      	mov	r3, r1
 801b0aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b0ae:	f7e5 fd25 	bl	8000afc <__aeabi_dcmplt>
 801b0b2:	2800      	cmp	r0, #0
 801b0b4:	f43f aef5 	beq.w	801aea2 <_dtoa_r+0x43a>
 801b0b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801b0ba:	1e73      	subs	r3, r6, #1
 801b0bc:	9315      	str	r3, [sp, #84]	@ 0x54
 801b0be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b0c2:	2b30      	cmp	r3, #48	@ 0x30
 801b0c4:	d0f8      	beq.n	801b0b8 <_dtoa_r+0x650>
 801b0c6:	9f04      	ldr	r7, [sp, #16]
 801b0c8:	e73e      	b.n	801af48 <_dtoa_r+0x4e0>
 801b0ca:	4b9b      	ldr	r3, [pc, #620]	@ (801b338 <_dtoa_r+0x8d0>)
 801b0cc:	f7e5 faa4 	bl	8000618 <__aeabi_dmul>
 801b0d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b0d4:	e7bc      	b.n	801b050 <_dtoa_r+0x5e8>
 801b0d6:	d10c      	bne.n	801b0f2 <_dtoa_r+0x68a>
 801b0d8:	4b98      	ldr	r3, [pc, #608]	@ (801b33c <_dtoa_r+0x8d4>)
 801b0da:	2200      	movs	r2, #0
 801b0dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b0e0:	f7e5 fa9a 	bl	8000618 <__aeabi_dmul>
 801b0e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b0e8:	f7e5 fd1c 	bl	8000b24 <__aeabi_dcmpge>
 801b0ec:	2800      	cmp	r0, #0
 801b0ee:	f000 8157 	beq.w	801b3a0 <_dtoa_r+0x938>
 801b0f2:	2400      	movs	r4, #0
 801b0f4:	4625      	mov	r5, r4
 801b0f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b0f8:	43db      	mvns	r3, r3
 801b0fa:	9304      	str	r3, [sp, #16]
 801b0fc:	4656      	mov	r6, sl
 801b0fe:	2700      	movs	r7, #0
 801b100:	4621      	mov	r1, r4
 801b102:	4658      	mov	r0, fp
 801b104:	f000 fafe 	bl	801b704 <_Bfree>
 801b108:	2d00      	cmp	r5, #0
 801b10a:	d0dc      	beq.n	801b0c6 <_dtoa_r+0x65e>
 801b10c:	b12f      	cbz	r7, 801b11a <_dtoa_r+0x6b2>
 801b10e:	42af      	cmp	r7, r5
 801b110:	d003      	beq.n	801b11a <_dtoa_r+0x6b2>
 801b112:	4639      	mov	r1, r7
 801b114:	4658      	mov	r0, fp
 801b116:	f000 faf5 	bl	801b704 <_Bfree>
 801b11a:	4629      	mov	r1, r5
 801b11c:	4658      	mov	r0, fp
 801b11e:	f000 faf1 	bl	801b704 <_Bfree>
 801b122:	e7d0      	b.n	801b0c6 <_dtoa_r+0x65e>
 801b124:	9704      	str	r7, [sp, #16]
 801b126:	4633      	mov	r3, r6
 801b128:	461e      	mov	r6, r3
 801b12a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b12e:	2a39      	cmp	r2, #57	@ 0x39
 801b130:	d107      	bne.n	801b142 <_dtoa_r+0x6da>
 801b132:	459a      	cmp	sl, r3
 801b134:	d1f8      	bne.n	801b128 <_dtoa_r+0x6c0>
 801b136:	9a04      	ldr	r2, [sp, #16]
 801b138:	3201      	adds	r2, #1
 801b13a:	9204      	str	r2, [sp, #16]
 801b13c:	2230      	movs	r2, #48	@ 0x30
 801b13e:	f88a 2000 	strb.w	r2, [sl]
 801b142:	781a      	ldrb	r2, [r3, #0]
 801b144:	3201      	adds	r2, #1
 801b146:	701a      	strb	r2, [r3, #0]
 801b148:	e7bd      	b.n	801b0c6 <_dtoa_r+0x65e>
 801b14a:	4b7b      	ldr	r3, [pc, #492]	@ (801b338 <_dtoa_r+0x8d0>)
 801b14c:	2200      	movs	r2, #0
 801b14e:	f7e5 fa63 	bl	8000618 <__aeabi_dmul>
 801b152:	2200      	movs	r2, #0
 801b154:	2300      	movs	r3, #0
 801b156:	4604      	mov	r4, r0
 801b158:	460d      	mov	r5, r1
 801b15a:	f7e5 fcc5 	bl	8000ae8 <__aeabi_dcmpeq>
 801b15e:	2800      	cmp	r0, #0
 801b160:	f43f aebb 	beq.w	801aeda <_dtoa_r+0x472>
 801b164:	e6f0      	b.n	801af48 <_dtoa_r+0x4e0>
 801b166:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b168:	2a00      	cmp	r2, #0
 801b16a:	f000 80db 	beq.w	801b324 <_dtoa_r+0x8bc>
 801b16e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b170:	2a01      	cmp	r2, #1
 801b172:	f300 80bf 	bgt.w	801b2f4 <_dtoa_r+0x88c>
 801b176:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b178:	2a00      	cmp	r2, #0
 801b17a:	f000 80b7 	beq.w	801b2ec <_dtoa_r+0x884>
 801b17e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801b182:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b184:	4646      	mov	r6, r8
 801b186:	9a08      	ldr	r2, [sp, #32]
 801b188:	2101      	movs	r1, #1
 801b18a:	441a      	add	r2, r3
 801b18c:	4658      	mov	r0, fp
 801b18e:	4498      	add	r8, r3
 801b190:	9208      	str	r2, [sp, #32]
 801b192:	f000 fbb5 	bl	801b900 <__i2b>
 801b196:	4605      	mov	r5, r0
 801b198:	b15e      	cbz	r6, 801b1b2 <_dtoa_r+0x74a>
 801b19a:	9b08      	ldr	r3, [sp, #32]
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	dd08      	ble.n	801b1b2 <_dtoa_r+0x74a>
 801b1a0:	42b3      	cmp	r3, r6
 801b1a2:	9a08      	ldr	r2, [sp, #32]
 801b1a4:	bfa8      	it	ge
 801b1a6:	4633      	movge	r3, r6
 801b1a8:	eba8 0803 	sub.w	r8, r8, r3
 801b1ac:	1af6      	subs	r6, r6, r3
 801b1ae:	1ad3      	subs	r3, r2, r3
 801b1b0:	9308      	str	r3, [sp, #32]
 801b1b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b1b4:	b1f3      	cbz	r3, 801b1f4 <_dtoa_r+0x78c>
 801b1b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	f000 80b7 	beq.w	801b32c <_dtoa_r+0x8c4>
 801b1be:	b18c      	cbz	r4, 801b1e4 <_dtoa_r+0x77c>
 801b1c0:	4629      	mov	r1, r5
 801b1c2:	4622      	mov	r2, r4
 801b1c4:	4658      	mov	r0, fp
 801b1c6:	f000 fc5b 	bl	801ba80 <__pow5mult>
 801b1ca:	464a      	mov	r2, r9
 801b1cc:	4601      	mov	r1, r0
 801b1ce:	4605      	mov	r5, r0
 801b1d0:	4658      	mov	r0, fp
 801b1d2:	f000 fbab 	bl	801b92c <__multiply>
 801b1d6:	4649      	mov	r1, r9
 801b1d8:	9004      	str	r0, [sp, #16]
 801b1da:	4658      	mov	r0, fp
 801b1dc:	f000 fa92 	bl	801b704 <_Bfree>
 801b1e0:	9b04      	ldr	r3, [sp, #16]
 801b1e2:	4699      	mov	r9, r3
 801b1e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b1e6:	1b1a      	subs	r2, r3, r4
 801b1e8:	d004      	beq.n	801b1f4 <_dtoa_r+0x78c>
 801b1ea:	4649      	mov	r1, r9
 801b1ec:	4658      	mov	r0, fp
 801b1ee:	f000 fc47 	bl	801ba80 <__pow5mult>
 801b1f2:	4681      	mov	r9, r0
 801b1f4:	2101      	movs	r1, #1
 801b1f6:	4658      	mov	r0, fp
 801b1f8:	f000 fb82 	bl	801b900 <__i2b>
 801b1fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b1fe:	4604      	mov	r4, r0
 801b200:	2b00      	cmp	r3, #0
 801b202:	f000 81cf 	beq.w	801b5a4 <_dtoa_r+0xb3c>
 801b206:	461a      	mov	r2, r3
 801b208:	4601      	mov	r1, r0
 801b20a:	4658      	mov	r0, fp
 801b20c:	f000 fc38 	bl	801ba80 <__pow5mult>
 801b210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b212:	2b01      	cmp	r3, #1
 801b214:	4604      	mov	r4, r0
 801b216:	f300 8095 	bgt.w	801b344 <_dtoa_r+0x8dc>
 801b21a:	9b02      	ldr	r3, [sp, #8]
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	f040 8087 	bne.w	801b330 <_dtoa_r+0x8c8>
 801b222:	9b03      	ldr	r3, [sp, #12]
 801b224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b228:	2b00      	cmp	r3, #0
 801b22a:	f040 8089 	bne.w	801b340 <_dtoa_r+0x8d8>
 801b22e:	9b03      	ldr	r3, [sp, #12]
 801b230:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b234:	0d1b      	lsrs	r3, r3, #20
 801b236:	051b      	lsls	r3, r3, #20
 801b238:	b12b      	cbz	r3, 801b246 <_dtoa_r+0x7de>
 801b23a:	9b08      	ldr	r3, [sp, #32]
 801b23c:	3301      	adds	r3, #1
 801b23e:	9308      	str	r3, [sp, #32]
 801b240:	f108 0801 	add.w	r8, r8, #1
 801b244:	2301      	movs	r3, #1
 801b246:	930a      	str	r3, [sp, #40]	@ 0x28
 801b248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	f000 81b0 	beq.w	801b5b0 <_dtoa_r+0xb48>
 801b250:	6923      	ldr	r3, [r4, #16]
 801b252:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b256:	6918      	ldr	r0, [r3, #16]
 801b258:	f000 fb06 	bl	801b868 <__hi0bits>
 801b25c:	f1c0 0020 	rsb	r0, r0, #32
 801b260:	9b08      	ldr	r3, [sp, #32]
 801b262:	4418      	add	r0, r3
 801b264:	f010 001f 	ands.w	r0, r0, #31
 801b268:	d077      	beq.n	801b35a <_dtoa_r+0x8f2>
 801b26a:	f1c0 0320 	rsb	r3, r0, #32
 801b26e:	2b04      	cmp	r3, #4
 801b270:	dd6b      	ble.n	801b34a <_dtoa_r+0x8e2>
 801b272:	9b08      	ldr	r3, [sp, #32]
 801b274:	f1c0 001c 	rsb	r0, r0, #28
 801b278:	4403      	add	r3, r0
 801b27a:	4480      	add	r8, r0
 801b27c:	4406      	add	r6, r0
 801b27e:	9308      	str	r3, [sp, #32]
 801b280:	f1b8 0f00 	cmp.w	r8, #0
 801b284:	dd05      	ble.n	801b292 <_dtoa_r+0x82a>
 801b286:	4649      	mov	r1, r9
 801b288:	4642      	mov	r2, r8
 801b28a:	4658      	mov	r0, fp
 801b28c:	f000 fc52 	bl	801bb34 <__lshift>
 801b290:	4681      	mov	r9, r0
 801b292:	9b08      	ldr	r3, [sp, #32]
 801b294:	2b00      	cmp	r3, #0
 801b296:	dd05      	ble.n	801b2a4 <_dtoa_r+0x83c>
 801b298:	4621      	mov	r1, r4
 801b29a:	461a      	mov	r2, r3
 801b29c:	4658      	mov	r0, fp
 801b29e:	f000 fc49 	bl	801bb34 <__lshift>
 801b2a2:	4604      	mov	r4, r0
 801b2a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d059      	beq.n	801b35e <_dtoa_r+0x8f6>
 801b2aa:	4621      	mov	r1, r4
 801b2ac:	4648      	mov	r0, r9
 801b2ae:	f000 fcad 	bl	801bc0c <__mcmp>
 801b2b2:	2800      	cmp	r0, #0
 801b2b4:	da53      	bge.n	801b35e <_dtoa_r+0x8f6>
 801b2b6:	1e7b      	subs	r3, r7, #1
 801b2b8:	9304      	str	r3, [sp, #16]
 801b2ba:	4649      	mov	r1, r9
 801b2bc:	2300      	movs	r3, #0
 801b2be:	220a      	movs	r2, #10
 801b2c0:	4658      	mov	r0, fp
 801b2c2:	f000 fa41 	bl	801b748 <__multadd>
 801b2c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b2c8:	4681      	mov	r9, r0
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	f000 8172 	beq.w	801b5b4 <_dtoa_r+0xb4c>
 801b2d0:	2300      	movs	r3, #0
 801b2d2:	4629      	mov	r1, r5
 801b2d4:	220a      	movs	r2, #10
 801b2d6:	4658      	mov	r0, fp
 801b2d8:	f000 fa36 	bl	801b748 <__multadd>
 801b2dc:	9b00      	ldr	r3, [sp, #0]
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	4605      	mov	r5, r0
 801b2e2:	dc67      	bgt.n	801b3b4 <_dtoa_r+0x94c>
 801b2e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b2e6:	2b02      	cmp	r3, #2
 801b2e8:	dc41      	bgt.n	801b36e <_dtoa_r+0x906>
 801b2ea:	e063      	b.n	801b3b4 <_dtoa_r+0x94c>
 801b2ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b2ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801b2f2:	e746      	b.n	801b182 <_dtoa_r+0x71a>
 801b2f4:	9b07      	ldr	r3, [sp, #28]
 801b2f6:	1e5c      	subs	r4, r3, #1
 801b2f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b2fa:	42a3      	cmp	r3, r4
 801b2fc:	bfbf      	itttt	lt
 801b2fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801b300:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801b302:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801b304:	1ae3      	sublt	r3, r4, r3
 801b306:	bfb4      	ite	lt
 801b308:	18d2      	addlt	r2, r2, r3
 801b30a:	1b1c      	subge	r4, r3, r4
 801b30c:	9b07      	ldr	r3, [sp, #28]
 801b30e:	bfbc      	itt	lt
 801b310:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801b312:	2400      	movlt	r4, #0
 801b314:	2b00      	cmp	r3, #0
 801b316:	bfb5      	itete	lt
 801b318:	eba8 0603 	sublt.w	r6, r8, r3
 801b31c:	9b07      	ldrge	r3, [sp, #28]
 801b31e:	2300      	movlt	r3, #0
 801b320:	4646      	movge	r6, r8
 801b322:	e730      	b.n	801b186 <_dtoa_r+0x71e>
 801b324:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b326:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801b328:	4646      	mov	r6, r8
 801b32a:	e735      	b.n	801b198 <_dtoa_r+0x730>
 801b32c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b32e:	e75c      	b.n	801b1ea <_dtoa_r+0x782>
 801b330:	2300      	movs	r3, #0
 801b332:	e788      	b.n	801b246 <_dtoa_r+0x7de>
 801b334:	3fe00000 	.word	0x3fe00000
 801b338:	40240000 	.word	0x40240000
 801b33c:	40140000 	.word	0x40140000
 801b340:	9b02      	ldr	r3, [sp, #8]
 801b342:	e780      	b.n	801b246 <_dtoa_r+0x7de>
 801b344:	2300      	movs	r3, #0
 801b346:	930a      	str	r3, [sp, #40]	@ 0x28
 801b348:	e782      	b.n	801b250 <_dtoa_r+0x7e8>
 801b34a:	d099      	beq.n	801b280 <_dtoa_r+0x818>
 801b34c:	9a08      	ldr	r2, [sp, #32]
 801b34e:	331c      	adds	r3, #28
 801b350:	441a      	add	r2, r3
 801b352:	4498      	add	r8, r3
 801b354:	441e      	add	r6, r3
 801b356:	9208      	str	r2, [sp, #32]
 801b358:	e792      	b.n	801b280 <_dtoa_r+0x818>
 801b35a:	4603      	mov	r3, r0
 801b35c:	e7f6      	b.n	801b34c <_dtoa_r+0x8e4>
 801b35e:	9b07      	ldr	r3, [sp, #28]
 801b360:	9704      	str	r7, [sp, #16]
 801b362:	2b00      	cmp	r3, #0
 801b364:	dc20      	bgt.n	801b3a8 <_dtoa_r+0x940>
 801b366:	9300      	str	r3, [sp, #0]
 801b368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b36a:	2b02      	cmp	r3, #2
 801b36c:	dd1e      	ble.n	801b3ac <_dtoa_r+0x944>
 801b36e:	9b00      	ldr	r3, [sp, #0]
 801b370:	2b00      	cmp	r3, #0
 801b372:	f47f aec0 	bne.w	801b0f6 <_dtoa_r+0x68e>
 801b376:	4621      	mov	r1, r4
 801b378:	2205      	movs	r2, #5
 801b37a:	4658      	mov	r0, fp
 801b37c:	f000 f9e4 	bl	801b748 <__multadd>
 801b380:	4601      	mov	r1, r0
 801b382:	4604      	mov	r4, r0
 801b384:	4648      	mov	r0, r9
 801b386:	f000 fc41 	bl	801bc0c <__mcmp>
 801b38a:	2800      	cmp	r0, #0
 801b38c:	f77f aeb3 	ble.w	801b0f6 <_dtoa_r+0x68e>
 801b390:	4656      	mov	r6, sl
 801b392:	2331      	movs	r3, #49	@ 0x31
 801b394:	f806 3b01 	strb.w	r3, [r6], #1
 801b398:	9b04      	ldr	r3, [sp, #16]
 801b39a:	3301      	adds	r3, #1
 801b39c:	9304      	str	r3, [sp, #16]
 801b39e:	e6ae      	b.n	801b0fe <_dtoa_r+0x696>
 801b3a0:	9c07      	ldr	r4, [sp, #28]
 801b3a2:	9704      	str	r7, [sp, #16]
 801b3a4:	4625      	mov	r5, r4
 801b3a6:	e7f3      	b.n	801b390 <_dtoa_r+0x928>
 801b3a8:	9b07      	ldr	r3, [sp, #28]
 801b3aa:	9300      	str	r3, [sp, #0]
 801b3ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	f000 8104 	beq.w	801b5bc <_dtoa_r+0xb54>
 801b3b4:	2e00      	cmp	r6, #0
 801b3b6:	dd05      	ble.n	801b3c4 <_dtoa_r+0x95c>
 801b3b8:	4629      	mov	r1, r5
 801b3ba:	4632      	mov	r2, r6
 801b3bc:	4658      	mov	r0, fp
 801b3be:	f000 fbb9 	bl	801bb34 <__lshift>
 801b3c2:	4605      	mov	r5, r0
 801b3c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	d05a      	beq.n	801b480 <_dtoa_r+0xa18>
 801b3ca:	6869      	ldr	r1, [r5, #4]
 801b3cc:	4658      	mov	r0, fp
 801b3ce:	f000 f959 	bl	801b684 <_Balloc>
 801b3d2:	4606      	mov	r6, r0
 801b3d4:	b928      	cbnz	r0, 801b3e2 <_dtoa_r+0x97a>
 801b3d6:	4b84      	ldr	r3, [pc, #528]	@ (801b5e8 <_dtoa_r+0xb80>)
 801b3d8:	4602      	mov	r2, r0
 801b3da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801b3de:	f7ff bb5a 	b.w	801aa96 <_dtoa_r+0x2e>
 801b3e2:	692a      	ldr	r2, [r5, #16]
 801b3e4:	3202      	adds	r2, #2
 801b3e6:	0092      	lsls	r2, r2, #2
 801b3e8:	f105 010c 	add.w	r1, r5, #12
 801b3ec:	300c      	adds	r0, #12
 801b3ee:	f7ff fa80 	bl	801a8f2 <memcpy>
 801b3f2:	2201      	movs	r2, #1
 801b3f4:	4631      	mov	r1, r6
 801b3f6:	4658      	mov	r0, fp
 801b3f8:	f000 fb9c 	bl	801bb34 <__lshift>
 801b3fc:	f10a 0301 	add.w	r3, sl, #1
 801b400:	9307      	str	r3, [sp, #28]
 801b402:	9b00      	ldr	r3, [sp, #0]
 801b404:	4453      	add	r3, sl
 801b406:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b408:	9b02      	ldr	r3, [sp, #8]
 801b40a:	f003 0301 	and.w	r3, r3, #1
 801b40e:	462f      	mov	r7, r5
 801b410:	930a      	str	r3, [sp, #40]	@ 0x28
 801b412:	4605      	mov	r5, r0
 801b414:	9b07      	ldr	r3, [sp, #28]
 801b416:	4621      	mov	r1, r4
 801b418:	3b01      	subs	r3, #1
 801b41a:	4648      	mov	r0, r9
 801b41c:	9300      	str	r3, [sp, #0]
 801b41e:	f7ff fa9b 	bl	801a958 <quorem>
 801b422:	4639      	mov	r1, r7
 801b424:	9002      	str	r0, [sp, #8]
 801b426:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801b42a:	4648      	mov	r0, r9
 801b42c:	f000 fbee 	bl	801bc0c <__mcmp>
 801b430:	462a      	mov	r2, r5
 801b432:	9008      	str	r0, [sp, #32]
 801b434:	4621      	mov	r1, r4
 801b436:	4658      	mov	r0, fp
 801b438:	f000 fc04 	bl	801bc44 <__mdiff>
 801b43c:	68c2      	ldr	r2, [r0, #12]
 801b43e:	4606      	mov	r6, r0
 801b440:	bb02      	cbnz	r2, 801b484 <_dtoa_r+0xa1c>
 801b442:	4601      	mov	r1, r0
 801b444:	4648      	mov	r0, r9
 801b446:	f000 fbe1 	bl	801bc0c <__mcmp>
 801b44a:	4602      	mov	r2, r0
 801b44c:	4631      	mov	r1, r6
 801b44e:	4658      	mov	r0, fp
 801b450:	920e      	str	r2, [sp, #56]	@ 0x38
 801b452:	f000 f957 	bl	801b704 <_Bfree>
 801b456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b458:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b45a:	9e07      	ldr	r6, [sp, #28]
 801b45c:	ea43 0102 	orr.w	r1, r3, r2
 801b460:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b462:	4319      	orrs	r1, r3
 801b464:	d110      	bne.n	801b488 <_dtoa_r+0xa20>
 801b466:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801b46a:	d029      	beq.n	801b4c0 <_dtoa_r+0xa58>
 801b46c:	9b08      	ldr	r3, [sp, #32]
 801b46e:	2b00      	cmp	r3, #0
 801b470:	dd02      	ble.n	801b478 <_dtoa_r+0xa10>
 801b472:	9b02      	ldr	r3, [sp, #8]
 801b474:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801b478:	9b00      	ldr	r3, [sp, #0]
 801b47a:	f883 8000 	strb.w	r8, [r3]
 801b47e:	e63f      	b.n	801b100 <_dtoa_r+0x698>
 801b480:	4628      	mov	r0, r5
 801b482:	e7bb      	b.n	801b3fc <_dtoa_r+0x994>
 801b484:	2201      	movs	r2, #1
 801b486:	e7e1      	b.n	801b44c <_dtoa_r+0x9e4>
 801b488:	9b08      	ldr	r3, [sp, #32]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	db04      	blt.n	801b498 <_dtoa_r+0xa30>
 801b48e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b490:	430b      	orrs	r3, r1
 801b492:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b494:	430b      	orrs	r3, r1
 801b496:	d120      	bne.n	801b4da <_dtoa_r+0xa72>
 801b498:	2a00      	cmp	r2, #0
 801b49a:	dded      	ble.n	801b478 <_dtoa_r+0xa10>
 801b49c:	4649      	mov	r1, r9
 801b49e:	2201      	movs	r2, #1
 801b4a0:	4658      	mov	r0, fp
 801b4a2:	f000 fb47 	bl	801bb34 <__lshift>
 801b4a6:	4621      	mov	r1, r4
 801b4a8:	4681      	mov	r9, r0
 801b4aa:	f000 fbaf 	bl	801bc0c <__mcmp>
 801b4ae:	2800      	cmp	r0, #0
 801b4b0:	dc03      	bgt.n	801b4ba <_dtoa_r+0xa52>
 801b4b2:	d1e1      	bne.n	801b478 <_dtoa_r+0xa10>
 801b4b4:	f018 0f01 	tst.w	r8, #1
 801b4b8:	d0de      	beq.n	801b478 <_dtoa_r+0xa10>
 801b4ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801b4be:	d1d8      	bne.n	801b472 <_dtoa_r+0xa0a>
 801b4c0:	9a00      	ldr	r2, [sp, #0]
 801b4c2:	2339      	movs	r3, #57	@ 0x39
 801b4c4:	7013      	strb	r3, [r2, #0]
 801b4c6:	4633      	mov	r3, r6
 801b4c8:	461e      	mov	r6, r3
 801b4ca:	3b01      	subs	r3, #1
 801b4cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801b4d0:	2a39      	cmp	r2, #57	@ 0x39
 801b4d2:	d052      	beq.n	801b57a <_dtoa_r+0xb12>
 801b4d4:	3201      	adds	r2, #1
 801b4d6:	701a      	strb	r2, [r3, #0]
 801b4d8:	e612      	b.n	801b100 <_dtoa_r+0x698>
 801b4da:	2a00      	cmp	r2, #0
 801b4dc:	dd07      	ble.n	801b4ee <_dtoa_r+0xa86>
 801b4de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801b4e2:	d0ed      	beq.n	801b4c0 <_dtoa_r+0xa58>
 801b4e4:	9a00      	ldr	r2, [sp, #0]
 801b4e6:	f108 0301 	add.w	r3, r8, #1
 801b4ea:	7013      	strb	r3, [r2, #0]
 801b4ec:	e608      	b.n	801b100 <_dtoa_r+0x698>
 801b4ee:	9b07      	ldr	r3, [sp, #28]
 801b4f0:	9a07      	ldr	r2, [sp, #28]
 801b4f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 801b4f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b4f8:	4293      	cmp	r3, r2
 801b4fa:	d028      	beq.n	801b54e <_dtoa_r+0xae6>
 801b4fc:	4649      	mov	r1, r9
 801b4fe:	2300      	movs	r3, #0
 801b500:	220a      	movs	r2, #10
 801b502:	4658      	mov	r0, fp
 801b504:	f000 f920 	bl	801b748 <__multadd>
 801b508:	42af      	cmp	r7, r5
 801b50a:	4681      	mov	r9, r0
 801b50c:	f04f 0300 	mov.w	r3, #0
 801b510:	f04f 020a 	mov.w	r2, #10
 801b514:	4639      	mov	r1, r7
 801b516:	4658      	mov	r0, fp
 801b518:	d107      	bne.n	801b52a <_dtoa_r+0xac2>
 801b51a:	f000 f915 	bl	801b748 <__multadd>
 801b51e:	4607      	mov	r7, r0
 801b520:	4605      	mov	r5, r0
 801b522:	9b07      	ldr	r3, [sp, #28]
 801b524:	3301      	adds	r3, #1
 801b526:	9307      	str	r3, [sp, #28]
 801b528:	e774      	b.n	801b414 <_dtoa_r+0x9ac>
 801b52a:	f000 f90d 	bl	801b748 <__multadd>
 801b52e:	4629      	mov	r1, r5
 801b530:	4607      	mov	r7, r0
 801b532:	2300      	movs	r3, #0
 801b534:	220a      	movs	r2, #10
 801b536:	4658      	mov	r0, fp
 801b538:	f000 f906 	bl	801b748 <__multadd>
 801b53c:	4605      	mov	r5, r0
 801b53e:	e7f0      	b.n	801b522 <_dtoa_r+0xaba>
 801b540:	9b00      	ldr	r3, [sp, #0]
 801b542:	2b00      	cmp	r3, #0
 801b544:	bfcc      	ite	gt
 801b546:	461e      	movgt	r6, r3
 801b548:	2601      	movle	r6, #1
 801b54a:	4456      	add	r6, sl
 801b54c:	2700      	movs	r7, #0
 801b54e:	4649      	mov	r1, r9
 801b550:	2201      	movs	r2, #1
 801b552:	4658      	mov	r0, fp
 801b554:	f000 faee 	bl	801bb34 <__lshift>
 801b558:	4621      	mov	r1, r4
 801b55a:	4681      	mov	r9, r0
 801b55c:	f000 fb56 	bl	801bc0c <__mcmp>
 801b560:	2800      	cmp	r0, #0
 801b562:	dcb0      	bgt.n	801b4c6 <_dtoa_r+0xa5e>
 801b564:	d102      	bne.n	801b56c <_dtoa_r+0xb04>
 801b566:	f018 0f01 	tst.w	r8, #1
 801b56a:	d1ac      	bne.n	801b4c6 <_dtoa_r+0xa5e>
 801b56c:	4633      	mov	r3, r6
 801b56e:	461e      	mov	r6, r3
 801b570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b574:	2a30      	cmp	r2, #48	@ 0x30
 801b576:	d0fa      	beq.n	801b56e <_dtoa_r+0xb06>
 801b578:	e5c2      	b.n	801b100 <_dtoa_r+0x698>
 801b57a:	459a      	cmp	sl, r3
 801b57c:	d1a4      	bne.n	801b4c8 <_dtoa_r+0xa60>
 801b57e:	9b04      	ldr	r3, [sp, #16]
 801b580:	3301      	adds	r3, #1
 801b582:	9304      	str	r3, [sp, #16]
 801b584:	2331      	movs	r3, #49	@ 0x31
 801b586:	f88a 3000 	strb.w	r3, [sl]
 801b58a:	e5b9      	b.n	801b100 <_dtoa_r+0x698>
 801b58c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b58e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801b5ec <_dtoa_r+0xb84>
 801b592:	b11b      	cbz	r3, 801b59c <_dtoa_r+0xb34>
 801b594:	f10a 0308 	add.w	r3, sl, #8
 801b598:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801b59a:	6013      	str	r3, [r2, #0]
 801b59c:	4650      	mov	r0, sl
 801b59e:	b019      	add	sp, #100	@ 0x64
 801b5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b5a6:	2b01      	cmp	r3, #1
 801b5a8:	f77f ae37 	ble.w	801b21a <_dtoa_r+0x7b2>
 801b5ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b5ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801b5b0:	2001      	movs	r0, #1
 801b5b2:	e655      	b.n	801b260 <_dtoa_r+0x7f8>
 801b5b4:	9b00      	ldr	r3, [sp, #0]
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	f77f aed6 	ble.w	801b368 <_dtoa_r+0x900>
 801b5bc:	4656      	mov	r6, sl
 801b5be:	4621      	mov	r1, r4
 801b5c0:	4648      	mov	r0, r9
 801b5c2:	f7ff f9c9 	bl	801a958 <quorem>
 801b5c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801b5ca:	f806 8b01 	strb.w	r8, [r6], #1
 801b5ce:	9b00      	ldr	r3, [sp, #0]
 801b5d0:	eba6 020a 	sub.w	r2, r6, sl
 801b5d4:	4293      	cmp	r3, r2
 801b5d6:	ddb3      	ble.n	801b540 <_dtoa_r+0xad8>
 801b5d8:	4649      	mov	r1, r9
 801b5da:	2300      	movs	r3, #0
 801b5dc:	220a      	movs	r2, #10
 801b5de:	4658      	mov	r0, fp
 801b5e0:	f000 f8b2 	bl	801b748 <__multadd>
 801b5e4:	4681      	mov	r9, r0
 801b5e6:	e7ea      	b.n	801b5be <_dtoa_r+0xb56>
 801b5e8:	0802196c 	.word	0x0802196c
 801b5ec:	08021907 	.word	0x08021907

0801b5f0 <_free_r>:
 801b5f0:	b538      	push	{r3, r4, r5, lr}
 801b5f2:	4605      	mov	r5, r0
 801b5f4:	2900      	cmp	r1, #0
 801b5f6:	d041      	beq.n	801b67c <_free_r+0x8c>
 801b5f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b5fc:	1f0c      	subs	r4, r1, #4
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	bfb8      	it	lt
 801b602:	18e4      	addlt	r4, r4, r3
 801b604:	f7fd feee 	bl	80193e4 <__malloc_lock>
 801b608:	4a1d      	ldr	r2, [pc, #116]	@ (801b680 <_free_r+0x90>)
 801b60a:	6813      	ldr	r3, [r2, #0]
 801b60c:	b933      	cbnz	r3, 801b61c <_free_r+0x2c>
 801b60e:	6063      	str	r3, [r4, #4]
 801b610:	6014      	str	r4, [r2, #0]
 801b612:	4628      	mov	r0, r5
 801b614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b618:	f7fd beea 	b.w	80193f0 <__malloc_unlock>
 801b61c:	42a3      	cmp	r3, r4
 801b61e:	d908      	bls.n	801b632 <_free_r+0x42>
 801b620:	6820      	ldr	r0, [r4, #0]
 801b622:	1821      	adds	r1, r4, r0
 801b624:	428b      	cmp	r3, r1
 801b626:	bf01      	itttt	eq
 801b628:	6819      	ldreq	r1, [r3, #0]
 801b62a:	685b      	ldreq	r3, [r3, #4]
 801b62c:	1809      	addeq	r1, r1, r0
 801b62e:	6021      	streq	r1, [r4, #0]
 801b630:	e7ed      	b.n	801b60e <_free_r+0x1e>
 801b632:	461a      	mov	r2, r3
 801b634:	685b      	ldr	r3, [r3, #4]
 801b636:	b10b      	cbz	r3, 801b63c <_free_r+0x4c>
 801b638:	42a3      	cmp	r3, r4
 801b63a:	d9fa      	bls.n	801b632 <_free_r+0x42>
 801b63c:	6811      	ldr	r1, [r2, #0]
 801b63e:	1850      	adds	r0, r2, r1
 801b640:	42a0      	cmp	r0, r4
 801b642:	d10b      	bne.n	801b65c <_free_r+0x6c>
 801b644:	6820      	ldr	r0, [r4, #0]
 801b646:	4401      	add	r1, r0
 801b648:	1850      	adds	r0, r2, r1
 801b64a:	4283      	cmp	r3, r0
 801b64c:	6011      	str	r1, [r2, #0]
 801b64e:	d1e0      	bne.n	801b612 <_free_r+0x22>
 801b650:	6818      	ldr	r0, [r3, #0]
 801b652:	685b      	ldr	r3, [r3, #4]
 801b654:	6053      	str	r3, [r2, #4]
 801b656:	4408      	add	r0, r1
 801b658:	6010      	str	r0, [r2, #0]
 801b65a:	e7da      	b.n	801b612 <_free_r+0x22>
 801b65c:	d902      	bls.n	801b664 <_free_r+0x74>
 801b65e:	230c      	movs	r3, #12
 801b660:	602b      	str	r3, [r5, #0]
 801b662:	e7d6      	b.n	801b612 <_free_r+0x22>
 801b664:	6820      	ldr	r0, [r4, #0]
 801b666:	1821      	adds	r1, r4, r0
 801b668:	428b      	cmp	r3, r1
 801b66a:	bf04      	itt	eq
 801b66c:	6819      	ldreq	r1, [r3, #0]
 801b66e:	685b      	ldreq	r3, [r3, #4]
 801b670:	6063      	str	r3, [r4, #4]
 801b672:	bf04      	itt	eq
 801b674:	1809      	addeq	r1, r1, r0
 801b676:	6021      	streq	r1, [r4, #0]
 801b678:	6054      	str	r4, [r2, #4]
 801b67a:	e7ca      	b.n	801b612 <_free_r+0x22>
 801b67c:	bd38      	pop	{r3, r4, r5, pc}
 801b67e:	bf00      	nop
 801b680:	2000d254 	.word	0x2000d254

0801b684 <_Balloc>:
 801b684:	b570      	push	{r4, r5, r6, lr}
 801b686:	69c6      	ldr	r6, [r0, #28]
 801b688:	4604      	mov	r4, r0
 801b68a:	460d      	mov	r5, r1
 801b68c:	b976      	cbnz	r6, 801b6ac <_Balloc+0x28>
 801b68e:	2010      	movs	r0, #16
 801b690:	f7fd fdf6 	bl	8019280 <malloc>
 801b694:	4602      	mov	r2, r0
 801b696:	61e0      	str	r0, [r4, #28]
 801b698:	b920      	cbnz	r0, 801b6a4 <_Balloc+0x20>
 801b69a:	4b18      	ldr	r3, [pc, #96]	@ (801b6fc <_Balloc+0x78>)
 801b69c:	4818      	ldr	r0, [pc, #96]	@ (801b700 <_Balloc+0x7c>)
 801b69e:	216b      	movs	r1, #107	@ 0x6b
 801b6a0:	f7ff f93c 	bl	801a91c <__assert_func>
 801b6a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b6a8:	6006      	str	r6, [r0, #0]
 801b6aa:	60c6      	str	r6, [r0, #12]
 801b6ac:	69e6      	ldr	r6, [r4, #28]
 801b6ae:	68f3      	ldr	r3, [r6, #12]
 801b6b0:	b183      	cbz	r3, 801b6d4 <_Balloc+0x50>
 801b6b2:	69e3      	ldr	r3, [r4, #28]
 801b6b4:	68db      	ldr	r3, [r3, #12]
 801b6b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b6ba:	b9b8      	cbnz	r0, 801b6ec <_Balloc+0x68>
 801b6bc:	2101      	movs	r1, #1
 801b6be:	fa01 f605 	lsl.w	r6, r1, r5
 801b6c2:	1d72      	adds	r2, r6, #5
 801b6c4:	0092      	lsls	r2, r2, #2
 801b6c6:	4620      	mov	r0, r4
 801b6c8:	f001 fe85 	bl	801d3d6 <_calloc_r>
 801b6cc:	b160      	cbz	r0, 801b6e8 <_Balloc+0x64>
 801b6ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b6d2:	e00e      	b.n	801b6f2 <_Balloc+0x6e>
 801b6d4:	2221      	movs	r2, #33	@ 0x21
 801b6d6:	2104      	movs	r1, #4
 801b6d8:	4620      	mov	r0, r4
 801b6da:	f001 fe7c 	bl	801d3d6 <_calloc_r>
 801b6de:	69e3      	ldr	r3, [r4, #28]
 801b6e0:	60f0      	str	r0, [r6, #12]
 801b6e2:	68db      	ldr	r3, [r3, #12]
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	d1e4      	bne.n	801b6b2 <_Balloc+0x2e>
 801b6e8:	2000      	movs	r0, #0
 801b6ea:	bd70      	pop	{r4, r5, r6, pc}
 801b6ec:	6802      	ldr	r2, [r0, #0]
 801b6ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b6f2:	2300      	movs	r3, #0
 801b6f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b6f8:	e7f7      	b.n	801b6ea <_Balloc+0x66>
 801b6fa:	bf00      	nop
 801b6fc:	08021722 	.word	0x08021722
 801b700:	0802197d 	.word	0x0802197d

0801b704 <_Bfree>:
 801b704:	b570      	push	{r4, r5, r6, lr}
 801b706:	69c6      	ldr	r6, [r0, #28]
 801b708:	4605      	mov	r5, r0
 801b70a:	460c      	mov	r4, r1
 801b70c:	b976      	cbnz	r6, 801b72c <_Bfree+0x28>
 801b70e:	2010      	movs	r0, #16
 801b710:	f7fd fdb6 	bl	8019280 <malloc>
 801b714:	4602      	mov	r2, r0
 801b716:	61e8      	str	r0, [r5, #28]
 801b718:	b920      	cbnz	r0, 801b724 <_Bfree+0x20>
 801b71a:	4b09      	ldr	r3, [pc, #36]	@ (801b740 <_Bfree+0x3c>)
 801b71c:	4809      	ldr	r0, [pc, #36]	@ (801b744 <_Bfree+0x40>)
 801b71e:	218f      	movs	r1, #143	@ 0x8f
 801b720:	f7ff f8fc 	bl	801a91c <__assert_func>
 801b724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b728:	6006      	str	r6, [r0, #0]
 801b72a:	60c6      	str	r6, [r0, #12]
 801b72c:	b13c      	cbz	r4, 801b73e <_Bfree+0x3a>
 801b72e:	69eb      	ldr	r3, [r5, #28]
 801b730:	6862      	ldr	r2, [r4, #4]
 801b732:	68db      	ldr	r3, [r3, #12]
 801b734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b738:	6021      	str	r1, [r4, #0]
 801b73a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b73e:	bd70      	pop	{r4, r5, r6, pc}
 801b740:	08021722 	.word	0x08021722
 801b744:	0802197d 	.word	0x0802197d

0801b748 <__multadd>:
 801b748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b74c:	690d      	ldr	r5, [r1, #16]
 801b74e:	4607      	mov	r7, r0
 801b750:	460c      	mov	r4, r1
 801b752:	461e      	mov	r6, r3
 801b754:	f101 0c14 	add.w	ip, r1, #20
 801b758:	2000      	movs	r0, #0
 801b75a:	f8dc 3000 	ldr.w	r3, [ip]
 801b75e:	b299      	uxth	r1, r3
 801b760:	fb02 6101 	mla	r1, r2, r1, r6
 801b764:	0c1e      	lsrs	r6, r3, #16
 801b766:	0c0b      	lsrs	r3, r1, #16
 801b768:	fb02 3306 	mla	r3, r2, r6, r3
 801b76c:	b289      	uxth	r1, r1
 801b76e:	3001      	adds	r0, #1
 801b770:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b774:	4285      	cmp	r5, r0
 801b776:	f84c 1b04 	str.w	r1, [ip], #4
 801b77a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b77e:	dcec      	bgt.n	801b75a <__multadd+0x12>
 801b780:	b30e      	cbz	r6, 801b7c6 <__multadd+0x7e>
 801b782:	68a3      	ldr	r3, [r4, #8]
 801b784:	42ab      	cmp	r3, r5
 801b786:	dc19      	bgt.n	801b7bc <__multadd+0x74>
 801b788:	6861      	ldr	r1, [r4, #4]
 801b78a:	4638      	mov	r0, r7
 801b78c:	3101      	adds	r1, #1
 801b78e:	f7ff ff79 	bl	801b684 <_Balloc>
 801b792:	4680      	mov	r8, r0
 801b794:	b928      	cbnz	r0, 801b7a2 <__multadd+0x5a>
 801b796:	4602      	mov	r2, r0
 801b798:	4b0c      	ldr	r3, [pc, #48]	@ (801b7cc <__multadd+0x84>)
 801b79a:	480d      	ldr	r0, [pc, #52]	@ (801b7d0 <__multadd+0x88>)
 801b79c:	21ba      	movs	r1, #186	@ 0xba
 801b79e:	f7ff f8bd 	bl	801a91c <__assert_func>
 801b7a2:	6922      	ldr	r2, [r4, #16]
 801b7a4:	3202      	adds	r2, #2
 801b7a6:	f104 010c 	add.w	r1, r4, #12
 801b7aa:	0092      	lsls	r2, r2, #2
 801b7ac:	300c      	adds	r0, #12
 801b7ae:	f7ff f8a0 	bl	801a8f2 <memcpy>
 801b7b2:	4621      	mov	r1, r4
 801b7b4:	4638      	mov	r0, r7
 801b7b6:	f7ff ffa5 	bl	801b704 <_Bfree>
 801b7ba:	4644      	mov	r4, r8
 801b7bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b7c0:	3501      	adds	r5, #1
 801b7c2:	615e      	str	r6, [r3, #20]
 801b7c4:	6125      	str	r5, [r4, #16]
 801b7c6:	4620      	mov	r0, r4
 801b7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7cc:	0802196c 	.word	0x0802196c
 801b7d0:	0802197d 	.word	0x0802197d

0801b7d4 <__s2b>:
 801b7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b7d8:	460c      	mov	r4, r1
 801b7da:	4615      	mov	r5, r2
 801b7dc:	461f      	mov	r7, r3
 801b7de:	2209      	movs	r2, #9
 801b7e0:	3308      	adds	r3, #8
 801b7e2:	4606      	mov	r6, r0
 801b7e4:	fb93 f3f2 	sdiv	r3, r3, r2
 801b7e8:	2100      	movs	r1, #0
 801b7ea:	2201      	movs	r2, #1
 801b7ec:	429a      	cmp	r2, r3
 801b7ee:	db09      	blt.n	801b804 <__s2b+0x30>
 801b7f0:	4630      	mov	r0, r6
 801b7f2:	f7ff ff47 	bl	801b684 <_Balloc>
 801b7f6:	b940      	cbnz	r0, 801b80a <__s2b+0x36>
 801b7f8:	4602      	mov	r2, r0
 801b7fa:	4b19      	ldr	r3, [pc, #100]	@ (801b860 <__s2b+0x8c>)
 801b7fc:	4819      	ldr	r0, [pc, #100]	@ (801b864 <__s2b+0x90>)
 801b7fe:	21d3      	movs	r1, #211	@ 0xd3
 801b800:	f7ff f88c 	bl	801a91c <__assert_func>
 801b804:	0052      	lsls	r2, r2, #1
 801b806:	3101      	adds	r1, #1
 801b808:	e7f0      	b.n	801b7ec <__s2b+0x18>
 801b80a:	9b08      	ldr	r3, [sp, #32]
 801b80c:	6143      	str	r3, [r0, #20]
 801b80e:	2d09      	cmp	r5, #9
 801b810:	f04f 0301 	mov.w	r3, #1
 801b814:	6103      	str	r3, [r0, #16]
 801b816:	dd16      	ble.n	801b846 <__s2b+0x72>
 801b818:	f104 0909 	add.w	r9, r4, #9
 801b81c:	46c8      	mov	r8, r9
 801b81e:	442c      	add	r4, r5
 801b820:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b824:	4601      	mov	r1, r0
 801b826:	3b30      	subs	r3, #48	@ 0x30
 801b828:	220a      	movs	r2, #10
 801b82a:	4630      	mov	r0, r6
 801b82c:	f7ff ff8c 	bl	801b748 <__multadd>
 801b830:	45a0      	cmp	r8, r4
 801b832:	d1f5      	bne.n	801b820 <__s2b+0x4c>
 801b834:	f1a5 0408 	sub.w	r4, r5, #8
 801b838:	444c      	add	r4, r9
 801b83a:	1b2d      	subs	r5, r5, r4
 801b83c:	1963      	adds	r3, r4, r5
 801b83e:	42bb      	cmp	r3, r7
 801b840:	db04      	blt.n	801b84c <__s2b+0x78>
 801b842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b846:	340a      	adds	r4, #10
 801b848:	2509      	movs	r5, #9
 801b84a:	e7f6      	b.n	801b83a <__s2b+0x66>
 801b84c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b850:	4601      	mov	r1, r0
 801b852:	3b30      	subs	r3, #48	@ 0x30
 801b854:	220a      	movs	r2, #10
 801b856:	4630      	mov	r0, r6
 801b858:	f7ff ff76 	bl	801b748 <__multadd>
 801b85c:	e7ee      	b.n	801b83c <__s2b+0x68>
 801b85e:	bf00      	nop
 801b860:	0802196c 	.word	0x0802196c
 801b864:	0802197d 	.word	0x0802197d

0801b868 <__hi0bits>:
 801b868:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801b86c:	4603      	mov	r3, r0
 801b86e:	bf36      	itet	cc
 801b870:	0403      	lslcc	r3, r0, #16
 801b872:	2000      	movcs	r0, #0
 801b874:	2010      	movcc	r0, #16
 801b876:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b87a:	bf3c      	itt	cc
 801b87c:	021b      	lslcc	r3, r3, #8
 801b87e:	3008      	addcc	r0, #8
 801b880:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b884:	bf3c      	itt	cc
 801b886:	011b      	lslcc	r3, r3, #4
 801b888:	3004      	addcc	r0, #4
 801b88a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b88e:	bf3c      	itt	cc
 801b890:	009b      	lslcc	r3, r3, #2
 801b892:	3002      	addcc	r0, #2
 801b894:	2b00      	cmp	r3, #0
 801b896:	db05      	blt.n	801b8a4 <__hi0bits+0x3c>
 801b898:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801b89c:	f100 0001 	add.w	r0, r0, #1
 801b8a0:	bf08      	it	eq
 801b8a2:	2020      	moveq	r0, #32
 801b8a4:	4770      	bx	lr

0801b8a6 <__lo0bits>:
 801b8a6:	6803      	ldr	r3, [r0, #0]
 801b8a8:	4602      	mov	r2, r0
 801b8aa:	f013 0007 	ands.w	r0, r3, #7
 801b8ae:	d00b      	beq.n	801b8c8 <__lo0bits+0x22>
 801b8b0:	07d9      	lsls	r1, r3, #31
 801b8b2:	d421      	bmi.n	801b8f8 <__lo0bits+0x52>
 801b8b4:	0798      	lsls	r0, r3, #30
 801b8b6:	bf49      	itett	mi
 801b8b8:	085b      	lsrmi	r3, r3, #1
 801b8ba:	089b      	lsrpl	r3, r3, #2
 801b8bc:	2001      	movmi	r0, #1
 801b8be:	6013      	strmi	r3, [r2, #0]
 801b8c0:	bf5c      	itt	pl
 801b8c2:	6013      	strpl	r3, [r2, #0]
 801b8c4:	2002      	movpl	r0, #2
 801b8c6:	4770      	bx	lr
 801b8c8:	b299      	uxth	r1, r3
 801b8ca:	b909      	cbnz	r1, 801b8d0 <__lo0bits+0x2a>
 801b8cc:	0c1b      	lsrs	r3, r3, #16
 801b8ce:	2010      	movs	r0, #16
 801b8d0:	b2d9      	uxtb	r1, r3
 801b8d2:	b909      	cbnz	r1, 801b8d8 <__lo0bits+0x32>
 801b8d4:	3008      	adds	r0, #8
 801b8d6:	0a1b      	lsrs	r3, r3, #8
 801b8d8:	0719      	lsls	r1, r3, #28
 801b8da:	bf04      	itt	eq
 801b8dc:	091b      	lsreq	r3, r3, #4
 801b8de:	3004      	addeq	r0, #4
 801b8e0:	0799      	lsls	r1, r3, #30
 801b8e2:	bf04      	itt	eq
 801b8e4:	089b      	lsreq	r3, r3, #2
 801b8e6:	3002      	addeq	r0, #2
 801b8e8:	07d9      	lsls	r1, r3, #31
 801b8ea:	d403      	bmi.n	801b8f4 <__lo0bits+0x4e>
 801b8ec:	085b      	lsrs	r3, r3, #1
 801b8ee:	f100 0001 	add.w	r0, r0, #1
 801b8f2:	d003      	beq.n	801b8fc <__lo0bits+0x56>
 801b8f4:	6013      	str	r3, [r2, #0]
 801b8f6:	4770      	bx	lr
 801b8f8:	2000      	movs	r0, #0
 801b8fa:	4770      	bx	lr
 801b8fc:	2020      	movs	r0, #32
 801b8fe:	4770      	bx	lr

0801b900 <__i2b>:
 801b900:	b510      	push	{r4, lr}
 801b902:	460c      	mov	r4, r1
 801b904:	2101      	movs	r1, #1
 801b906:	f7ff febd 	bl	801b684 <_Balloc>
 801b90a:	4602      	mov	r2, r0
 801b90c:	b928      	cbnz	r0, 801b91a <__i2b+0x1a>
 801b90e:	4b05      	ldr	r3, [pc, #20]	@ (801b924 <__i2b+0x24>)
 801b910:	4805      	ldr	r0, [pc, #20]	@ (801b928 <__i2b+0x28>)
 801b912:	f240 1145 	movw	r1, #325	@ 0x145
 801b916:	f7ff f801 	bl	801a91c <__assert_func>
 801b91a:	2301      	movs	r3, #1
 801b91c:	6144      	str	r4, [r0, #20]
 801b91e:	6103      	str	r3, [r0, #16]
 801b920:	bd10      	pop	{r4, pc}
 801b922:	bf00      	nop
 801b924:	0802196c 	.word	0x0802196c
 801b928:	0802197d 	.word	0x0802197d

0801b92c <__multiply>:
 801b92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b930:	4614      	mov	r4, r2
 801b932:	690a      	ldr	r2, [r1, #16]
 801b934:	6923      	ldr	r3, [r4, #16]
 801b936:	429a      	cmp	r2, r3
 801b938:	bfa8      	it	ge
 801b93a:	4623      	movge	r3, r4
 801b93c:	460f      	mov	r7, r1
 801b93e:	bfa4      	itt	ge
 801b940:	460c      	movge	r4, r1
 801b942:	461f      	movge	r7, r3
 801b944:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801b948:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801b94c:	68a3      	ldr	r3, [r4, #8]
 801b94e:	6861      	ldr	r1, [r4, #4]
 801b950:	eb0a 0609 	add.w	r6, sl, r9
 801b954:	42b3      	cmp	r3, r6
 801b956:	b085      	sub	sp, #20
 801b958:	bfb8      	it	lt
 801b95a:	3101      	addlt	r1, #1
 801b95c:	f7ff fe92 	bl	801b684 <_Balloc>
 801b960:	b930      	cbnz	r0, 801b970 <__multiply+0x44>
 801b962:	4602      	mov	r2, r0
 801b964:	4b44      	ldr	r3, [pc, #272]	@ (801ba78 <__multiply+0x14c>)
 801b966:	4845      	ldr	r0, [pc, #276]	@ (801ba7c <__multiply+0x150>)
 801b968:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801b96c:	f7fe ffd6 	bl	801a91c <__assert_func>
 801b970:	f100 0514 	add.w	r5, r0, #20
 801b974:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b978:	462b      	mov	r3, r5
 801b97a:	2200      	movs	r2, #0
 801b97c:	4543      	cmp	r3, r8
 801b97e:	d321      	bcc.n	801b9c4 <__multiply+0x98>
 801b980:	f107 0114 	add.w	r1, r7, #20
 801b984:	f104 0214 	add.w	r2, r4, #20
 801b988:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801b98c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801b990:	9302      	str	r3, [sp, #8]
 801b992:	1b13      	subs	r3, r2, r4
 801b994:	3b15      	subs	r3, #21
 801b996:	f023 0303 	bic.w	r3, r3, #3
 801b99a:	3304      	adds	r3, #4
 801b99c:	f104 0715 	add.w	r7, r4, #21
 801b9a0:	42ba      	cmp	r2, r7
 801b9a2:	bf38      	it	cc
 801b9a4:	2304      	movcc	r3, #4
 801b9a6:	9301      	str	r3, [sp, #4]
 801b9a8:	9b02      	ldr	r3, [sp, #8]
 801b9aa:	9103      	str	r1, [sp, #12]
 801b9ac:	428b      	cmp	r3, r1
 801b9ae:	d80c      	bhi.n	801b9ca <__multiply+0x9e>
 801b9b0:	2e00      	cmp	r6, #0
 801b9b2:	dd03      	ble.n	801b9bc <__multiply+0x90>
 801b9b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d05b      	beq.n	801ba74 <__multiply+0x148>
 801b9bc:	6106      	str	r6, [r0, #16]
 801b9be:	b005      	add	sp, #20
 801b9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9c4:	f843 2b04 	str.w	r2, [r3], #4
 801b9c8:	e7d8      	b.n	801b97c <__multiply+0x50>
 801b9ca:	f8b1 a000 	ldrh.w	sl, [r1]
 801b9ce:	f1ba 0f00 	cmp.w	sl, #0
 801b9d2:	d024      	beq.n	801ba1e <__multiply+0xf2>
 801b9d4:	f104 0e14 	add.w	lr, r4, #20
 801b9d8:	46a9      	mov	r9, r5
 801b9da:	f04f 0c00 	mov.w	ip, #0
 801b9de:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b9e2:	f8d9 3000 	ldr.w	r3, [r9]
 801b9e6:	fa1f fb87 	uxth.w	fp, r7
 801b9ea:	b29b      	uxth	r3, r3
 801b9ec:	fb0a 330b 	mla	r3, sl, fp, r3
 801b9f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801b9f4:	f8d9 7000 	ldr.w	r7, [r9]
 801b9f8:	4463      	add	r3, ip
 801b9fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b9fe:	fb0a c70b 	mla	r7, sl, fp, ip
 801ba02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801ba06:	b29b      	uxth	r3, r3
 801ba08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ba0c:	4572      	cmp	r2, lr
 801ba0e:	f849 3b04 	str.w	r3, [r9], #4
 801ba12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ba16:	d8e2      	bhi.n	801b9de <__multiply+0xb2>
 801ba18:	9b01      	ldr	r3, [sp, #4]
 801ba1a:	f845 c003 	str.w	ip, [r5, r3]
 801ba1e:	9b03      	ldr	r3, [sp, #12]
 801ba20:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801ba24:	3104      	adds	r1, #4
 801ba26:	f1b9 0f00 	cmp.w	r9, #0
 801ba2a:	d021      	beq.n	801ba70 <__multiply+0x144>
 801ba2c:	682b      	ldr	r3, [r5, #0]
 801ba2e:	f104 0c14 	add.w	ip, r4, #20
 801ba32:	46ae      	mov	lr, r5
 801ba34:	f04f 0a00 	mov.w	sl, #0
 801ba38:	f8bc b000 	ldrh.w	fp, [ip]
 801ba3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801ba40:	fb09 770b 	mla	r7, r9, fp, r7
 801ba44:	4457      	add	r7, sl
 801ba46:	b29b      	uxth	r3, r3
 801ba48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ba4c:	f84e 3b04 	str.w	r3, [lr], #4
 801ba50:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ba54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ba58:	f8be 3000 	ldrh.w	r3, [lr]
 801ba5c:	fb09 330a 	mla	r3, r9, sl, r3
 801ba60:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801ba64:	4562      	cmp	r2, ip
 801ba66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ba6a:	d8e5      	bhi.n	801ba38 <__multiply+0x10c>
 801ba6c:	9f01      	ldr	r7, [sp, #4]
 801ba6e:	51eb      	str	r3, [r5, r7]
 801ba70:	3504      	adds	r5, #4
 801ba72:	e799      	b.n	801b9a8 <__multiply+0x7c>
 801ba74:	3e01      	subs	r6, #1
 801ba76:	e79b      	b.n	801b9b0 <__multiply+0x84>
 801ba78:	0802196c 	.word	0x0802196c
 801ba7c:	0802197d 	.word	0x0802197d

0801ba80 <__pow5mult>:
 801ba80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ba84:	4615      	mov	r5, r2
 801ba86:	f012 0203 	ands.w	r2, r2, #3
 801ba8a:	4607      	mov	r7, r0
 801ba8c:	460e      	mov	r6, r1
 801ba8e:	d007      	beq.n	801baa0 <__pow5mult+0x20>
 801ba90:	4c25      	ldr	r4, [pc, #148]	@ (801bb28 <__pow5mult+0xa8>)
 801ba92:	3a01      	subs	r2, #1
 801ba94:	2300      	movs	r3, #0
 801ba96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ba9a:	f7ff fe55 	bl	801b748 <__multadd>
 801ba9e:	4606      	mov	r6, r0
 801baa0:	10ad      	asrs	r5, r5, #2
 801baa2:	d03d      	beq.n	801bb20 <__pow5mult+0xa0>
 801baa4:	69fc      	ldr	r4, [r7, #28]
 801baa6:	b97c      	cbnz	r4, 801bac8 <__pow5mult+0x48>
 801baa8:	2010      	movs	r0, #16
 801baaa:	f7fd fbe9 	bl	8019280 <malloc>
 801baae:	4602      	mov	r2, r0
 801bab0:	61f8      	str	r0, [r7, #28]
 801bab2:	b928      	cbnz	r0, 801bac0 <__pow5mult+0x40>
 801bab4:	4b1d      	ldr	r3, [pc, #116]	@ (801bb2c <__pow5mult+0xac>)
 801bab6:	481e      	ldr	r0, [pc, #120]	@ (801bb30 <__pow5mult+0xb0>)
 801bab8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801babc:	f7fe ff2e 	bl	801a91c <__assert_func>
 801bac0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801bac4:	6004      	str	r4, [r0, #0]
 801bac6:	60c4      	str	r4, [r0, #12]
 801bac8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801bacc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bad0:	b94c      	cbnz	r4, 801bae6 <__pow5mult+0x66>
 801bad2:	f240 2171 	movw	r1, #625	@ 0x271
 801bad6:	4638      	mov	r0, r7
 801bad8:	f7ff ff12 	bl	801b900 <__i2b>
 801badc:	2300      	movs	r3, #0
 801bade:	f8c8 0008 	str.w	r0, [r8, #8]
 801bae2:	4604      	mov	r4, r0
 801bae4:	6003      	str	r3, [r0, #0]
 801bae6:	f04f 0900 	mov.w	r9, #0
 801baea:	07eb      	lsls	r3, r5, #31
 801baec:	d50a      	bpl.n	801bb04 <__pow5mult+0x84>
 801baee:	4631      	mov	r1, r6
 801baf0:	4622      	mov	r2, r4
 801baf2:	4638      	mov	r0, r7
 801baf4:	f7ff ff1a 	bl	801b92c <__multiply>
 801baf8:	4631      	mov	r1, r6
 801bafa:	4680      	mov	r8, r0
 801bafc:	4638      	mov	r0, r7
 801bafe:	f7ff fe01 	bl	801b704 <_Bfree>
 801bb02:	4646      	mov	r6, r8
 801bb04:	106d      	asrs	r5, r5, #1
 801bb06:	d00b      	beq.n	801bb20 <__pow5mult+0xa0>
 801bb08:	6820      	ldr	r0, [r4, #0]
 801bb0a:	b938      	cbnz	r0, 801bb1c <__pow5mult+0x9c>
 801bb0c:	4622      	mov	r2, r4
 801bb0e:	4621      	mov	r1, r4
 801bb10:	4638      	mov	r0, r7
 801bb12:	f7ff ff0b 	bl	801b92c <__multiply>
 801bb16:	6020      	str	r0, [r4, #0]
 801bb18:	f8c0 9000 	str.w	r9, [r0]
 801bb1c:	4604      	mov	r4, r0
 801bb1e:	e7e4      	b.n	801baea <__pow5mult+0x6a>
 801bb20:	4630      	mov	r0, r6
 801bb22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bb26:	bf00      	nop
 801bb28:	080219d8 	.word	0x080219d8
 801bb2c:	08021722 	.word	0x08021722
 801bb30:	0802197d 	.word	0x0802197d

0801bb34 <__lshift>:
 801bb34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb38:	460c      	mov	r4, r1
 801bb3a:	6849      	ldr	r1, [r1, #4]
 801bb3c:	6923      	ldr	r3, [r4, #16]
 801bb3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801bb42:	68a3      	ldr	r3, [r4, #8]
 801bb44:	4607      	mov	r7, r0
 801bb46:	4691      	mov	r9, r2
 801bb48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bb4c:	f108 0601 	add.w	r6, r8, #1
 801bb50:	42b3      	cmp	r3, r6
 801bb52:	db0b      	blt.n	801bb6c <__lshift+0x38>
 801bb54:	4638      	mov	r0, r7
 801bb56:	f7ff fd95 	bl	801b684 <_Balloc>
 801bb5a:	4605      	mov	r5, r0
 801bb5c:	b948      	cbnz	r0, 801bb72 <__lshift+0x3e>
 801bb5e:	4602      	mov	r2, r0
 801bb60:	4b28      	ldr	r3, [pc, #160]	@ (801bc04 <__lshift+0xd0>)
 801bb62:	4829      	ldr	r0, [pc, #164]	@ (801bc08 <__lshift+0xd4>)
 801bb64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801bb68:	f7fe fed8 	bl	801a91c <__assert_func>
 801bb6c:	3101      	adds	r1, #1
 801bb6e:	005b      	lsls	r3, r3, #1
 801bb70:	e7ee      	b.n	801bb50 <__lshift+0x1c>
 801bb72:	2300      	movs	r3, #0
 801bb74:	f100 0114 	add.w	r1, r0, #20
 801bb78:	f100 0210 	add.w	r2, r0, #16
 801bb7c:	4618      	mov	r0, r3
 801bb7e:	4553      	cmp	r3, sl
 801bb80:	db33      	blt.n	801bbea <__lshift+0xb6>
 801bb82:	6920      	ldr	r0, [r4, #16]
 801bb84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bb88:	f104 0314 	add.w	r3, r4, #20
 801bb8c:	f019 091f 	ands.w	r9, r9, #31
 801bb90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bb94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801bb98:	d02b      	beq.n	801bbf2 <__lshift+0xbe>
 801bb9a:	f1c9 0e20 	rsb	lr, r9, #32
 801bb9e:	468a      	mov	sl, r1
 801bba0:	2200      	movs	r2, #0
 801bba2:	6818      	ldr	r0, [r3, #0]
 801bba4:	fa00 f009 	lsl.w	r0, r0, r9
 801bba8:	4310      	orrs	r0, r2
 801bbaa:	f84a 0b04 	str.w	r0, [sl], #4
 801bbae:	f853 2b04 	ldr.w	r2, [r3], #4
 801bbb2:	459c      	cmp	ip, r3
 801bbb4:	fa22 f20e 	lsr.w	r2, r2, lr
 801bbb8:	d8f3      	bhi.n	801bba2 <__lshift+0x6e>
 801bbba:	ebac 0304 	sub.w	r3, ip, r4
 801bbbe:	3b15      	subs	r3, #21
 801bbc0:	f023 0303 	bic.w	r3, r3, #3
 801bbc4:	3304      	adds	r3, #4
 801bbc6:	f104 0015 	add.w	r0, r4, #21
 801bbca:	4584      	cmp	ip, r0
 801bbcc:	bf38      	it	cc
 801bbce:	2304      	movcc	r3, #4
 801bbd0:	50ca      	str	r2, [r1, r3]
 801bbd2:	b10a      	cbz	r2, 801bbd8 <__lshift+0xa4>
 801bbd4:	f108 0602 	add.w	r6, r8, #2
 801bbd8:	3e01      	subs	r6, #1
 801bbda:	4638      	mov	r0, r7
 801bbdc:	612e      	str	r6, [r5, #16]
 801bbde:	4621      	mov	r1, r4
 801bbe0:	f7ff fd90 	bl	801b704 <_Bfree>
 801bbe4:	4628      	mov	r0, r5
 801bbe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbea:	f842 0f04 	str.w	r0, [r2, #4]!
 801bbee:	3301      	adds	r3, #1
 801bbf0:	e7c5      	b.n	801bb7e <__lshift+0x4a>
 801bbf2:	3904      	subs	r1, #4
 801bbf4:	f853 2b04 	ldr.w	r2, [r3], #4
 801bbf8:	f841 2f04 	str.w	r2, [r1, #4]!
 801bbfc:	459c      	cmp	ip, r3
 801bbfe:	d8f9      	bhi.n	801bbf4 <__lshift+0xc0>
 801bc00:	e7ea      	b.n	801bbd8 <__lshift+0xa4>
 801bc02:	bf00      	nop
 801bc04:	0802196c 	.word	0x0802196c
 801bc08:	0802197d 	.word	0x0802197d

0801bc0c <__mcmp>:
 801bc0c:	690a      	ldr	r2, [r1, #16]
 801bc0e:	4603      	mov	r3, r0
 801bc10:	6900      	ldr	r0, [r0, #16]
 801bc12:	1a80      	subs	r0, r0, r2
 801bc14:	b530      	push	{r4, r5, lr}
 801bc16:	d10e      	bne.n	801bc36 <__mcmp+0x2a>
 801bc18:	3314      	adds	r3, #20
 801bc1a:	3114      	adds	r1, #20
 801bc1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801bc20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801bc24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801bc28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801bc2c:	4295      	cmp	r5, r2
 801bc2e:	d003      	beq.n	801bc38 <__mcmp+0x2c>
 801bc30:	d205      	bcs.n	801bc3e <__mcmp+0x32>
 801bc32:	f04f 30ff 	mov.w	r0, #4294967295
 801bc36:	bd30      	pop	{r4, r5, pc}
 801bc38:	42a3      	cmp	r3, r4
 801bc3a:	d3f3      	bcc.n	801bc24 <__mcmp+0x18>
 801bc3c:	e7fb      	b.n	801bc36 <__mcmp+0x2a>
 801bc3e:	2001      	movs	r0, #1
 801bc40:	e7f9      	b.n	801bc36 <__mcmp+0x2a>
	...

0801bc44 <__mdiff>:
 801bc44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc48:	4689      	mov	r9, r1
 801bc4a:	4606      	mov	r6, r0
 801bc4c:	4611      	mov	r1, r2
 801bc4e:	4648      	mov	r0, r9
 801bc50:	4614      	mov	r4, r2
 801bc52:	f7ff ffdb 	bl	801bc0c <__mcmp>
 801bc56:	1e05      	subs	r5, r0, #0
 801bc58:	d112      	bne.n	801bc80 <__mdiff+0x3c>
 801bc5a:	4629      	mov	r1, r5
 801bc5c:	4630      	mov	r0, r6
 801bc5e:	f7ff fd11 	bl	801b684 <_Balloc>
 801bc62:	4602      	mov	r2, r0
 801bc64:	b928      	cbnz	r0, 801bc72 <__mdiff+0x2e>
 801bc66:	4b3f      	ldr	r3, [pc, #252]	@ (801bd64 <__mdiff+0x120>)
 801bc68:	f240 2137 	movw	r1, #567	@ 0x237
 801bc6c:	483e      	ldr	r0, [pc, #248]	@ (801bd68 <__mdiff+0x124>)
 801bc6e:	f7fe fe55 	bl	801a91c <__assert_func>
 801bc72:	2301      	movs	r3, #1
 801bc74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bc78:	4610      	mov	r0, r2
 801bc7a:	b003      	add	sp, #12
 801bc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc80:	bfbc      	itt	lt
 801bc82:	464b      	movlt	r3, r9
 801bc84:	46a1      	movlt	r9, r4
 801bc86:	4630      	mov	r0, r6
 801bc88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801bc8c:	bfba      	itte	lt
 801bc8e:	461c      	movlt	r4, r3
 801bc90:	2501      	movlt	r5, #1
 801bc92:	2500      	movge	r5, #0
 801bc94:	f7ff fcf6 	bl	801b684 <_Balloc>
 801bc98:	4602      	mov	r2, r0
 801bc9a:	b918      	cbnz	r0, 801bca4 <__mdiff+0x60>
 801bc9c:	4b31      	ldr	r3, [pc, #196]	@ (801bd64 <__mdiff+0x120>)
 801bc9e:	f240 2145 	movw	r1, #581	@ 0x245
 801bca2:	e7e3      	b.n	801bc6c <__mdiff+0x28>
 801bca4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801bca8:	6926      	ldr	r6, [r4, #16]
 801bcaa:	60c5      	str	r5, [r0, #12]
 801bcac:	f109 0310 	add.w	r3, r9, #16
 801bcb0:	f109 0514 	add.w	r5, r9, #20
 801bcb4:	f104 0e14 	add.w	lr, r4, #20
 801bcb8:	f100 0b14 	add.w	fp, r0, #20
 801bcbc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801bcc0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801bcc4:	9301      	str	r3, [sp, #4]
 801bcc6:	46d9      	mov	r9, fp
 801bcc8:	f04f 0c00 	mov.w	ip, #0
 801bccc:	9b01      	ldr	r3, [sp, #4]
 801bcce:	f85e 0b04 	ldr.w	r0, [lr], #4
 801bcd2:	f853 af04 	ldr.w	sl, [r3, #4]!
 801bcd6:	9301      	str	r3, [sp, #4]
 801bcd8:	fa1f f38a 	uxth.w	r3, sl
 801bcdc:	4619      	mov	r1, r3
 801bcde:	b283      	uxth	r3, r0
 801bce0:	1acb      	subs	r3, r1, r3
 801bce2:	0c00      	lsrs	r0, r0, #16
 801bce4:	4463      	add	r3, ip
 801bce6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801bcea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801bcee:	b29b      	uxth	r3, r3
 801bcf0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801bcf4:	4576      	cmp	r6, lr
 801bcf6:	f849 3b04 	str.w	r3, [r9], #4
 801bcfa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bcfe:	d8e5      	bhi.n	801bccc <__mdiff+0x88>
 801bd00:	1b33      	subs	r3, r6, r4
 801bd02:	3b15      	subs	r3, #21
 801bd04:	f023 0303 	bic.w	r3, r3, #3
 801bd08:	3415      	adds	r4, #21
 801bd0a:	3304      	adds	r3, #4
 801bd0c:	42a6      	cmp	r6, r4
 801bd0e:	bf38      	it	cc
 801bd10:	2304      	movcc	r3, #4
 801bd12:	441d      	add	r5, r3
 801bd14:	445b      	add	r3, fp
 801bd16:	461e      	mov	r6, r3
 801bd18:	462c      	mov	r4, r5
 801bd1a:	4544      	cmp	r4, r8
 801bd1c:	d30e      	bcc.n	801bd3c <__mdiff+0xf8>
 801bd1e:	f108 0103 	add.w	r1, r8, #3
 801bd22:	1b49      	subs	r1, r1, r5
 801bd24:	f021 0103 	bic.w	r1, r1, #3
 801bd28:	3d03      	subs	r5, #3
 801bd2a:	45a8      	cmp	r8, r5
 801bd2c:	bf38      	it	cc
 801bd2e:	2100      	movcc	r1, #0
 801bd30:	440b      	add	r3, r1
 801bd32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bd36:	b191      	cbz	r1, 801bd5e <__mdiff+0x11a>
 801bd38:	6117      	str	r7, [r2, #16]
 801bd3a:	e79d      	b.n	801bc78 <__mdiff+0x34>
 801bd3c:	f854 1b04 	ldr.w	r1, [r4], #4
 801bd40:	46e6      	mov	lr, ip
 801bd42:	0c08      	lsrs	r0, r1, #16
 801bd44:	fa1c fc81 	uxtah	ip, ip, r1
 801bd48:	4471      	add	r1, lr
 801bd4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801bd4e:	b289      	uxth	r1, r1
 801bd50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801bd54:	f846 1b04 	str.w	r1, [r6], #4
 801bd58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bd5c:	e7dd      	b.n	801bd1a <__mdiff+0xd6>
 801bd5e:	3f01      	subs	r7, #1
 801bd60:	e7e7      	b.n	801bd32 <__mdiff+0xee>
 801bd62:	bf00      	nop
 801bd64:	0802196c 	.word	0x0802196c
 801bd68:	0802197d 	.word	0x0802197d

0801bd6c <__ulp>:
 801bd6c:	b082      	sub	sp, #8
 801bd6e:	ed8d 0b00 	vstr	d0, [sp]
 801bd72:	9a01      	ldr	r2, [sp, #4]
 801bd74:	4b0f      	ldr	r3, [pc, #60]	@ (801bdb4 <__ulp+0x48>)
 801bd76:	4013      	ands	r3, r2
 801bd78:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	dc08      	bgt.n	801bd92 <__ulp+0x26>
 801bd80:	425b      	negs	r3, r3
 801bd82:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801bd86:	ea4f 5223 	mov.w	r2, r3, asr #20
 801bd8a:	da04      	bge.n	801bd96 <__ulp+0x2a>
 801bd8c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801bd90:	4113      	asrs	r3, r2
 801bd92:	2200      	movs	r2, #0
 801bd94:	e008      	b.n	801bda8 <__ulp+0x3c>
 801bd96:	f1a2 0314 	sub.w	r3, r2, #20
 801bd9a:	2b1e      	cmp	r3, #30
 801bd9c:	bfda      	itte	le
 801bd9e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801bda2:	40da      	lsrle	r2, r3
 801bda4:	2201      	movgt	r2, #1
 801bda6:	2300      	movs	r3, #0
 801bda8:	4619      	mov	r1, r3
 801bdaa:	4610      	mov	r0, r2
 801bdac:	ec41 0b10 	vmov	d0, r0, r1
 801bdb0:	b002      	add	sp, #8
 801bdb2:	4770      	bx	lr
 801bdb4:	7ff00000 	.word	0x7ff00000

0801bdb8 <__b2d>:
 801bdb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bdbc:	6906      	ldr	r6, [r0, #16]
 801bdbe:	f100 0814 	add.w	r8, r0, #20
 801bdc2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801bdc6:	1f37      	subs	r7, r6, #4
 801bdc8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801bdcc:	4610      	mov	r0, r2
 801bdce:	f7ff fd4b 	bl	801b868 <__hi0bits>
 801bdd2:	f1c0 0320 	rsb	r3, r0, #32
 801bdd6:	280a      	cmp	r0, #10
 801bdd8:	600b      	str	r3, [r1, #0]
 801bdda:	491b      	ldr	r1, [pc, #108]	@ (801be48 <__b2d+0x90>)
 801bddc:	dc15      	bgt.n	801be0a <__b2d+0x52>
 801bdde:	f1c0 0c0b 	rsb	ip, r0, #11
 801bde2:	fa22 f30c 	lsr.w	r3, r2, ip
 801bde6:	45b8      	cmp	r8, r7
 801bde8:	ea43 0501 	orr.w	r5, r3, r1
 801bdec:	bf34      	ite	cc
 801bdee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bdf2:	2300      	movcs	r3, #0
 801bdf4:	3015      	adds	r0, #21
 801bdf6:	fa02 f000 	lsl.w	r0, r2, r0
 801bdfa:	fa23 f30c 	lsr.w	r3, r3, ip
 801bdfe:	4303      	orrs	r3, r0
 801be00:	461c      	mov	r4, r3
 801be02:	ec45 4b10 	vmov	d0, r4, r5
 801be06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be0a:	45b8      	cmp	r8, r7
 801be0c:	bf3a      	itte	cc
 801be0e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801be12:	f1a6 0708 	subcc.w	r7, r6, #8
 801be16:	2300      	movcs	r3, #0
 801be18:	380b      	subs	r0, #11
 801be1a:	d012      	beq.n	801be42 <__b2d+0x8a>
 801be1c:	f1c0 0120 	rsb	r1, r0, #32
 801be20:	fa23 f401 	lsr.w	r4, r3, r1
 801be24:	4082      	lsls	r2, r0
 801be26:	4322      	orrs	r2, r4
 801be28:	4547      	cmp	r7, r8
 801be2a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801be2e:	bf8c      	ite	hi
 801be30:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801be34:	2200      	movls	r2, #0
 801be36:	4083      	lsls	r3, r0
 801be38:	40ca      	lsrs	r2, r1
 801be3a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801be3e:	4313      	orrs	r3, r2
 801be40:	e7de      	b.n	801be00 <__b2d+0x48>
 801be42:	ea42 0501 	orr.w	r5, r2, r1
 801be46:	e7db      	b.n	801be00 <__b2d+0x48>
 801be48:	3ff00000 	.word	0x3ff00000

0801be4c <__d2b>:
 801be4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801be50:	460f      	mov	r7, r1
 801be52:	2101      	movs	r1, #1
 801be54:	ec59 8b10 	vmov	r8, r9, d0
 801be58:	4616      	mov	r6, r2
 801be5a:	f7ff fc13 	bl	801b684 <_Balloc>
 801be5e:	4604      	mov	r4, r0
 801be60:	b930      	cbnz	r0, 801be70 <__d2b+0x24>
 801be62:	4602      	mov	r2, r0
 801be64:	4b23      	ldr	r3, [pc, #140]	@ (801bef4 <__d2b+0xa8>)
 801be66:	4824      	ldr	r0, [pc, #144]	@ (801bef8 <__d2b+0xac>)
 801be68:	f240 310f 	movw	r1, #783	@ 0x30f
 801be6c:	f7fe fd56 	bl	801a91c <__assert_func>
 801be70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801be74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801be78:	b10d      	cbz	r5, 801be7e <__d2b+0x32>
 801be7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801be7e:	9301      	str	r3, [sp, #4]
 801be80:	f1b8 0300 	subs.w	r3, r8, #0
 801be84:	d023      	beq.n	801bece <__d2b+0x82>
 801be86:	4668      	mov	r0, sp
 801be88:	9300      	str	r3, [sp, #0]
 801be8a:	f7ff fd0c 	bl	801b8a6 <__lo0bits>
 801be8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801be92:	b1d0      	cbz	r0, 801beca <__d2b+0x7e>
 801be94:	f1c0 0320 	rsb	r3, r0, #32
 801be98:	fa02 f303 	lsl.w	r3, r2, r3
 801be9c:	430b      	orrs	r3, r1
 801be9e:	40c2      	lsrs	r2, r0
 801bea0:	6163      	str	r3, [r4, #20]
 801bea2:	9201      	str	r2, [sp, #4]
 801bea4:	9b01      	ldr	r3, [sp, #4]
 801bea6:	61a3      	str	r3, [r4, #24]
 801bea8:	2b00      	cmp	r3, #0
 801beaa:	bf0c      	ite	eq
 801beac:	2201      	moveq	r2, #1
 801beae:	2202      	movne	r2, #2
 801beb0:	6122      	str	r2, [r4, #16]
 801beb2:	b1a5      	cbz	r5, 801bede <__d2b+0x92>
 801beb4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801beb8:	4405      	add	r5, r0
 801beba:	603d      	str	r5, [r7, #0]
 801bebc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801bec0:	6030      	str	r0, [r6, #0]
 801bec2:	4620      	mov	r0, r4
 801bec4:	b003      	add	sp, #12
 801bec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801beca:	6161      	str	r1, [r4, #20]
 801becc:	e7ea      	b.n	801bea4 <__d2b+0x58>
 801bece:	a801      	add	r0, sp, #4
 801bed0:	f7ff fce9 	bl	801b8a6 <__lo0bits>
 801bed4:	9b01      	ldr	r3, [sp, #4]
 801bed6:	6163      	str	r3, [r4, #20]
 801bed8:	3020      	adds	r0, #32
 801beda:	2201      	movs	r2, #1
 801bedc:	e7e8      	b.n	801beb0 <__d2b+0x64>
 801bede:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801bee2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801bee6:	6038      	str	r0, [r7, #0]
 801bee8:	6918      	ldr	r0, [r3, #16]
 801beea:	f7ff fcbd 	bl	801b868 <__hi0bits>
 801beee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801bef2:	e7e5      	b.n	801bec0 <__d2b+0x74>
 801bef4:	0802196c 	.word	0x0802196c
 801bef8:	0802197d 	.word	0x0802197d

0801befc <__ratio>:
 801befc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf00:	b085      	sub	sp, #20
 801bf02:	e9cd 1000 	strd	r1, r0, [sp]
 801bf06:	a902      	add	r1, sp, #8
 801bf08:	f7ff ff56 	bl	801bdb8 <__b2d>
 801bf0c:	9800      	ldr	r0, [sp, #0]
 801bf0e:	a903      	add	r1, sp, #12
 801bf10:	ec55 4b10 	vmov	r4, r5, d0
 801bf14:	f7ff ff50 	bl	801bdb8 <__b2d>
 801bf18:	9b01      	ldr	r3, [sp, #4]
 801bf1a:	6919      	ldr	r1, [r3, #16]
 801bf1c:	9b00      	ldr	r3, [sp, #0]
 801bf1e:	691b      	ldr	r3, [r3, #16]
 801bf20:	1ac9      	subs	r1, r1, r3
 801bf22:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801bf26:	1a9b      	subs	r3, r3, r2
 801bf28:	ec5b ab10 	vmov	sl, fp, d0
 801bf2c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	bfce      	itee	gt
 801bf34:	462a      	movgt	r2, r5
 801bf36:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801bf3a:	465a      	movle	r2, fp
 801bf3c:	462f      	mov	r7, r5
 801bf3e:	46d9      	mov	r9, fp
 801bf40:	bfcc      	ite	gt
 801bf42:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801bf46:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801bf4a:	464b      	mov	r3, r9
 801bf4c:	4652      	mov	r2, sl
 801bf4e:	4620      	mov	r0, r4
 801bf50:	4639      	mov	r1, r7
 801bf52:	f7e4 fc8b 	bl	800086c <__aeabi_ddiv>
 801bf56:	ec41 0b10 	vmov	d0, r0, r1
 801bf5a:	b005      	add	sp, #20
 801bf5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bf60 <__copybits>:
 801bf60:	3901      	subs	r1, #1
 801bf62:	b570      	push	{r4, r5, r6, lr}
 801bf64:	1149      	asrs	r1, r1, #5
 801bf66:	6914      	ldr	r4, [r2, #16]
 801bf68:	3101      	adds	r1, #1
 801bf6a:	f102 0314 	add.w	r3, r2, #20
 801bf6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801bf72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801bf76:	1f05      	subs	r5, r0, #4
 801bf78:	42a3      	cmp	r3, r4
 801bf7a:	d30c      	bcc.n	801bf96 <__copybits+0x36>
 801bf7c:	1aa3      	subs	r3, r4, r2
 801bf7e:	3b11      	subs	r3, #17
 801bf80:	f023 0303 	bic.w	r3, r3, #3
 801bf84:	3211      	adds	r2, #17
 801bf86:	42a2      	cmp	r2, r4
 801bf88:	bf88      	it	hi
 801bf8a:	2300      	movhi	r3, #0
 801bf8c:	4418      	add	r0, r3
 801bf8e:	2300      	movs	r3, #0
 801bf90:	4288      	cmp	r0, r1
 801bf92:	d305      	bcc.n	801bfa0 <__copybits+0x40>
 801bf94:	bd70      	pop	{r4, r5, r6, pc}
 801bf96:	f853 6b04 	ldr.w	r6, [r3], #4
 801bf9a:	f845 6f04 	str.w	r6, [r5, #4]!
 801bf9e:	e7eb      	b.n	801bf78 <__copybits+0x18>
 801bfa0:	f840 3b04 	str.w	r3, [r0], #4
 801bfa4:	e7f4      	b.n	801bf90 <__copybits+0x30>

0801bfa6 <__any_on>:
 801bfa6:	f100 0214 	add.w	r2, r0, #20
 801bfaa:	6900      	ldr	r0, [r0, #16]
 801bfac:	114b      	asrs	r3, r1, #5
 801bfae:	4298      	cmp	r0, r3
 801bfb0:	b510      	push	{r4, lr}
 801bfb2:	db11      	blt.n	801bfd8 <__any_on+0x32>
 801bfb4:	dd0a      	ble.n	801bfcc <__any_on+0x26>
 801bfb6:	f011 011f 	ands.w	r1, r1, #31
 801bfba:	d007      	beq.n	801bfcc <__any_on+0x26>
 801bfbc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801bfc0:	fa24 f001 	lsr.w	r0, r4, r1
 801bfc4:	fa00 f101 	lsl.w	r1, r0, r1
 801bfc8:	428c      	cmp	r4, r1
 801bfca:	d10b      	bne.n	801bfe4 <__any_on+0x3e>
 801bfcc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bfd0:	4293      	cmp	r3, r2
 801bfd2:	d803      	bhi.n	801bfdc <__any_on+0x36>
 801bfd4:	2000      	movs	r0, #0
 801bfd6:	bd10      	pop	{r4, pc}
 801bfd8:	4603      	mov	r3, r0
 801bfda:	e7f7      	b.n	801bfcc <__any_on+0x26>
 801bfdc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bfe0:	2900      	cmp	r1, #0
 801bfe2:	d0f5      	beq.n	801bfd0 <__any_on+0x2a>
 801bfe4:	2001      	movs	r0, #1
 801bfe6:	e7f6      	b.n	801bfd6 <__any_on+0x30>

0801bfe8 <sulp>:
 801bfe8:	b570      	push	{r4, r5, r6, lr}
 801bfea:	4604      	mov	r4, r0
 801bfec:	460d      	mov	r5, r1
 801bfee:	ec45 4b10 	vmov	d0, r4, r5
 801bff2:	4616      	mov	r6, r2
 801bff4:	f7ff feba 	bl	801bd6c <__ulp>
 801bff8:	ec51 0b10 	vmov	r0, r1, d0
 801bffc:	b17e      	cbz	r6, 801c01e <sulp+0x36>
 801bffe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c002:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801c006:	2b00      	cmp	r3, #0
 801c008:	dd09      	ble.n	801c01e <sulp+0x36>
 801c00a:	051b      	lsls	r3, r3, #20
 801c00c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801c010:	2400      	movs	r4, #0
 801c012:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801c016:	4622      	mov	r2, r4
 801c018:	462b      	mov	r3, r5
 801c01a:	f7e4 fafd 	bl	8000618 <__aeabi_dmul>
 801c01e:	ec41 0b10 	vmov	d0, r0, r1
 801c022:	bd70      	pop	{r4, r5, r6, pc}
 801c024:	0000      	movs	r0, r0
	...

0801c028 <_strtod_l>:
 801c028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c02c:	b09f      	sub	sp, #124	@ 0x7c
 801c02e:	460c      	mov	r4, r1
 801c030:	9217      	str	r2, [sp, #92]	@ 0x5c
 801c032:	2200      	movs	r2, #0
 801c034:	921a      	str	r2, [sp, #104]	@ 0x68
 801c036:	9005      	str	r0, [sp, #20]
 801c038:	f04f 0a00 	mov.w	sl, #0
 801c03c:	f04f 0b00 	mov.w	fp, #0
 801c040:	460a      	mov	r2, r1
 801c042:	9219      	str	r2, [sp, #100]	@ 0x64
 801c044:	7811      	ldrb	r1, [r2, #0]
 801c046:	292b      	cmp	r1, #43	@ 0x2b
 801c048:	d04a      	beq.n	801c0e0 <_strtod_l+0xb8>
 801c04a:	d838      	bhi.n	801c0be <_strtod_l+0x96>
 801c04c:	290d      	cmp	r1, #13
 801c04e:	d832      	bhi.n	801c0b6 <_strtod_l+0x8e>
 801c050:	2908      	cmp	r1, #8
 801c052:	d832      	bhi.n	801c0ba <_strtod_l+0x92>
 801c054:	2900      	cmp	r1, #0
 801c056:	d03b      	beq.n	801c0d0 <_strtod_l+0xa8>
 801c058:	2200      	movs	r2, #0
 801c05a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c05c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801c05e:	782a      	ldrb	r2, [r5, #0]
 801c060:	2a30      	cmp	r2, #48	@ 0x30
 801c062:	f040 80b3 	bne.w	801c1cc <_strtod_l+0x1a4>
 801c066:	786a      	ldrb	r2, [r5, #1]
 801c068:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801c06c:	2a58      	cmp	r2, #88	@ 0x58
 801c06e:	d16e      	bne.n	801c14e <_strtod_l+0x126>
 801c070:	9302      	str	r3, [sp, #8]
 801c072:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c074:	9301      	str	r3, [sp, #4]
 801c076:	ab1a      	add	r3, sp, #104	@ 0x68
 801c078:	9300      	str	r3, [sp, #0]
 801c07a:	4a8e      	ldr	r2, [pc, #568]	@ (801c2b4 <_strtod_l+0x28c>)
 801c07c:	9805      	ldr	r0, [sp, #20]
 801c07e:	ab1b      	add	r3, sp, #108	@ 0x6c
 801c080:	a919      	add	r1, sp, #100	@ 0x64
 801c082:	f001 fa23 	bl	801d4cc <__gethex>
 801c086:	f010 060f 	ands.w	r6, r0, #15
 801c08a:	4604      	mov	r4, r0
 801c08c:	d005      	beq.n	801c09a <_strtod_l+0x72>
 801c08e:	2e06      	cmp	r6, #6
 801c090:	d128      	bne.n	801c0e4 <_strtod_l+0xbc>
 801c092:	3501      	adds	r5, #1
 801c094:	2300      	movs	r3, #0
 801c096:	9519      	str	r5, [sp, #100]	@ 0x64
 801c098:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c09a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	f040 858e 	bne.w	801cbbe <_strtod_l+0xb96>
 801c0a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c0a4:	b1cb      	cbz	r3, 801c0da <_strtod_l+0xb2>
 801c0a6:	4652      	mov	r2, sl
 801c0a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801c0ac:	ec43 2b10 	vmov	d0, r2, r3
 801c0b0:	b01f      	add	sp, #124	@ 0x7c
 801c0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0b6:	2920      	cmp	r1, #32
 801c0b8:	d1ce      	bne.n	801c058 <_strtod_l+0x30>
 801c0ba:	3201      	adds	r2, #1
 801c0bc:	e7c1      	b.n	801c042 <_strtod_l+0x1a>
 801c0be:	292d      	cmp	r1, #45	@ 0x2d
 801c0c0:	d1ca      	bne.n	801c058 <_strtod_l+0x30>
 801c0c2:	2101      	movs	r1, #1
 801c0c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c0c6:	1c51      	adds	r1, r2, #1
 801c0c8:	9119      	str	r1, [sp, #100]	@ 0x64
 801c0ca:	7852      	ldrb	r2, [r2, #1]
 801c0cc:	2a00      	cmp	r2, #0
 801c0ce:	d1c5      	bne.n	801c05c <_strtod_l+0x34>
 801c0d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c0d2:	9419      	str	r4, [sp, #100]	@ 0x64
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	f040 8570 	bne.w	801cbba <_strtod_l+0xb92>
 801c0da:	4652      	mov	r2, sl
 801c0dc:	465b      	mov	r3, fp
 801c0de:	e7e5      	b.n	801c0ac <_strtod_l+0x84>
 801c0e0:	2100      	movs	r1, #0
 801c0e2:	e7ef      	b.n	801c0c4 <_strtod_l+0x9c>
 801c0e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c0e6:	b13a      	cbz	r2, 801c0f8 <_strtod_l+0xd0>
 801c0e8:	2135      	movs	r1, #53	@ 0x35
 801c0ea:	a81c      	add	r0, sp, #112	@ 0x70
 801c0ec:	f7ff ff38 	bl	801bf60 <__copybits>
 801c0f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c0f2:	9805      	ldr	r0, [sp, #20]
 801c0f4:	f7ff fb06 	bl	801b704 <_Bfree>
 801c0f8:	3e01      	subs	r6, #1
 801c0fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c0fc:	2e04      	cmp	r6, #4
 801c0fe:	d806      	bhi.n	801c10e <_strtod_l+0xe6>
 801c100:	e8df f006 	tbb	[pc, r6]
 801c104:	201d0314 	.word	0x201d0314
 801c108:	14          	.byte	0x14
 801c109:	00          	.byte	0x00
 801c10a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801c10e:	05e1      	lsls	r1, r4, #23
 801c110:	bf48      	it	mi
 801c112:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801c116:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c11a:	0d1b      	lsrs	r3, r3, #20
 801c11c:	051b      	lsls	r3, r3, #20
 801c11e:	2b00      	cmp	r3, #0
 801c120:	d1bb      	bne.n	801c09a <_strtod_l+0x72>
 801c122:	f7fe fbb9 	bl	801a898 <__errno>
 801c126:	2322      	movs	r3, #34	@ 0x22
 801c128:	6003      	str	r3, [r0, #0]
 801c12a:	e7b6      	b.n	801c09a <_strtod_l+0x72>
 801c12c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801c130:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801c134:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801c138:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c13c:	e7e7      	b.n	801c10e <_strtod_l+0xe6>
 801c13e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801c2bc <_strtod_l+0x294>
 801c142:	e7e4      	b.n	801c10e <_strtod_l+0xe6>
 801c144:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801c148:	f04f 3aff 	mov.w	sl, #4294967295
 801c14c:	e7df      	b.n	801c10e <_strtod_l+0xe6>
 801c14e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c150:	1c5a      	adds	r2, r3, #1
 801c152:	9219      	str	r2, [sp, #100]	@ 0x64
 801c154:	785b      	ldrb	r3, [r3, #1]
 801c156:	2b30      	cmp	r3, #48	@ 0x30
 801c158:	d0f9      	beq.n	801c14e <_strtod_l+0x126>
 801c15a:	2b00      	cmp	r3, #0
 801c15c:	d09d      	beq.n	801c09a <_strtod_l+0x72>
 801c15e:	2301      	movs	r3, #1
 801c160:	9309      	str	r3, [sp, #36]	@ 0x24
 801c162:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c164:	930c      	str	r3, [sp, #48]	@ 0x30
 801c166:	2300      	movs	r3, #0
 801c168:	9308      	str	r3, [sp, #32]
 801c16a:	930a      	str	r3, [sp, #40]	@ 0x28
 801c16c:	461f      	mov	r7, r3
 801c16e:	220a      	movs	r2, #10
 801c170:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c172:	7805      	ldrb	r5, [r0, #0]
 801c174:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801c178:	b2d9      	uxtb	r1, r3
 801c17a:	2909      	cmp	r1, #9
 801c17c:	d928      	bls.n	801c1d0 <_strtod_l+0x1a8>
 801c17e:	494e      	ldr	r1, [pc, #312]	@ (801c2b8 <_strtod_l+0x290>)
 801c180:	2201      	movs	r2, #1
 801c182:	f7fe fac7 	bl	801a714 <strncmp>
 801c186:	2800      	cmp	r0, #0
 801c188:	d032      	beq.n	801c1f0 <_strtod_l+0x1c8>
 801c18a:	2000      	movs	r0, #0
 801c18c:	462a      	mov	r2, r5
 801c18e:	4681      	mov	r9, r0
 801c190:	463d      	mov	r5, r7
 801c192:	4603      	mov	r3, r0
 801c194:	2a65      	cmp	r2, #101	@ 0x65
 801c196:	d001      	beq.n	801c19c <_strtod_l+0x174>
 801c198:	2a45      	cmp	r2, #69	@ 0x45
 801c19a:	d114      	bne.n	801c1c6 <_strtod_l+0x19e>
 801c19c:	b91d      	cbnz	r5, 801c1a6 <_strtod_l+0x17e>
 801c19e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c1a0:	4302      	orrs	r2, r0
 801c1a2:	d095      	beq.n	801c0d0 <_strtod_l+0xa8>
 801c1a4:	2500      	movs	r5, #0
 801c1a6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801c1a8:	1c62      	adds	r2, r4, #1
 801c1aa:	9219      	str	r2, [sp, #100]	@ 0x64
 801c1ac:	7862      	ldrb	r2, [r4, #1]
 801c1ae:	2a2b      	cmp	r2, #43	@ 0x2b
 801c1b0:	d077      	beq.n	801c2a2 <_strtod_l+0x27a>
 801c1b2:	2a2d      	cmp	r2, #45	@ 0x2d
 801c1b4:	d07b      	beq.n	801c2ae <_strtod_l+0x286>
 801c1b6:	f04f 0c00 	mov.w	ip, #0
 801c1ba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801c1be:	2909      	cmp	r1, #9
 801c1c0:	f240 8082 	bls.w	801c2c8 <_strtod_l+0x2a0>
 801c1c4:	9419      	str	r4, [sp, #100]	@ 0x64
 801c1c6:	f04f 0800 	mov.w	r8, #0
 801c1ca:	e0a2      	b.n	801c312 <_strtod_l+0x2ea>
 801c1cc:	2300      	movs	r3, #0
 801c1ce:	e7c7      	b.n	801c160 <_strtod_l+0x138>
 801c1d0:	2f08      	cmp	r7, #8
 801c1d2:	bfd5      	itete	le
 801c1d4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801c1d6:	9908      	ldrgt	r1, [sp, #32]
 801c1d8:	fb02 3301 	mlale	r3, r2, r1, r3
 801c1dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 801c1e0:	f100 0001 	add.w	r0, r0, #1
 801c1e4:	bfd4      	ite	le
 801c1e6:	930a      	strle	r3, [sp, #40]	@ 0x28
 801c1e8:	9308      	strgt	r3, [sp, #32]
 801c1ea:	3701      	adds	r7, #1
 801c1ec:	9019      	str	r0, [sp, #100]	@ 0x64
 801c1ee:	e7bf      	b.n	801c170 <_strtod_l+0x148>
 801c1f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c1f2:	1c5a      	adds	r2, r3, #1
 801c1f4:	9219      	str	r2, [sp, #100]	@ 0x64
 801c1f6:	785a      	ldrb	r2, [r3, #1]
 801c1f8:	b37f      	cbz	r7, 801c25a <_strtod_l+0x232>
 801c1fa:	4681      	mov	r9, r0
 801c1fc:	463d      	mov	r5, r7
 801c1fe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801c202:	2b09      	cmp	r3, #9
 801c204:	d912      	bls.n	801c22c <_strtod_l+0x204>
 801c206:	2301      	movs	r3, #1
 801c208:	e7c4      	b.n	801c194 <_strtod_l+0x16c>
 801c20a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c20c:	1c5a      	adds	r2, r3, #1
 801c20e:	9219      	str	r2, [sp, #100]	@ 0x64
 801c210:	785a      	ldrb	r2, [r3, #1]
 801c212:	3001      	adds	r0, #1
 801c214:	2a30      	cmp	r2, #48	@ 0x30
 801c216:	d0f8      	beq.n	801c20a <_strtod_l+0x1e2>
 801c218:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801c21c:	2b08      	cmp	r3, #8
 801c21e:	f200 84d3 	bhi.w	801cbc8 <_strtod_l+0xba0>
 801c222:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c224:	930c      	str	r3, [sp, #48]	@ 0x30
 801c226:	4681      	mov	r9, r0
 801c228:	2000      	movs	r0, #0
 801c22a:	4605      	mov	r5, r0
 801c22c:	3a30      	subs	r2, #48	@ 0x30
 801c22e:	f100 0301 	add.w	r3, r0, #1
 801c232:	d02a      	beq.n	801c28a <_strtod_l+0x262>
 801c234:	4499      	add	r9, r3
 801c236:	eb00 0c05 	add.w	ip, r0, r5
 801c23a:	462b      	mov	r3, r5
 801c23c:	210a      	movs	r1, #10
 801c23e:	4563      	cmp	r3, ip
 801c240:	d10d      	bne.n	801c25e <_strtod_l+0x236>
 801c242:	1c69      	adds	r1, r5, #1
 801c244:	4401      	add	r1, r0
 801c246:	4428      	add	r0, r5
 801c248:	2808      	cmp	r0, #8
 801c24a:	dc16      	bgt.n	801c27a <_strtod_l+0x252>
 801c24c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c24e:	230a      	movs	r3, #10
 801c250:	fb03 2300 	mla	r3, r3, r0, r2
 801c254:	930a      	str	r3, [sp, #40]	@ 0x28
 801c256:	2300      	movs	r3, #0
 801c258:	e018      	b.n	801c28c <_strtod_l+0x264>
 801c25a:	4638      	mov	r0, r7
 801c25c:	e7da      	b.n	801c214 <_strtod_l+0x1ec>
 801c25e:	2b08      	cmp	r3, #8
 801c260:	f103 0301 	add.w	r3, r3, #1
 801c264:	dc03      	bgt.n	801c26e <_strtod_l+0x246>
 801c266:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801c268:	434e      	muls	r6, r1
 801c26a:	960a      	str	r6, [sp, #40]	@ 0x28
 801c26c:	e7e7      	b.n	801c23e <_strtod_l+0x216>
 801c26e:	2b10      	cmp	r3, #16
 801c270:	bfde      	ittt	le
 801c272:	9e08      	ldrle	r6, [sp, #32]
 801c274:	434e      	mulle	r6, r1
 801c276:	9608      	strle	r6, [sp, #32]
 801c278:	e7e1      	b.n	801c23e <_strtod_l+0x216>
 801c27a:	280f      	cmp	r0, #15
 801c27c:	dceb      	bgt.n	801c256 <_strtod_l+0x22e>
 801c27e:	9808      	ldr	r0, [sp, #32]
 801c280:	230a      	movs	r3, #10
 801c282:	fb03 2300 	mla	r3, r3, r0, r2
 801c286:	9308      	str	r3, [sp, #32]
 801c288:	e7e5      	b.n	801c256 <_strtod_l+0x22e>
 801c28a:	4629      	mov	r1, r5
 801c28c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c28e:	1c50      	adds	r0, r2, #1
 801c290:	9019      	str	r0, [sp, #100]	@ 0x64
 801c292:	7852      	ldrb	r2, [r2, #1]
 801c294:	4618      	mov	r0, r3
 801c296:	460d      	mov	r5, r1
 801c298:	e7b1      	b.n	801c1fe <_strtod_l+0x1d6>
 801c29a:	f04f 0900 	mov.w	r9, #0
 801c29e:	2301      	movs	r3, #1
 801c2a0:	e77d      	b.n	801c19e <_strtod_l+0x176>
 801c2a2:	f04f 0c00 	mov.w	ip, #0
 801c2a6:	1ca2      	adds	r2, r4, #2
 801c2a8:	9219      	str	r2, [sp, #100]	@ 0x64
 801c2aa:	78a2      	ldrb	r2, [r4, #2]
 801c2ac:	e785      	b.n	801c1ba <_strtod_l+0x192>
 801c2ae:	f04f 0c01 	mov.w	ip, #1
 801c2b2:	e7f8      	b.n	801c2a6 <_strtod_l+0x27e>
 801c2b4:	08021af0 	.word	0x08021af0
 801c2b8:	08021ad8 	.word	0x08021ad8
 801c2bc:	7ff00000 	.word	0x7ff00000
 801c2c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c2c2:	1c51      	adds	r1, r2, #1
 801c2c4:	9119      	str	r1, [sp, #100]	@ 0x64
 801c2c6:	7852      	ldrb	r2, [r2, #1]
 801c2c8:	2a30      	cmp	r2, #48	@ 0x30
 801c2ca:	d0f9      	beq.n	801c2c0 <_strtod_l+0x298>
 801c2cc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801c2d0:	2908      	cmp	r1, #8
 801c2d2:	f63f af78 	bhi.w	801c1c6 <_strtod_l+0x19e>
 801c2d6:	3a30      	subs	r2, #48	@ 0x30
 801c2d8:	920e      	str	r2, [sp, #56]	@ 0x38
 801c2da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c2dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 801c2de:	f04f 080a 	mov.w	r8, #10
 801c2e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c2e4:	1c56      	adds	r6, r2, #1
 801c2e6:	9619      	str	r6, [sp, #100]	@ 0x64
 801c2e8:	7852      	ldrb	r2, [r2, #1]
 801c2ea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801c2ee:	f1be 0f09 	cmp.w	lr, #9
 801c2f2:	d939      	bls.n	801c368 <_strtod_l+0x340>
 801c2f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801c2f6:	1a76      	subs	r6, r6, r1
 801c2f8:	2e08      	cmp	r6, #8
 801c2fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801c2fe:	dc03      	bgt.n	801c308 <_strtod_l+0x2e0>
 801c300:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801c302:	4588      	cmp	r8, r1
 801c304:	bfa8      	it	ge
 801c306:	4688      	movge	r8, r1
 801c308:	f1bc 0f00 	cmp.w	ip, #0
 801c30c:	d001      	beq.n	801c312 <_strtod_l+0x2ea>
 801c30e:	f1c8 0800 	rsb	r8, r8, #0
 801c312:	2d00      	cmp	r5, #0
 801c314:	d14e      	bne.n	801c3b4 <_strtod_l+0x38c>
 801c316:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c318:	4308      	orrs	r0, r1
 801c31a:	f47f aebe 	bne.w	801c09a <_strtod_l+0x72>
 801c31e:	2b00      	cmp	r3, #0
 801c320:	f47f aed6 	bne.w	801c0d0 <_strtod_l+0xa8>
 801c324:	2a69      	cmp	r2, #105	@ 0x69
 801c326:	d028      	beq.n	801c37a <_strtod_l+0x352>
 801c328:	dc25      	bgt.n	801c376 <_strtod_l+0x34e>
 801c32a:	2a49      	cmp	r2, #73	@ 0x49
 801c32c:	d025      	beq.n	801c37a <_strtod_l+0x352>
 801c32e:	2a4e      	cmp	r2, #78	@ 0x4e
 801c330:	f47f aece 	bne.w	801c0d0 <_strtod_l+0xa8>
 801c334:	499b      	ldr	r1, [pc, #620]	@ (801c5a4 <_strtod_l+0x57c>)
 801c336:	a819      	add	r0, sp, #100	@ 0x64
 801c338:	f001 faea 	bl	801d910 <__match>
 801c33c:	2800      	cmp	r0, #0
 801c33e:	f43f aec7 	beq.w	801c0d0 <_strtod_l+0xa8>
 801c342:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c344:	781b      	ldrb	r3, [r3, #0]
 801c346:	2b28      	cmp	r3, #40	@ 0x28
 801c348:	d12e      	bne.n	801c3a8 <_strtod_l+0x380>
 801c34a:	4997      	ldr	r1, [pc, #604]	@ (801c5a8 <_strtod_l+0x580>)
 801c34c:	aa1c      	add	r2, sp, #112	@ 0x70
 801c34e:	a819      	add	r0, sp, #100	@ 0x64
 801c350:	f001 faf2 	bl	801d938 <__hexnan>
 801c354:	2805      	cmp	r0, #5
 801c356:	d127      	bne.n	801c3a8 <_strtod_l+0x380>
 801c358:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c35a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801c35e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801c362:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801c366:	e698      	b.n	801c09a <_strtod_l+0x72>
 801c368:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801c36a:	fb08 2101 	mla	r1, r8, r1, r2
 801c36e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801c372:	920e      	str	r2, [sp, #56]	@ 0x38
 801c374:	e7b5      	b.n	801c2e2 <_strtod_l+0x2ba>
 801c376:	2a6e      	cmp	r2, #110	@ 0x6e
 801c378:	e7da      	b.n	801c330 <_strtod_l+0x308>
 801c37a:	498c      	ldr	r1, [pc, #560]	@ (801c5ac <_strtod_l+0x584>)
 801c37c:	a819      	add	r0, sp, #100	@ 0x64
 801c37e:	f001 fac7 	bl	801d910 <__match>
 801c382:	2800      	cmp	r0, #0
 801c384:	f43f aea4 	beq.w	801c0d0 <_strtod_l+0xa8>
 801c388:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c38a:	4989      	ldr	r1, [pc, #548]	@ (801c5b0 <_strtod_l+0x588>)
 801c38c:	3b01      	subs	r3, #1
 801c38e:	a819      	add	r0, sp, #100	@ 0x64
 801c390:	9319      	str	r3, [sp, #100]	@ 0x64
 801c392:	f001 fabd 	bl	801d910 <__match>
 801c396:	b910      	cbnz	r0, 801c39e <_strtod_l+0x376>
 801c398:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c39a:	3301      	adds	r3, #1
 801c39c:	9319      	str	r3, [sp, #100]	@ 0x64
 801c39e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801c5c0 <_strtod_l+0x598>
 801c3a2:	f04f 0a00 	mov.w	sl, #0
 801c3a6:	e678      	b.n	801c09a <_strtod_l+0x72>
 801c3a8:	4882      	ldr	r0, [pc, #520]	@ (801c5b4 <_strtod_l+0x58c>)
 801c3aa:	f001 f805 	bl	801d3b8 <nan>
 801c3ae:	ec5b ab10 	vmov	sl, fp, d0
 801c3b2:	e672      	b.n	801c09a <_strtod_l+0x72>
 801c3b4:	eba8 0309 	sub.w	r3, r8, r9
 801c3b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c3ba:	9309      	str	r3, [sp, #36]	@ 0x24
 801c3bc:	2f00      	cmp	r7, #0
 801c3be:	bf08      	it	eq
 801c3c0:	462f      	moveq	r7, r5
 801c3c2:	2d10      	cmp	r5, #16
 801c3c4:	462c      	mov	r4, r5
 801c3c6:	bfa8      	it	ge
 801c3c8:	2410      	movge	r4, #16
 801c3ca:	f7e4 f8ab 	bl	8000524 <__aeabi_ui2d>
 801c3ce:	2d09      	cmp	r5, #9
 801c3d0:	4682      	mov	sl, r0
 801c3d2:	468b      	mov	fp, r1
 801c3d4:	dc13      	bgt.n	801c3fe <_strtod_l+0x3d6>
 801c3d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c3d8:	2b00      	cmp	r3, #0
 801c3da:	f43f ae5e 	beq.w	801c09a <_strtod_l+0x72>
 801c3de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c3e0:	dd78      	ble.n	801c4d4 <_strtod_l+0x4ac>
 801c3e2:	2b16      	cmp	r3, #22
 801c3e4:	dc5f      	bgt.n	801c4a6 <_strtod_l+0x47e>
 801c3e6:	4974      	ldr	r1, [pc, #464]	@ (801c5b8 <_strtod_l+0x590>)
 801c3e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c3ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c3f0:	4652      	mov	r2, sl
 801c3f2:	465b      	mov	r3, fp
 801c3f4:	f7e4 f910 	bl	8000618 <__aeabi_dmul>
 801c3f8:	4682      	mov	sl, r0
 801c3fa:	468b      	mov	fp, r1
 801c3fc:	e64d      	b.n	801c09a <_strtod_l+0x72>
 801c3fe:	4b6e      	ldr	r3, [pc, #440]	@ (801c5b8 <_strtod_l+0x590>)
 801c400:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c404:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801c408:	f7e4 f906 	bl	8000618 <__aeabi_dmul>
 801c40c:	4682      	mov	sl, r0
 801c40e:	9808      	ldr	r0, [sp, #32]
 801c410:	468b      	mov	fp, r1
 801c412:	f7e4 f887 	bl	8000524 <__aeabi_ui2d>
 801c416:	4602      	mov	r2, r0
 801c418:	460b      	mov	r3, r1
 801c41a:	4650      	mov	r0, sl
 801c41c:	4659      	mov	r1, fp
 801c41e:	f7e3 ff45 	bl	80002ac <__adddf3>
 801c422:	2d0f      	cmp	r5, #15
 801c424:	4682      	mov	sl, r0
 801c426:	468b      	mov	fp, r1
 801c428:	ddd5      	ble.n	801c3d6 <_strtod_l+0x3ae>
 801c42a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c42c:	1b2c      	subs	r4, r5, r4
 801c42e:	441c      	add	r4, r3
 801c430:	2c00      	cmp	r4, #0
 801c432:	f340 8096 	ble.w	801c562 <_strtod_l+0x53a>
 801c436:	f014 030f 	ands.w	r3, r4, #15
 801c43a:	d00a      	beq.n	801c452 <_strtod_l+0x42a>
 801c43c:	495e      	ldr	r1, [pc, #376]	@ (801c5b8 <_strtod_l+0x590>)
 801c43e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c442:	4652      	mov	r2, sl
 801c444:	465b      	mov	r3, fp
 801c446:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c44a:	f7e4 f8e5 	bl	8000618 <__aeabi_dmul>
 801c44e:	4682      	mov	sl, r0
 801c450:	468b      	mov	fp, r1
 801c452:	f034 040f 	bics.w	r4, r4, #15
 801c456:	d073      	beq.n	801c540 <_strtod_l+0x518>
 801c458:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801c45c:	dd48      	ble.n	801c4f0 <_strtod_l+0x4c8>
 801c45e:	2400      	movs	r4, #0
 801c460:	46a0      	mov	r8, r4
 801c462:	940a      	str	r4, [sp, #40]	@ 0x28
 801c464:	46a1      	mov	r9, r4
 801c466:	9a05      	ldr	r2, [sp, #20]
 801c468:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801c5c0 <_strtod_l+0x598>
 801c46c:	2322      	movs	r3, #34	@ 0x22
 801c46e:	6013      	str	r3, [r2, #0]
 801c470:	f04f 0a00 	mov.w	sl, #0
 801c474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c476:	2b00      	cmp	r3, #0
 801c478:	f43f ae0f 	beq.w	801c09a <_strtod_l+0x72>
 801c47c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c47e:	9805      	ldr	r0, [sp, #20]
 801c480:	f7ff f940 	bl	801b704 <_Bfree>
 801c484:	9805      	ldr	r0, [sp, #20]
 801c486:	4649      	mov	r1, r9
 801c488:	f7ff f93c 	bl	801b704 <_Bfree>
 801c48c:	9805      	ldr	r0, [sp, #20]
 801c48e:	4641      	mov	r1, r8
 801c490:	f7ff f938 	bl	801b704 <_Bfree>
 801c494:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c496:	9805      	ldr	r0, [sp, #20]
 801c498:	f7ff f934 	bl	801b704 <_Bfree>
 801c49c:	9805      	ldr	r0, [sp, #20]
 801c49e:	4621      	mov	r1, r4
 801c4a0:	f7ff f930 	bl	801b704 <_Bfree>
 801c4a4:	e5f9      	b.n	801c09a <_strtod_l+0x72>
 801c4a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c4a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801c4ac:	4293      	cmp	r3, r2
 801c4ae:	dbbc      	blt.n	801c42a <_strtod_l+0x402>
 801c4b0:	4c41      	ldr	r4, [pc, #260]	@ (801c5b8 <_strtod_l+0x590>)
 801c4b2:	f1c5 050f 	rsb	r5, r5, #15
 801c4b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801c4ba:	4652      	mov	r2, sl
 801c4bc:	465b      	mov	r3, fp
 801c4be:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c4c2:	f7e4 f8a9 	bl	8000618 <__aeabi_dmul>
 801c4c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c4c8:	1b5d      	subs	r5, r3, r5
 801c4ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801c4ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c4d2:	e78f      	b.n	801c3f4 <_strtod_l+0x3cc>
 801c4d4:	3316      	adds	r3, #22
 801c4d6:	dba8      	blt.n	801c42a <_strtod_l+0x402>
 801c4d8:	4b37      	ldr	r3, [pc, #220]	@ (801c5b8 <_strtod_l+0x590>)
 801c4da:	eba9 0808 	sub.w	r8, r9, r8
 801c4de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801c4e2:	e9d8 2300 	ldrd	r2, r3, [r8]
 801c4e6:	4650      	mov	r0, sl
 801c4e8:	4659      	mov	r1, fp
 801c4ea:	f7e4 f9bf 	bl	800086c <__aeabi_ddiv>
 801c4ee:	e783      	b.n	801c3f8 <_strtod_l+0x3d0>
 801c4f0:	4b32      	ldr	r3, [pc, #200]	@ (801c5bc <_strtod_l+0x594>)
 801c4f2:	9308      	str	r3, [sp, #32]
 801c4f4:	2300      	movs	r3, #0
 801c4f6:	1124      	asrs	r4, r4, #4
 801c4f8:	4650      	mov	r0, sl
 801c4fa:	4659      	mov	r1, fp
 801c4fc:	461e      	mov	r6, r3
 801c4fe:	2c01      	cmp	r4, #1
 801c500:	dc21      	bgt.n	801c546 <_strtod_l+0x51e>
 801c502:	b10b      	cbz	r3, 801c508 <_strtod_l+0x4e0>
 801c504:	4682      	mov	sl, r0
 801c506:	468b      	mov	fp, r1
 801c508:	492c      	ldr	r1, [pc, #176]	@ (801c5bc <_strtod_l+0x594>)
 801c50a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801c50e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801c512:	4652      	mov	r2, sl
 801c514:	465b      	mov	r3, fp
 801c516:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c51a:	f7e4 f87d 	bl	8000618 <__aeabi_dmul>
 801c51e:	4b28      	ldr	r3, [pc, #160]	@ (801c5c0 <_strtod_l+0x598>)
 801c520:	460a      	mov	r2, r1
 801c522:	400b      	ands	r3, r1
 801c524:	4927      	ldr	r1, [pc, #156]	@ (801c5c4 <_strtod_l+0x59c>)
 801c526:	428b      	cmp	r3, r1
 801c528:	4682      	mov	sl, r0
 801c52a:	d898      	bhi.n	801c45e <_strtod_l+0x436>
 801c52c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801c530:	428b      	cmp	r3, r1
 801c532:	bf86      	itte	hi
 801c534:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801c5c8 <_strtod_l+0x5a0>
 801c538:	f04f 3aff 	movhi.w	sl, #4294967295
 801c53c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801c540:	2300      	movs	r3, #0
 801c542:	9308      	str	r3, [sp, #32]
 801c544:	e07a      	b.n	801c63c <_strtod_l+0x614>
 801c546:	07e2      	lsls	r2, r4, #31
 801c548:	d505      	bpl.n	801c556 <_strtod_l+0x52e>
 801c54a:	9b08      	ldr	r3, [sp, #32]
 801c54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c550:	f7e4 f862 	bl	8000618 <__aeabi_dmul>
 801c554:	2301      	movs	r3, #1
 801c556:	9a08      	ldr	r2, [sp, #32]
 801c558:	3208      	adds	r2, #8
 801c55a:	3601      	adds	r6, #1
 801c55c:	1064      	asrs	r4, r4, #1
 801c55e:	9208      	str	r2, [sp, #32]
 801c560:	e7cd      	b.n	801c4fe <_strtod_l+0x4d6>
 801c562:	d0ed      	beq.n	801c540 <_strtod_l+0x518>
 801c564:	4264      	negs	r4, r4
 801c566:	f014 020f 	ands.w	r2, r4, #15
 801c56a:	d00a      	beq.n	801c582 <_strtod_l+0x55a>
 801c56c:	4b12      	ldr	r3, [pc, #72]	@ (801c5b8 <_strtod_l+0x590>)
 801c56e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c572:	4650      	mov	r0, sl
 801c574:	4659      	mov	r1, fp
 801c576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c57a:	f7e4 f977 	bl	800086c <__aeabi_ddiv>
 801c57e:	4682      	mov	sl, r0
 801c580:	468b      	mov	fp, r1
 801c582:	1124      	asrs	r4, r4, #4
 801c584:	d0dc      	beq.n	801c540 <_strtod_l+0x518>
 801c586:	2c1f      	cmp	r4, #31
 801c588:	dd20      	ble.n	801c5cc <_strtod_l+0x5a4>
 801c58a:	2400      	movs	r4, #0
 801c58c:	46a0      	mov	r8, r4
 801c58e:	940a      	str	r4, [sp, #40]	@ 0x28
 801c590:	46a1      	mov	r9, r4
 801c592:	9a05      	ldr	r2, [sp, #20]
 801c594:	2322      	movs	r3, #34	@ 0x22
 801c596:	f04f 0a00 	mov.w	sl, #0
 801c59a:	f04f 0b00 	mov.w	fp, #0
 801c59e:	6013      	str	r3, [r2, #0]
 801c5a0:	e768      	b.n	801c474 <_strtod_l+0x44c>
 801c5a2:	bf00      	nop
 801c5a4:	0802189f 	.word	0x0802189f
 801c5a8:	08021adc 	.word	0x08021adc
 801c5ac:	08021897 	.word	0x08021897
 801c5b0:	0802190a 	.word	0x0802190a
 801c5b4:	08021906 	.word	0x08021906
 801c5b8:	08021a10 	.word	0x08021a10
 801c5bc:	080219e8 	.word	0x080219e8
 801c5c0:	7ff00000 	.word	0x7ff00000
 801c5c4:	7ca00000 	.word	0x7ca00000
 801c5c8:	7fefffff 	.word	0x7fefffff
 801c5cc:	f014 0310 	ands.w	r3, r4, #16
 801c5d0:	bf18      	it	ne
 801c5d2:	236a      	movne	r3, #106	@ 0x6a
 801c5d4:	4ea9      	ldr	r6, [pc, #676]	@ (801c87c <_strtod_l+0x854>)
 801c5d6:	9308      	str	r3, [sp, #32]
 801c5d8:	4650      	mov	r0, sl
 801c5da:	4659      	mov	r1, fp
 801c5dc:	2300      	movs	r3, #0
 801c5de:	07e2      	lsls	r2, r4, #31
 801c5e0:	d504      	bpl.n	801c5ec <_strtod_l+0x5c4>
 801c5e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c5e6:	f7e4 f817 	bl	8000618 <__aeabi_dmul>
 801c5ea:	2301      	movs	r3, #1
 801c5ec:	1064      	asrs	r4, r4, #1
 801c5ee:	f106 0608 	add.w	r6, r6, #8
 801c5f2:	d1f4      	bne.n	801c5de <_strtod_l+0x5b6>
 801c5f4:	b10b      	cbz	r3, 801c5fa <_strtod_l+0x5d2>
 801c5f6:	4682      	mov	sl, r0
 801c5f8:	468b      	mov	fp, r1
 801c5fa:	9b08      	ldr	r3, [sp, #32]
 801c5fc:	b1b3      	cbz	r3, 801c62c <_strtod_l+0x604>
 801c5fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801c602:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801c606:	2b00      	cmp	r3, #0
 801c608:	4659      	mov	r1, fp
 801c60a:	dd0f      	ble.n	801c62c <_strtod_l+0x604>
 801c60c:	2b1f      	cmp	r3, #31
 801c60e:	dd55      	ble.n	801c6bc <_strtod_l+0x694>
 801c610:	2b34      	cmp	r3, #52	@ 0x34
 801c612:	bfde      	ittt	le
 801c614:	f04f 33ff 	movle.w	r3, #4294967295
 801c618:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801c61c:	4093      	lslle	r3, r2
 801c61e:	f04f 0a00 	mov.w	sl, #0
 801c622:	bfcc      	ite	gt
 801c624:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801c628:	ea03 0b01 	andle.w	fp, r3, r1
 801c62c:	2200      	movs	r2, #0
 801c62e:	2300      	movs	r3, #0
 801c630:	4650      	mov	r0, sl
 801c632:	4659      	mov	r1, fp
 801c634:	f7e4 fa58 	bl	8000ae8 <__aeabi_dcmpeq>
 801c638:	2800      	cmp	r0, #0
 801c63a:	d1a6      	bne.n	801c58a <_strtod_l+0x562>
 801c63c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c63e:	9300      	str	r3, [sp, #0]
 801c640:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c642:	9805      	ldr	r0, [sp, #20]
 801c644:	462b      	mov	r3, r5
 801c646:	463a      	mov	r2, r7
 801c648:	f7ff f8c4 	bl	801b7d4 <__s2b>
 801c64c:	900a      	str	r0, [sp, #40]	@ 0x28
 801c64e:	2800      	cmp	r0, #0
 801c650:	f43f af05 	beq.w	801c45e <_strtod_l+0x436>
 801c654:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c656:	2a00      	cmp	r2, #0
 801c658:	eba9 0308 	sub.w	r3, r9, r8
 801c65c:	bfa8      	it	ge
 801c65e:	2300      	movge	r3, #0
 801c660:	9312      	str	r3, [sp, #72]	@ 0x48
 801c662:	2400      	movs	r4, #0
 801c664:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801c668:	9316      	str	r3, [sp, #88]	@ 0x58
 801c66a:	46a0      	mov	r8, r4
 801c66c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c66e:	9805      	ldr	r0, [sp, #20]
 801c670:	6859      	ldr	r1, [r3, #4]
 801c672:	f7ff f807 	bl	801b684 <_Balloc>
 801c676:	4681      	mov	r9, r0
 801c678:	2800      	cmp	r0, #0
 801c67a:	f43f aef4 	beq.w	801c466 <_strtod_l+0x43e>
 801c67e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c680:	691a      	ldr	r2, [r3, #16]
 801c682:	3202      	adds	r2, #2
 801c684:	f103 010c 	add.w	r1, r3, #12
 801c688:	0092      	lsls	r2, r2, #2
 801c68a:	300c      	adds	r0, #12
 801c68c:	f7fe f931 	bl	801a8f2 <memcpy>
 801c690:	ec4b ab10 	vmov	d0, sl, fp
 801c694:	9805      	ldr	r0, [sp, #20]
 801c696:	aa1c      	add	r2, sp, #112	@ 0x70
 801c698:	a91b      	add	r1, sp, #108	@ 0x6c
 801c69a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801c69e:	f7ff fbd5 	bl	801be4c <__d2b>
 801c6a2:	901a      	str	r0, [sp, #104]	@ 0x68
 801c6a4:	2800      	cmp	r0, #0
 801c6a6:	f43f aede 	beq.w	801c466 <_strtod_l+0x43e>
 801c6aa:	9805      	ldr	r0, [sp, #20]
 801c6ac:	2101      	movs	r1, #1
 801c6ae:	f7ff f927 	bl	801b900 <__i2b>
 801c6b2:	4680      	mov	r8, r0
 801c6b4:	b948      	cbnz	r0, 801c6ca <_strtod_l+0x6a2>
 801c6b6:	f04f 0800 	mov.w	r8, #0
 801c6ba:	e6d4      	b.n	801c466 <_strtod_l+0x43e>
 801c6bc:	f04f 32ff 	mov.w	r2, #4294967295
 801c6c0:	fa02 f303 	lsl.w	r3, r2, r3
 801c6c4:	ea03 0a0a 	and.w	sl, r3, sl
 801c6c8:	e7b0      	b.n	801c62c <_strtod_l+0x604>
 801c6ca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801c6cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801c6ce:	2d00      	cmp	r5, #0
 801c6d0:	bfab      	itete	ge
 801c6d2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801c6d4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801c6d6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801c6d8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801c6da:	bfac      	ite	ge
 801c6dc:	18ef      	addge	r7, r5, r3
 801c6de:	1b5e      	sublt	r6, r3, r5
 801c6e0:	9b08      	ldr	r3, [sp, #32]
 801c6e2:	1aed      	subs	r5, r5, r3
 801c6e4:	4415      	add	r5, r2
 801c6e6:	4b66      	ldr	r3, [pc, #408]	@ (801c880 <_strtod_l+0x858>)
 801c6e8:	3d01      	subs	r5, #1
 801c6ea:	429d      	cmp	r5, r3
 801c6ec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801c6f0:	da50      	bge.n	801c794 <_strtod_l+0x76c>
 801c6f2:	1b5b      	subs	r3, r3, r5
 801c6f4:	2b1f      	cmp	r3, #31
 801c6f6:	eba2 0203 	sub.w	r2, r2, r3
 801c6fa:	f04f 0101 	mov.w	r1, #1
 801c6fe:	dc3d      	bgt.n	801c77c <_strtod_l+0x754>
 801c700:	fa01 f303 	lsl.w	r3, r1, r3
 801c704:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c706:	2300      	movs	r3, #0
 801c708:	9310      	str	r3, [sp, #64]	@ 0x40
 801c70a:	18bd      	adds	r5, r7, r2
 801c70c:	9b08      	ldr	r3, [sp, #32]
 801c70e:	42af      	cmp	r7, r5
 801c710:	4416      	add	r6, r2
 801c712:	441e      	add	r6, r3
 801c714:	463b      	mov	r3, r7
 801c716:	bfa8      	it	ge
 801c718:	462b      	movge	r3, r5
 801c71a:	42b3      	cmp	r3, r6
 801c71c:	bfa8      	it	ge
 801c71e:	4633      	movge	r3, r6
 801c720:	2b00      	cmp	r3, #0
 801c722:	bfc2      	ittt	gt
 801c724:	1aed      	subgt	r5, r5, r3
 801c726:	1af6      	subgt	r6, r6, r3
 801c728:	1aff      	subgt	r7, r7, r3
 801c72a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c72c:	2b00      	cmp	r3, #0
 801c72e:	dd16      	ble.n	801c75e <_strtod_l+0x736>
 801c730:	4641      	mov	r1, r8
 801c732:	9805      	ldr	r0, [sp, #20]
 801c734:	461a      	mov	r2, r3
 801c736:	f7ff f9a3 	bl	801ba80 <__pow5mult>
 801c73a:	4680      	mov	r8, r0
 801c73c:	2800      	cmp	r0, #0
 801c73e:	d0ba      	beq.n	801c6b6 <_strtod_l+0x68e>
 801c740:	4601      	mov	r1, r0
 801c742:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c744:	9805      	ldr	r0, [sp, #20]
 801c746:	f7ff f8f1 	bl	801b92c <__multiply>
 801c74a:	900e      	str	r0, [sp, #56]	@ 0x38
 801c74c:	2800      	cmp	r0, #0
 801c74e:	f43f ae8a 	beq.w	801c466 <_strtod_l+0x43e>
 801c752:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c754:	9805      	ldr	r0, [sp, #20]
 801c756:	f7fe ffd5 	bl	801b704 <_Bfree>
 801c75a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c75c:	931a      	str	r3, [sp, #104]	@ 0x68
 801c75e:	2d00      	cmp	r5, #0
 801c760:	dc1d      	bgt.n	801c79e <_strtod_l+0x776>
 801c762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c764:	2b00      	cmp	r3, #0
 801c766:	dd23      	ble.n	801c7b0 <_strtod_l+0x788>
 801c768:	4649      	mov	r1, r9
 801c76a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c76c:	9805      	ldr	r0, [sp, #20]
 801c76e:	f7ff f987 	bl	801ba80 <__pow5mult>
 801c772:	4681      	mov	r9, r0
 801c774:	b9e0      	cbnz	r0, 801c7b0 <_strtod_l+0x788>
 801c776:	f04f 0900 	mov.w	r9, #0
 801c77a:	e674      	b.n	801c466 <_strtod_l+0x43e>
 801c77c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801c780:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801c784:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801c788:	35e2      	adds	r5, #226	@ 0xe2
 801c78a:	fa01 f305 	lsl.w	r3, r1, r5
 801c78e:	9310      	str	r3, [sp, #64]	@ 0x40
 801c790:	9113      	str	r1, [sp, #76]	@ 0x4c
 801c792:	e7ba      	b.n	801c70a <_strtod_l+0x6e2>
 801c794:	2300      	movs	r3, #0
 801c796:	9310      	str	r3, [sp, #64]	@ 0x40
 801c798:	2301      	movs	r3, #1
 801c79a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c79c:	e7b5      	b.n	801c70a <_strtod_l+0x6e2>
 801c79e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c7a0:	9805      	ldr	r0, [sp, #20]
 801c7a2:	462a      	mov	r2, r5
 801c7a4:	f7ff f9c6 	bl	801bb34 <__lshift>
 801c7a8:	901a      	str	r0, [sp, #104]	@ 0x68
 801c7aa:	2800      	cmp	r0, #0
 801c7ac:	d1d9      	bne.n	801c762 <_strtod_l+0x73a>
 801c7ae:	e65a      	b.n	801c466 <_strtod_l+0x43e>
 801c7b0:	2e00      	cmp	r6, #0
 801c7b2:	dd07      	ble.n	801c7c4 <_strtod_l+0x79c>
 801c7b4:	4649      	mov	r1, r9
 801c7b6:	9805      	ldr	r0, [sp, #20]
 801c7b8:	4632      	mov	r2, r6
 801c7ba:	f7ff f9bb 	bl	801bb34 <__lshift>
 801c7be:	4681      	mov	r9, r0
 801c7c0:	2800      	cmp	r0, #0
 801c7c2:	d0d8      	beq.n	801c776 <_strtod_l+0x74e>
 801c7c4:	2f00      	cmp	r7, #0
 801c7c6:	dd08      	ble.n	801c7da <_strtod_l+0x7b2>
 801c7c8:	4641      	mov	r1, r8
 801c7ca:	9805      	ldr	r0, [sp, #20]
 801c7cc:	463a      	mov	r2, r7
 801c7ce:	f7ff f9b1 	bl	801bb34 <__lshift>
 801c7d2:	4680      	mov	r8, r0
 801c7d4:	2800      	cmp	r0, #0
 801c7d6:	f43f ae46 	beq.w	801c466 <_strtod_l+0x43e>
 801c7da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c7dc:	9805      	ldr	r0, [sp, #20]
 801c7de:	464a      	mov	r2, r9
 801c7e0:	f7ff fa30 	bl	801bc44 <__mdiff>
 801c7e4:	4604      	mov	r4, r0
 801c7e6:	2800      	cmp	r0, #0
 801c7e8:	f43f ae3d 	beq.w	801c466 <_strtod_l+0x43e>
 801c7ec:	68c3      	ldr	r3, [r0, #12]
 801c7ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c7f0:	2300      	movs	r3, #0
 801c7f2:	60c3      	str	r3, [r0, #12]
 801c7f4:	4641      	mov	r1, r8
 801c7f6:	f7ff fa09 	bl	801bc0c <__mcmp>
 801c7fa:	2800      	cmp	r0, #0
 801c7fc:	da46      	bge.n	801c88c <_strtod_l+0x864>
 801c7fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c800:	ea53 030a 	orrs.w	r3, r3, sl
 801c804:	d16c      	bne.n	801c8e0 <_strtod_l+0x8b8>
 801c806:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d168      	bne.n	801c8e0 <_strtod_l+0x8b8>
 801c80e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c812:	0d1b      	lsrs	r3, r3, #20
 801c814:	051b      	lsls	r3, r3, #20
 801c816:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801c81a:	d961      	bls.n	801c8e0 <_strtod_l+0x8b8>
 801c81c:	6963      	ldr	r3, [r4, #20]
 801c81e:	b913      	cbnz	r3, 801c826 <_strtod_l+0x7fe>
 801c820:	6923      	ldr	r3, [r4, #16]
 801c822:	2b01      	cmp	r3, #1
 801c824:	dd5c      	ble.n	801c8e0 <_strtod_l+0x8b8>
 801c826:	4621      	mov	r1, r4
 801c828:	2201      	movs	r2, #1
 801c82a:	9805      	ldr	r0, [sp, #20]
 801c82c:	f7ff f982 	bl	801bb34 <__lshift>
 801c830:	4641      	mov	r1, r8
 801c832:	4604      	mov	r4, r0
 801c834:	f7ff f9ea 	bl	801bc0c <__mcmp>
 801c838:	2800      	cmp	r0, #0
 801c83a:	dd51      	ble.n	801c8e0 <_strtod_l+0x8b8>
 801c83c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c840:	9a08      	ldr	r2, [sp, #32]
 801c842:	0d1b      	lsrs	r3, r3, #20
 801c844:	051b      	lsls	r3, r3, #20
 801c846:	2a00      	cmp	r2, #0
 801c848:	d06b      	beq.n	801c922 <_strtod_l+0x8fa>
 801c84a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801c84e:	d868      	bhi.n	801c922 <_strtod_l+0x8fa>
 801c850:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801c854:	f67f ae9d 	bls.w	801c592 <_strtod_l+0x56a>
 801c858:	4b0a      	ldr	r3, [pc, #40]	@ (801c884 <_strtod_l+0x85c>)
 801c85a:	4650      	mov	r0, sl
 801c85c:	4659      	mov	r1, fp
 801c85e:	2200      	movs	r2, #0
 801c860:	f7e3 feda 	bl	8000618 <__aeabi_dmul>
 801c864:	4b08      	ldr	r3, [pc, #32]	@ (801c888 <_strtod_l+0x860>)
 801c866:	400b      	ands	r3, r1
 801c868:	4682      	mov	sl, r0
 801c86a:	468b      	mov	fp, r1
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	f47f ae05 	bne.w	801c47c <_strtod_l+0x454>
 801c872:	9a05      	ldr	r2, [sp, #20]
 801c874:	2322      	movs	r3, #34	@ 0x22
 801c876:	6013      	str	r3, [r2, #0]
 801c878:	e600      	b.n	801c47c <_strtod_l+0x454>
 801c87a:	bf00      	nop
 801c87c:	08021b08 	.word	0x08021b08
 801c880:	fffffc02 	.word	0xfffffc02
 801c884:	39500000 	.word	0x39500000
 801c888:	7ff00000 	.word	0x7ff00000
 801c88c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801c890:	d165      	bne.n	801c95e <_strtod_l+0x936>
 801c892:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c894:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c898:	b35a      	cbz	r2, 801c8f2 <_strtod_l+0x8ca>
 801c89a:	4a9f      	ldr	r2, [pc, #636]	@ (801cb18 <_strtod_l+0xaf0>)
 801c89c:	4293      	cmp	r3, r2
 801c89e:	d12b      	bne.n	801c8f8 <_strtod_l+0x8d0>
 801c8a0:	9b08      	ldr	r3, [sp, #32]
 801c8a2:	4651      	mov	r1, sl
 801c8a4:	b303      	cbz	r3, 801c8e8 <_strtod_l+0x8c0>
 801c8a6:	4b9d      	ldr	r3, [pc, #628]	@ (801cb1c <_strtod_l+0xaf4>)
 801c8a8:	465a      	mov	r2, fp
 801c8aa:	4013      	ands	r3, r2
 801c8ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801c8b0:	f04f 32ff 	mov.w	r2, #4294967295
 801c8b4:	d81b      	bhi.n	801c8ee <_strtod_l+0x8c6>
 801c8b6:	0d1b      	lsrs	r3, r3, #20
 801c8b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801c8bc:	fa02 f303 	lsl.w	r3, r2, r3
 801c8c0:	4299      	cmp	r1, r3
 801c8c2:	d119      	bne.n	801c8f8 <_strtod_l+0x8d0>
 801c8c4:	4b96      	ldr	r3, [pc, #600]	@ (801cb20 <_strtod_l+0xaf8>)
 801c8c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c8c8:	429a      	cmp	r2, r3
 801c8ca:	d102      	bne.n	801c8d2 <_strtod_l+0x8aa>
 801c8cc:	3101      	adds	r1, #1
 801c8ce:	f43f adca 	beq.w	801c466 <_strtod_l+0x43e>
 801c8d2:	4b92      	ldr	r3, [pc, #584]	@ (801cb1c <_strtod_l+0xaf4>)
 801c8d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c8d6:	401a      	ands	r2, r3
 801c8d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801c8dc:	f04f 0a00 	mov.w	sl, #0
 801c8e0:	9b08      	ldr	r3, [sp, #32]
 801c8e2:	2b00      	cmp	r3, #0
 801c8e4:	d1b8      	bne.n	801c858 <_strtod_l+0x830>
 801c8e6:	e5c9      	b.n	801c47c <_strtod_l+0x454>
 801c8e8:	f04f 33ff 	mov.w	r3, #4294967295
 801c8ec:	e7e8      	b.n	801c8c0 <_strtod_l+0x898>
 801c8ee:	4613      	mov	r3, r2
 801c8f0:	e7e6      	b.n	801c8c0 <_strtod_l+0x898>
 801c8f2:	ea53 030a 	orrs.w	r3, r3, sl
 801c8f6:	d0a1      	beq.n	801c83c <_strtod_l+0x814>
 801c8f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c8fa:	b1db      	cbz	r3, 801c934 <_strtod_l+0x90c>
 801c8fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c8fe:	4213      	tst	r3, r2
 801c900:	d0ee      	beq.n	801c8e0 <_strtod_l+0x8b8>
 801c902:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c904:	9a08      	ldr	r2, [sp, #32]
 801c906:	4650      	mov	r0, sl
 801c908:	4659      	mov	r1, fp
 801c90a:	b1bb      	cbz	r3, 801c93c <_strtod_l+0x914>
 801c90c:	f7ff fb6c 	bl	801bfe8 <sulp>
 801c910:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c914:	ec53 2b10 	vmov	r2, r3, d0
 801c918:	f7e3 fcc8 	bl	80002ac <__adddf3>
 801c91c:	4682      	mov	sl, r0
 801c91e:	468b      	mov	fp, r1
 801c920:	e7de      	b.n	801c8e0 <_strtod_l+0x8b8>
 801c922:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801c926:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801c92a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801c92e:	f04f 3aff 	mov.w	sl, #4294967295
 801c932:	e7d5      	b.n	801c8e0 <_strtod_l+0x8b8>
 801c934:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c936:	ea13 0f0a 	tst.w	r3, sl
 801c93a:	e7e1      	b.n	801c900 <_strtod_l+0x8d8>
 801c93c:	f7ff fb54 	bl	801bfe8 <sulp>
 801c940:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c944:	ec53 2b10 	vmov	r2, r3, d0
 801c948:	f7e3 fcae 	bl	80002a8 <__aeabi_dsub>
 801c94c:	2200      	movs	r2, #0
 801c94e:	2300      	movs	r3, #0
 801c950:	4682      	mov	sl, r0
 801c952:	468b      	mov	fp, r1
 801c954:	f7e4 f8c8 	bl	8000ae8 <__aeabi_dcmpeq>
 801c958:	2800      	cmp	r0, #0
 801c95a:	d0c1      	beq.n	801c8e0 <_strtod_l+0x8b8>
 801c95c:	e619      	b.n	801c592 <_strtod_l+0x56a>
 801c95e:	4641      	mov	r1, r8
 801c960:	4620      	mov	r0, r4
 801c962:	f7ff facb 	bl	801befc <__ratio>
 801c966:	ec57 6b10 	vmov	r6, r7, d0
 801c96a:	2200      	movs	r2, #0
 801c96c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801c970:	4630      	mov	r0, r6
 801c972:	4639      	mov	r1, r7
 801c974:	f7e4 f8cc 	bl	8000b10 <__aeabi_dcmple>
 801c978:	2800      	cmp	r0, #0
 801c97a:	d06f      	beq.n	801ca5c <_strtod_l+0xa34>
 801c97c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c97e:	2b00      	cmp	r3, #0
 801c980:	d17a      	bne.n	801ca78 <_strtod_l+0xa50>
 801c982:	f1ba 0f00 	cmp.w	sl, #0
 801c986:	d158      	bne.n	801ca3a <_strtod_l+0xa12>
 801c988:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c98a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c98e:	2b00      	cmp	r3, #0
 801c990:	d15a      	bne.n	801ca48 <_strtod_l+0xa20>
 801c992:	4b64      	ldr	r3, [pc, #400]	@ (801cb24 <_strtod_l+0xafc>)
 801c994:	2200      	movs	r2, #0
 801c996:	4630      	mov	r0, r6
 801c998:	4639      	mov	r1, r7
 801c99a:	f7e4 f8af 	bl	8000afc <__aeabi_dcmplt>
 801c99e:	2800      	cmp	r0, #0
 801c9a0:	d159      	bne.n	801ca56 <_strtod_l+0xa2e>
 801c9a2:	4630      	mov	r0, r6
 801c9a4:	4639      	mov	r1, r7
 801c9a6:	4b60      	ldr	r3, [pc, #384]	@ (801cb28 <_strtod_l+0xb00>)
 801c9a8:	2200      	movs	r2, #0
 801c9aa:	f7e3 fe35 	bl	8000618 <__aeabi_dmul>
 801c9ae:	4606      	mov	r6, r0
 801c9b0:	460f      	mov	r7, r1
 801c9b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801c9b6:	9606      	str	r6, [sp, #24]
 801c9b8:	9307      	str	r3, [sp, #28]
 801c9ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c9be:	4d57      	ldr	r5, [pc, #348]	@ (801cb1c <_strtod_l+0xaf4>)
 801c9c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801c9c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c9c6:	401d      	ands	r5, r3
 801c9c8:	4b58      	ldr	r3, [pc, #352]	@ (801cb2c <_strtod_l+0xb04>)
 801c9ca:	429d      	cmp	r5, r3
 801c9cc:	f040 80b2 	bne.w	801cb34 <_strtod_l+0xb0c>
 801c9d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c9d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801c9d6:	ec4b ab10 	vmov	d0, sl, fp
 801c9da:	f7ff f9c7 	bl	801bd6c <__ulp>
 801c9de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c9e2:	ec51 0b10 	vmov	r0, r1, d0
 801c9e6:	f7e3 fe17 	bl	8000618 <__aeabi_dmul>
 801c9ea:	4652      	mov	r2, sl
 801c9ec:	465b      	mov	r3, fp
 801c9ee:	f7e3 fc5d 	bl	80002ac <__adddf3>
 801c9f2:	460b      	mov	r3, r1
 801c9f4:	4949      	ldr	r1, [pc, #292]	@ (801cb1c <_strtod_l+0xaf4>)
 801c9f6:	4a4e      	ldr	r2, [pc, #312]	@ (801cb30 <_strtod_l+0xb08>)
 801c9f8:	4019      	ands	r1, r3
 801c9fa:	4291      	cmp	r1, r2
 801c9fc:	4682      	mov	sl, r0
 801c9fe:	d942      	bls.n	801ca86 <_strtod_l+0xa5e>
 801ca00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ca02:	4b47      	ldr	r3, [pc, #284]	@ (801cb20 <_strtod_l+0xaf8>)
 801ca04:	429a      	cmp	r2, r3
 801ca06:	d103      	bne.n	801ca10 <_strtod_l+0x9e8>
 801ca08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ca0a:	3301      	adds	r3, #1
 801ca0c:	f43f ad2b 	beq.w	801c466 <_strtod_l+0x43e>
 801ca10:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801cb20 <_strtod_l+0xaf8>
 801ca14:	f04f 3aff 	mov.w	sl, #4294967295
 801ca18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ca1a:	9805      	ldr	r0, [sp, #20]
 801ca1c:	f7fe fe72 	bl	801b704 <_Bfree>
 801ca20:	9805      	ldr	r0, [sp, #20]
 801ca22:	4649      	mov	r1, r9
 801ca24:	f7fe fe6e 	bl	801b704 <_Bfree>
 801ca28:	9805      	ldr	r0, [sp, #20]
 801ca2a:	4641      	mov	r1, r8
 801ca2c:	f7fe fe6a 	bl	801b704 <_Bfree>
 801ca30:	9805      	ldr	r0, [sp, #20]
 801ca32:	4621      	mov	r1, r4
 801ca34:	f7fe fe66 	bl	801b704 <_Bfree>
 801ca38:	e618      	b.n	801c66c <_strtod_l+0x644>
 801ca3a:	f1ba 0f01 	cmp.w	sl, #1
 801ca3e:	d103      	bne.n	801ca48 <_strtod_l+0xa20>
 801ca40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	f43f ada5 	beq.w	801c592 <_strtod_l+0x56a>
 801ca48:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801caf8 <_strtod_l+0xad0>
 801ca4c:	4f35      	ldr	r7, [pc, #212]	@ (801cb24 <_strtod_l+0xafc>)
 801ca4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ca52:	2600      	movs	r6, #0
 801ca54:	e7b1      	b.n	801c9ba <_strtod_l+0x992>
 801ca56:	4f34      	ldr	r7, [pc, #208]	@ (801cb28 <_strtod_l+0xb00>)
 801ca58:	2600      	movs	r6, #0
 801ca5a:	e7aa      	b.n	801c9b2 <_strtod_l+0x98a>
 801ca5c:	4b32      	ldr	r3, [pc, #200]	@ (801cb28 <_strtod_l+0xb00>)
 801ca5e:	4630      	mov	r0, r6
 801ca60:	4639      	mov	r1, r7
 801ca62:	2200      	movs	r2, #0
 801ca64:	f7e3 fdd8 	bl	8000618 <__aeabi_dmul>
 801ca68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ca6a:	4606      	mov	r6, r0
 801ca6c:	460f      	mov	r7, r1
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d09f      	beq.n	801c9b2 <_strtod_l+0x98a>
 801ca72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801ca76:	e7a0      	b.n	801c9ba <_strtod_l+0x992>
 801ca78:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801cb00 <_strtod_l+0xad8>
 801ca7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ca80:	ec57 6b17 	vmov	r6, r7, d7
 801ca84:	e799      	b.n	801c9ba <_strtod_l+0x992>
 801ca86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801ca8a:	9b08      	ldr	r3, [sp, #32]
 801ca8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	d1c1      	bne.n	801ca18 <_strtod_l+0x9f0>
 801ca94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801ca98:	0d1b      	lsrs	r3, r3, #20
 801ca9a:	051b      	lsls	r3, r3, #20
 801ca9c:	429d      	cmp	r5, r3
 801ca9e:	d1bb      	bne.n	801ca18 <_strtod_l+0x9f0>
 801caa0:	4630      	mov	r0, r6
 801caa2:	4639      	mov	r1, r7
 801caa4:	f7e4 f918 	bl	8000cd8 <__aeabi_d2lz>
 801caa8:	f7e3 fd88 	bl	80005bc <__aeabi_l2d>
 801caac:	4602      	mov	r2, r0
 801caae:	460b      	mov	r3, r1
 801cab0:	4630      	mov	r0, r6
 801cab2:	4639      	mov	r1, r7
 801cab4:	f7e3 fbf8 	bl	80002a8 <__aeabi_dsub>
 801cab8:	460b      	mov	r3, r1
 801caba:	4602      	mov	r2, r0
 801cabc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801cac0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801cac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cac6:	ea46 060a 	orr.w	r6, r6, sl
 801caca:	431e      	orrs	r6, r3
 801cacc:	d06f      	beq.n	801cbae <_strtod_l+0xb86>
 801cace:	a30e      	add	r3, pc, #56	@ (adr r3, 801cb08 <_strtod_l+0xae0>)
 801cad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cad4:	f7e4 f812 	bl	8000afc <__aeabi_dcmplt>
 801cad8:	2800      	cmp	r0, #0
 801cada:	f47f accf 	bne.w	801c47c <_strtod_l+0x454>
 801cade:	a30c      	add	r3, pc, #48	@ (adr r3, 801cb10 <_strtod_l+0xae8>)
 801cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cae4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cae8:	f7e4 f826 	bl	8000b38 <__aeabi_dcmpgt>
 801caec:	2800      	cmp	r0, #0
 801caee:	d093      	beq.n	801ca18 <_strtod_l+0x9f0>
 801caf0:	e4c4      	b.n	801c47c <_strtod_l+0x454>
 801caf2:	bf00      	nop
 801caf4:	f3af 8000 	nop.w
 801caf8:	00000000 	.word	0x00000000
 801cafc:	bff00000 	.word	0xbff00000
 801cb00:	00000000 	.word	0x00000000
 801cb04:	3ff00000 	.word	0x3ff00000
 801cb08:	94a03595 	.word	0x94a03595
 801cb0c:	3fdfffff 	.word	0x3fdfffff
 801cb10:	35afe535 	.word	0x35afe535
 801cb14:	3fe00000 	.word	0x3fe00000
 801cb18:	000fffff 	.word	0x000fffff
 801cb1c:	7ff00000 	.word	0x7ff00000
 801cb20:	7fefffff 	.word	0x7fefffff
 801cb24:	3ff00000 	.word	0x3ff00000
 801cb28:	3fe00000 	.word	0x3fe00000
 801cb2c:	7fe00000 	.word	0x7fe00000
 801cb30:	7c9fffff 	.word	0x7c9fffff
 801cb34:	9b08      	ldr	r3, [sp, #32]
 801cb36:	b323      	cbz	r3, 801cb82 <_strtod_l+0xb5a>
 801cb38:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801cb3c:	d821      	bhi.n	801cb82 <_strtod_l+0xb5a>
 801cb3e:	a328      	add	r3, pc, #160	@ (adr r3, 801cbe0 <_strtod_l+0xbb8>)
 801cb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb44:	4630      	mov	r0, r6
 801cb46:	4639      	mov	r1, r7
 801cb48:	f7e3 ffe2 	bl	8000b10 <__aeabi_dcmple>
 801cb4c:	b1a0      	cbz	r0, 801cb78 <_strtod_l+0xb50>
 801cb4e:	4639      	mov	r1, r7
 801cb50:	4630      	mov	r0, r6
 801cb52:	f7e4 f839 	bl	8000bc8 <__aeabi_d2uiz>
 801cb56:	2801      	cmp	r0, #1
 801cb58:	bf38      	it	cc
 801cb5a:	2001      	movcc	r0, #1
 801cb5c:	f7e3 fce2 	bl	8000524 <__aeabi_ui2d>
 801cb60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cb62:	4606      	mov	r6, r0
 801cb64:	460f      	mov	r7, r1
 801cb66:	b9fb      	cbnz	r3, 801cba8 <_strtod_l+0xb80>
 801cb68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cb6c:	9014      	str	r0, [sp, #80]	@ 0x50
 801cb6e:	9315      	str	r3, [sp, #84]	@ 0x54
 801cb70:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801cb74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801cb78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cb7a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801cb7e:	1b5b      	subs	r3, r3, r5
 801cb80:	9311      	str	r3, [sp, #68]	@ 0x44
 801cb82:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801cb86:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801cb8a:	f7ff f8ef 	bl	801bd6c <__ulp>
 801cb8e:	4650      	mov	r0, sl
 801cb90:	ec53 2b10 	vmov	r2, r3, d0
 801cb94:	4659      	mov	r1, fp
 801cb96:	f7e3 fd3f 	bl	8000618 <__aeabi_dmul>
 801cb9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801cb9e:	f7e3 fb85 	bl	80002ac <__adddf3>
 801cba2:	4682      	mov	sl, r0
 801cba4:	468b      	mov	fp, r1
 801cba6:	e770      	b.n	801ca8a <_strtod_l+0xa62>
 801cba8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801cbac:	e7e0      	b.n	801cb70 <_strtod_l+0xb48>
 801cbae:	a30e      	add	r3, pc, #56	@ (adr r3, 801cbe8 <_strtod_l+0xbc0>)
 801cbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbb4:	f7e3 ffa2 	bl	8000afc <__aeabi_dcmplt>
 801cbb8:	e798      	b.n	801caec <_strtod_l+0xac4>
 801cbba:	2300      	movs	r3, #0
 801cbbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cbbe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801cbc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cbc2:	6013      	str	r3, [r2, #0]
 801cbc4:	f7ff ba6d 	b.w	801c0a2 <_strtod_l+0x7a>
 801cbc8:	2a65      	cmp	r2, #101	@ 0x65
 801cbca:	f43f ab66 	beq.w	801c29a <_strtod_l+0x272>
 801cbce:	2a45      	cmp	r2, #69	@ 0x45
 801cbd0:	f43f ab63 	beq.w	801c29a <_strtod_l+0x272>
 801cbd4:	2301      	movs	r3, #1
 801cbd6:	f7ff bb9e 	b.w	801c316 <_strtod_l+0x2ee>
 801cbda:	bf00      	nop
 801cbdc:	f3af 8000 	nop.w
 801cbe0:	ffc00000 	.word	0xffc00000
 801cbe4:	41dfffff 	.word	0x41dfffff
 801cbe8:	94a03595 	.word	0x94a03595
 801cbec:	3fcfffff 	.word	0x3fcfffff

0801cbf0 <_strtod_r>:
 801cbf0:	4b01      	ldr	r3, [pc, #4]	@ (801cbf8 <_strtod_r+0x8>)
 801cbf2:	f7ff ba19 	b.w	801c028 <_strtod_l>
 801cbf6:	bf00      	nop
 801cbf8:	2000008c 	.word	0x2000008c

0801cbfc <__ssputs_r>:
 801cbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc00:	688e      	ldr	r6, [r1, #8]
 801cc02:	461f      	mov	r7, r3
 801cc04:	42be      	cmp	r6, r7
 801cc06:	680b      	ldr	r3, [r1, #0]
 801cc08:	4682      	mov	sl, r0
 801cc0a:	460c      	mov	r4, r1
 801cc0c:	4690      	mov	r8, r2
 801cc0e:	d82d      	bhi.n	801cc6c <__ssputs_r+0x70>
 801cc10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cc14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801cc18:	d026      	beq.n	801cc68 <__ssputs_r+0x6c>
 801cc1a:	6965      	ldr	r5, [r4, #20]
 801cc1c:	6909      	ldr	r1, [r1, #16]
 801cc1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cc22:	eba3 0901 	sub.w	r9, r3, r1
 801cc26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cc2a:	1c7b      	adds	r3, r7, #1
 801cc2c:	444b      	add	r3, r9
 801cc2e:	106d      	asrs	r5, r5, #1
 801cc30:	429d      	cmp	r5, r3
 801cc32:	bf38      	it	cc
 801cc34:	461d      	movcc	r5, r3
 801cc36:	0553      	lsls	r3, r2, #21
 801cc38:	d527      	bpl.n	801cc8a <__ssputs_r+0x8e>
 801cc3a:	4629      	mov	r1, r5
 801cc3c:	f7fc fb52 	bl	80192e4 <_malloc_r>
 801cc40:	4606      	mov	r6, r0
 801cc42:	b360      	cbz	r0, 801cc9e <__ssputs_r+0xa2>
 801cc44:	6921      	ldr	r1, [r4, #16]
 801cc46:	464a      	mov	r2, r9
 801cc48:	f7fd fe53 	bl	801a8f2 <memcpy>
 801cc4c:	89a3      	ldrh	r3, [r4, #12]
 801cc4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801cc52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cc56:	81a3      	strh	r3, [r4, #12]
 801cc58:	6126      	str	r6, [r4, #16]
 801cc5a:	6165      	str	r5, [r4, #20]
 801cc5c:	444e      	add	r6, r9
 801cc5e:	eba5 0509 	sub.w	r5, r5, r9
 801cc62:	6026      	str	r6, [r4, #0]
 801cc64:	60a5      	str	r5, [r4, #8]
 801cc66:	463e      	mov	r6, r7
 801cc68:	42be      	cmp	r6, r7
 801cc6a:	d900      	bls.n	801cc6e <__ssputs_r+0x72>
 801cc6c:	463e      	mov	r6, r7
 801cc6e:	6820      	ldr	r0, [r4, #0]
 801cc70:	4632      	mov	r2, r6
 801cc72:	4641      	mov	r1, r8
 801cc74:	f7fd fd2c 	bl	801a6d0 <memmove>
 801cc78:	68a3      	ldr	r3, [r4, #8]
 801cc7a:	1b9b      	subs	r3, r3, r6
 801cc7c:	60a3      	str	r3, [r4, #8]
 801cc7e:	6823      	ldr	r3, [r4, #0]
 801cc80:	4433      	add	r3, r6
 801cc82:	6023      	str	r3, [r4, #0]
 801cc84:	2000      	movs	r0, #0
 801cc86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc8a:	462a      	mov	r2, r5
 801cc8c:	f000 ff01 	bl	801da92 <_realloc_r>
 801cc90:	4606      	mov	r6, r0
 801cc92:	2800      	cmp	r0, #0
 801cc94:	d1e0      	bne.n	801cc58 <__ssputs_r+0x5c>
 801cc96:	6921      	ldr	r1, [r4, #16]
 801cc98:	4650      	mov	r0, sl
 801cc9a:	f7fe fca9 	bl	801b5f0 <_free_r>
 801cc9e:	230c      	movs	r3, #12
 801cca0:	f8ca 3000 	str.w	r3, [sl]
 801cca4:	89a3      	ldrh	r3, [r4, #12]
 801cca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ccaa:	81a3      	strh	r3, [r4, #12]
 801ccac:	f04f 30ff 	mov.w	r0, #4294967295
 801ccb0:	e7e9      	b.n	801cc86 <__ssputs_r+0x8a>
	...

0801ccb4 <_svfiprintf_r>:
 801ccb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccb8:	4698      	mov	r8, r3
 801ccba:	898b      	ldrh	r3, [r1, #12]
 801ccbc:	061b      	lsls	r3, r3, #24
 801ccbe:	b09d      	sub	sp, #116	@ 0x74
 801ccc0:	4607      	mov	r7, r0
 801ccc2:	460d      	mov	r5, r1
 801ccc4:	4614      	mov	r4, r2
 801ccc6:	d510      	bpl.n	801ccea <_svfiprintf_r+0x36>
 801ccc8:	690b      	ldr	r3, [r1, #16]
 801ccca:	b973      	cbnz	r3, 801ccea <_svfiprintf_r+0x36>
 801cccc:	2140      	movs	r1, #64	@ 0x40
 801ccce:	f7fc fb09 	bl	80192e4 <_malloc_r>
 801ccd2:	6028      	str	r0, [r5, #0]
 801ccd4:	6128      	str	r0, [r5, #16]
 801ccd6:	b930      	cbnz	r0, 801cce6 <_svfiprintf_r+0x32>
 801ccd8:	230c      	movs	r3, #12
 801ccda:	603b      	str	r3, [r7, #0]
 801ccdc:	f04f 30ff 	mov.w	r0, #4294967295
 801cce0:	b01d      	add	sp, #116	@ 0x74
 801cce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cce6:	2340      	movs	r3, #64	@ 0x40
 801cce8:	616b      	str	r3, [r5, #20]
 801ccea:	2300      	movs	r3, #0
 801ccec:	9309      	str	r3, [sp, #36]	@ 0x24
 801ccee:	2320      	movs	r3, #32
 801ccf0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ccf4:	f8cd 800c 	str.w	r8, [sp, #12]
 801ccf8:	2330      	movs	r3, #48	@ 0x30
 801ccfa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801ce98 <_svfiprintf_r+0x1e4>
 801ccfe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801cd02:	f04f 0901 	mov.w	r9, #1
 801cd06:	4623      	mov	r3, r4
 801cd08:	469a      	mov	sl, r3
 801cd0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cd0e:	b10a      	cbz	r2, 801cd14 <_svfiprintf_r+0x60>
 801cd10:	2a25      	cmp	r2, #37	@ 0x25
 801cd12:	d1f9      	bne.n	801cd08 <_svfiprintf_r+0x54>
 801cd14:	ebba 0b04 	subs.w	fp, sl, r4
 801cd18:	d00b      	beq.n	801cd32 <_svfiprintf_r+0x7e>
 801cd1a:	465b      	mov	r3, fp
 801cd1c:	4622      	mov	r2, r4
 801cd1e:	4629      	mov	r1, r5
 801cd20:	4638      	mov	r0, r7
 801cd22:	f7ff ff6b 	bl	801cbfc <__ssputs_r>
 801cd26:	3001      	adds	r0, #1
 801cd28:	f000 80a7 	beq.w	801ce7a <_svfiprintf_r+0x1c6>
 801cd2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cd2e:	445a      	add	r2, fp
 801cd30:	9209      	str	r2, [sp, #36]	@ 0x24
 801cd32:	f89a 3000 	ldrb.w	r3, [sl]
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	f000 809f 	beq.w	801ce7a <_svfiprintf_r+0x1c6>
 801cd3c:	2300      	movs	r3, #0
 801cd3e:	f04f 32ff 	mov.w	r2, #4294967295
 801cd42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cd46:	f10a 0a01 	add.w	sl, sl, #1
 801cd4a:	9304      	str	r3, [sp, #16]
 801cd4c:	9307      	str	r3, [sp, #28]
 801cd4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801cd52:	931a      	str	r3, [sp, #104]	@ 0x68
 801cd54:	4654      	mov	r4, sl
 801cd56:	2205      	movs	r2, #5
 801cd58:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cd5c:	484e      	ldr	r0, [pc, #312]	@ (801ce98 <_svfiprintf_r+0x1e4>)
 801cd5e:	f7e3 fa47 	bl	80001f0 <memchr>
 801cd62:	9a04      	ldr	r2, [sp, #16]
 801cd64:	b9d8      	cbnz	r0, 801cd9e <_svfiprintf_r+0xea>
 801cd66:	06d0      	lsls	r0, r2, #27
 801cd68:	bf44      	itt	mi
 801cd6a:	2320      	movmi	r3, #32
 801cd6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cd70:	0711      	lsls	r1, r2, #28
 801cd72:	bf44      	itt	mi
 801cd74:	232b      	movmi	r3, #43	@ 0x2b
 801cd76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cd7a:	f89a 3000 	ldrb.w	r3, [sl]
 801cd7e:	2b2a      	cmp	r3, #42	@ 0x2a
 801cd80:	d015      	beq.n	801cdae <_svfiprintf_r+0xfa>
 801cd82:	9a07      	ldr	r2, [sp, #28]
 801cd84:	4654      	mov	r4, sl
 801cd86:	2000      	movs	r0, #0
 801cd88:	f04f 0c0a 	mov.w	ip, #10
 801cd8c:	4621      	mov	r1, r4
 801cd8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cd92:	3b30      	subs	r3, #48	@ 0x30
 801cd94:	2b09      	cmp	r3, #9
 801cd96:	d94b      	bls.n	801ce30 <_svfiprintf_r+0x17c>
 801cd98:	b1b0      	cbz	r0, 801cdc8 <_svfiprintf_r+0x114>
 801cd9a:	9207      	str	r2, [sp, #28]
 801cd9c:	e014      	b.n	801cdc8 <_svfiprintf_r+0x114>
 801cd9e:	eba0 0308 	sub.w	r3, r0, r8
 801cda2:	fa09 f303 	lsl.w	r3, r9, r3
 801cda6:	4313      	orrs	r3, r2
 801cda8:	9304      	str	r3, [sp, #16]
 801cdaa:	46a2      	mov	sl, r4
 801cdac:	e7d2      	b.n	801cd54 <_svfiprintf_r+0xa0>
 801cdae:	9b03      	ldr	r3, [sp, #12]
 801cdb0:	1d19      	adds	r1, r3, #4
 801cdb2:	681b      	ldr	r3, [r3, #0]
 801cdb4:	9103      	str	r1, [sp, #12]
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	bfbb      	ittet	lt
 801cdba:	425b      	neglt	r3, r3
 801cdbc:	f042 0202 	orrlt.w	r2, r2, #2
 801cdc0:	9307      	strge	r3, [sp, #28]
 801cdc2:	9307      	strlt	r3, [sp, #28]
 801cdc4:	bfb8      	it	lt
 801cdc6:	9204      	strlt	r2, [sp, #16]
 801cdc8:	7823      	ldrb	r3, [r4, #0]
 801cdca:	2b2e      	cmp	r3, #46	@ 0x2e
 801cdcc:	d10a      	bne.n	801cde4 <_svfiprintf_r+0x130>
 801cdce:	7863      	ldrb	r3, [r4, #1]
 801cdd0:	2b2a      	cmp	r3, #42	@ 0x2a
 801cdd2:	d132      	bne.n	801ce3a <_svfiprintf_r+0x186>
 801cdd4:	9b03      	ldr	r3, [sp, #12]
 801cdd6:	1d1a      	adds	r2, r3, #4
 801cdd8:	681b      	ldr	r3, [r3, #0]
 801cdda:	9203      	str	r2, [sp, #12]
 801cddc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801cde0:	3402      	adds	r4, #2
 801cde2:	9305      	str	r3, [sp, #20]
 801cde4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801cea8 <_svfiprintf_r+0x1f4>
 801cde8:	7821      	ldrb	r1, [r4, #0]
 801cdea:	2203      	movs	r2, #3
 801cdec:	4650      	mov	r0, sl
 801cdee:	f7e3 f9ff 	bl	80001f0 <memchr>
 801cdf2:	b138      	cbz	r0, 801ce04 <_svfiprintf_r+0x150>
 801cdf4:	9b04      	ldr	r3, [sp, #16]
 801cdf6:	eba0 000a 	sub.w	r0, r0, sl
 801cdfa:	2240      	movs	r2, #64	@ 0x40
 801cdfc:	4082      	lsls	r2, r0
 801cdfe:	4313      	orrs	r3, r2
 801ce00:	3401      	adds	r4, #1
 801ce02:	9304      	str	r3, [sp, #16]
 801ce04:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ce08:	4824      	ldr	r0, [pc, #144]	@ (801ce9c <_svfiprintf_r+0x1e8>)
 801ce0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ce0e:	2206      	movs	r2, #6
 801ce10:	f7e3 f9ee 	bl	80001f0 <memchr>
 801ce14:	2800      	cmp	r0, #0
 801ce16:	d036      	beq.n	801ce86 <_svfiprintf_r+0x1d2>
 801ce18:	4b21      	ldr	r3, [pc, #132]	@ (801cea0 <_svfiprintf_r+0x1ec>)
 801ce1a:	bb1b      	cbnz	r3, 801ce64 <_svfiprintf_r+0x1b0>
 801ce1c:	9b03      	ldr	r3, [sp, #12]
 801ce1e:	3307      	adds	r3, #7
 801ce20:	f023 0307 	bic.w	r3, r3, #7
 801ce24:	3308      	adds	r3, #8
 801ce26:	9303      	str	r3, [sp, #12]
 801ce28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce2a:	4433      	add	r3, r6
 801ce2c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ce2e:	e76a      	b.n	801cd06 <_svfiprintf_r+0x52>
 801ce30:	fb0c 3202 	mla	r2, ip, r2, r3
 801ce34:	460c      	mov	r4, r1
 801ce36:	2001      	movs	r0, #1
 801ce38:	e7a8      	b.n	801cd8c <_svfiprintf_r+0xd8>
 801ce3a:	2300      	movs	r3, #0
 801ce3c:	3401      	adds	r4, #1
 801ce3e:	9305      	str	r3, [sp, #20]
 801ce40:	4619      	mov	r1, r3
 801ce42:	f04f 0c0a 	mov.w	ip, #10
 801ce46:	4620      	mov	r0, r4
 801ce48:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ce4c:	3a30      	subs	r2, #48	@ 0x30
 801ce4e:	2a09      	cmp	r2, #9
 801ce50:	d903      	bls.n	801ce5a <_svfiprintf_r+0x1a6>
 801ce52:	2b00      	cmp	r3, #0
 801ce54:	d0c6      	beq.n	801cde4 <_svfiprintf_r+0x130>
 801ce56:	9105      	str	r1, [sp, #20]
 801ce58:	e7c4      	b.n	801cde4 <_svfiprintf_r+0x130>
 801ce5a:	fb0c 2101 	mla	r1, ip, r1, r2
 801ce5e:	4604      	mov	r4, r0
 801ce60:	2301      	movs	r3, #1
 801ce62:	e7f0      	b.n	801ce46 <_svfiprintf_r+0x192>
 801ce64:	ab03      	add	r3, sp, #12
 801ce66:	9300      	str	r3, [sp, #0]
 801ce68:	462a      	mov	r2, r5
 801ce6a:	4b0e      	ldr	r3, [pc, #56]	@ (801cea4 <_svfiprintf_r+0x1f0>)
 801ce6c:	a904      	add	r1, sp, #16
 801ce6e:	4638      	mov	r0, r7
 801ce70:	f7fc fc28 	bl	80196c4 <_printf_float>
 801ce74:	1c42      	adds	r2, r0, #1
 801ce76:	4606      	mov	r6, r0
 801ce78:	d1d6      	bne.n	801ce28 <_svfiprintf_r+0x174>
 801ce7a:	89ab      	ldrh	r3, [r5, #12]
 801ce7c:	065b      	lsls	r3, r3, #25
 801ce7e:	f53f af2d 	bmi.w	801ccdc <_svfiprintf_r+0x28>
 801ce82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ce84:	e72c      	b.n	801cce0 <_svfiprintf_r+0x2c>
 801ce86:	ab03      	add	r3, sp, #12
 801ce88:	9300      	str	r3, [sp, #0]
 801ce8a:	462a      	mov	r2, r5
 801ce8c:	4b05      	ldr	r3, [pc, #20]	@ (801cea4 <_svfiprintf_r+0x1f0>)
 801ce8e:	a904      	add	r1, sp, #16
 801ce90:	4638      	mov	r0, r7
 801ce92:	f7fc feaf 	bl	8019bf4 <_printf_i>
 801ce96:	e7ed      	b.n	801ce74 <_svfiprintf_r+0x1c0>
 801ce98:	08021b30 	.word	0x08021b30
 801ce9c:	08021b3a 	.word	0x08021b3a
 801cea0:	080196c5 	.word	0x080196c5
 801cea4:	0801cbfd 	.word	0x0801cbfd
 801cea8:	08021b36 	.word	0x08021b36

0801ceac <__sfputc_r>:
 801ceac:	6893      	ldr	r3, [r2, #8]
 801ceae:	3b01      	subs	r3, #1
 801ceb0:	2b00      	cmp	r3, #0
 801ceb2:	b410      	push	{r4}
 801ceb4:	6093      	str	r3, [r2, #8]
 801ceb6:	da08      	bge.n	801ceca <__sfputc_r+0x1e>
 801ceb8:	6994      	ldr	r4, [r2, #24]
 801ceba:	42a3      	cmp	r3, r4
 801cebc:	db01      	blt.n	801cec2 <__sfputc_r+0x16>
 801cebe:	290a      	cmp	r1, #10
 801cec0:	d103      	bne.n	801ceca <__sfputc_r+0x1e>
 801cec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cec6:	f7fd bb5e 	b.w	801a586 <__swbuf_r>
 801ceca:	6813      	ldr	r3, [r2, #0]
 801cecc:	1c58      	adds	r0, r3, #1
 801cece:	6010      	str	r0, [r2, #0]
 801ced0:	7019      	strb	r1, [r3, #0]
 801ced2:	4608      	mov	r0, r1
 801ced4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ced8:	4770      	bx	lr

0801ceda <__sfputs_r>:
 801ceda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cedc:	4606      	mov	r6, r0
 801cede:	460f      	mov	r7, r1
 801cee0:	4614      	mov	r4, r2
 801cee2:	18d5      	adds	r5, r2, r3
 801cee4:	42ac      	cmp	r4, r5
 801cee6:	d101      	bne.n	801ceec <__sfputs_r+0x12>
 801cee8:	2000      	movs	r0, #0
 801ceea:	e007      	b.n	801cefc <__sfputs_r+0x22>
 801ceec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cef0:	463a      	mov	r2, r7
 801cef2:	4630      	mov	r0, r6
 801cef4:	f7ff ffda 	bl	801ceac <__sfputc_r>
 801cef8:	1c43      	adds	r3, r0, #1
 801cefa:	d1f3      	bne.n	801cee4 <__sfputs_r+0xa>
 801cefc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cf00 <_vfiprintf_r>:
 801cf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf04:	460d      	mov	r5, r1
 801cf06:	b09d      	sub	sp, #116	@ 0x74
 801cf08:	4614      	mov	r4, r2
 801cf0a:	4698      	mov	r8, r3
 801cf0c:	4606      	mov	r6, r0
 801cf0e:	b118      	cbz	r0, 801cf18 <_vfiprintf_r+0x18>
 801cf10:	6a03      	ldr	r3, [r0, #32]
 801cf12:	b90b      	cbnz	r3, 801cf18 <_vfiprintf_r+0x18>
 801cf14:	f7fd fa2e 	bl	801a374 <__sinit>
 801cf18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cf1a:	07d9      	lsls	r1, r3, #31
 801cf1c:	d405      	bmi.n	801cf2a <_vfiprintf_r+0x2a>
 801cf1e:	89ab      	ldrh	r3, [r5, #12]
 801cf20:	059a      	lsls	r2, r3, #22
 801cf22:	d402      	bmi.n	801cf2a <_vfiprintf_r+0x2a>
 801cf24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cf26:	f7fd fce2 	bl	801a8ee <__retarget_lock_acquire_recursive>
 801cf2a:	89ab      	ldrh	r3, [r5, #12]
 801cf2c:	071b      	lsls	r3, r3, #28
 801cf2e:	d501      	bpl.n	801cf34 <_vfiprintf_r+0x34>
 801cf30:	692b      	ldr	r3, [r5, #16]
 801cf32:	b99b      	cbnz	r3, 801cf5c <_vfiprintf_r+0x5c>
 801cf34:	4629      	mov	r1, r5
 801cf36:	4630      	mov	r0, r6
 801cf38:	f7fd fb64 	bl	801a604 <__swsetup_r>
 801cf3c:	b170      	cbz	r0, 801cf5c <_vfiprintf_r+0x5c>
 801cf3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cf40:	07dc      	lsls	r4, r3, #31
 801cf42:	d504      	bpl.n	801cf4e <_vfiprintf_r+0x4e>
 801cf44:	f04f 30ff 	mov.w	r0, #4294967295
 801cf48:	b01d      	add	sp, #116	@ 0x74
 801cf4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf4e:	89ab      	ldrh	r3, [r5, #12]
 801cf50:	0598      	lsls	r0, r3, #22
 801cf52:	d4f7      	bmi.n	801cf44 <_vfiprintf_r+0x44>
 801cf54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cf56:	f7fd fccb 	bl	801a8f0 <__retarget_lock_release_recursive>
 801cf5a:	e7f3      	b.n	801cf44 <_vfiprintf_r+0x44>
 801cf5c:	2300      	movs	r3, #0
 801cf5e:	9309      	str	r3, [sp, #36]	@ 0x24
 801cf60:	2320      	movs	r3, #32
 801cf62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801cf66:	f8cd 800c 	str.w	r8, [sp, #12]
 801cf6a:	2330      	movs	r3, #48	@ 0x30
 801cf6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d11c <_vfiprintf_r+0x21c>
 801cf70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801cf74:	f04f 0901 	mov.w	r9, #1
 801cf78:	4623      	mov	r3, r4
 801cf7a:	469a      	mov	sl, r3
 801cf7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cf80:	b10a      	cbz	r2, 801cf86 <_vfiprintf_r+0x86>
 801cf82:	2a25      	cmp	r2, #37	@ 0x25
 801cf84:	d1f9      	bne.n	801cf7a <_vfiprintf_r+0x7a>
 801cf86:	ebba 0b04 	subs.w	fp, sl, r4
 801cf8a:	d00b      	beq.n	801cfa4 <_vfiprintf_r+0xa4>
 801cf8c:	465b      	mov	r3, fp
 801cf8e:	4622      	mov	r2, r4
 801cf90:	4629      	mov	r1, r5
 801cf92:	4630      	mov	r0, r6
 801cf94:	f7ff ffa1 	bl	801ceda <__sfputs_r>
 801cf98:	3001      	adds	r0, #1
 801cf9a:	f000 80a7 	beq.w	801d0ec <_vfiprintf_r+0x1ec>
 801cf9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cfa0:	445a      	add	r2, fp
 801cfa2:	9209      	str	r2, [sp, #36]	@ 0x24
 801cfa4:	f89a 3000 	ldrb.w	r3, [sl]
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	f000 809f 	beq.w	801d0ec <_vfiprintf_r+0x1ec>
 801cfae:	2300      	movs	r3, #0
 801cfb0:	f04f 32ff 	mov.w	r2, #4294967295
 801cfb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cfb8:	f10a 0a01 	add.w	sl, sl, #1
 801cfbc:	9304      	str	r3, [sp, #16]
 801cfbe:	9307      	str	r3, [sp, #28]
 801cfc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801cfc4:	931a      	str	r3, [sp, #104]	@ 0x68
 801cfc6:	4654      	mov	r4, sl
 801cfc8:	2205      	movs	r2, #5
 801cfca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cfce:	4853      	ldr	r0, [pc, #332]	@ (801d11c <_vfiprintf_r+0x21c>)
 801cfd0:	f7e3 f90e 	bl	80001f0 <memchr>
 801cfd4:	9a04      	ldr	r2, [sp, #16]
 801cfd6:	b9d8      	cbnz	r0, 801d010 <_vfiprintf_r+0x110>
 801cfd8:	06d1      	lsls	r1, r2, #27
 801cfda:	bf44      	itt	mi
 801cfdc:	2320      	movmi	r3, #32
 801cfde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cfe2:	0713      	lsls	r3, r2, #28
 801cfe4:	bf44      	itt	mi
 801cfe6:	232b      	movmi	r3, #43	@ 0x2b
 801cfe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cfec:	f89a 3000 	ldrb.w	r3, [sl]
 801cff0:	2b2a      	cmp	r3, #42	@ 0x2a
 801cff2:	d015      	beq.n	801d020 <_vfiprintf_r+0x120>
 801cff4:	9a07      	ldr	r2, [sp, #28]
 801cff6:	4654      	mov	r4, sl
 801cff8:	2000      	movs	r0, #0
 801cffa:	f04f 0c0a 	mov.w	ip, #10
 801cffe:	4621      	mov	r1, r4
 801d000:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d004:	3b30      	subs	r3, #48	@ 0x30
 801d006:	2b09      	cmp	r3, #9
 801d008:	d94b      	bls.n	801d0a2 <_vfiprintf_r+0x1a2>
 801d00a:	b1b0      	cbz	r0, 801d03a <_vfiprintf_r+0x13a>
 801d00c:	9207      	str	r2, [sp, #28]
 801d00e:	e014      	b.n	801d03a <_vfiprintf_r+0x13a>
 801d010:	eba0 0308 	sub.w	r3, r0, r8
 801d014:	fa09 f303 	lsl.w	r3, r9, r3
 801d018:	4313      	orrs	r3, r2
 801d01a:	9304      	str	r3, [sp, #16]
 801d01c:	46a2      	mov	sl, r4
 801d01e:	e7d2      	b.n	801cfc6 <_vfiprintf_r+0xc6>
 801d020:	9b03      	ldr	r3, [sp, #12]
 801d022:	1d19      	adds	r1, r3, #4
 801d024:	681b      	ldr	r3, [r3, #0]
 801d026:	9103      	str	r1, [sp, #12]
 801d028:	2b00      	cmp	r3, #0
 801d02a:	bfbb      	ittet	lt
 801d02c:	425b      	neglt	r3, r3
 801d02e:	f042 0202 	orrlt.w	r2, r2, #2
 801d032:	9307      	strge	r3, [sp, #28]
 801d034:	9307      	strlt	r3, [sp, #28]
 801d036:	bfb8      	it	lt
 801d038:	9204      	strlt	r2, [sp, #16]
 801d03a:	7823      	ldrb	r3, [r4, #0]
 801d03c:	2b2e      	cmp	r3, #46	@ 0x2e
 801d03e:	d10a      	bne.n	801d056 <_vfiprintf_r+0x156>
 801d040:	7863      	ldrb	r3, [r4, #1]
 801d042:	2b2a      	cmp	r3, #42	@ 0x2a
 801d044:	d132      	bne.n	801d0ac <_vfiprintf_r+0x1ac>
 801d046:	9b03      	ldr	r3, [sp, #12]
 801d048:	1d1a      	adds	r2, r3, #4
 801d04a:	681b      	ldr	r3, [r3, #0]
 801d04c:	9203      	str	r2, [sp, #12]
 801d04e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d052:	3402      	adds	r4, #2
 801d054:	9305      	str	r3, [sp, #20]
 801d056:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d12c <_vfiprintf_r+0x22c>
 801d05a:	7821      	ldrb	r1, [r4, #0]
 801d05c:	2203      	movs	r2, #3
 801d05e:	4650      	mov	r0, sl
 801d060:	f7e3 f8c6 	bl	80001f0 <memchr>
 801d064:	b138      	cbz	r0, 801d076 <_vfiprintf_r+0x176>
 801d066:	9b04      	ldr	r3, [sp, #16]
 801d068:	eba0 000a 	sub.w	r0, r0, sl
 801d06c:	2240      	movs	r2, #64	@ 0x40
 801d06e:	4082      	lsls	r2, r0
 801d070:	4313      	orrs	r3, r2
 801d072:	3401      	adds	r4, #1
 801d074:	9304      	str	r3, [sp, #16]
 801d076:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d07a:	4829      	ldr	r0, [pc, #164]	@ (801d120 <_vfiprintf_r+0x220>)
 801d07c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d080:	2206      	movs	r2, #6
 801d082:	f7e3 f8b5 	bl	80001f0 <memchr>
 801d086:	2800      	cmp	r0, #0
 801d088:	d03f      	beq.n	801d10a <_vfiprintf_r+0x20a>
 801d08a:	4b26      	ldr	r3, [pc, #152]	@ (801d124 <_vfiprintf_r+0x224>)
 801d08c:	bb1b      	cbnz	r3, 801d0d6 <_vfiprintf_r+0x1d6>
 801d08e:	9b03      	ldr	r3, [sp, #12]
 801d090:	3307      	adds	r3, #7
 801d092:	f023 0307 	bic.w	r3, r3, #7
 801d096:	3308      	adds	r3, #8
 801d098:	9303      	str	r3, [sp, #12]
 801d09a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d09c:	443b      	add	r3, r7
 801d09e:	9309      	str	r3, [sp, #36]	@ 0x24
 801d0a0:	e76a      	b.n	801cf78 <_vfiprintf_r+0x78>
 801d0a2:	fb0c 3202 	mla	r2, ip, r2, r3
 801d0a6:	460c      	mov	r4, r1
 801d0a8:	2001      	movs	r0, #1
 801d0aa:	e7a8      	b.n	801cffe <_vfiprintf_r+0xfe>
 801d0ac:	2300      	movs	r3, #0
 801d0ae:	3401      	adds	r4, #1
 801d0b0:	9305      	str	r3, [sp, #20]
 801d0b2:	4619      	mov	r1, r3
 801d0b4:	f04f 0c0a 	mov.w	ip, #10
 801d0b8:	4620      	mov	r0, r4
 801d0ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d0be:	3a30      	subs	r2, #48	@ 0x30
 801d0c0:	2a09      	cmp	r2, #9
 801d0c2:	d903      	bls.n	801d0cc <_vfiprintf_r+0x1cc>
 801d0c4:	2b00      	cmp	r3, #0
 801d0c6:	d0c6      	beq.n	801d056 <_vfiprintf_r+0x156>
 801d0c8:	9105      	str	r1, [sp, #20]
 801d0ca:	e7c4      	b.n	801d056 <_vfiprintf_r+0x156>
 801d0cc:	fb0c 2101 	mla	r1, ip, r1, r2
 801d0d0:	4604      	mov	r4, r0
 801d0d2:	2301      	movs	r3, #1
 801d0d4:	e7f0      	b.n	801d0b8 <_vfiprintf_r+0x1b8>
 801d0d6:	ab03      	add	r3, sp, #12
 801d0d8:	9300      	str	r3, [sp, #0]
 801d0da:	462a      	mov	r2, r5
 801d0dc:	4b12      	ldr	r3, [pc, #72]	@ (801d128 <_vfiprintf_r+0x228>)
 801d0de:	a904      	add	r1, sp, #16
 801d0e0:	4630      	mov	r0, r6
 801d0e2:	f7fc faef 	bl	80196c4 <_printf_float>
 801d0e6:	4607      	mov	r7, r0
 801d0e8:	1c78      	adds	r0, r7, #1
 801d0ea:	d1d6      	bne.n	801d09a <_vfiprintf_r+0x19a>
 801d0ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d0ee:	07d9      	lsls	r1, r3, #31
 801d0f0:	d405      	bmi.n	801d0fe <_vfiprintf_r+0x1fe>
 801d0f2:	89ab      	ldrh	r3, [r5, #12]
 801d0f4:	059a      	lsls	r2, r3, #22
 801d0f6:	d402      	bmi.n	801d0fe <_vfiprintf_r+0x1fe>
 801d0f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d0fa:	f7fd fbf9 	bl	801a8f0 <__retarget_lock_release_recursive>
 801d0fe:	89ab      	ldrh	r3, [r5, #12]
 801d100:	065b      	lsls	r3, r3, #25
 801d102:	f53f af1f 	bmi.w	801cf44 <_vfiprintf_r+0x44>
 801d106:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d108:	e71e      	b.n	801cf48 <_vfiprintf_r+0x48>
 801d10a:	ab03      	add	r3, sp, #12
 801d10c:	9300      	str	r3, [sp, #0]
 801d10e:	462a      	mov	r2, r5
 801d110:	4b05      	ldr	r3, [pc, #20]	@ (801d128 <_vfiprintf_r+0x228>)
 801d112:	a904      	add	r1, sp, #16
 801d114:	4630      	mov	r0, r6
 801d116:	f7fc fd6d 	bl	8019bf4 <_printf_i>
 801d11a:	e7e4      	b.n	801d0e6 <_vfiprintf_r+0x1e6>
 801d11c:	08021b30 	.word	0x08021b30
 801d120:	08021b3a 	.word	0x08021b3a
 801d124:	080196c5 	.word	0x080196c5
 801d128:	0801cedb 	.word	0x0801cedb
 801d12c:	08021b36 	.word	0x08021b36

0801d130 <__sflush_r>:
 801d130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d138:	0716      	lsls	r6, r2, #28
 801d13a:	4605      	mov	r5, r0
 801d13c:	460c      	mov	r4, r1
 801d13e:	d454      	bmi.n	801d1ea <__sflush_r+0xba>
 801d140:	684b      	ldr	r3, [r1, #4]
 801d142:	2b00      	cmp	r3, #0
 801d144:	dc02      	bgt.n	801d14c <__sflush_r+0x1c>
 801d146:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d148:	2b00      	cmp	r3, #0
 801d14a:	dd48      	ble.n	801d1de <__sflush_r+0xae>
 801d14c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d14e:	2e00      	cmp	r6, #0
 801d150:	d045      	beq.n	801d1de <__sflush_r+0xae>
 801d152:	2300      	movs	r3, #0
 801d154:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d158:	682f      	ldr	r7, [r5, #0]
 801d15a:	6a21      	ldr	r1, [r4, #32]
 801d15c:	602b      	str	r3, [r5, #0]
 801d15e:	d030      	beq.n	801d1c2 <__sflush_r+0x92>
 801d160:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d162:	89a3      	ldrh	r3, [r4, #12]
 801d164:	0759      	lsls	r1, r3, #29
 801d166:	d505      	bpl.n	801d174 <__sflush_r+0x44>
 801d168:	6863      	ldr	r3, [r4, #4]
 801d16a:	1ad2      	subs	r2, r2, r3
 801d16c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d16e:	b10b      	cbz	r3, 801d174 <__sflush_r+0x44>
 801d170:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d172:	1ad2      	subs	r2, r2, r3
 801d174:	2300      	movs	r3, #0
 801d176:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d178:	6a21      	ldr	r1, [r4, #32]
 801d17a:	4628      	mov	r0, r5
 801d17c:	47b0      	blx	r6
 801d17e:	1c43      	adds	r3, r0, #1
 801d180:	89a3      	ldrh	r3, [r4, #12]
 801d182:	d106      	bne.n	801d192 <__sflush_r+0x62>
 801d184:	6829      	ldr	r1, [r5, #0]
 801d186:	291d      	cmp	r1, #29
 801d188:	d82b      	bhi.n	801d1e2 <__sflush_r+0xb2>
 801d18a:	4a2a      	ldr	r2, [pc, #168]	@ (801d234 <__sflush_r+0x104>)
 801d18c:	410a      	asrs	r2, r1
 801d18e:	07d6      	lsls	r6, r2, #31
 801d190:	d427      	bmi.n	801d1e2 <__sflush_r+0xb2>
 801d192:	2200      	movs	r2, #0
 801d194:	6062      	str	r2, [r4, #4]
 801d196:	04d9      	lsls	r1, r3, #19
 801d198:	6922      	ldr	r2, [r4, #16]
 801d19a:	6022      	str	r2, [r4, #0]
 801d19c:	d504      	bpl.n	801d1a8 <__sflush_r+0x78>
 801d19e:	1c42      	adds	r2, r0, #1
 801d1a0:	d101      	bne.n	801d1a6 <__sflush_r+0x76>
 801d1a2:	682b      	ldr	r3, [r5, #0]
 801d1a4:	b903      	cbnz	r3, 801d1a8 <__sflush_r+0x78>
 801d1a6:	6560      	str	r0, [r4, #84]	@ 0x54
 801d1a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d1aa:	602f      	str	r7, [r5, #0]
 801d1ac:	b1b9      	cbz	r1, 801d1de <__sflush_r+0xae>
 801d1ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d1b2:	4299      	cmp	r1, r3
 801d1b4:	d002      	beq.n	801d1bc <__sflush_r+0x8c>
 801d1b6:	4628      	mov	r0, r5
 801d1b8:	f7fe fa1a 	bl	801b5f0 <_free_r>
 801d1bc:	2300      	movs	r3, #0
 801d1be:	6363      	str	r3, [r4, #52]	@ 0x34
 801d1c0:	e00d      	b.n	801d1de <__sflush_r+0xae>
 801d1c2:	2301      	movs	r3, #1
 801d1c4:	4628      	mov	r0, r5
 801d1c6:	47b0      	blx	r6
 801d1c8:	4602      	mov	r2, r0
 801d1ca:	1c50      	adds	r0, r2, #1
 801d1cc:	d1c9      	bne.n	801d162 <__sflush_r+0x32>
 801d1ce:	682b      	ldr	r3, [r5, #0]
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	d0c6      	beq.n	801d162 <__sflush_r+0x32>
 801d1d4:	2b1d      	cmp	r3, #29
 801d1d6:	d001      	beq.n	801d1dc <__sflush_r+0xac>
 801d1d8:	2b16      	cmp	r3, #22
 801d1da:	d11e      	bne.n	801d21a <__sflush_r+0xea>
 801d1dc:	602f      	str	r7, [r5, #0]
 801d1de:	2000      	movs	r0, #0
 801d1e0:	e022      	b.n	801d228 <__sflush_r+0xf8>
 801d1e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d1e6:	b21b      	sxth	r3, r3
 801d1e8:	e01b      	b.n	801d222 <__sflush_r+0xf2>
 801d1ea:	690f      	ldr	r7, [r1, #16]
 801d1ec:	2f00      	cmp	r7, #0
 801d1ee:	d0f6      	beq.n	801d1de <__sflush_r+0xae>
 801d1f0:	0793      	lsls	r3, r2, #30
 801d1f2:	680e      	ldr	r6, [r1, #0]
 801d1f4:	bf08      	it	eq
 801d1f6:	694b      	ldreq	r3, [r1, #20]
 801d1f8:	600f      	str	r7, [r1, #0]
 801d1fa:	bf18      	it	ne
 801d1fc:	2300      	movne	r3, #0
 801d1fe:	eba6 0807 	sub.w	r8, r6, r7
 801d202:	608b      	str	r3, [r1, #8]
 801d204:	f1b8 0f00 	cmp.w	r8, #0
 801d208:	dde9      	ble.n	801d1de <__sflush_r+0xae>
 801d20a:	6a21      	ldr	r1, [r4, #32]
 801d20c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d20e:	4643      	mov	r3, r8
 801d210:	463a      	mov	r2, r7
 801d212:	4628      	mov	r0, r5
 801d214:	47b0      	blx	r6
 801d216:	2800      	cmp	r0, #0
 801d218:	dc08      	bgt.n	801d22c <__sflush_r+0xfc>
 801d21a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d21e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d222:	81a3      	strh	r3, [r4, #12]
 801d224:	f04f 30ff 	mov.w	r0, #4294967295
 801d228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d22c:	4407      	add	r7, r0
 801d22e:	eba8 0800 	sub.w	r8, r8, r0
 801d232:	e7e7      	b.n	801d204 <__sflush_r+0xd4>
 801d234:	dfbffffe 	.word	0xdfbffffe

0801d238 <_fflush_r>:
 801d238:	b538      	push	{r3, r4, r5, lr}
 801d23a:	690b      	ldr	r3, [r1, #16]
 801d23c:	4605      	mov	r5, r0
 801d23e:	460c      	mov	r4, r1
 801d240:	b913      	cbnz	r3, 801d248 <_fflush_r+0x10>
 801d242:	2500      	movs	r5, #0
 801d244:	4628      	mov	r0, r5
 801d246:	bd38      	pop	{r3, r4, r5, pc}
 801d248:	b118      	cbz	r0, 801d252 <_fflush_r+0x1a>
 801d24a:	6a03      	ldr	r3, [r0, #32]
 801d24c:	b90b      	cbnz	r3, 801d252 <_fflush_r+0x1a>
 801d24e:	f7fd f891 	bl	801a374 <__sinit>
 801d252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d256:	2b00      	cmp	r3, #0
 801d258:	d0f3      	beq.n	801d242 <_fflush_r+0xa>
 801d25a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d25c:	07d0      	lsls	r0, r2, #31
 801d25e:	d404      	bmi.n	801d26a <_fflush_r+0x32>
 801d260:	0599      	lsls	r1, r3, #22
 801d262:	d402      	bmi.n	801d26a <_fflush_r+0x32>
 801d264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d266:	f7fd fb42 	bl	801a8ee <__retarget_lock_acquire_recursive>
 801d26a:	4628      	mov	r0, r5
 801d26c:	4621      	mov	r1, r4
 801d26e:	f7ff ff5f 	bl	801d130 <__sflush_r>
 801d272:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d274:	07da      	lsls	r2, r3, #31
 801d276:	4605      	mov	r5, r0
 801d278:	d4e4      	bmi.n	801d244 <_fflush_r+0xc>
 801d27a:	89a3      	ldrh	r3, [r4, #12]
 801d27c:	059b      	lsls	r3, r3, #22
 801d27e:	d4e1      	bmi.n	801d244 <_fflush_r+0xc>
 801d280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d282:	f7fd fb35 	bl	801a8f0 <__retarget_lock_release_recursive>
 801d286:	e7dd      	b.n	801d244 <_fflush_r+0xc>

0801d288 <fiprintf>:
 801d288:	b40e      	push	{r1, r2, r3}
 801d28a:	b503      	push	{r0, r1, lr}
 801d28c:	4601      	mov	r1, r0
 801d28e:	ab03      	add	r3, sp, #12
 801d290:	4805      	ldr	r0, [pc, #20]	@ (801d2a8 <fiprintf+0x20>)
 801d292:	f853 2b04 	ldr.w	r2, [r3], #4
 801d296:	6800      	ldr	r0, [r0, #0]
 801d298:	9301      	str	r3, [sp, #4]
 801d29a:	f7ff fe31 	bl	801cf00 <_vfiprintf_r>
 801d29e:	b002      	add	sp, #8
 801d2a0:	f85d eb04 	ldr.w	lr, [sp], #4
 801d2a4:	b003      	add	sp, #12
 801d2a6:	4770      	bx	lr
 801d2a8:	2000003c 	.word	0x2000003c

0801d2ac <__swhatbuf_r>:
 801d2ac:	b570      	push	{r4, r5, r6, lr}
 801d2ae:	460c      	mov	r4, r1
 801d2b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d2b4:	2900      	cmp	r1, #0
 801d2b6:	b096      	sub	sp, #88	@ 0x58
 801d2b8:	4615      	mov	r5, r2
 801d2ba:	461e      	mov	r6, r3
 801d2bc:	da0d      	bge.n	801d2da <__swhatbuf_r+0x2e>
 801d2be:	89a3      	ldrh	r3, [r4, #12]
 801d2c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d2c4:	f04f 0100 	mov.w	r1, #0
 801d2c8:	bf14      	ite	ne
 801d2ca:	2340      	movne	r3, #64	@ 0x40
 801d2cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d2d0:	2000      	movs	r0, #0
 801d2d2:	6031      	str	r1, [r6, #0]
 801d2d4:	602b      	str	r3, [r5, #0]
 801d2d6:	b016      	add	sp, #88	@ 0x58
 801d2d8:	bd70      	pop	{r4, r5, r6, pc}
 801d2da:	466a      	mov	r2, sp
 801d2dc:	f000 f848 	bl	801d370 <_fstat_r>
 801d2e0:	2800      	cmp	r0, #0
 801d2e2:	dbec      	blt.n	801d2be <__swhatbuf_r+0x12>
 801d2e4:	9901      	ldr	r1, [sp, #4]
 801d2e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d2ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d2ee:	4259      	negs	r1, r3
 801d2f0:	4159      	adcs	r1, r3
 801d2f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d2f6:	e7eb      	b.n	801d2d0 <__swhatbuf_r+0x24>

0801d2f8 <__smakebuf_r>:
 801d2f8:	898b      	ldrh	r3, [r1, #12]
 801d2fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d2fc:	079d      	lsls	r5, r3, #30
 801d2fe:	4606      	mov	r6, r0
 801d300:	460c      	mov	r4, r1
 801d302:	d507      	bpl.n	801d314 <__smakebuf_r+0x1c>
 801d304:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d308:	6023      	str	r3, [r4, #0]
 801d30a:	6123      	str	r3, [r4, #16]
 801d30c:	2301      	movs	r3, #1
 801d30e:	6163      	str	r3, [r4, #20]
 801d310:	b003      	add	sp, #12
 801d312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d314:	ab01      	add	r3, sp, #4
 801d316:	466a      	mov	r2, sp
 801d318:	f7ff ffc8 	bl	801d2ac <__swhatbuf_r>
 801d31c:	9f00      	ldr	r7, [sp, #0]
 801d31e:	4605      	mov	r5, r0
 801d320:	4639      	mov	r1, r7
 801d322:	4630      	mov	r0, r6
 801d324:	f7fb ffde 	bl	80192e4 <_malloc_r>
 801d328:	b948      	cbnz	r0, 801d33e <__smakebuf_r+0x46>
 801d32a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d32e:	059a      	lsls	r2, r3, #22
 801d330:	d4ee      	bmi.n	801d310 <__smakebuf_r+0x18>
 801d332:	f023 0303 	bic.w	r3, r3, #3
 801d336:	f043 0302 	orr.w	r3, r3, #2
 801d33a:	81a3      	strh	r3, [r4, #12]
 801d33c:	e7e2      	b.n	801d304 <__smakebuf_r+0xc>
 801d33e:	89a3      	ldrh	r3, [r4, #12]
 801d340:	6020      	str	r0, [r4, #0]
 801d342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d346:	81a3      	strh	r3, [r4, #12]
 801d348:	9b01      	ldr	r3, [sp, #4]
 801d34a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d34e:	b15b      	cbz	r3, 801d368 <__smakebuf_r+0x70>
 801d350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d354:	4630      	mov	r0, r6
 801d356:	f000 f81d 	bl	801d394 <_isatty_r>
 801d35a:	b128      	cbz	r0, 801d368 <__smakebuf_r+0x70>
 801d35c:	89a3      	ldrh	r3, [r4, #12]
 801d35e:	f023 0303 	bic.w	r3, r3, #3
 801d362:	f043 0301 	orr.w	r3, r3, #1
 801d366:	81a3      	strh	r3, [r4, #12]
 801d368:	89a3      	ldrh	r3, [r4, #12]
 801d36a:	431d      	orrs	r5, r3
 801d36c:	81a5      	strh	r5, [r4, #12]
 801d36e:	e7cf      	b.n	801d310 <__smakebuf_r+0x18>

0801d370 <_fstat_r>:
 801d370:	b538      	push	{r3, r4, r5, lr}
 801d372:	4d07      	ldr	r5, [pc, #28]	@ (801d390 <_fstat_r+0x20>)
 801d374:	2300      	movs	r3, #0
 801d376:	4604      	mov	r4, r0
 801d378:	4608      	mov	r0, r1
 801d37a:	4611      	mov	r1, r2
 801d37c:	602b      	str	r3, [r5, #0]
 801d37e:	f7e4 f997 	bl	80016b0 <_fstat>
 801d382:	1c43      	adds	r3, r0, #1
 801d384:	d102      	bne.n	801d38c <_fstat_r+0x1c>
 801d386:	682b      	ldr	r3, [r5, #0]
 801d388:	b103      	cbz	r3, 801d38c <_fstat_r+0x1c>
 801d38a:	6023      	str	r3, [r4, #0]
 801d38c:	bd38      	pop	{r3, r4, r5, pc}
 801d38e:	bf00      	nop
 801d390:	2000d394 	.word	0x2000d394

0801d394 <_isatty_r>:
 801d394:	b538      	push	{r3, r4, r5, lr}
 801d396:	4d06      	ldr	r5, [pc, #24]	@ (801d3b0 <_isatty_r+0x1c>)
 801d398:	2300      	movs	r3, #0
 801d39a:	4604      	mov	r4, r0
 801d39c:	4608      	mov	r0, r1
 801d39e:	602b      	str	r3, [r5, #0]
 801d3a0:	f7e4 f996 	bl	80016d0 <_isatty>
 801d3a4:	1c43      	adds	r3, r0, #1
 801d3a6:	d102      	bne.n	801d3ae <_isatty_r+0x1a>
 801d3a8:	682b      	ldr	r3, [r5, #0]
 801d3aa:	b103      	cbz	r3, 801d3ae <_isatty_r+0x1a>
 801d3ac:	6023      	str	r3, [r4, #0]
 801d3ae:	bd38      	pop	{r3, r4, r5, pc}
 801d3b0:	2000d394 	.word	0x2000d394
 801d3b4:	00000000 	.word	0x00000000

0801d3b8 <nan>:
 801d3b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801d3c0 <nan+0x8>
 801d3bc:	4770      	bx	lr
 801d3be:	bf00      	nop
 801d3c0:	00000000 	.word	0x00000000
 801d3c4:	7ff80000 	.word	0x7ff80000

0801d3c8 <abort>:
 801d3c8:	b508      	push	{r3, lr}
 801d3ca:	2006      	movs	r0, #6
 801d3cc:	f000 fbc4 	bl	801db58 <raise>
 801d3d0:	2001      	movs	r0, #1
 801d3d2:	f7e4 f91d 	bl	8001610 <_exit>

0801d3d6 <_calloc_r>:
 801d3d6:	b570      	push	{r4, r5, r6, lr}
 801d3d8:	fba1 5402 	umull	r5, r4, r1, r2
 801d3dc:	b93c      	cbnz	r4, 801d3ee <_calloc_r+0x18>
 801d3de:	4629      	mov	r1, r5
 801d3e0:	f7fb ff80 	bl	80192e4 <_malloc_r>
 801d3e4:	4606      	mov	r6, r0
 801d3e6:	b928      	cbnz	r0, 801d3f4 <_calloc_r+0x1e>
 801d3e8:	2600      	movs	r6, #0
 801d3ea:	4630      	mov	r0, r6
 801d3ec:	bd70      	pop	{r4, r5, r6, pc}
 801d3ee:	220c      	movs	r2, #12
 801d3f0:	6002      	str	r2, [r0, #0]
 801d3f2:	e7f9      	b.n	801d3e8 <_calloc_r+0x12>
 801d3f4:	462a      	mov	r2, r5
 801d3f6:	4621      	mov	r1, r4
 801d3f8:	f7fd f984 	bl	801a704 <memset>
 801d3fc:	e7f5      	b.n	801d3ea <_calloc_r+0x14>

0801d3fe <rshift>:
 801d3fe:	6903      	ldr	r3, [r0, #16]
 801d400:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d408:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d40c:	f100 0414 	add.w	r4, r0, #20
 801d410:	dd45      	ble.n	801d49e <rshift+0xa0>
 801d412:	f011 011f 	ands.w	r1, r1, #31
 801d416:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d41a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d41e:	d10c      	bne.n	801d43a <rshift+0x3c>
 801d420:	f100 0710 	add.w	r7, r0, #16
 801d424:	4629      	mov	r1, r5
 801d426:	42b1      	cmp	r1, r6
 801d428:	d334      	bcc.n	801d494 <rshift+0x96>
 801d42a:	1a9b      	subs	r3, r3, r2
 801d42c:	009b      	lsls	r3, r3, #2
 801d42e:	1eea      	subs	r2, r5, #3
 801d430:	4296      	cmp	r6, r2
 801d432:	bf38      	it	cc
 801d434:	2300      	movcc	r3, #0
 801d436:	4423      	add	r3, r4
 801d438:	e015      	b.n	801d466 <rshift+0x68>
 801d43a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d43e:	f1c1 0820 	rsb	r8, r1, #32
 801d442:	40cf      	lsrs	r7, r1
 801d444:	f105 0e04 	add.w	lr, r5, #4
 801d448:	46a1      	mov	r9, r4
 801d44a:	4576      	cmp	r6, lr
 801d44c:	46f4      	mov	ip, lr
 801d44e:	d815      	bhi.n	801d47c <rshift+0x7e>
 801d450:	1a9a      	subs	r2, r3, r2
 801d452:	0092      	lsls	r2, r2, #2
 801d454:	3a04      	subs	r2, #4
 801d456:	3501      	adds	r5, #1
 801d458:	42ae      	cmp	r6, r5
 801d45a:	bf38      	it	cc
 801d45c:	2200      	movcc	r2, #0
 801d45e:	18a3      	adds	r3, r4, r2
 801d460:	50a7      	str	r7, [r4, r2]
 801d462:	b107      	cbz	r7, 801d466 <rshift+0x68>
 801d464:	3304      	adds	r3, #4
 801d466:	1b1a      	subs	r2, r3, r4
 801d468:	42a3      	cmp	r3, r4
 801d46a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d46e:	bf08      	it	eq
 801d470:	2300      	moveq	r3, #0
 801d472:	6102      	str	r2, [r0, #16]
 801d474:	bf08      	it	eq
 801d476:	6143      	streq	r3, [r0, #20]
 801d478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d47c:	f8dc c000 	ldr.w	ip, [ip]
 801d480:	fa0c fc08 	lsl.w	ip, ip, r8
 801d484:	ea4c 0707 	orr.w	r7, ip, r7
 801d488:	f849 7b04 	str.w	r7, [r9], #4
 801d48c:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d490:	40cf      	lsrs	r7, r1
 801d492:	e7da      	b.n	801d44a <rshift+0x4c>
 801d494:	f851 cb04 	ldr.w	ip, [r1], #4
 801d498:	f847 cf04 	str.w	ip, [r7, #4]!
 801d49c:	e7c3      	b.n	801d426 <rshift+0x28>
 801d49e:	4623      	mov	r3, r4
 801d4a0:	e7e1      	b.n	801d466 <rshift+0x68>

0801d4a2 <__hexdig_fun>:
 801d4a2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801d4a6:	2b09      	cmp	r3, #9
 801d4a8:	d802      	bhi.n	801d4b0 <__hexdig_fun+0xe>
 801d4aa:	3820      	subs	r0, #32
 801d4ac:	b2c0      	uxtb	r0, r0
 801d4ae:	4770      	bx	lr
 801d4b0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801d4b4:	2b05      	cmp	r3, #5
 801d4b6:	d801      	bhi.n	801d4bc <__hexdig_fun+0x1a>
 801d4b8:	3847      	subs	r0, #71	@ 0x47
 801d4ba:	e7f7      	b.n	801d4ac <__hexdig_fun+0xa>
 801d4bc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801d4c0:	2b05      	cmp	r3, #5
 801d4c2:	d801      	bhi.n	801d4c8 <__hexdig_fun+0x26>
 801d4c4:	3827      	subs	r0, #39	@ 0x27
 801d4c6:	e7f1      	b.n	801d4ac <__hexdig_fun+0xa>
 801d4c8:	2000      	movs	r0, #0
 801d4ca:	4770      	bx	lr

0801d4cc <__gethex>:
 801d4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4d0:	b085      	sub	sp, #20
 801d4d2:	468a      	mov	sl, r1
 801d4d4:	9302      	str	r3, [sp, #8]
 801d4d6:	680b      	ldr	r3, [r1, #0]
 801d4d8:	9001      	str	r0, [sp, #4]
 801d4da:	4690      	mov	r8, r2
 801d4dc:	1c9c      	adds	r4, r3, #2
 801d4de:	46a1      	mov	r9, r4
 801d4e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 801d4e4:	2830      	cmp	r0, #48	@ 0x30
 801d4e6:	d0fa      	beq.n	801d4de <__gethex+0x12>
 801d4e8:	eba9 0303 	sub.w	r3, r9, r3
 801d4ec:	f1a3 0b02 	sub.w	fp, r3, #2
 801d4f0:	f7ff ffd7 	bl	801d4a2 <__hexdig_fun>
 801d4f4:	4605      	mov	r5, r0
 801d4f6:	2800      	cmp	r0, #0
 801d4f8:	d168      	bne.n	801d5cc <__gethex+0x100>
 801d4fa:	49a0      	ldr	r1, [pc, #640]	@ (801d77c <__gethex+0x2b0>)
 801d4fc:	2201      	movs	r2, #1
 801d4fe:	4648      	mov	r0, r9
 801d500:	f7fd f908 	bl	801a714 <strncmp>
 801d504:	4607      	mov	r7, r0
 801d506:	2800      	cmp	r0, #0
 801d508:	d167      	bne.n	801d5da <__gethex+0x10e>
 801d50a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801d50e:	4626      	mov	r6, r4
 801d510:	f7ff ffc7 	bl	801d4a2 <__hexdig_fun>
 801d514:	2800      	cmp	r0, #0
 801d516:	d062      	beq.n	801d5de <__gethex+0x112>
 801d518:	4623      	mov	r3, r4
 801d51a:	7818      	ldrb	r0, [r3, #0]
 801d51c:	2830      	cmp	r0, #48	@ 0x30
 801d51e:	4699      	mov	r9, r3
 801d520:	f103 0301 	add.w	r3, r3, #1
 801d524:	d0f9      	beq.n	801d51a <__gethex+0x4e>
 801d526:	f7ff ffbc 	bl	801d4a2 <__hexdig_fun>
 801d52a:	fab0 f580 	clz	r5, r0
 801d52e:	096d      	lsrs	r5, r5, #5
 801d530:	f04f 0b01 	mov.w	fp, #1
 801d534:	464a      	mov	r2, r9
 801d536:	4616      	mov	r6, r2
 801d538:	3201      	adds	r2, #1
 801d53a:	7830      	ldrb	r0, [r6, #0]
 801d53c:	f7ff ffb1 	bl	801d4a2 <__hexdig_fun>
 801d540:	2800      	cmp	r0, #0
 801d542:	d1f8      	bne.n	801d536 <__gethex+0x6a>
 801d544:	498d      	ldr	r1, [pc, #564]	@ (801d77c <__gethex+0x2b0>)
 801d546:	2201      	movs	r2, #1
 801d548:	4630      	mov	r0, r6
 801d54a:	f7fd f8e3 	bl	801a714 <strncmp>
 801d54e:	2800      	cmp	r0, #0
 801d550:	d13f      	bne.n	801d5d2 <__gethex+0x106>
 801d552:	b944      	cbnz	r4, 801d566 <__gethex+0x9a>
 801d554:	1c74      	adds	r4, r6, #1
 801d556:	4622      	mov	r2, r4
 801d558:	4616      	mov	r6, r2
 801d55a:	3201      	adds	r2, #1
 801d55c:	7830      	ldrb	r0, [r6, #0]
 801d55e:	f7ff ffa0 	bl	801d4a2 <__hexdig_fun>
 801d562:	2800      	cmp	r0, #0
 801d564:	d1f8      	bne.n	801d558 <__gethex+0x8c>
 801d566:	1ba4      	subs	r4, r4, r6
 801d568:	00a7      	lsls	r7, r4, #2
 801d56a:	7833      	ldrb	r3, [r6, #0]
 801d56c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801d570:	2b50      	cmp	r3, #80	@ 0x50
 801d572:	d13e      	bne.n	801d5f2 <__gethex+0x126>
 801d574:	7873      	ldrb	r3, [r6, #1]
 801d576:	2b2b      	cmp	r3, #43	@ 0x2b
 801d578:	d033      	beq.n	801d5e2 <__gethex+0x116>
 801d57a:	2b2d      	cmp	r3, #45	@ 0x2d
 801d57c:	d034      	beq.n	801d5e8 <__gethex+0x11c>
 801d57e:	1c71      	adds	r1, r6, #1
 801d580:	2400      	movs	r4, #0
 801d582:	7808      	ldrb	r0, [r1, #0]
 801d584:	f7ff ff8d 	bl	801d4a2 <__hexdig_fun>
 801d588:	1e43      	subs	r3, r0, #1
 801d58a:	b2db      	uxtb	r3, r3
 801d58c:	2b18      	cmp	r3, #24
 801d58e:	d830      	bhi.n	801d5f2 <__gethex+0x126>
 801d590:	f1a0 0210 	sub.w	r2, r0, #16
 801d594:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d598:	f7ff ff83 	bl	801d4a2 <__hexdig_fun>
 801d59c:	f100 3cff 	add.w	ip, r0, #4294967295
 801d5a0:	fa5f fc8c 	uxtb.w	ip, ip
 801d5a4:	f1bc 0f18 	cmp.w	ip, #24
 801d5a8:	f04f 030a 	mov.w	r3, #10
 801d5ac:	d91e      	bls.n	801d5ec <__gethex+0x120>
 801d5ae:	b104      	cbz	r4, 801d5b2 <__gethex+0xe6>
 801d5b0:	4252      	negs	r2, r2
 801d5b2:	4417      	add	r7, r2
 801d5b4:	f8ca 1000 	str.w	r1, [sl]
 801d5b8:	b1ed      	cbz	r5, 801d5f6 <__gethex+0x12a>
 801d5ba:	f1bb 0f00 	cmp.w	fp, #0
 801d5be:	bf0c      	ite	eq
 801d5c0:	2506      	moveq	r5, #6
 801d5c2:	2500      	movne	r5, #0
 801d5c4:	4628      	mov	r0, r5
 801d5c6:	b005      	add	sp, #20
 801d5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5cc:	2500      	movs	r5, #0
 801d5ce:	462c      	mov	r4, r5
 801d5d0:	e7b0      	b.n	801d534 <__gethex+0x68>
 801d5d2:	2c00      	cmp	r4, #0
 801d5d4:	d1c7      	bne.n	801d566 <__gethex+0x9a>
 801d5d6:	4627      	mov	r7, r4
 801d5d8:	e7c7      	b.n	801d56a <__gethex+0x9e>
 801d5da:	464e      	mov	r6, r9
 801d5dc:	462f      	mov	r7, r5
 801d5de:	2501      	movs	r5, #1
 801d5e0:	e7c3      	b.n	801d56a <__gethex+0x9e>
 801d5e2:	2400      	movs	r4, #0
 801d5e4:	1cb1      	adds	r1, r6, #2
 801d5e6:	e7cc      	b.n	801d582 <__gethex+0xb6>
 801d5e8:	2401      	movs	r4, #1
 801d5ea:	e7fb      	b.n	801d5e4 <__gethex+0x118>
 801d5ec:	fb03 0002 	mla	r0, r3, r2, r0
 801d5f0:	e7ce      	b.n	801d590 <__gethex+0xc4>
 801d5f2:	4631      	mov	r1, r6
 801d5f4:	e7de      	b.n	801d5b4 <__gethex+0xe8>
 801d5f6:	eba6 0309 	sub.w	r3, r6, r9
 801d5fa:	3b01      	subs	r3, #1
 801d5fc:	4629      	mov	r1, r5
 801d5fe:	2b07      	cmp	r3, #7
 801d600:	dc0a      	bgt.n	801d618 <__gethex+0x14c>
 801d602:	9801      	ldr	r0, [sp, #4]
 801d604:	f7fe f83e 	bl	801b684 <_Balloc>
 801d608:	4604      	mov	r4, r0
 801d60a:	b940      	cbnz	r0, 801d61e <__gethex+0x152>
 801d60c:	4b5c      	ldr	r3, [pc, #368]	@ (801d780 <__gethex+0x2b4>)
 801d60e:	4602      	mov	r2, r0
 801d610:	21e4      	movs	r1, #228	@ 0xe4
 801d612:	485c      	ldr	r0, [pc, #368]	@ (801d784 <__gethex+0x2b8>)
 801d614:	f7fd f982 	bl	801a91c <__assert_func>
 801d618:	3101      	adds	r1, #1
 801d61a:	105b      	asrs	r3, r3, #1
 801d61c:	e7ef      	b.n	801d5fe <__gethex+0x132>
 801d61e:	f100 0a14 	add.w	sl, r0, #20
 801d622:	2300      	movs	r3, #0
 801d624:	4655      	mov	r5, sl
 801d626:	469b      	mov	fp, r3
 801d628:	45b1      	cmp	r9, r6
 801d62a:	d337      	bcc.n	801d69c <__gethex+0x1d0>
 801d62c:	f845 bb04 	str.w	fp, [r5], #4
 801d630:	eba5 050a 	sub.w	r5, r5, sl
 801d634:	10ad      	asrs	r5, r5, #2
 801d636:	6125      	str	r5, [r4, #16]
 801d638:	4658      	mov	r0, fp
 801d63a:	f7fe f915 	bl	801b868 <__hi0bits>
 801d63e:	016d      	lsls	r5, r5, #5
 801d640:	f8d8 6000 	ldr.w	r6, [r8]
 801d644:	1a2d      	subs	r5, r5, r0
 801d646:	42b5      	cmp	r5, r6
 801d648:	dd54      	ble.n	801d6f4 <__gethex+0x228>
 801d64a:	1bad      	subs	r5, r5, r6
 801d64c:	4629      	mov	r1, r5
 801d64e:	4620      	mov	r0, r4
 801d650:	f7fe fca9 	bl	801bfa6 <__any_on>
 801d654:	4681      	mov	r9, r0
 801d656:	b178      	cbz	r0, 801d678 <__gethex+0x1ac>
 801d658:	1e6b      	subs	r3, r5, #1
 801d65a:	1159      	asrs	r1, r3, #5
 801d65c:	f003 021f 	and.w	r2, r3, #31
 801d660:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801d664:	f04f 0901 	mov.w	r9, #1
 801d668:	fa09 f202 	lsl.w	r2, r9, r2
 801d66c:	420a      	tst	r2, r1
 801d66e:	d003      	beq.n	801d678 <__gethex+0x1ac>
 801d670:	454b      	cmp	r3, r9
 801d672:	dc36      	bgt.n	801d6e2 <__gethex+0x216>
 801d674:	f04f 0902 	mov.w	r9, #2
 801d678:	4629      	mov	r1, r5
 801d67a:	4620      	mov	r0, r4
 801d67c:	f7ff febf 	bl	801d3fe <rshift>
 801d680:	442f      	add	r7, r5
 801d682:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d686:	42bb      	cmp	r3, r7
 801d688:	da42      	bge.n	801d710 <__gethex+0x244>
 801d68a:	9801      	ldr	r0, [sp, #4]
 801d68c:	4621      	mov	r1, r4
 801d68e:	f7fe f839 	bl	801b704 <_Bfree>
 801d692:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d694:	2300      	movs	r3, #0
 801d696:	6013      	str	r3, [r2, #0]
 801d698:	25a3      	movs	r5, #163	@ 0xa3
 801d69a:	e793      	b.n	801d5c4 <__gethex+0xf8>
 801d69c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801d6a0:	2a2e      	cmp	r2, #46	@ 0x2e
 801d6a2:	d012      	beq.n	801d6ca <__gethex+0x1fe>
 801d6a4:	2b20      	cmp	r3, #32
 801d6a6:	d104      	bne.n	801d6b2 <__gethex+0x1e6>
 801d6a8:	f845 bb04 	str.w	fp, [r5], #4
 801d6ac:	f04f 0b00 	mov.w	fp, #0
 801d6b0:	465b      	mov	r3, fp
 801d6b2:	7830      	ldrb	r0, [r6, #0]
 801d6b4:	9303      	str	r3, [sp, #12]
 801d6b6:	f7ff fef4 	bl	801d4a2 <__hexdig_fun>
 801d6ba:	9b03      	ldr	r3, [sp, #12]
 801d6bc:	f000 000f 	and.w	r0, r0, #15
 801d6c0:	4098      	lsls	r0, r3
 801d6c2:	ea4b 0b00 	orr.w	fp, fp, r0
 801d6c6:	3304      	adds	r3, #4
 801d6c8:	e7ae      	b.n	801d628 <__gethex+0x15c>
 801d6ca:	45b1      	cmp	r9, r6
 801d6cc:	d8ea      	bhi.n	801d6a4 <__gethex+0x1d8>
 801d6ce:	492b      	ldr	r1, [pc, #172]	@ (801d77c <__gethex+0x2b0>)
 801d6d0:	9303      	str	r3, [sp, #12]
 801d6d2:	2201      	movs	r2, #1
 801d6d4:	4630      	mov	r0, r6
 801d6d6:	f7fd f81d 	bl	801a714 <strncmp>
 801d6da:	9b03      	ldr	r3, [sp, #12]
 801d6dc:	2800      	cmp	r0, #0
 801d6de:	d1e1      	bne.n	801d6a4 <__gethex+0x1d8>
 801d6e0:	e7a2      	b.n	801d628 <__gethex+0x15c>
 801d6e2:	1ea9      	subs	r1, r5, #2
 801d6e4:	4620      	mov	r0, r4
 801d6e6:	f7fe fc5e 	bl	801bfa6 <__any_on>
 801d6ea:	2800      	cmp	r0, #0
 801d6ec:	d0c2      	beq.n	801d674 <__gethex+0x1a8>
 801d6ee:	f04f 0903 	mov.w	r9, #3
 801d6f2:	e7c1      	b.n	801d678 <__gethex+0x1ac>
 801d6f4:	da09      	bge.n	801d70a <__gethex+0x23e>
 801d6f6:	1b75      	subs	r5, r6, r5
 801d6f8:	4621      	mov	r1, r4
 801d6fa:	9801      	ldr	r0, [sp, #4]
 801d6fc:	462a      	mov	r2, r5
 801d6fe:	f7fe fa19 	bl	801bb34 <__lshift>
 801d702:	1b7f      	subs	r7, r7, r5
 801d704:	4604      	mov	r4, r0
 801d706:	f100 0a14 	add.w	sl, r0, #20
 801d70a:	f04f 0900 	mov.w	r9, #0
 801d70e:	e7b8      	b.n	801d682 <__gethex+0x1b6>
 801d710:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d714:	42bd      	cmp	r5, r7
 801d716:	dd6f      	ble.n	801d7f8 <__gethex+0x32c>
 801d718:	1bed      	subs	r5, r5, r7
 801d71a:	42ae      	cmp	r6, r5
 801d71c:	dc34      	bgt.n	801d788 <__gethex+0x2bc>
 801d71e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d722:	2b02      	cmp	r3, #2
 801d724:	d022      	beq.n	801d76c <__gethex+0x2a0>
 801d726:	2b03      	cmp	r3, #3
 801d728:	d024      	beq.n	801d774 <__gethex+0x2a8>
 801d72a:	2b01      	cmp	r3, #1
 801d72c:	d115      	bne.n	801d75a <__gethex+0x28e>
 801d72e:	42ae      	cmp	r6, r5
 801d730:	d113      	bne.n	801d75a <__gethex+0x28e>
 801d732:	2e01      	cmp	r6, #1
 801d734:	d10b      	bne.n	801d74e <__gethex+0x282>
 801d736:	9a02      	ldr	r2, [sp, #8]
 801d738:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d73c:	6013      	str	r3, [r2, #0]
 801d73e:	2301      	movs	r3, #1
 801d740:	6123      	str	r3, [r4, #16]
 801d742:	f8ca 3000 	str.w	r3, [sl]
 801d746:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d748:	2562      	movs	r5, #98	@ 0x62
 801d74a:	601c      	str	r4, [r3, #0]
 801d74c:	e73a      	b.n	801d5c4 <__gethex+0xf8>
 801d74e:	1e71      	subs	r1, r6, #1
 801d750:	4620      	mov	r0, r4
 801d752:	f7fe fc28 	bl	801bfa6 <__any_on>
 801d756:	2800      	cmp	r0, #0
 801d758:	d1ed      	bne.n	801d736 <__gethex+0x26a>
 801d75a:	9801      	ldr	r0, [sp, #4]
 801d75c:	4621      	mov	r1, r4
 801d75e:	f7fd ffd1 	bl	801b704 <_Bfree>
 801d762:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d764:	2300      	movs	r3, #0
 801d766:	6013      	str	r3, [r2, #0]
 801d768:	2550      	movs	r5, #80	@ 0x50
 801d76a:	e72b      	b.n	801d5c4 <__gethex+0xf8>
 801d76c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d76e:	2b00      	cmp	r3, #0
 801d770:	d1f3      	bne.n	801d75a <__gethex+0x28e>
 801d772:	e7e0      	b.n	801d736 <__gethex+0x26a>
 801d774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d776:	2b00      	cmp	r3, #0
 801d778:	d1dd      	bne.n	801d736 <__gethex+0x26a>
 801d77a:	e7ee      	b.n	801d75a <__gethex+0x28e>
 801d77c:	08021ad8 	.word	0x08021ad8
 801d780:	0802196c 	.word	0x0802196c
 801d784:	08021b49 	.word	0x08021b49
 801d788:	1e6f      	subs	r7, r5, #1
 801d78a:	f1b9 0f00 	cmp.w	r9, #0
 801d78e:	d130      	bne.n	801d7f2 <__gethex+0x326>
 801d790:	b127      	cbz	r7, 801d79c <__gethex+0x2d0>
 801d792:	4639      	mov	r1, r7
 801d794:	4620      	mov	r0, r4
 801d796:	f7fe fc06 	bl	801bfa6 <__any_on>
 801d79a:	4681      	mov	r9, r0
 801d79c:	117a      	asrs	r2, r7, #5
 801d79e:	2301      	movs	r3, #1
 801d7a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801d7a4:	f007 071f 	and.w	r7, r7, #31
 801d7a8:	40bb      	lsls	r3, r7
 801d7aa:	4213      	tst	r3, r2
 801d7ac:	4629      	mov	r1, r5
 801d7ae:	4620      	mov	r0, r4
 801d7b0:	bf18      	it	ne
 801d7b2:	f049 0902 	orrne.w	r9, r9, #2
 801d7b6:	f7ff fe22 	bl	801d3fe <rshift>
 801d7ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801d7be:	1b76      	subs	r6, r6, r5
 801d7c0:	2502      	movs	r5, #2
 801d7c2:	f1b9 0f00 	cmp.w	r9, #0
 801d7c6:	d047      	beq.n	801d858 <__gethex+0x38c>
 801d7c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d7cc:	2b02      	cmp	r3, #2
 801d7ce:	d015      	beq.n	801d7fc <__gethex+0x330>
 801d7d0:	2b03      	cmp	r3, #3
 801d7d2:	d017      	beq.n	801d804 <__gethex+0x338>
 801d7d4:	2b01      	cmp	r3, #1
 801d7d6:	d109      	bne.n	801d7ec <__gethex+0x320>
 801d7d8:	f019 0f02 	tst.w	r9, #2
 801d7dc:	d006      	beq.n	801d7ec <__gethex+0x320>
 801d7de:	f8da 3000 	ldr.w	r3, [sl]
 801d7e2:	ea49 0903 	orr.w	r9, r9, r3
 801d7e6:	f019 0f01 	tst.w	r9, #1
 801d7ea:	d10e      	bne.n	801d80a <__gethex+0x33e>
 801d7ec:	f045 0510 	orr.w	r5, r5, #16
 801d7f0:	e032      	b.n	801d858 <__gethex+0x38c>
 801d7f2:	f04f 0901 	mov.w	r9, #1
 801d7f6:	e7d1      	b.n	801d79c <__gethex+0x2d0>
 801d7f8:	2501      	movs	r5, #1
 801d7fa:	e7e2      	b.n	801d7c2 <__gethex+0x2f6>
 801d7fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d7fe:	f1c3 0301 	rsb	r3, r3, #1
 801d802:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d806:	2b00      	cmp	r3, #0
 801d808:	d0f0      	beq.n	801d7ec <__gethex+0x320>
 801d80a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d80e:	f104 0314 	add.w	r3, r4, #20
 801d812:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801d816:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801d81a:	f04f 0c00 	mov.w	ip, #0
 801d81e:	4618      	mov	r0, r3
 801d820:	f853 2b04 	ldr.w	r2, [r3], #4
 801d824:	f1b2 3fff 	cmp.w	r2, #4294967295
 801d828:	d01b      	beq.n	801d862 <__gethex+0x396>
 801d82a:	3201      	adds	r2, #1
 801d82c:	6002      	str	r2, [r0, #0]
 801d82e:	2d02      	cmp	r5, #2
 801d830:	f104 0314 	add.w	r3, r4, #20
 801d834:	d13c      	bne.n	801d8b0 <__gethex+0x3e4>
 801d836:	f8d8 2000 	ldr.w	r2, [r8]
 801d83a:	3a01      	subs	r2, #1
 801d83c:	42b2      	cmp	r2, r6
 801d83e:	d109      	bne.n	801d854 <__gethex+0x388>
 801d840:	1171      	asrs	r1, r6, #5
 801d842:	2201      	movs	r2, #1
 801d844:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d848:	f006 061f 	and.w	r6, r6, #31
 801d84c:	fa02 f606 	lsl.w	r6, r2, r6
 801d850:	421e      	tst	r6, r3
 801d852:	d13a      	bne.n	801d8ca <__gethex+0x3fe>
 801d854:	f045 0520 	orr.w	r5, r5, #32
 801d858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d85a:	601c      	str	r4, [r3, #0]
 801d85c:	9b02      	ldr	r3, [sp, #8]
 801d85e:	601f      	str	r7, [r3, #0]
 801d860:	e6b0      	b.n	801d5c4 <__gethex+0xf8>
 801d862:	4299      	cmp	r1, r3
 801d864:	f843 cc04 	str.w	ip, [r3, #-4]
 801d868:	d8d9      	bhi.n	801d81e <__gethex+0x352>
 801d86a:	68a3      	ldr	r3, [r4, #8]
 801d86c:	459b      	cmp	fp, r3
 801d86e:	db17      	blt.n	801d8a0 <__gethex+0x3d4>
 801d870:	6861      	ldr	r1, [r4, #4]
 801d872:	9801      	ldr	r0, [sp, #4]
 801d874:	3101      	adds	r1, #1
 801d876:	f7fd ff05 	bl	801b684 <_Balloc>
 801d87a:	4681      	mov	r9, r0
 801d87c:	b918      	cbnz	r0, 801d886 <__gethex+0x3ba>
 801d87e:	4b1a      	ldr	r3, [pc, #104]	@ (801d8e8 <__gethex+0x41c>)
 801d880:	4602      	mov	r2, r0
 801d882:	2184      	movs	r1, #132	@ 0x84
 801d884:	e6c5      	b.n	801d612 <__gethex+0x146>
 801d886:	6922      	ldr	r2, [r4, #16]
 801d888:	3202      	adds	r2, #2
 801d88a:	f104 010c 	add.w	r1, r4, #12
 801d88e:	0092      	lsls	r2, r2, #2
 801d890:	300c      	adds	r0, #12
 801d892:	f7fd f82e 	bl	801a8f2 <memcpy>
 801d896:	4621      	mov	r1, r4
 801d898:	9801      	ldr	r0, [sp, #4]
 801d89a:	f7fd ff33 	bl	801b704 <_Bfree>
 801d89e:	464c      	mov	r4, r9
 801d8a0:	6923      	ldr	r3, [r4, #16]
 801d8a2:	1c5a      	adds	r2, r3, #1
 801d8a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d8a8:	6122      	str	r2, [r4, #16]
 801d8aa:	2201      	movs	r2, #1
 801d8ac:	615a      	str	r2, [r3, #20]
 801d8ae:	e7be      	b.n	801d82e <__gethex+0x362>
 801d8b0:	6922      	ldr	r2, [r4, #16]
 801d8b2:	455a      	cmp	r2, fp
 801d8b4:	dd0b      	ble.n	801d8ce <__gethex+0x402>
 801d8b6:	2101      	movs	r1, #1
 801d8b8:	4620      	mov	r0, r4
 801d8ba:	f7ff fda0 	bl	801d3fe <rshift>
 801d8be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d8c2:	3701      	adds	r7, #1
 801d8c4:	42bb      	cmp	r3, r7
 801d8c6:	f6ff aee0 	blt.w	801d68a <__gethex+0x1be>
 801d8ca:	2501      	movs	r5, #1
 801d8cc:	e7c2      	b.n	801d854 <__gethex+0x388>
 801d8ce:	f016 061f 	ands.w	r6, r6, #31
 801d8d2:	d0fa      	beq.n	801d8ca <__gethex+0x3fe>
 801d8d4:	4453      	add	r3, sl
 801d8d6:	f1c6 0620 	rsb	r6, r6, #32
 801d8da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801d8de:	f7fd ffc3 	bl	801b868 <__hi0bits>
 801d8e2:	42b0      	cmp	r0, r6
 801d8e4:	dbe7      	blt.n	801d8b6 <__gethex+0x3ea>
 801d8e6:	e7f0      	b.n	801d8ca <__gethex+0x3fe>
 801d8e8:	0802196c 	.word	0x0802196c

0801d8ec <L_shift>:
 801d8ec:	f1c2 0208 	rsb	r2, r2, #8
 801d8f0:	0092      	lsls	r2, r2, #2
 801d8f2:	b570      	push	{r4, r5, r6, lr}
 801d8f4:	f1c2 0620 	rsb	r6, r2, #32
 801d8f8:	6843      	ldr	r3, [r0, #4]
 801d8fa:	6804      	ldr	r4, [r0, #0]
 801d8fc:	fa03 f506 	lsl.w	r5, r3, r6
 801d900:	432c      	orrs	r4, r5
 801d902:	40d3      	lsrs	r3, r2
 801d904:	6004      	str	r4, [r0, #0]
 801d906:	f840 3f04 	str.w	r3, [r0, #4]!
 801d90a:	4288      	cmp	r0, r1
 801d90c:	d3f4      	bcc.n	801d8f8 <L_shift+0xc>
 801d90e:	bd70      	pop	{r4, r5, r6, pc}

0801d910 <__match>:
 801d910:	b530      	push	{r4, r5, lr}
 801d912:	6803      	ldr	r3, [r0, #0]
 801d914:	3301      	adds	r3, #1
 801d916:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d91a:	b914      	cbnz	r4, 801d922 <__match+0x12>
 801d91c:	6003      	str	r3, [r0, #0]
 801d91e:	2001      	movs	r0, #1
 801d920:	bd30      	pop	{r4, r5, pc}
 801d922:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d926:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801d92a:	2d19      	cmp	r5, #25
 801d92c:	bf98      	it	ls
 801d92e:	3220      	addls	r2, #32
 801d930:	42a2      	cmp	r2, r4
 801d932:	d0f0      	beq.n	801d916 <__match+0x6>
 801d934:	2000      	movs	r0, #0
 801d936:	e7f3      	b.n	801d920 <__match+0x10>

0801d938 <__hexnan>:
 801d938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d93c:	680b      	ldr	r3, [r1, #0]
 801d93e:	6801      	ldr	r1, [r0, #0]
 801d940:	115e      	asrs	r6, r3, #5
 801d942:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d946:	f013 031f 	ands.w	r3, r3, #31
 801d94a:	b087      	sub	sp, #28
 801d94c:	bf18      	it	ne
 801d94e:	3604      	addne	r6, #4
 801d950:	2500      	movs	r5, #0
 801d952:	1f37      	subs	r7, r6, #4
 801d954:	4682      	mov	sl, r0
 801d956:	4690      	mov	r8, r2
 801d958:	9301      	str	r3, [sp, #4]
 801d95a:	f846 5c04 	str.w	r5, [r6, #-4]
 801d95e:	46b9      	mov	r9, r7
 801d960:	463c      	mov	r4, r7
 801d962:	9502      	str	r5, [sp, #8]
 801d964:	46ab      	mov	fp, r5
 801d966:	784a      	ldrb	r2, [r1, #1]
 801d968:	1c4b      	adds	r3, r1, #1
 801d96a:	9303      	str	r3, [sp, #12]
 801d96c:	b342      	cbz	r2, 801d9c0 <__hexnan+0x88>
 801d96e:	4610      	mov	r0, r2
 801d970:	9105      	str	r1, [sp, #20]
 801d972:	9204      	str	r2, [sp, #16]
 801d974:	f7ff fd95 	bl	801d4a2 <__hexdig_fun>
 801d978:	2800      	cmp	r0, #0
 801d97a:	d151      	bne.n	801da20 <__hexnan+0xe8>
 801d97c:	9a04      	ldr	r2, [sp, #16]
 801d97e:	9905      	ldr	r1, [sp, #20]
 801d980:	2a20      	cmp	r2, #32
 801d982:	d818      	bhi.n	801d9b6 <__hexnan+0x7e>
 801d984:	9b02      	ldr	r3, [sp, #8]
 801d986:	459b      	cmp	fp, r3
 801d988:	dd13      	ble.n	801d9b2 <__hexnan+0x7a>
 801d98a:	454c      	cmp	r4, r9
 801d98c:	d206      	bcs.n	801d99c <__hexnan+0x64>
 801d98e:	2d07      	cmp	r5, #7
 801d990:	dc04      	bgt.n	801d99c <__hexnan+0x64>
 801d992:	462a      	mov	r2, r5
 801d994:	4649      	mov	r1, r9
 801d996:	4620      	mov	r0, r4
 801d998:	f7ff ffa8 	bl	801d8ec <L_shift>
 801d99c:	4544      	cmp	r4, r8
 801d99e:	d952      	bls.n	801da46 <__hexnan+0x10e>
 801d9a0:	2300      	movs	r3, #0
 801d9a2:	f1a4 0904 	sub.w	r9, r4, #4
 801d9a6:	f844 3c04 	str.w	r3, [r4, #-4]
 801d9aa:	f8cd b008 	str.w	fp, [sp, #8]
 801d9ae:	464c      	mov	r4, r9
 801d9b0:	461d      	mov	r5, r3
 801d9b2:	9903      	ldr	r1, [sp, #12]
 801d9b4:	e7d7      	b.n	801d966 <__hexnan+0x2e>
 801d9b6:	2a29      	cmp	r2, #41	@ 0x29
 801d9b8:	d157      	bne.n	801da6a <__hexnan+0x132>
 801d9ba:	3102      	adds	r1, #2
 801d9bc:	f8ca 1000 	str.w	r1, [sl]
 801d9c0:	f1bb 0f00 	cmp.w	fp, #0
 801d9c4:	d051      	beq.n	801da6a <__hexnan+0x132>
 801d9c6:	454c      	cmp	r4, r9
 801d9c8:	d206      	bcs.n	801d9d8 <__hexnan+0xa0>
 801d9ca:	2d07      	cmp	r5, #7
 801d9cc:	dc04      	bgt.n	801d9d8 <__hexnan+0xa0>
 801d9ce:	462a      	mov	r2, r5
 801d9d0:	4649      	mov	r1, r9
 801d9d2:	4620      	mov	r0, r4
 801d9d4:	f7ff ff8a 	bl	801d8ec <L_shift>
 801d9d8:	4544      	cmp	r4, r8
 801d9da:	d936      	bls.n	801da4a <__hexnan+0x112>
 801d9dc:	f1a8 0204 	sub.w	r2, r8, #4
 801d9e0:	4623      	mov	r3, r4
 801d9e2:	f853 1b04 	ldr.w	r1, [r3], #4
 801d9e6:	f842 1f04 	str.w	r1, [r2, #4]!
 801d9ea:	429f      	cmp	r7, r3
 801d9ec:	d2f9      	bcs.n	801d9e2 <__hexnan+0xaa>
 801d9ee:	1b3b      	subs	r3, r7, r4
 801d9f0:	f023 0303 	bic.w	r3, r3, #3
 801d9f4:	3304      	adds	r3, #4
 801d9f6:	3401      	adds	r4, #1
 801d9f8:	3e03      	subs	r6, #3
 801d9fa:	42b4      	cmp	r4, r6
 801d9fc:	bf88      	it	hi
 801d9fe:	2304      	movhi	r3, #4
 801da00:	4443      	add	r3, r8
 801da02:	2200      	movs	r2, #0
 801da04:	f843 2b04 	str.w	r2, [r3], #4
 801da08:	429f      	cmp	r7, r3
 801da0a:	d2fb      	bcs.n	801da04 <__hexnan+0xcc>
 801da0c:	683b      	ldr	r3, [r7, #0]
 801da0e:	b91b      	cbnz	r3, 801da18 <__hexnan+0xe0>
 801da10:	4547      	cmp	r7, r8
 801da12:	d128      	bne.n	801da66 <__hexnan+0x12e>
 801da14:	2301      	movs	r3, #1
 801da16:	603b      	str	r3, [r7, #0]
 801da18:	2005      	movs	r0, #5
 801da1a:	b007      	add	sp, #28
 801da1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da20:	3501      	adds	r5, #1
 801da22:	2d08      	cmp	r5, #8
 801da24:	f10b 0b01 	add.w	fp, fp, #1
 801da28:	dd06      	ble.n	801da38 <__hexnan+0x100>
 801da2a:	4544      	cmp	r4, r8
 801da2c:	d9c1      	bls.n	801d9b2 <__hexnan+0x7a>
 801da2e:	2300      	movs	r3, #0
 801da30:	f844 3c04 	str.w	r3, [r4, #-4]
 801da34:	2501      	movs	r5, #1
 801da36:	3c04      	subs	r4, #4
 801da38:	6822      	ldr	r2, [r4, #0]
 801da3a:	f000 000f 	and.w	r0, r0, #15
 801da3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801da42:	6020      	str	r0, [r4, #0]
 801da44:	e7b5      	b.n	801d9b2 <__hexnan+0x7a>
 801da46:	2508      	movs	r5, #8
 801da48:	e7b3      	b.n	801d9b2 <__hexnan+0x7a>
 801da4a:	9b01      	ldr	r3, [sp, #4]
 801da4c:	2b00      	cmp	r3, #0
 801da4e:	d0dd      	beq.n	801da0c <__hexnan+0xd4>
 801da50:	f1c3 0320 	rsb	r3, r3, #32
 801da54:	f04f 32ff 	mov.w	r2, #4294967295
 801da58:	40da      	lsrs	r2, r3
 801da5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801da5e:	4013      	ands	r3, r2
 801da60:	f846 3c04 	str.w	r3, [r6, #-4]
 801da64:	e7d2      	b.n	801da0c <__hexnan+0xd4>
 801da66:	3f04      	subs	r7, #4
 801da68:	e7d0      	b.n	801da0c <__hexnan+0xd4>
 801da6a:	2004      	movs	r0, #4
 801da6c:	e7d5      	b.n	801da1a <__hexnan+0xe2>

0801da6e <__ascii_mbtowc>:
 801da6e:	b082      	sub	sp, #8
 801da70:	b901      	cbnz	r1, 801da74 <__ascii_mbtowc+0x6>
 801da72:	a901      	add	r1, sp, #4
 801da74:	b142      	cbz	r2, 801da88 <__ascii_mbtowc+0x1a>
 801da76:	b14b      	cbz	r3, 801da8c <__ascii_mbtowc+0x1e>
 801da78:	7813      	ldrb	r3, [r2, #0]
 801da7a:	600b      	str	r3, [r1, #0]
 801da7c:	7812      	ldrb	r2, [r2, #0]
 801da7e:	1e10      	subs	r0, r2, #0
 801da80:	bf18      	it	ne
 801da82:	2001      	movne	r0, #1
 801da84:	b002      	add	sp, #8
 801da86:	4770      	bx	lr
 801da88:	4610      	mov	r0, r2
 801da8a:	e7fb      	b.n	801da84 <__ascii_mbtowc+0x16>
 801da8c:	f06f 0001 	mvn.w	r0, #1
 801da90:	e7f8      	b.n	801da84 <__ascii_mbtowc+0x16>

0801da92 <_realloc_r>:
 801da92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da96:	4680      	mov	r8, r0
 801da98:	4615      	mov	r5, r2
 801da9a:	460c      	mov	r4, r1
 801da9c:	b921      	cbnz	r1, 801daa8 <_realloc_r+0x16>
 801da9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801daa2:	4611      	mov	r1, r2
 801daa4:	f7fb bc1e 	b.w	80192e4 <_malloc_r>
 801daa8:	b92a      	cbnz	r2, 801dab6 <_realloc_r+0x24>
 801daaa:	f7fd fda1 	bl	801b5f0 <_free_r>
 801daae:	2400      	movs	r4, #0
 801dab0:	4620      	mov	r0, r4
 801dab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dab6:	f000 f86b 	bl	801db90 <_malloc_usable_size_r>
 801daba:	4285      	cmp	r5, r0
 801dabc:	4606      	mov	r6, r0
 801dabe:	d802      	bhi.n	801dac6 <_realloc_r+0x34>
 801dac0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801dac4:	d8f4      	bhi.n	801dab0 <_realloc_r+0x1e>
 801dac6:	4629      	mov	r1, r5
 801dac8:	4640      	mov	r0, r8
 801daca:	f7fb fc0b 	bl	80192e4 <_malloc_r>
 801dace:	4607      	mov	r7, r0
 801dad0:	2800      	cmp	r0, #0
 801dad2:	d0ec      	beq.n	801daae <_realloc_r+0x1c>
 801dad4:	42b5      	cmp	r5, r6
 801dad6:	462a      	mov	r2, r5
 801dad8:	4621      	mov	r1, r4
 801dada:	bf28      	it	cs
 801dadc:	4632      	movcs	r2, r6
 801dade:	f7fc ff08 	bl	801a8f2 <memcpy>
 801dae2:	4621      	mov	r1, r4
 801dae4:	4640      	mov	r0, r8
 801dae6:	f7fd fd83 	bl	801b5f0 <_free_r>
 801daea:	463c      	mov	r4, r7
 801daec:	e7e0      	b.n	801dab0 <_realloc_r+0x1e>

0801daee <__ascii_wctomb>:
 801daee:	4603      	mov	r3, r0
 801daf0:	4608      	mov	r0, r1
 801daf2:	b141      	cbz	r1, 801db06 <__ascii_wctomb+0x18>
 801daf4:	2aff      	cmp	r2, #255	@ 0xff
 801daf6:	d904      	bls.n	801db02 <__ascii_wctomb+0x14>
 801daf8:	228a      	movs	r2, #138	@ 0x8a
 801dafa:	601a      	str	r2, [r3, #0]
 801dafc:	f04f 30ff 	mov.w	r0, #4294967295
 801db00:	4770      	bx	lr
 801db02:	700a      	strb	r2, [r1, #0]
 801db04:	2001      	movs	r0, #1
 801db06:	4770      	bx	lr

0801db08 <_raise_r>:
 801db08:	291f      	cmp	r1, #31
 801db0a:	b538      	push	{r3, r4, r5, lr}
 801db0c:	4605      	mov	r5, r0
 801db0e:	460c      	mov	r4, r1
 801db10:	d904      	bls.n	801db1c <_raise_r+0x14>
 801db12:	2316      	movs	r3, #22
 801db14:	6003      	str	r3, [r0, #0]
 801db16:	f04f 30ff 	mov.w	r0, #4294967295
 801db1a:	bd38      	pop	{r3, r4, r5, pc}
 801db1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801db1e:	b112      	cbz	r2, 801db26 <_raise_r+0x1e>
 801db20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801db24:	b94b      	cbnz	r3, 801db3a <_raise_r+0x32>
 801db26:	4628      	mov	r0, r5
 801db28:	f000 f830 	bl	801db8c <_getpid_r>
 801db2c:	4622      	mov	r2, r4
 801db2e:	4601      	mov	r1, r0
 801db30:	4628      	mov	r0, r5
 801db32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801db36:	f000 b817 	b.w	801db68 <_kill_r>
 801db3a:	2b01      	cmp	r3, #1
 801db3c:	d00a      	beq.n	801db54 <_raise_r+0x4c>
 801db3e:	1c59      	adds	r1, r3, #1
 801db40:	d103      	bne.n	801db4a <_raise_r+0x42>
 801db42:	2316      	movs	r3, #22
 801db44:	6003      	str	r3, [r0, #0]
 801db46:	2001      	movs	r0, #1
 801db48:	e7e7      	b.n	801db1a <_raise_r+0x12>
 801db4a:	2100      	movs	r1, #0
 801db4c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801db50:	4620      	mov	r0, r4
 801db52:	4798      	blx	r3
 801db54:	2000      	movs	r0, #0
 801db56:	e7e0      	b.n	801db1a <_raise_r+0x12>

0801db58 <raise>:
 801db58:	4b02      	ldr	r3, [pc, #8]	@ (801db64 <raise+0xc>)
 801db5a:	4601      	mov	r1, r0
 801db5c:	6818      	ldr	r0, [r3, #0]
 801db5e:	f7ff bfd3 	b.w	801db08 <_raise_r>
 801db62:	bf00      	nop
 801db64:	2000003c 	.word	0x2000003c

0801db68 <_kill_r>:
 801db68:	b538      	push	{r3, r4, r5, lr}
 801db6a:	4d07      	ldr	r5, [pc, #28]	@ (801db88 <_kill_r+0x20>)
 801db6c:	2300      	movs	r3, #0
 801db6e:	4604      	mov	r4, r0
 801db70:	4608      	mov	r0, r1
 801db72:	4611      	mov	r1, r2
 801db74:	602b      	str	r3, [r5, #0]
 801db76:	f7e3 fd39 	bl	80015ec <_kill>
 801db7a:	1c43      	adds	r3, r0, #1
 801db7c:	d102      	bne.n	801db84 <_kill_r+0x1c>
 801db7e:	682b      	ldr	r3, [r5, #0]
 801db80:	b103      	cbz	r3, 801db84 <_kill_r+0x1c>
 801db82:	6023      	str	r3, [r4, #0]
 801db84:	bd38      	pop	{r3, r4, r5, pc}
 801db86:	bf00      	nop
 801db88:	2000d394 	.word	0x2000d394

0801db8c <_getpid_r>:
 801db8c:	f7e3 bd26 	b.w	80015dc <_getpid>

0801db90 <_malloc_usable_size_r>:
 801db90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801db94:	1f18      	subs	r0, r3, #4
 801db96:	2b00      	cmp	r3, #0
 801db98:	bfbc      	itt	lt
 801db9a:	580b      	ldrlt	r3, [r1, r0]
 801db9c:	18c0      	addlt	r0, r0, r3
 801db9e:	4770      	bx	lr

0801dba0 <_init>:
 801dba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dba2:	bf00      	nop
 801dba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dba6:	bc08      	pop	{r3}
 801dba8:	469e      	mov	lr, r3
 801dbaa:	4770      	bx	lr

0801dbac <_fini>:
 801dbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dbae:	bf00      	nop
 801dbb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dbb2:	bc08      	pop	{r3}
 801dbb4:	469e      	mov	lr, r3
 801dbb6:	4770      	bx	lr
